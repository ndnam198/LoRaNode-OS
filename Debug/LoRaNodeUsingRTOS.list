
LoRaNodeUsingRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6f8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001038  0800a808  0800a808  0001a808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b840  0800b840  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b840  0800b840  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b840  0800b840  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b840  0800b840  0001b840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b844  0800b844  0001b844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ad0  2000007c  0800b8c4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003b4c  0800b8c4  00023b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fed  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049f2  00000000  00000000  00044092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00048a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001820  00000000  00000000  0004a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6a2  00000000  00000000  0004bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024b89  00000000  00000000  00069372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fb8b  00000000  00000000  0008defb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012da86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007410  00000000  00000000  0012dadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a7f0 	.word	0x0800a7f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	0800a7f0 	.word	0x0800a7f0

08000150 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b18      	ldr	r3, [pc, #96]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000162:	4a19      	ldr	r2, [pc, #100]	; (80001c8 <MX_ADC1_Init+0x78>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000166:	4b17      	ldr	r3, [pc, #92]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000168:	2200      	movs	r2, #0
 800016a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016c:	4b15      	ldr	r3, [pc, #84]	; (80001c4 <MX_ADC1_Init+0x74>)
 800016e:	2200      	movs	r2, #0
 8000170:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000172:	4b14      	ldr	r3, [pc, #80]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000178:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <MX_ADC1_Init+0x74>)
 800017a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000180:	4b10      	ldr	r3, [pc, #64]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000186:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000188:	2201      	movs	r2, #1
 800018a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018c:	480d      	ldr	r0, [pc, #52]	; (80001c4 <MX_ADC1_Init+0x74>)
 800018e:	f001 ffdd 	bl	800214c <HAL_ADC_Init>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d001      	beq.n	800019c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000198:	f001 fc1e 	bl	80019d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019c:	2300      	movs	r3, #0
 800019e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a0:	2301      	movs	r3, #1
 80001a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001a4:	2307      	movs	r3, #7
 80001a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	4619      	mov	r1, r3
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <MX_ADC1_Init+0x74>)
 80001ae:	f002 fb1b 	bl	80027e8 <HAL_ADC_ConfigChannel>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b8:	f001 fc0e 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001bc:	bf00      	nop
 80001be:	3710      	adds	r7, #16
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	200039c8 	.word	0x200039c8
 80001c8:	40012400 	.word	0x40012400

080001cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a18      	ldr	r2, [pc, #96]	; (8000248 <HAL_ADC_MspInit+0x7c>)
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d129      	bne.n	8000240 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001ec:	4b17      	ldr	r3, [pc, #92]	; (800024c <HAL_ADC_MspInit+0x80>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a16      	ldr	r2, [pc, #88]	; (800024c <HAL_ADC_MspInit+0x80>)
 80001f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b14      	ldr	r3, [pc, #80]	; (800024c <HAL_ADC_MspInit+0x80>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000204:	4b11      	ldr	r3, [pc, #68]	; (800024c <HAL_ADC_MspInit+0x80>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a10      	ldr	r2, [pc, #64]	; (800024c <HAL_ADC_MspInit+0x80>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	6193      	str	r3, [r2, #24]
 8000210:	4b0e      	ldr	r3, [pc, #56]	; (800024c <HAL_ADC_MspInit+0x80>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f003 0304 	and.w	r3, r3, #4
 8000218:	60bb      	str	r3, [r7, #8]
 800021a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LIGHT_SENSOR_OUTPUT_Pin;
 800021c:	2301      	movs	r3, #1
 800021e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000220:	2303      	movs	r3, #3
 8000222:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LIGHT_SENSOR_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <HAL_ADC_MspInit+0x84>)
 800022c:	f002 fe44 	bl	8002eb8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	2105      	movs	r1, #5
 8000234:	2012      	movs	r0, #18
 8000236:	f002 fdfb 	bl	8002e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800023a:	2012      	movs	r0, #18
 800023c:	f002 fe24 	bl	8002e88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000240:	bf00      	nop
 8000242:	3720      	adds	r7, #32
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40012400 	.word	0x40012400
 800024c:	40021000 	.word	0x40021000
 8000250:	40010800 	.word	0x40010800

08000254 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0

}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  return 0;
 8000264:	2300      	movs	r3, #0
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
	...

08000270 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af04      	add	r7, sp, #16

  /* USER CODE END Init */

  /* Create the recursive mutex(es) */
  /* creation of nodedataMutex */
  nodedataMutexHandle = osMutexNew(&nodedataMutex_attributes);
 8000276:	484c      	ldr	r0, [pc, #304]	; (80003a8 <MX_FREERTOS_Init+0x138>)
 8000278:	f005 fd6e 	bl	8005d58 <osMutexNew>
 800027c:	4603      	mov	r3, r0
 800027e:	4a4b      	ldr	r2, [pc, #300]	; (80003ac <MX_FREERTOS_Init+0x13c>)
 8000280:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of rxDoneSemaphore */
  rxDoneSemaphoreHandle = osSemaphoreNew(5, 0, &rxDoneSemaphore_attributes);
 8000282:	4a4b      	ldr	r2, [pc, #300]	; (80003b0 <MX_FREERTOS_Init+0x140>)
 8000284:	2100      	movs	r1, #0
 8000286:	2005      	movs	r0, #5
 8000288:	f005 fe00 	bl	8005e8c <osSemaphoreNew>
 800028c:	4603      	mov	r3, r0
 800028e:	4a49      	ldr	r2, [pc, #292]	; (80003b4 <MX_FREERTOS_Init+0x144>)
 8000290:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  if (rxDoneSemaphoreHandle == NULL)
 8000292:	4b48      	ldr	r3, [pc, #288]	; (80003b4 <MX_FREERTOS_Init+0x144>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d10d      	bne.n	80002b6 <MX_FREERTOS_Init+0x46>
    STM_LOGE("ERROR", "create rxDoneSemaphoreHandle failed");
 800029a:	f001 ff29 	bl	80020f0 <HAL_GetTick>
 800029e:	4603      	mov	r3, r0
 80002a0:	2295      	movs	r2, #149	; 0x95
 80002a2:	9202      	str	r2, [sp, #8]
 80002a4:	4a44      	ldr	r2, [pc, #272]	; (80003b8 <MX_FREERTOS_Init+0x148>)
 80002a6:	9201      	str	r2, [sp, #4]
 80002a8:	4a44      	ldr	r2, [pc, #272]	; (80003bc <MX_FREERTOS_Init+0x14c>)
 80002aa:	9200      	str	r2, [sp, #0]
 80002ac:	4a44      	ldr	r2, [pc, #272]	; (80003c0 <MX_FREERTOS_Init+0x150>)
 80002ae:	4943      	ldr	r1, [pc, #268]	; (80003bc <MX_FREERTOS_Init+0x14c>)
 80002b0:	2001      	movs	r0, #1
 80002b2:	f001 fe05 	bl	8001ec0 <stm_log_write>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew(10, sizeof(uint8_t) * 10, &myQueue01_attributes);
 80002b6:	4a43      	ldr	r2, [pc, #268]	; (80003c4 <MX_FREERTOS_Init+0x154>)
 80002b8:	210a      	movs	r1, #10
 80002ba:	200a      	movs	r0, #10
 80002bc:	f005 ff40 	bl	8006140 <osMessageQueueNew>
 80002c0:	4603      	mov	r3, r0
 80002c2:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <MX_FREERTOS_Init+0x158>)
 80002c4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  if (myQueue01Handle == NULL)
 80002c6:	4b40      	ldr	r3, [pc, #256]	; (80003c8 <MX_FREERTOS_Init+0x158>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d10d      	bne.n	80002ea <MX_FREERTOS_Init+0x7a>
    STM_LOGE("ERROR", "create myQueue01Handle failed");
 80002ce:	f001 ff0f 	bl	80020f0 <HAL_GetTick>
 80002d2:	4603      	mov	r3, r0
 80002d4:	22a1      	movs	r2, #161	; 0xa1
 80002d6:	9202      	str	r2, [sp, #8]
 80002d8:	4a37      	ldr	r2, [pc, #220]	; (80003b8 <MX_FREERTOS_Init+0x148>)
 80002da:	9201      	str	r2, [sp, #4]
 80002dc:	4a37      	ldr	r2, [pc, #220]	; (80003bc <MX_FREERTOS_Init+0x14c>)
 80002de:	9200      	str	r2, [sp, #0]
 80002e0:	4a3a      	ldr	r2, [pc, #232]	; (80003cc <MX_FREERTOS_Init+0x15c>)
 80002e2:	4936      	ldr	r1, [pc, #216]	; (80003bc <MX_FREERTOS_Init+0x14c>)
 80002e4:	2001      	movs	r0, #1
 80002e6:	f001 fdeb 	bl	8001ec0 <stm_log_write>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */

  /* creation of taskProducer */
  taskProducerHandle = osThreadNew(entryProducer, NULL, &taskProducer_attributes);
 80002ea:	4a39      	ldr	r2, [pc, #228]	; (80003d0 <MX_FREERTOS_Init+0x160>)
 80002ec:	2100      	movs	r1, #0
 80002ee:	4839      	ldr	r0, [pc, #228]	; (80003d4 <MX_FREERTOS_Init+0x164>)
 80002f0:	f005 fc5a 	bl	8005ba8 <osThreadNew>
 80002f4:	4603      	mov	r3, r0
 80002f6:	4a38      	ldr	r2, [pc, #224]	; (80003d8 <MX_FREERTOS_Init+0x168>)
 80002f8:	6013      	str	r3, [r2, #0]

  /* creation of taskConsumer */
  taskConsumerHandle = osThreadNew(entryConsumer, NULL, &taskConsumer_attributes);
 80002fa:	4a38      	ldr	r2, [pc, #224]	; (80003dc <MX_FREERTOS_Init+0x16c>)
 80002fc:	2100      	movs	r1, #0
 80002fe:	4838      	ldr	r0, [pc, #224]	; (80003e0 <MX_FREERTOS_Init+0x170>)
 8000300:	f005 fc52 	bl	8005ba8 <osThreadNew>
 8000304:	4603      	mov	r3, r0
 8000306:	4a37      	ldr	r2, [pc, #220]	; (80003e4 <MX_FREERTOS_Init+0x174>)
 8000308:	6013      	str	r3, [r2, #0]

  /* creation of taskPeriodic */
  taskPeriodicHandle = osThreadNew(entryPeriodic, NULL, &taskPeriodic_attributes);
 800030a:	4a37      	ldr	r2, [pc, #220]	; (80003e8 <MX_FREERTOS_Init+0x178>)
 800030c:	2100      	movs	r1, #0
 800030e:	4837      	ldr	r0, [pc, #220]	; (80003ec <MX_FREERTOS_Init+0x17c>)
 8000310:	f005 fc4a 	bl	8005ba8 <osThreadNew>
 8000314:	4603      	mov	r3, r0
 8000316:	4a36      	ldr	r2, [pc, #216]	; (80003f0 <MX_FREERTOS_Init+0x180>)
 8000318:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  if (taskProducerHandle == NULL)
 800031a:	4b2f      	ldr	r3, [pc, #188]	; (80003d8 <MX_FREERTOS_Init+0x168>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d10d      	bne.n	800033e <MX_FREERTOS_Init+0xce>
    STM_LOGE("ERROR", "create taskProducerHandle failed");
 8000322:	f001 fee5 	bl	80020f0 <HAL_GetTick>
 8000326:	4603      	mov	r3, r0
 8000328:	22b2      	movs	r2, #178	; 0xb2
 800032a:	9202      	str	r2, [sp, #8]
 800032c:	4a22      	ldr	r2, [pc, #136]	; (80003b8 <MX_FREERTOS_Init+0x148>)
 800032e:	9201      	str	r2, [sp, #4]
 8000330:	4a22      	ldr	r2, [pc, #136]	; (80003bc <MX_FREERTOS_Init+0x14c>)
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	4a2f      	ldr	r2, [pc, #188]	; (80003f4 <MX_FREERTOS_Init+0x184>)
 8000336:	4921      	ldr	r1, [pc, #132]	; (80003bc <MX_FREERTOS_Init+0x14c>)
 8000338:	2001      	movs	r0, #1
 800033a:	f001 fdc1 	bl	8001ec0 <stm_log_write>
  if (taskConsumerHandle == NULL)
 800033e:	4b29      	ldr	r3, [pc, #164]	; (80003e4 <MX_FREERTOS_Init+0x174>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d10d      	bne.n	8000362 <MX_FREERTOS_Init+0xf2>
    STM_LOGE("ERROR", "create taskConsumerHandle failed");
 8000346:	f001 fed3 	bl	80020f0 <HAL_GetTick>
 800034a:	4603      	mov	r3, r0
 800034c:	22b4      	movs	r2, #180	; 0xb4
 800034e:	9202      	str	r2, [sp, #8]
 8000350:	4a19      	ldr	r2, [pc, #100]	; (80003b8 <MX_FREERTOS_Init+0x148>)
 8000352:	9201      	str	r2, [sp, #4]
 8000354:	4a19      	ldr	r2, [pc, #100]	; (80003bc <MX_FREERTOS_Init+0x14c>)
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	4a27      	ldr	r2, [pc, #156]	; (80003f8 <MX_FREERTOS_Init+0x188>)
 800035a:	4918      	ldr	r1, [pc, #96]	; (80003bc <MX_FREERTOS_Init+0x14c>)
 800035c:	2001      	movs	r0, #1
 800035e:	f001 fdaf 	bl	8001ec0 <stm_log_write>
  if (taskPeriodicHandle == NULL)
 8000362:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <MX_FREERTOS_Init+0x180>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d10d      	bne.n	8000386 <MX_FREERTOS_Init+0x116>
    STM_LOGE("ERROR", "create taskPeriodicHandle failed");
 800036a:	f001 fec1 	bl	80020f0 <HAL_GetTick>
 800036e:	4603      	mov	r3, r0
 8000370:	22b6      	movs	r2, #182	; 0xb6
 8000372:	9202      	str	r2, [sp, #8]
 8000374:	4a10      	ldr	r2, [pc, #64]	; (80003b8 <MX_FREERTOS_Init+0x148>)
 8000376:	9201      	str	r2, [sp, #4]
 8000378:	4a10      	ldr	r2, [pc, #64]	; (80003bc <MX_FREERTOS_Init+0x14c>)
 800037a:	9200      	str	r2, [sp, #0]
 800037c:	4a1f      	ldr	r2, [pc, #124]	; (80003fc <MX_FREERTOS_Init+0x18c>)
 800037e:	490f      	ldr	r1, [pc, #60]	; (80003bc <MX_FREERTOS_Init+0x14c>)
 8000380:	2001      	movs	r0, #1
 8000382:	f001 fd9d 	bl	8001ec0 <stm_log_write>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  STM_LOGI("MileStone", "Kernel starts");
 8000386:	f001 feb3 	bl	80020f0 <HAL_GetTick>
 800038a:	4603      	mov	r3, r0
 800038c:	22ba      	movs	r2, #186	; 0xba
 800038e:	9202      	str	r2, [sp, #8]
 8000390:	4a09      	ldr	r2, [pc, #36]	; (80003b8 <MX_FREERTOS_Init+0x148>)
 8000392:	9201      	str	r2, [sp, #4]
 8000394:	4a1a      	ldr	r2, [pc, #104]	; (8000400 <MX_FREERTOS_Init+0x190>)
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	4a1a      	ldr	r2, [pc, #104]	; (8000404 <MX_FREERTOS_Init+0x194>)
 800039a:	4919      	ldr	r1, [pc, #100]	; (8000400 <MX_FREERTOS_Init+0x190>)
 800039c:	2003      	movs	r0, #3
 800039e:	f001 fd8f 	bl	8001ec0 <stm_log_write>
  /* USER CODE END RTOS_EVENTS */

}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	0800b6c8 	.word	0x0800b6c8
 80003ac:	20003a04 	.word	0x20003a04
 80003b0:	0800b6d8 	.word	0x0800b6d8
 80003b4:	200039f8 	.word	0x200039f8
 80003b8:	0800b6e8 	.word	0x0800b6e8
 80003bc:	0800a8ac 	.word	0x0800a8ac
 80003c0:	0800a864 	.word	0x0800a864
 80003c4:	0800b6b0 	.word	0x0800b6b0
 80003c8:	20003a08 	.word	0x20003a08
 80003cc:	0800a8b4 	.word	0x0800a8b4
 80003d0:	0800b644 	.word	0x0800b644
 80003d4:	08000409 	.word	0x08000409
 80003d8:	20003a00 	.word	0x20003a00
 80003dc:	0800b668 	.word	0x0800b668
 80003e0:	080005e5 	.word	0x080005e5
 80003e4:	200039fc 	.word	0x200039fc
 80003e8:	0800b68c 	.word	0x0800b68c
 80003ec:	08000aa5 	.word	0x08000aa5
 80003f0:	20003a0c 	.word	0x20003a0c
 80003f4:	0800a8f8 	.word	0x0800a8f8
 80003f8:	0800a93c 	.word	0x0800a93c
 80003fc:	0800a980 	.word	0x0800a980
 8000400:	0800a9f8 	.word	0x0800a9f8
 8000404:	0800a9c4 	.word	0x0800a9c4

08000408 <entryProducer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryProducer */
void entryProducer(void* argument)
{
 8000408:	b5b0      	push	{r4, r5, r7, lr}
 800040a:	b08e      	sub	sp, #56	; 0x38
 800040c:	af06      	add	r7, sp, #24
 800040e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryProducer */
  osStatus_t err;
  uint8_t receivedMsg[10];
  uint32_t tickToWait = pdMS_TO_TICKS(5000);
 8000410:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000414:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for (;;)
  {
    err = osSemaphoreAcquire(rxDoneSemaphoreHandle, portMAX_DELAY);
 8000416:	4b66      	ldr	r3, [pc, #408]	; (80005b0 <entryProducer+0x1a8>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f04f 31ff 	mov.w	r1, #4294967295
 800041e:	4618      	mov	r0, r3
 8000420:	f005 fdd0 	bl	8005fc4 <osSemaphoreAcquire>
 8000424:	6178      	str	r0, [r7, #20]
    if (!err) {
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d1f4      	bne.n	8000416 <entryProducer+0xe>
      
      STM_LOGD("Producer", "Get semaphore ok");
 800042c:	f001 fe60 	bl	80020f0 <HAL_GetTick>
 8000430:	4603      	mov	r3, r0
 8000432:	22d2      	movs	r2, #210	; 0xd2
 8000434:	9202      	str	r2, [sp, #8]
 8000436:	4a5f      	ldr	r2, [pc, #380]	; (80005b4 <entryProducer+0x1ac>)
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	4a5f      	ldr	r2, [pc, #380]	; (80005b8 <entryProducer+0x1b0>)
 800043c:	9200      	str	r2, [sp, #0]
 800043e:	4a5f      	ldr	r2, [pc, #380]	; (80005bc <entryProducer+0x1b4>)
 8000440:	495d      	ldr	r1, [pc, #372]	; (80005b8 <entryProducer+0x1b0>)
 8000442:	2004      	movs	r0, #4
 8000444:	f001 fd3c 	bl	8001ec0 <stm_log_write>

      if (LoRaGetITFlag(PAYLOAD_CRC_ERROR_MskPos) == 1)
 8000448:	2005      	movs	r0, #5
 800044a:	f001 f9cb 	bl	80017e4 <LoRaGetITFlag>
 800044e:	4603      	mov	r3, r0
 8000450:	2b01      	cmp	r3, #1
 8000452:	d10e      	bne.n	8000472 <entryProducer+0x6a>
      {
        STM_LOGW("Producer", "Payload CRC failed");
 8000454:	f001 fe4c 	bl	80020f0 <HAL_GetTick>
 8000458:	4603      	mov	r3, r0
 800045a:	22d6      	movs	r2, #214	; 0xd6
 800045c:	9202      	str	r2, [sp, #8]
 800045e:	4a55      	ldr	r2, [pc, #340]	; (80005b4 <entryProducer+0x1ac>)
 8000460:	9201      	str	r2, [sp, #4]
 8000462:	4a55      	ldr	r2, [pc, #340]	; (80005b8 <entryProducer+0x1b0>)
 8000464:	9200      	str	r2, [sp, #0]
 8000466:	4a56      	ldr	r2, [pc, #344]	; (80005c0 <entryProducer+0x1b8>)
 8000468:	4953      	ldr	r1, [pc, #332]	; (80005b8 <entryProducer+0x1b0>)
 800046a:	2002      	movs	r0, #2
 800046c:	f001 fd28 	bl	8001ec0 <stm_log_write>
 8000470:	e08b      	b.n	800058a <entryProducer+0x182>
      }
      else
      {
        LORA_SET_FIFO_CURRENT_MSG();
 8000472:	2010      	movs	r0, #16
 8000474:	f000 fc44 	bl	8000d00 <ucSpi1Read>
 8000478:	4603      	mov	r3, r0
 800047a:	4619      	mov	r1, r3
 800047c:	200d      	movs	r0, #13
 800047e:	f000 fbd7 	bl	8000c30 <vSpi1Write>
        for (uint8_t i = 0; i < PAYLOAD_LENGTH; i++) {
 8000482:	2300      	movs	r3, #0
 8000484:	77fb      	strb	r3, [r7, #31]
 8000486:	e00d      	b.n	80004a4 <entryProducer+0x9c>
          receivedMsg[i] = ucSpi1Read(RegFifo);
 8000488:	7ffc      	ldrb	r4, [r7, #31]
 800048a:	2000      	movs	r0, #0
 800048c:	f000 fc38 	bl	8000d00 <ucSpi1Read>
 8000490:	4603      	mov	r3, r0
 8000492:	461a      	mov	r2, r3
 8000494:	f107 0320 	add.w	r3, r7, #32
 8000498:	4423      	add	r3, r4
 800049a:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (uint8_t i = 0; i < PAYLOAD_LENGTH; i++) {
 800049e:	7ffb      	ldrb	r3, [r7, #31]
 80004a0:	3301      	adds	r3, #1
 80004a2:	77fb      	strb	r3, [r7, #31]
 80004a4:	7ffb      	ldrb	r3, [r7, #31]
 80004a6:	2b09      	cmp	r3, #9
 80004a8:	d9ee      	bls.n	8000488 <entryProducer+0x80>
          // STM_LOGI("Producer", "receivedData[%d]: %x", i, receivedMsg[i]);
        }

        STM_LOGV("Producer", "receiveNodeID: %x - thisNodeID: %x", receivedMsg[INDEX_DEST_ID], thisNode.nodeID);
 80004aa:	f001 fe21 	bl	80020f0 <HAL_GetTick>
 80004ae:	4603      	mov	r3, r0
 80004b0:	7a7a      	ldrb	r2, [r7, #9]
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a43      	ldr	r2, [pc, #268]	; (80005c4 <entryProducer+0x1bc>)
 80004b6:	7812      	ldrb	r2, [r2, #0]
 80004b8:	9204      	str	r2, [sp, #16]
 80004ba:	9103      	str	r1, [sp, #12]
 80004bc:	22e0      	movs	r2, #224	; 0xe0
 80004be:	9202      	str	r2, [sp, #8]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <entryProducer+0x1ac>)
 80004c2:	9201      	str	r2, [sp, #4]
 80004c4:	4a3c      	ldr	r2, [pc, #240]	; (80005b8 <entryProducer+0x1b0>)
 80004c6:	9200      	str	r2, [sp, #0]
 80004c8:	4a3f      	ldr	r2, [pc, #252]	; (80005c8 <entryProducer+0x1c0>)
 80004ca:	493b      	ldr	r1, [pc, #236]	; (80005b8 <entryProducer+0x1b0>)
 80004cc:	2005      	movs	r0, #5
 80004ce:	f001 fcf7 	bl	8001ec0 <stm_log_write>
        if (receivedMsg[INDEX_DEST_ID] == thisNode.nodeID)
 80004d2:	7a7a      	ldrb	r2, [r7, #9]
 80004d4:	4b3b      	ldr	r3, [pc, #236]	; (80005c4 <entryProducer+0x1bc>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d148      	bne.n	800056e <entryProducer+0x166>
        {

          STM_LOGD("Producer", "put queue");
 80004dc:	f001 fe08 	bl	80020f0 <HAL_GetTick>
 80004e0:	4603      	mov	r3, r0
 80004e2:	22e4      	movs	r2, #228	; 0xe4
 80004e4:	9202      	str	r2, [sp, #8]
 80004e6:	4a33      	ldr	r2, [pc, #204]	; (80005b4 <entryProducer+0x1ac>)
 80004e8:	9201      	str	r2, [sp, #4]
 80004ea:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <entryProducer+0x1b0>)
 80004ec:	9200      	str	r2, [sp, #0]
 80004ee:	4a37      	ldr	r2, [pc, #220]	; (80005cc <entryProducer+0x1c4>)
 80004f0:	4931      	ldr	r1, [pc, #196]	; (80005b8 <entryProducer+0x1b0>)
 80004f2:	2004      	movs	r0, #4
 80004f4:	f001 fce4 	bl	8001ec0 <stm_log_write>
          err = osMessageQueuePut(myQueue01Handle, receivedMsg, 0, tickToWait);
 80004f8:	4b35      	ldr	r3, [pc, #212]	; (80005d0 <entryProducer+0x1c8>)
 80004fa:	6818      	ldr	r0, [r3, #0]
 80004fc:	f107 0108 	add.w	r1, r7, #8
 8000500:	69bb      	ldr	r3, [r7, #24]
 8000502:	2200      	movs	r2, #0
 8000504:	f005 fea2 	bl	800624c <osMessageQueuePut>
 8000508:	6178      	str	r0, [r7, #20]
          if (!err)
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d10e      	bne.n	800052e <entryProducer+0x126>
          {
            STM_LOGD("Producer", "put queue ok");
 8000510:	f001 fdee 	bl	80020f0 <HAL_GetTick>
 8000514:	4603      	mov	r3, r0
 8000516:	22e8      	movs	r2, #232	; 0xe8
 8000518:	9202      	str	r2, [sp, #8]
 800051a:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <entryProducer+0x1ac>)
 800051c:	9201      	str	r2, [sp, #4]
 800051e:	4a26      	ldr	r2, [pc, #152]	; (80005b8 <entryProducer+0x1b0>)
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <entryProducer+0x1cc>)
 8000524:	4924      	ldr	r1, [pc, #144]	; (80005b8 <entryProducer+0x1b0>)
 8000526:	2004      	movs	r0, #4
 8000528:	f001 fcca 	bl	8001ec0 <stm_log_write>
 800052c:	e02d      	b.n	800058a <entryProducer+0x182>
          }
          else
          {
            STM_LOGW("Producer", "put queue failed, err %d\n\r NbOfMsg in queue : % d\n\ravailable size : % d", \
 800052e:	f001 fddf 	bl	80020f0 <HAL_GetTick>
 8000532:	4605      	mov	r5, r0
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <entryProducer+0x1c8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f005 ff6d 	bl	8006418 <osMessageQueueGetCount>
 800053e:	4604      	mov	r4, r0
 8000540:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <entryProducer+0x1c8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	f005 ff99 	bl	800647c <osMessageQueueGetSpace>
 800054a:	4603      	mov	r3, r0
 800054c:	9305      	str	r3, [sp, #20]
 800054e:	9404      	str	r4, [sp, #16]
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	9303      	str	r3, [sp, #12]
 8000554:	23ec      	movs	r3, #236	; 0xec
 8000556:	9302      	str	r3, [sp, #8]
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <entryProducer+0x1ac>)
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <entryProducer+0x1b0>)
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	462b      	mov	r3, r5
 8000562:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <entryProducer+0x1d0>)
 8000564:	4914      	ldr	r1, [pc, #80]	; (80005b8 <entryProducer+0x1b0>)
 8000566:	2002      	movs	r0, #2
 8000568:	f001 fcaa 	bl	8001ec0 <stm_log_write>
 800056c:	e00d      	b.n	800058a <entryProducer+0x182>
              osMessageQueueGetSpace(myQueue01Handle));
          }
        }
        else
        {
          STM_LOGW("Producer", "msg not matched --> dicarded");
 800056e:	f001 fdbf 	bl	80020f0 <HAL_GetTick>
 8000572:	4603      	mov	r3, r0
 8000574:	22f4      	movs	r2, #244	; 0xf4
 8000576:	9202      	str	r2, [sp, #8]
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <entryProducer+0x1ac>)
 800057a:	9201      	str	r2, [sp, #4]
 800057c:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <entryProducer+0x1b0>)
 800057e:	9200      	str	r2, [sp, #0]
 8000580:	4a16      	ldr	r2, [pc, #88]	; (80005dc <entryProducer+0x1d4>)
 8000582:	490d      	ldr	r1, [pc, #52]	; (80005b8 <entryProducer+0x1b0>)
 8000584:	2002      	movs	r0, #2
 8000586:	f001 fc9b 	bl	8001ec0 <stm_log_write>
        }
      }
      /* CLEAR RX_DONE FLAG */
      // vModeInit(STDBY_MODE);
      STM_LOGD("Producer", "Clear flag");
 800058a:	f001 fdb1 	bl	80020f0 <HAL_GetTick>
 800058e:	4603      	mov	r3, r0
 8000590:	22f9      	movs	r2, #249	; 0xf9
 8000592:	9202      	str	r2, [sp, #8]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <entryProducer+0x1ac>)
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <entryProducer+0x1b0>)
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <entryProducer+0x1d8>)
 800059e:	4906      	ldr	r1, [pc, #24]	; (80005b8 <entryProducer+0x1b0>)
 80005a0:	2004      	movs	r0, #4
 80005a2:	f001 fc8d 	bl	8001ec0 <stm_log_write>
      vSpi1Write(RegIrqFlags, RX_DONE_Msk | PAYLOAD_CRC_ERROR_Msk);
 80005a6:	2160      	movs	r1, #96	; 0x60
 80005a8:	2012      	movs	r0, #18
 80005aa:	f000 fb41 	bl	8000c30 <vSpi1Write>
    err = osSemaphoreAcquire(rxDoneSemaphoreHandle, portMAX_DELAY);
 80005ae:	e732      	b.n	8000416 <entryProducer+0xe>
 80005b0:	200039f8 	.word	0x200039f8
 80005b4:	0800b6fc 	.word	0x0800b6fc
 80005b8:	0800aa38 	.word	0x0800aa38
 80005bc:	0800aa04 	.word	0x0800aa04
 80005c0:	0800aa44 	.word	0x0800aa44
 80005c4:	20000004 	.word	0x20000004
 80005c8:	0800aa7c 	.word	0x0800aa7c
 80005cc:	0800aabc 	.word	0x0800aabc
 80005d0:	20003a08 	.word	0x20003a08
 80005d4:	0800aaec 	.word	0x0800aaec
 80005d8:	0800ab1c 	.word	0x0800ab1c
 80005dc:	0800ab88 	.word	0x0800ab88
 80005e0:	0800abc8 	.word	0x0800abc8

080005e4 <entryConsumer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryConsumer */
void entryConsumer(void* argument)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b08f      	sub	sp, #60	; 0x3c
 80005e8:	af08      	add	r7, sp, #32
 80005ea:	6078      	str	r0, [r7, #4]
  static uint8_t receivedMsgFromQueue[10];

  /* Infinite loop */
  for (;;)
  {
    err = osMessageQueueGet(myQueue01Handle, receivedMsgFromQueue, 0, portMAX_DELAY);
 80005ec:	4b91      	ldr	r3, [pc, #580]	; (8000834 <entryConsumer+0x250>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	2200      	movs	r2, #0
 80005f6:	4990      	ldr	r1, [pc, #576]	; (8000838 <entryConsumer+0x254>)
 80005f8:	f005 fe9c 	bl	8006334 <osMessageQueueGet>
 80005fc:	60b8      	str	r0, [r7, #8]
    if (!err)
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f3      	bne.n	80005ec <entryConsumer+0x8>
    {

      printf("\r\n");
 8000604:	488d      	ldr	r0, [pc, #564]	; (800083c <entryConsumer+0x258>)
 8000606:	f009 f8bf 	bl	8009788 <puts>
      STM_LOGD("Consumer", "Get queue ok");
 800060a:	f001 fd71 	bl	80020f0 <HAL_GetTick>
 800060e:	4603      	mov	r3, r0
 8000610:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8000614:	9202      	str	r2, [sp, #8]
 8000616:	4a8a      	ldr	r2, [pc, #552]	; (8000840 <entryConsumer+0x25c>)
 8000618:	9201      	str	r2, [sp, #4]
 800061a:	4a8a      	ldr	r2, [pc, #552]	; (8000844 <entryConsumer+0x260>)
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	4a8a      	ldr	r2, [pc, #552]	; (8000848 <entryConsumer+0x264>)
 8000620:	4988      	ldr	r1, [pc, #544]	; (8000844 <entryConsumer+0x260>)
 8000622:	2004      	movs	r0, #4
 8000624:	f001 fc4c 	bl	8001ec0 <stm_log_write>
      for (size_t i = 0; i < PAYLOAD_LENGTH; i++)
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	e019      	b.n	8000662 <entryConsumer+0x7e>
      {
        STM_LOGV("Consumer", "msg from queue: receivedMsgFromQueue[%d]: %x", i, receivedMsgFromQueue[i]);
 800062e:	f001 fd5f 	bl	80020f0 <HAL_GetTick>
 8000632:	4602      	mov	r2, r0
 8000634:	4980      	ldr	r1, [pc, #512]	; (8000838 <entryConsumer+0x254>)
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	440b      	add	r3, r1
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	9304      	str	r3, [sp, #16]
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	9303      	str	r3, [sp, #12]
 8000642:	f240 131d 	movw	r3, #285	; 0x11d
 8000646:	9302      	str	r3, [sp, #8]
 8000648:	4b7d      	ldr	r3, [pc, #500]	; (8000840 <entryConsumer+0x25c>)
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	4b7d      	ldr	r3, [pc, #500]	; (8000844 <entryConsumer+0x260>)
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	4613      	mov	r3, r2
 8000652:	4a7e      	ldr	r2, [pc, #504]	; (800084c <entryConsumer+0x268>)
 8000654:	497b      	ldr	r1, [pc, #492]	; (8000844 <entryConsumer+0x260>)
 8000656:	2005      	movs	r0, #5
 8000658:	f001 fc32 	bl	8001ec0 <stm_log_write>
      for (size_t i = 0; i < PAYLOAD_LENGTH; i++)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	3301      	adds	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	2b09      	cmp	r3, #9
 8000666:	d9e2      	bls.n	800062e <entryConsumer+0x4a>
      }

      STM_LOGV("Consumer", "current : location: %d - relaySts: %s", thisNode.location, WHICH_RELAY(thisNode.relayState));
 8000668:	f001 fd42 	bl	80020f0 <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	4b78      	ldr	r3, [pc, #480]	; (8000850 <entryConsumer+0x26c>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	4619      	mov	r1, r3
 8000674:	4b76      	ldr	r3, [pc, #472]	; (8000850 <entryConsumer+0x26c>)
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d007      	beq.n	800068c <entryConsumer+0xa8>
 800067c:	4b74      	ldr	r3, [pc, #464]	; (8000850 <entryConsumer+0x26c>)
 800067e:	789b      	ldrb	r3, [r3, #2]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d101      	bne.n	8000688 <entryConsumer+0xa4>
 8000684:	4b73      	ldr	r3, [pc, #460]	; (8000854 <entryConsumer+0x270>)
 8000686:	e002      	b.n	800068e <entryConsumer+0xaa>
 8000688:	4b73      	ldr	r3, [pc, #460]	; (8000858 <entryConsumer+0x274>)
 800068a:	e000      	b.n	800068e <entryConsumer+0xaa>
 800068c:	4b73      	ldr	r3, [pc, #460]	; (800085c <entryConsumer+0x278>)
 800068e:	9304      	str	r3, [sp, #16]
 8000690:	9103      	str	r1, [sp, #12]
 8000692:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000696:	9302      	str	r3, [sp, #8]
 8000698:	4b69      	ldr	r3, [pc, #420]	; (8000840 <entryConsumer+0x25c>)
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	4b69      	ldr	r3, [pc, #420]	; (8000844 <entryConsumer+0x260>)
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	4613      	mov	r3, r2
 80006a2:	4a6f      	ldr	r2, [pc, #444]	; (8000860 <entryConsumer+0x27c>)
 80006a4:	4967      	ldr	r1, [pc, #412]	; (8000844 <entryConsumer+0x260>)
 80006a6:	2005      	movs	r0, #5
 80006a8:	f001 fc0a 	bl	8001ec0 <stm_log_write>
      STM_LOGV("Consumer", "msg info: location: %d - relaySts: %s", receivedMsgFromQueue[INDEX_DATA_LOCATION], WHICH_RELAY(receivedMsgFromQueue[INDEX_DATA_RELAY_STATE]));
 80006ac:	f001 fd20 	bl	80020f0 <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	4b61      	ldr	r3, [pc, #388]	; (8000838 <entryConsumer+0x254>)
 80006b4:	795b      	ldrb	r3, [r3, #5]
 80006b6:	4619      	mov	r1, r3
 80006b8:	4b5f      	ldr	r3, [pc, #380]	; (8000838 <entryConsumer+0x254>)
 80006ba:	799b      	ldrb	r3, [r3, #6]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d007      	beq.n	80006d0 <entryConsumer+0xec>
 80006c0:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <entryConsumer+0x254>)
 80006c2:	799b      	ldrb	r3, [r3, #6]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <entryConsumer+0xe8>
 80006c8:	4b62      	ldr	r3, [pc, #392]	; (8000854 <entryConsumer+0x270>)
 80006ca:	e002      	b.n	80006d2 <entryConsumer+0xee>
 80006cc:	4b62      	ldr	r3, [pc, #392]	; (8000858 <entryConsumer+0x274>)
 80006ce:	e000      	b.n	80006d2 <entryConsumer+0xee>
 80006d0:	4b62      	ldr	r3, [pc, #392]	; (800085c <entryConsumer+0x278>)
 80006d2:	9304      	str	r3, [sp, #16]
 80006d4:	9103      	str	r1, [sp, #12]
 80006d6:	f240 1321 	movw	r3, #289	; 0x121
 80006da:	9302      	str	r3, [sp, #8]
 80006dc:	4b58      	ldr	r3, [pc, #352]	; (8000840 <entryConsumer+0x25c>)
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	4b58      	ldr	r3, [pc, #352]	; (8000844 <entryConsumer+0x260>)
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	4613      	mov	r3, r2
 80006e6:	4a5f      	ldr	r2, [pc, #380]	; (8000864 <entryConsumer+0x280>)
 80006e8:	4956      	ldr	r1, [pc, #344]	; (8000844 <entryConsumer+0x260>)
 80006ea:	2005      	movs	r0, #5
 80006ec:	f001 fbe8 	bl	8001ec0 <stm_log_write>

      if (receivedMsgFromQueue[INDEX_DATA_LOCATION] != LOCATION_UNKNOWN)
 80006f0:	4b51      	ldr	r3, [pc, #324]	; (8000838 <entryConsumer+0x254>)
 80006f2:	795b      	ldrb	r3, [r3, #5]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d015      	beq.n	8000724 <entryConsumer+0x140>
      {
        thisNode.location = receivedMsgFromQueue[INDEX_DATA_LOCATION];
 80006f8:	4b4f      	ldr	r3, [pc, #316]	; (8000838 <entryConsumer+0x254>)
 80006fa:	795a      	ldrb	r2, [r3, #5]
 80006fc:	4b54      	ldr	r3, [pc, #336]	; (8000850 <entryConsumer+0x26c>)
 80006fe:	705a      	strb	r2, [r3, #1]
        STM_LOGI("Consumer", "----> Update location %d", receivedMsgFromQueue[INDEX_DATA_LOCATION]);
 8000700:	f001 fcf6 	bl	80020f0 <HAL_GetTick>
 8000704:	4603      	mov	r3, r0
 8000706:	4a4c      	ldr	r2, [pc, #304]	; (8000838 <entryConsumer+0x254>)
 8000708:	7952      	ldrb	r2, [r2, #5]
 800070a:	9203      	str	r2, [sp, #12]
 800070c:	f44f 7293 	mov.w	r2, #294	; 0x126
 8000710:	9202      	str	r2, [sp, #8]
 8000712:	4a4b      	ldr	r2, [pc, #300]	; (8000840 <entryConsumer+0x25c>)
 8000714:	9201      	str	r2, [sp, #4]
 8000716:	4a4b      	ldr	r2, [pc, #300]	; (8000844 <entryConsumer+0x260>)
 8000718:	9200      	str	r2, [sp, #0]
 800071a:	4a53      	ldr	r2, [pc, #332]	; (8000868 <entryConsumer+0x284>)
 800071c:	4949      	ldr	r1, [pc, #292]	; (8000844 <entryConsumer+0x260>)
 800071e:	2003      	movs	r0, #3
 8000720:	f001 fbce 	bl	8001ec0 <stm_log_write>
      }

      if (thisNode.relayState != receivedMsgFromQueue[INDEX_DATA_RELAY_STATE] && thisNode.errCode == ERR_CODE_NONE)
 8000724:	4b4a      	ldr	r3, [pc, #296]	; (8000850 <entryConsumer+0x26c>)
 8000726:	789a      	ldrb	r2, [r3, #2]
 8000728:	4b43      	ldr	r3, [pc, #268]	; (8000838 <entryConsumer+0x254>)
 800072a:	799b      	ldrb	r3, [r3, #6]
 800072c:	429a      	cmp	r2, r3
 800072e:	f000 8159 	beq.w	80009e4 <entryConsumer+0x400>
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <entryConsumer+0x26c>)
 8000734:	78db      	ldrb	r3, [r3, #3]
 8000736:	2b00      	cmp	r3, #0
 8000738:	f040 8154 	bne.w	80009e4 <entryConsumer+0x400>
      {
        bool isChecking = true;
 800073c:	2301      	movs	r3, #1
 800073e:	74fb      	strb	r3, [r7, #19]
        uint32_t countCheck = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]

        taskENTER_CRITICAL();
 8000744:	f008 fc9a 	bl	800907c <vPortEnterCritical>
        thisNode.relayState = receivedMsgFromQueue[INDEX_DATA_RELAY_STATE];
 8000748:	4b3b      	ldr	r3, [pc, #236]	; (8000838 <entryConsumer+0x254>)
 800074a:	799a      	ldrb	r2, [r3, #6]
 800074c:	4b40      	ldr	r3, [pc, #256]	; (8000850 <entryConsumer+0x26c>)
 800074e:	709a      	strb	r2, [r3, #2]
        taskEXIT_CRITICAL();
 8000750:	f008 fcc4 	bl	80090dc <vPortExitCritical>
        STM_LOGI("Consumer", "----> Update relay state to %s", WHICH_RELAY(receivedMsgFromQueue[INDEX_DATA_RELAY_STATE]));
 8000754:	f001 fccc 	bl	80020f0 <HAL_GetTick>
 8000758:	4602      	mov	r2, r0
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <entryConsumer+0x254>)
 800075c:	799b      	ldrb	r3, [r3, #6]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d007      	beq.n	8000772 <entryConsumer+0x18e>
 8000762:	4b35      	ldr	r3, [pc, #212]	; (8000838 <entryConsumer+0x254>)
 8000764:	799b      	ldrb	r3, [r3, #6]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <entryConsumer+0x18a>
 800076a:	4b3a      	ldr	r3, [pc, #232]	; (8000854 <entryConsumer+0x270>)
 800076c:	e002      	b.n	8000774 <entryConsumer+0x190>
 800076e:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <entryConsumer+0x274>)
 8000770:	e000      	b.n	8000774 <entryConsumer+0x190>
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <entryConsumer+0x278>)
 8000774:	9303      	str	r3, [sp, #12]
 8000776:	f240 1331 	movw	r3, #305	; 0x131
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	4b30      	ldr	r3, [pc, #192]	; (8000840 <entryConsumer+0x25c>)
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	4b30      	ldr	r3, [pc, #192]	; (8000844 <entryConsumer+0x260>)
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	4613      	mov	r3, r2
 8000786:	4a39      	ldr	r2, [pc, #228]	; (800086c <entryConsumer+0x288>)
 8000788:	492e      	ldr	r1, [pc, #184]	; (8000844 <entryConsumer+0x260>)
 800078a:	2003      	movs	r0, #3
 800078c:	f001 fb98 	bl	8001ec0 <stm_log_write>
        RELAY_CONTROL(thisNode.relayState);
 8000790:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <entryConsumer+0x26c>)
 8000792:	789b      	ldrb	r3, [r3, #2]
 8000794:	461a      	mov	r2, r3
 8000796:	2102      	movs	r1, #2
 8000798:	4835      	ldr	r0, [pc, #212]	; (8000870 <entryConsumer+0x28c>)
 800079a:	f002 fdfd 	bl	8003398 <HAL_GPIO_WritePin>

        vModeInit(STDBY_MODE);
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 fbba 	bl	8000f18 <vModeInit>
        STM_LOGD("Consumer", "Test relay ...");
 80007a4:	f001 fca4 	bl	80020f0 <HAL_GetTick>
 80007a8:	4603      	mov	r3, r0
 80007aa:	f240 1235 	movw	r2, #309	; 0x135
 80007ae:	9202      	str	r2, [sp, #8]
 80007b0:	4a23      	ldr	r2, [pc, #140]	; (8000840 <entryConsumer+0x25c>)
 80007b2:	9201      	str	r2, [sp, #4]
 80007b4:	4a23      	ldr	r2, [pc, #140]	; (8000844 <entryConsumer+0x260>)
 80007b6:	9200      	str	r2, [sp, #0]
 80007b8:	4a2e      	ldr	r2, [pc, #184]	; (8000874 <entryConsumer+0x290>)
 80007ba:	4922      	ldr	r1, [pc, #136]	; (8000844 <entryConsumer+0x260>)
 80007bc:	2004      	movs	r0, #4
 80007be:	f001 fb7f 	bl	8001ec0 <stm_log_write>
        STM_LOGD("Consumer", "Invoke ADC");
 80007c2:	f001 fc95 	bl	80020f0 <HAL_GetTick>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f44f 729b 	mov.w	r2, #310	; 0x136
 80007cc:	9202      	str	r2, [sp, #8]
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <entryConsumer+0x25c>)
 80007d0:	9201      	str	r2, [sp, #4]
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <entryConsumer+0x260>)
 80007d4:	9200      	str	r2, [sp, #0]
 80007d6:	4a28      	ldr	r2, [pc, #160]	; (8000878 <entryConsumer+0x294>)
 80007d8:	491a      	ldr	r1, [pc, #104]	; (8000844 <entryConsumer+0x260>)
 80007da:	2004      	movs	r0, #4
 80007dc:	f001 fb70 	bl	8001ec0 <stm_log_write>
        ADC_READ_LIGHTSENSOR();
 80007e0:	4826      	ldr	r0, [pc, #152]	; (800087c <entryConsumer+0x298>)
 80007e2:	f001 fe1d 	bl	8002420 <HAL_ADC_Start_IT>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	f000 80f0 	beq.w	80009ce <entryConsumer+0x3ea>
 80007ee:	f001 fc7f 	bl	80020f0 <HAL_GetTick>
 80007f2:	4604      	mov	r4, r0
 80007f4:	4821      	ldr	r0, [pc, #132]	; (800087c <entryConsumer+0x298>)
 80007f6:	f001 fe13 	bl	8002420 <HAL_ADC_Start_IT>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d009      	beq.n	8000814 <entryConsumer+0x230>
 8000800:	481e      	ldr	r0, [pc, #120]	; (800087c <entryConsumer+0x298>)
 8000802:	f001 fe0d 	bl	8002420 <HAL_ADC_Start_IT>
 8000806:	4603      	mov	r3, r0
 8000808:	2b02      	cmp	r3, #2
 800080a:	d101      	bne.n	8000810 <entryConsumer+0x22c>
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <entryConsumer+0x29c>)
 800080e:	e002      	b.n	8000816 <entryConsumer+0x232>
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <entryConsumer+0x2a0>)
 8000812:	e000      	b.n	8000816 <entryConsumer+0x232>
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <entryConsumer+0x2a4>)
 8000816:	9303      	str	r3, [sp, #12]
 8000818:	f240 1337 	movw	r3, #311	; 0x137
 800081c:	9302      	str	r3, [sp, #8]
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <entryConsumer+0x25c>)
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <entryConsumer+0x2a8>)
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	4623      	mov	r3, r4
 8000828:	4a19      	ldr	r2, [pc, #100]	; (8000890 <entryConsumer+0x2ac>)
 800082a:	4918      	ldr	r1, [pc, #96]	; (800088c <entryConsumer+0x2a8>)
 800082c:	2001      	movs	r0, #1
 800082e:	f001 fb47 	bl	8001ec0 <stm_log_write>

        while (isChecking && ++countCheck <= 70) {
 8000832:	e0cc      	b.n	80009ce <entryConsumer+0x3ea>
 8000834:	20003a08 	.word	0x20003a08
 8000838:	20000098 	.word	0x20000098
 800083c:	0800abf8 	.word	0x0800abf8
 8000840:	0800b70c 	.word	0x0800b70c
 8000844:	0800ac2c 	.word	0x0800ac2c
 8000848:	0800abfc 	.word	0x0800abfc
 800084c:	0800ac38 	.word	0x0800ac38
 8000850:	20000004 	.word	0x20000004
 8000854:	0800ac84 	.word	0x0800ac84
 8000858:	0800ac90 	.word	0x0800ac90
 800085c:	0800aca0 	.word	0x0800aca0
 8000860:	0800acac 	.word	0x0800acac
 8000864:	0800acf0 	.word	0x0800acf0
 8000868:	0800ad34 	.word	0x0800ad34
 800086c:	0800ad70 	.word	0x0800ad70
 8000870:	40010800 	.word	0x40010800
 8000874:	0800adb4 	.word	0x0800adb4
 8000878:	0800ade8 	.word	0x0800ade8
 800087c:	200039c8 	.word	0x200039c8
 8000880:	0800ae18 	.word	0x0800ae18
 8000884:	0800ae24 	.word	0x0800ae24
 8000888:	0800ae30 	.word	0x0800ae30
 800088c:	0800ae6c 	.word	0x0800ae6c
 8000890:	0800ae3c 	.word	0x0800ae3c
          STM_LOGD("Consumer", "adcLightSensor: %d - relayState: %d - count: %d - isChecking: %d", adcLightSensor, thisNode.relayState, countCheck, isChecking);
 8000894:	f001 fc2c 	bl	80020f0 <HAL_GetTick>
 8000898:	4601      	mov	r1, r0
 800089a:	4b71      	ldr	r3, [pc, #452]	; (8000a60 <entryConsumer+0x47c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a71      	ldr	r2, [pc, #452]	; (8000a64 <entryConsumer+0x480>)
 80008a0:	7892      	ldrb	r2, [r2, #2]
 80008a2:	4610      	mov	r0, r2
 80008a4:	7cfa      	ldrb	r2, [r7, #19]
 80008a6:	9206      	str	r2, [sp, #24]
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	9205      	str	r2, [sp, #20]
 80008ac:	9004      	str	r0, [sp, #16]
 80008ae:	9303      	str	r3, [sp, #12]
 80008b0:	f44f 739d 	mov.w	r3, #314	; 0x13a
 80008b4:	9302      	str	r3, [sp, #8]
 80008b6:	4b6c      	ldr	r3, [pc, #432]	; (8000a68 <entryConsumer+0x484>)
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	4b6c      	ldr	r3, [pc, #432]	; (8000a6c <entryConsumer+0x488>)
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	460b      	mov	r3, r1
 80008c0:	4a6b      	ldr	r2, [pc, #428]	; (8000a70 <entryConsumer+0x48c>)
 80008c2:	496a      	ldr	r1, [pc, #424]	; (8000a6c <entryConsumer+0x488>)
 80008c4:	2004      	movs	r0, #4
 80008c6:	f001 fafb 	bl	8001ec0 <stm_log_write>

          if (((adcLightSensor < LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_ON)) ||
 80008ca:	4b65      	ldr	r3, [pc, #404]	; (8000a60 <entryConsumer+0x47c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008d2:	d203      	bcs.n	80008dc <entryConsumer+0x2f8>
 80008d4:	4b63      	ldr	r3, [pc, #396]	; (8000a64 <entryConsumer+0x480>)
 80008d6:	789b      	ldrb	r3, [r3, #2]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d008      	beq.n	80008ee <entryConsumer+0x30a>
            ((adcLightSensor >= LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_OFF)))
 80008dc:	4b60      	ldr	r3, [pc, #384]	; (8000a60 <entryConsumer+0x47c>)
 80008de:	681b      	ldr	r3, [r3, #0]
          if (((adcLightSensor < LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_ON)) ||
 80008e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008e4:	d31a      	bcc.n	800091c <entryConsumer+0x338>
            ((adcLightSensor >= LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_OFF)))
 80008e6:	4b5f      	ldr	r3, [pc, #380]	; (8000a64 <entryConsumer+0x480>)
 80008e8:	789b      	ldrb	r3, [r3, #2]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d116      	bne.n	800091c <entryConsumer+0x338>
          {
            countCheck = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
            isChecking = false;
 80008f2:	2300      	movs	r3, #0
 80008f4:	74fb      	strb	r3, [r7, #19]
            isAck = true;
 80008f6:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <entryConsumer+0x490>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
            STM_LOGW("Consumer", "----> check ok ");
 80008fc:	f001 fbf8 	bl	80020f0 <HAL_GetTick>
 8000900:	4603      	mov	r3, r0
 8000902:	f44f 72a1 	mov.w	r2, #322	; 0x142
 8000906:	9202      	str	r2, [sp, #8]
 8000908:	4a57      	ldr	r2, [pc, #348]	; (8000a68 <entryConsumer+0x484>)
 800090a:	9201      	str	r2, [sp, #4]
 800090c:	4a57      	ldr	r2, [pc, #348]	; (8000a6c <entryConsumer+0x488>)
 800090e:	9200      	str	r2, [sp, #0]
 8000910:	4a59      	ldr	r2, [pc, #356]	; (8000a78 <entryConsumer+0x494>)
 8000912:	4956      	ldr	r1, [pc, #344]	; (8000a6c <entryConsumer+0x488>)
 8000914:	2002      	movs	r0, #2
 8000916:	f001 fad3 	bl	8001ec0 <stm_log_write>
 800091a:	e058      	b.n	80009ce <entryConsumer+0x3ea>
          }
          else if (countCheck == 70) {
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b46      	cmp	r3, #70	; 0x46
 8000920:	d11b      	bne.n	800095a <entryConsumer+0x376>
            STM_LOGW("Consumer", "----> check failed");
 8000922:	f001 fbe5 	bl	80020f0 <HAL_GetTick>
 8000926:	4603      	mov	r3, r0
 8000928:	f240 1245 	movw	r2, #325	; 0x145
 800092c:	9202      	str	r2, [sp, #8]
 800092e:	4a4e      	ldr	r2, [pc, #312]	; (8000a68 <entryConsumer+0x484>)
 8000930:	9201      	str	r2, [sp, #4]
 8000932:	4a4e      	ldr	r2, [pc, #312]	; (8000a6c <entryConsumer+0x488>)
 8000934:	9200      	str	r2, [sp, #0]
 8000936:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <entryConsumer+0x498>)
 8000938:	494c      	ldr	r1, [pc, #304]	; (8000a6c <entryConsumer+0x488>)
 800093a:	2002      	movs	r0, #2
 800093c:	f001 fac0 	bl	8001ec0 <stm_log_write>
            isAck = false;
 8000940:	4b4c      	ldr	r3, [pc, #304]	; (8000a74 <entryConsumer+0x490>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
            receivedMsgFromQueue[INDEX_DATA_ERR_CODE] = (thisNode.relayState == RELAY_STATE_ON) ? ERR_CODE_LIGHT_ON_FAILED : ERR_CODE_LIGHT_OFF_FAILED;
 8000946:	4b47      	ldr	r3, [pc, #284]	; (8000a64 <entryConsumer+0x480>)
 8000948:	789b      	ldrb	r3, [r3, #2]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d101      	bne.n	8000952 <entryConsumer+0x36e>
 800094e:	2201      	movs	r2, #1
 8000950:	e000      	b.n	8000954 <entryConsumer+0x370>
 8000952:	2202      	movs	r2, #2
 8000954:	4b4a      	ldr	r3, [pc, #296]	; (8000a80 <entryConsumer+0x49c>)
 8000956:	71da      	strb	r2, [r3, #7]
 8000958:	e039      	b.n	80009ce <entryConsumer+0x3ea>
          }
          else {
            ADC_READ_LIGHTSENSOR();
 800095a:	484a      	ldr	r0, [pc, #296]	; (8000a84 <entryConsumer+0x4a0>)
 800095c:	f001 fd60 	bl	8002420 <HAL_ADC_Start_IT>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d021      	beq.n	80009aa <entryConsumer+0x3c6>
 8000966:	f001 fbc3 	bl	80020f0 <HAL_GetTick>
 800096a:	4604      	mov	r4, r0
 800096c:	4845      	ldr	r0, [pc, #276]	; (8000a84 <entryConsumer+0x4a0>)
 800096e:	f001 fd57 	bl	8002420 <HAL_ADC_Start_IT>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d009      	beq.n	800098c <entryConsumer+0x3a8>
 8000978:	4842      	ldr	r0, [pc, #264]	; (8000a84 <entryConsumer+0x4a0>)
 800097a:	f001 fd51 	bl	8002420 <HAL_ADC_Start_IT>
 800097e:	4603      	mov	r3, r0
 8000980:	2b02      	cmp	r3, #2
 8000982:	d101      	bne.n	8000988 <entryConsumer+0x3a4>
 8000984:	4b40      	ldr	r3, [pc, #256]	; (8000a88 <entryConsumer+0x4a4>)
 8000986:	e002      	b.n	800098e <entryConsumer+0x3aa>
 8000988:	4b40      	ldr	r3, [pc, #256]	; (8000a8c <entryConsumer+0x4a8>)
 800098a:	e000      	b.n	800098e <entryConsumer+0x3aa>
 800098c:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <entryConsumer+0x4ac>)
 800098e:	9303      	str	r3, [sp, #12]
 8000990:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	4b34      	ldr	r3, [pc, #208]	; (8000a68 <entryConsumer+0x484>)
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	4b3e      	ldr	r3, [pc, #248]	; (8000a94 <entryConsumer+0x4b0>)
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	4623      	mov	r3, r4
 80009a0:	4a3d      	ldr	r2, [pc, #244]	; (8000a98 <entryConsumer+0x4b4>)
 80009a2:	493c      	ldr	r1, [pc, #240]	; (8000a94 <entryConsumer+0x4b0>)
 80009a4:	2001      	movs	r0, #1
 80009a6:	f001 fa8b 	bl	8001ec0 <stm_log_write>
            osDelay(10);
 80009aa:	200a      	movs	r0, #10
 80009ac:	f005 f9a6 	bl	8005cfc <osDelay>
            STM_LOGW("Consumer", "----> check again");
 80009b0:	f001 fb9e 	bl	80020f0 <HAL_GetTick>
 80009b4:	4603      	mov	r3, r0
 80009b6:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80009ba:	9202      	str	r2, [sp, #8]
 80009bc:	4a2a      	ldr	r2, [pc, #168]	; (8000a68 <entryConsumer+0x484>)
 80009be:	9201      	str	r2, [sp, #4]
 80009c0:	4a2a      	ldr	r2, [pc, #168]	; (8000a6c <entryConsumer+0x488>)
 80009c2:	9200      	str	r2, [sp, #0]
 80009c4:	4a35      	ldr	r2, [pc, #212]	; (8000a9c <entryConsumer+0x4b8>)
 80009c6:	4929      	ldr	r1, [pc, #164]	; (8000a6c <entryConsumer+0x488>)
 80009c8:	2002      	movs	r0, #2
 80009ca:	f001 fa79 	bl	8001ec0 <stm_log_write>
        while (isChecking && ++countCheck <= 70) {
 80009ce:	7cfb      	ldrb	r3, [r7, #19]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d01a      	beq.n	8000a0a <entryConsumer+0x426>
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3301      	adds	r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2b46      	cmp	r3, #70	; 0x46
 80009de:	f67f af59 	bls.w	8000894 <entryConsumer+0x2b0>
      {
 80009e2:	e012      	b.n	8000a0a <entryConsumer+0x426>
          }
        }
      }
      else {
        isAck = true;
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <entryConsumer+0x490>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
        STM_LOGI("Consumer", "Relay already satisfies");
 80009ea:	f001 fb81 	bl	80020f0 <HAL_GetTick>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80009f4:	9202      	str	r2, [sp, #8]
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <entryConsumer+0x484>)
 80009f8:	9201      	str	r2, [sp, #4]
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <entryConsumer+0x488>)
 80009fc:	9200      	str	r2, [sp, #0]
 80009fe:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <entryConsumer+0x4bc>)
 8000a00:	491a      	ldr	r1, [pc, #104]	; (8000a6c <entryConsumer+0x488>)
 8000a02:	2003      	movs	r0, #3
 8000a04:	f001 fa5c 	bl	8001ec0 <stm_log_write>
 8000a08:	e000      	b.n	8000a0c <entryConsumer+0x428>
      {
 8000a0a:	bf00      	nop
      }

      receivedMsgFromQueue[INDEX_SOURCE_ID] = thisNode.nodeID;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <entryConsumer+0x480>)
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <entryConsumer+0x49c>)
 8000a12:	701a      	strb	r2, [r3, #0]
      receivedMsgFromQueue[INDEX_DEST_ID] = GATEWAY_ADDRESS;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <entryConsumer+0x49c>)
 8000a16:	22ff      	movs	r2, #255	; 0xff
 8000a18:	705a      	strb	r2, [r3, #1]
      receivedMsgFromQueue[INDEX_MSG_TYPE] = MSG_TYPE_RESPONSE;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <entryConsumer+0x49c>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	709a      	strb	r2, [r3, #2]
      receivedMsgFromQueue[INDEX_DATA_LOCATION] = thisNode.location;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <entryConsumer+0x480>)
 8000a22:	785a      	ldrb	r2, [r3, #1]
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <entryConsumer+0x49c>)
 8000a26:	715a      	strb	r2, [r3, #5]
      receivedMsgFromQueue[INDEX_DATA_RELAY_STATE] = thisNode.relayState;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <entryConsumer+0x480>)
 8000a2a:	789a      	ldrb	r2, [r3, #2]
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <entryConsumer+0x49c>)
 8000a2e:	719a      	strb	r2, [r3, #6]
      if (isAck) {
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <entryConsumer+0x490>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <entryConsumer+0x462>
        /* TODO: Send ACK */
        receivedMsgFromQueue[INDEX_MSG_STATUS] = MSG_STS_OK;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <entryConsumer+0x49c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	70da      	strb	r2, [r3, #3]
        receivedMsgFromQueue[INDEX_DATA_ERR_CODE] = ERR_CODE_NONE;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <entryConsumer+0x49c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	71da      	strb	r2, [r3, #7]
 8000a44:	e002      	b.n	8000a4c <entryConsumer+0x468>
      }
      else
      {
        /* TODO: Send NACK + ERR_CODE */
        receivedMsgFromQueue[INDEX_MSG_STATUS] = MSG_STS_FAILED;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <entryConsumer+0x49c>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	70da      	strb	r2, [r3, #3]

      }
      LoRaTransmit(receivedMsgFromQueue, PAYLOAD_LENGTH, 5000);
 8000a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a50:	210a      	movs	r1, #10
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <entryConsumer+0x49c>)
 8000a54:	f000 fd74 	bl	8001540 <LoRaTransmit>
      vModeInit(RXCONTINUOUS_MODE);
 8000a58:	2005      	movs	r0, #5
 8000a5a:	f000 fa5d 	bl	8000f18 <vModeInit>
    err = osMessageQueueGet(myQueue01Handle, receivedMsgFromQueue, 0, portMAX_DELAY);
 8000a5e:	e5c5      	b.n	80005ec <entryConsumer+0x8>
 8000a60:	20003ab4 	.word	0x20003ab4
 8000a64:	20000004 	.word	0x20000004
 8000a68:	0800b70c 	.word	0x0800b70c
 8000a6c:	0800ac2c 	.word	0x0800ac2c
 8000a70:	0800ae7c 	.word	0x0800ae7c
 8000a74:	200000a2 	.word	0x200000a2
 8000a78:	0800aee0 	.word	0x0800aee0
 8000a7c:	0800af14 	.word	0x0800af14
 8000a80:	20000098 	.word	0x20000098
 8000a84:	200039c8 	.word	0x200039c8
 8000a88:	0800ae18 	.word	0x0800ae18
 8000a8c:	0800ae24 	.word	0x0800ae24
 8000a90:	0800ae30 	.word	0x0800ae30
 8000a94:	0800ae6c 	.word	0x0800ae6c
 8000a98:	0800ae3c 	.word	0x0800ae3c
 8000a9c:	0800af4c 	.word	0x0800af4c
 8000aa0:	0800af84 	.word	0x0800af84

08000aa4 <entryPeriodic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPeriodic */
void entryPeriodic(void* argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryPeriodic */
  static uint32_t tickToWait = pdMS_TO_TICKS(500);
  /* Infinite loop */
  for (;;)
  {
    TOGGLE_LED();
 8000aac:	2101      	movs	r1, #1
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <entryPeriodic+0x1c>)
 8000ab0:	f002 fca4 	bl	80033fc <HAL_GPIO_TogglePin>
    osDelay(tickToWait);
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <entryPeriodic+0x20>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 f91f 	bl	8005cfc <osDelay>
    TOGGLE_LED();
 8000abe:	e7f5      	b.n	8000aac <entryPeriodic+0x8>
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	20000000 	.word	0x20000000

08000ac8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000adc:	4b4f      	ldr	r3, [pc, #316]	; (8000c1c <MX_GPIO_Init+0x154>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a4e      	ldr	r2, [pc, #312]	; (8000c1c <MX_GPIO_Init+0x154>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b4c      	ldr	r3, [pc, #304]	; (8000c1c <MX_GPIO_Init+0x154>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0310 	and.w	r3, r3, #16
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af4:	4b49      	ldr	r3, [pc, #292]	; (8000c1c <MX_GPIO_Init+0x154>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a48      	ldr	r2, [pc, #288]	; (8000c1c <MX_GPIO_Init+0x154>)
 8000afa:	f043 0320 	orr.w	r3, r3, #32
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <MX_GPIO_Init+0x154>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0320 	and.w	r3, r3, #32
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b43      	ldr	r3, [pc, #268]	; (8000c1c <MX_GPIO_Init+0x154>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a42      	ldr	r2, [pc, #264]	; (8000c1c <MX_GPIO_Init+0x154>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b40      	ldr	r3, [pc, #256]	; (8000c1c <MX_GPIO_Init+0x154>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b3d      	ldr	r3, [pc, #244]	; (8000c1c <MX_GPIO_Init+0x154>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a3c      	ldr	r2, [pc, #240]	; (8000c1c <MX_GPIO_Init+0x154>)
 8000b2a:	f043 0308 	orr.w	r3, r3, #8
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b3a      	ldr	r3, [pc, #232]	; (8000c1c <MX_GPIO_Init+0x154>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_OUTPUT_GPIO_Port, RELAY_OUTPUT_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4837      	ldr	r0, [pc, #220]	; (8000c20 <MX_GPIO_Init+0x158>)
 8000b42:	f002 fc29 	bl	8003398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2110      	movs	r1, #16
 8000b4a:	4835      	ldr	r0, [pc, #212]	; (8000c20 <MX_GPIO_Init+0x158>)
 8000b4c:	f002 fc24 	bl	8003398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2101      	movs	r1, #1
 8000b54:	4833      	ldr	r0, [pc, #204]	; (8000c24 <MX_GPIO_Init+0x15c>)
 8000b56:	f002 fc1f 	bl	8003398 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b5a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b60:	2303      	movs	r3, #3
 8000b62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	482f      	ldr	r0, [pc, #188]	; (8000c28 <MX_GPIO_Init+0x160>)
 8000b6c:	f002 f9a4 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RELAY_OUTPUT_Pin|SPI1_NSS_Pin;
 8000b70:	2312      	movs	r3, #18
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4826      	ldr	r0, [pc, #152]	; (8000c20 <MX_GPIO_Init+0x158>)
 8000b88:	f002 f996 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4820      	ldr	r0, [pc, #128]	; (8000c20 <MX_GPIO_Init+0x158>)
 8000ba0:	f002 f98a 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTERRUPT_LORA_Pin;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <MX_GPIO_Init+0x164>)
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERRUPT_LORA_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481a      	ldr	r0, [pc, #104]	; (8000c20 <MX_GPIO_Init+0x158>)
 8000bb8:	f002 f97e 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OUTPUT_Pin;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4814      	ldr	r0, [pc, #80]	; (8000c24 <MX_GPIO_Init+0x15c>)
 8000bd4:	f002 f970 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000bd8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000bdc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bde:	2303      	movs	r3, #3
 8000be0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4619      	mov	r1, r3
 8000be8:	480e      	ldr	r0, [pc, #56]	; (8000c24 <MX_GPIO_Init+0x15c>)
 8000bea:	f002 f965 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8000bee:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <MX_GPIO_Init+0x158>)
 8000c00:	f002 f95a 	bl	8002eb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2105      	movs	r1, #5
 8000c08:	2009      	movs	r0, #9
 8000c0a:	f002 f911 	bl	8002e30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c0e:	2009      	movs	r0, #9
 8000c10:	f002 f93a 	bl	8002e88 <HAL_NVIC_EnableIRQ>

}
 8000c14:	bf00      	nop
 8000c16:	3720      	adds	r7, #32
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010800 	.word	0x40010800
 8000c24:	40010c00 	.word	0x40010c00
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	10110000 	.word	0x10110000

08000c30 <vSpi1Write>:
  * @param ucData: Data need write into registers or fifo of Lora
  * @retval None
  */

void vSpi1Write(uint8_t ucAddress, uint8_t ucData)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af04      	add	r7, sp, #16
 8000c36:	4603      	mov	r3, r0
 8000c38:	460a      	mov	r2, r1
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	71bb      	strb	r3, [r7, #6]
  uint8_t ucDataMatrix[2];
  ucAddress |= SPI1_WRITE; /* A wnr bit, which is 1 for write access and 0 for read access */
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c46:	71fb      	strb	r3, [r7, #7]
  ucDataMatrix[0] = ucAddress;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	733b      	strb	r3, [r7, #12]
  ucDataMatrix[1] = ucData;
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2110      	movs	r1, #16
 8000c54:	4822      	ldr	r0, [pc, #136]	; (8000ce0 <vSpi1Write+0xb0>)
 8000c56:	f002 fb9f 	bl	8003398 <HAL_GPIO_WritePin>
  HAL_Delay(DELAY_SPI);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f001 fa52 	bl	8002104 <HAL_Delay>
  ERROR_CHECK(HAL_SPI_Transmit(&hspi1, (uint8_t*)ucDataMatrix, sizeof(ucDataMatrix), 100));
 8000c60:	f107 010c 	add.w	r1, r7, #12
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	2202      	movs	r2, #2
 8000c68:	481e      	ldr	r0, [pc, #120]	; (8000ce4 <vSpi1Write+0xb4>)
 8000c6a:	f003 fc81 	bl	8004570 <HAL_SPI_Transmit>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d028      	beq.n	8000cc6 <vSpi1Write+0x96>
 8000c74:	f001 fa3c 	bl	80020f0 <HAL_GetTick>
 8000c78:	4604      	mov	r4, r0
 8000c7a:	f107 010c 	add.w	r1, r7, #12
 8000c7e:	2364      	movs	r3, #100	; 0x64
 8000c80:	2202      	movs	r2, #2
 8000c82:	4818      	ldr	r0, [pc, #96]	; (8000ce4 <vSpi1Write+0xb4>)
 8000c84:	f003 fc74 	bl	8004570 <HAL_SPI_Transmit>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d00d      	beq.n	8000caa <vSpi1Write+0x7a>
 8000c8e:	f107 010c 	add.w	r1, r7, #12
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	2202      	movs	r2, #2
 8000c96:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <vSpi1Write+0xb4>)
 8000c98:	f003 fc6a 	bl	8004570 <HAL_SPI_Transmit>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d101      	bne.n	8000ca6 <vSpi1Write+0x76>
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <vSpi1Write+0xb8>)
 8000ca4:	e002      	b.n	8000cac <vSpi1Write+0x7c>
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <vSpi1Write+0xbc>)
 8000ca8:	e000      	b.n	8000cac <vSpi1Write+0x7c>
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <vSpi1Write+0xc0>)
 8000cac:	9303      	str	r3, [sp, #12]
 8000cae:	231f      	movs	r3, #31
 8000cb0:	9302      	str	r3, [sp, #8]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <vSpi1Write+0xc4>)
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <vSpi1Write+0xc8>)
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	4623      	mov	r3, r4
 8000cbc:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <vSpi1Write+0xcc>)
 8000cbe:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <vSpi1Write+0xc8>)
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f001 f8fd 	bl	8001ec0 <stm_log_write>
  HAL_Delay(DELAY_SPI);
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	f001 fa1c 	bl	8002104 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2110      	movs	r1, #16
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <vSpi1Write+0xb0>)
 8000cd2:	f002 fb61 	bl	8003398 <HAL_GPIO_WritePin>
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd90      	pop	{r4, r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	20003a14 	.word	0x20003a14
 8000ce8:	0800afc0 	.word	0x0800afc0
 8000cec:	0800afcc 	.word	0x0800afcc
 8000cf0:	0800afd8 	.word	0x0800afd8
 8000cf4:	0800b71c 	.word	0x0800b71c
 8000cf8:	0800b014 	.word	0x0800b014
 8000cfc:	0800afe4 	.word	0x0800afe4

08000d00 <ucSpi1Read>:
  * @brief Read Data Function from Lora Module
  * @param ucAddress: Address registers or fifo of Lora Module
  * @retval ucData: Data contained in registers or fifo of Lora Module
  */
uint8_t ucSpi1Read(uint8_t ucAddress)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af04      	add	r7, sp, #16
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73fb      	strb	r3, [r7, #15]
  ucAddress &= SPI1_READ; /* A wnr bit, which is 1 for write access and 0 for read access */
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	483a      	ldr	r0, [pc, #232]	; (8000e08 <ucSpi1Read+0x108>)
 8000d1e:	f002 fb3b 	bl	8003398 <HAL_GPIO_WritePin>
  HAL_Delay(DELAY_SPI);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f001 f9ee 	bl	8002104 <HAL_Delay>
  ERROR_CHECK(HAL_SPI_Transmit(&hspi1, (uint8_t*)&ucAddress, sizeof(ucAddress), 100));
 8000d28:	1df9      	adds	r1, r7, #7
 8000d2a:	2364      	movs	r3, #100	; 0x64
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4837      	ldr	r0, [pc, #220]	; (8000e0c <ucSpi1Read+0x10c>)
 8000d30:	f003 fc1e 	bl	8004570 <HAL_SPI_Transmit>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d026      	beq.n	8000d88 <ucSpi1Read+0x88>
 8000d3a:	f001 f9d9 	bl	80020f0 <HAL_GetTick>
 8000d3e:	4604      	mov	r4, r0
 8000d40:	1df9      	adds	r1, r7, #7
 8000d42:	2364      	movs	r3, #100	; 0x64
 8000d44:	2201      	movs	r2, #1
 8000d46:	4831      	ldr	r0, [pc, #196]	; (8000e0c <ucSpi1Read+0x10c>)
 8000d48:	f003 fc12 	bl	8004570 <HAL_SPI_Transmit>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d00c      	beq.n	8000d6c <ucSpi1Read+0x6c>
 8000d52:	1df9      	adds	r1, r7, #7
 8000d54:	2364      	movs	r3, #100	; 0x64
 8000d56:	2201      	movs	r2, #1
 8000d58:	482c      	ldr	r0, [pc, #176]	; (8000e0c <ucSpi1Read+0x10c>)
 8000d5a:	f003 fc09 	bl	8004570 <HAL_SPI_Transmit>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d101      	bne.n	8000d68 <ucSpi1Read+0x68>
 8000d64:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <ucSpi1Read+0x110>)
 8000d66:	e002      	b.n	8000d6e <ucSpi1Read+0x6e>
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <ucSpi1Read+0x114>)
 8000d6a:	e000      	b.n	8000d6e <ucSpi1Read+0x6e>
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <ucSpi1Read+0x118>)
 8000d6e:	9303      	str	r3, [sp, #12]
 8000d70:	232f      	movs	r3, #47	; 0x2f
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <ucSpi1Read+0x11c>)
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <ucSpi1Read+0x120>)
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	4623      	mov	r3, r4
 8000d7e:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <ucSpi1Read+0x124>)
 8000d80:	4927      	ldr	r1, [pc, #156]	; (8000e20 <ucSpi1Read+0x120>)
 8000d82:	2001      	movs	r0, #1
 8000d84:	f001 f89c 	bl	8001ec0 <stm_log_write>
  ERROR_CHECK(HAL_SPI_Receive(&hspi1, (uint8_t*)&ucData, sizeof(ucData), 100));
 8000d88:	f107 010f 	add.w	r1, r7, #15
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	481e      	ldr	r0, [pc, #120]	; (8000e0c <ucSpi1Read+0x10c>)
 8000d92:	f003 fd39 	bl	8004808 <HAL_SPI_Receive>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d028      	beq.n	8000dee <ucSpi1Read+0xee>
 8000d9c:	f001 f9a8 	bl	80020f0 <HAL_GetTick>
 8000da0:	4604      	mov	r4, r0
 8000da2:	f107 010f 	add.w	r1, r7, #15
 8000da6:	2364      	movs	r3, #100	; 0x64
 8000da8:	2201      	movs	r2, #1
 8000daa:	4818      	ldr	r0, [pc, #96]	; (8000e0c <ucSpi1Read+0x10c>)
 8000dac:	f003 fd2c 	bl	8004808 <HAL_SPI_Receive>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d00d      	beq.n	8000dd2 <ucSpi1Read+0xd2>
 8000db6:	f107 010f 	add.w	r1, r7, #15
 8000dba:	2364      	movs	r3, #100	; 0x64
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4813      	ldr	r0, [pc, #76]	; (8000e0c <ucSpi1Read+0x10c>)
 8000dc0:	f003 fd22 	bl	8004808 <HAL_SPI_Receive>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d101      	bne.n	8000dce <ucSpi1Read+0xce>
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <ucSpi1Read+0x110>)
 8000dcc:	e002      	b.n	8000dd4 <ucSpi1Read+0xd4>
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <ucSpi1Read+0x114>)
 8000dd0:	e000      	b.n	8000dd4 <ucSpi1Read+0xd4>
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <ucSpi1Read+0x118>)
 8000dd4:	9303      	str	r3, [sp, #12]
 8000dd6:	2330      	movs	r3, #48	; 0x30
 8000dd8:	9302      	str	r3, [sp, #8]
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <ucSpi1Read+0x11c>)
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <ucSpi1Read+0x120>)
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	4623      	mov	r3, r4
 8000de4:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <ucSpi1Read+0x124>)
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <ucSpi1Read+0x120>)
 8000de8:	2001      	movs	r0, #1
 8000dea:	f001 f869 	bl	8001ec0 <stm_log_write>
  HAL_Delay(DELAY_SPI);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f001 f988 	bl	8002104 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2110      	movs	r1, #16
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <ucSpi1Read+0x108>)
 8000dfa:	f002 facd 	bl	8003398 <HAL_GPIO_WritePin>
  return ucData;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	20003a14 	.word	0x20003a14
 8000e10:	0800afc0 	.word	0x0800afc0
 8000e14:	0800afcc 	.word	0x0800afcc
 8000e18:	0800afd8 	.word	0x0800afd8
 8000e1c:	0800b728 	.word	0x0800b728
 8000e20:	0800b014 	.word	0x0800b014
 8000e24:	0800afe4 	.word	0x0800afe4

08000e28 <vLongRangeModeInit>:
  * @brief Mode Initialization LoraTM or FSK/OOK
  * @param ucMode: Value of mode: LoraTM if 1, FSK/OOK if 0
  * @retval None
  */
void vLongRangeModeInit(uint8_t ucLongRangeMode)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  vModeInit(SLEEP_MODE);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 f870 	bl	8000f18 <vModeInit>
  uint8_t ucData = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff ff5f 	bl	8000d00 <ucSpi1Read>
 8000e42:	4603      	mov	r3, r0
 8000e44:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x7F;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e4c:	73fb      	strb	r3, [r7, #15]
  if (ucLongRangeMode == 0u || ucLongRangeMode == 1u)
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d002      	beq.n	8000e5a <vLongRangeModeInit+0x32>
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d10c      	bne.n	8000e74 <vLongRangeModeInit+0x4c>
  {
    ucData |= (ucLongRangeMode << 7);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	01db      	lsls	r3, r3, #7
 8000e5e:	b25a      	sxtb	r2, r3
 8000e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fede 	bl	8000c30 <vSpi1Write>
  }
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <vAccessSharedRegInit>:
  * @brief Access Low Frequency Mode Initialization
  * @param ucAccessSharedReg: Value of mode
  * @retval None
  */
void vAccessSharedRegInit(uint8_t ucAccessSharedReg)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff ff38 	bl	8000d00 <ucSpi1Read>
 8000e90:	4603      	mov	r3, r0
 8000e92:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xBF;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e9a:	73fb      	strb	r3, [r7, #15]
  if (ucAccessSharedReg == 0u || ucAccessSharedReg == 1u)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <vAccessSharedRegInit+0x2c>
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d10c      	bne.n	8000ec2 <vAccessSharedRegInit+0x46>
  {
    ucData |= (ucAccessSharedReg << 6);
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	019b      	lsls	r3, r3, #6
 8000eac:	b25a      	sxtb	r2, r3
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff feb7 	bl	8000c30 <vSpi1Write>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <vLowFrequencyModeOnInit>:
  * @brief Access Low Frequency Mode Initialization
  * @param ucLowFrequencyModeOn: Value of mode
  * @retval None
  */
void vLowFrequencyModeOnInit(uint8_t ucLowFrequencyModeOn)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff ff11 	bl	8000d00 <ucSpi1Read>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF7;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	f023 0308 	bic.w	r3, r3, #8
 8000ee8:	73fb      	strb	r3, [r7, #15]
  if (ucLowFrequencyModeOn == 0u || ucLowFrequencyModeOn == 1u)
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <vLowFrequencyModeOnInit+0x2c>
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10c      	bne.n	8000f10 <vLowFrequencyModeOnInit+0x46>
  {
    ucData |= (ucLowFrequencyModeOn << 3);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	b25a      	sxtb	r2, r3
 8000efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff fe90 	bl	8000c30 <vSpi1Write>
  }
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <vModeInit>:
  * @brief Device Modes Initialization
  * @param ucDeviceMode: Value of mode
  * @retval None
  */
void vModeInit(uint8_t ucMode)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af04      	add	r7, sp, #16
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  STM_LOGD("LoRa", "LoRa -> %s", WHICH_MODE(ucMode));
 8000f22:	f001 f8e5 	bl	80020f0 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d010      	beq.n	8000f50 <vModeInit+0x38>
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d00b      	beq.n	8000f4c <vModeInit+0x34>
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d006      	beq.n	8000f48 <vModeInit+0x30>
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	d101      	bne.n	8000f44 <vModeInit+0x2c>
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <vModeInit+0x8c>)
 8000f42:	e006      	b.n	8000f52 <vModeInit+0x3a>
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <vModeInit+0x90>)
 8000f46:	e004      	b.n	8000f52 <vModeInit+0x3a>
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <vModeInit+0x94>)
 8000f4a:	e002      	b.n	8000f52 <vModeInit+0x3a>
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <vModeInit+0x98>)
 8000f4e:	e000      	b.n	8000f52 <vModeInit+0x3a>
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <vModeInit+0x9c>)
 8000f52:	9303      	str	r3, [sp, #12]
 8000f54:	2387      	movs	r3, #135	; 0x87
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <vModeInit+0xa0>)
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <vModeInit+0xa4>)
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	4613      	mov	r3, r2
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <vModeInit+0xa8>)
 8000f64:	4915      	ldr	r1, [pc, #84]	; (8000fbc <vModeInit+0xa4>)
 8000f66:	2004      	movs	r0, #4
 8000f68:	f000 ffaa 	bl	8001ec0 <stm_log_write>
  uint8_t ucData = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fec5 	bl	8000d00 <ucSpi1Read>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	f023 0307 	bic.w	r3, r3, #7
 8000f80:	73fb      	strb	r3, [r7, #15]
  if (ucMode >= 0u && ucMode <= 7u)
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b07      	cmp	r3, #7
 8000f86:	d808      	bhi.n	8000f9a <vModeInit+0x82>
  {
    ucData |= ucMode;
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	4619      	mov	r1, r3
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff fe4b 	bl	8000c30 <vSpi1Write>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	0800b024 	.word	0x0800b024
 8000fa8:	0800b02c 	.word	0x0800b02c
 8000fac:	0800b034 	.word	0x0800b034
 8000fb0:	0800b038 	.word	0x0800b038
 8000fb4:	0800b040 	.word	0x0800b040
 8000fb8:	0800b734 	.word	0x0800b734
 8000fbc:	0800b078 	.word	0x0800b078
 8000fc0:	0800b048 	.word	0x0800b048

08000fc4 <vFrfInit>:
  * @brief RF carrier frequency Initialization
  * @param uiFrf: Value of RF carrier frequency
  * @retval None
  */
void vFrfInit(unsigned int uiFrf)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  vSpi1Write(RegFrfMsb, (uint8_t)(uiFrf >> 16));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	0c1b      	lsrs	r3, r3, #16
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	2006      	movs	r0, #6
 8000fd6:	f7ff fe2b 	bl	8000c30 <vSpi1Write>
  vSpi1Write(RegFrfMid, (uint8_t)(uiFrf >> 8));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	2007      	movs	r0, #7
 8000fe4:	f7ff fe24 	bl	8000c30 <vSpi1Write>
  vSpi1Write(RegFrfLsb, (uint8_t)uiFrf);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	2008      	movs	r0, #8
 8000ff0:	f7ff fe1e 	bl	8000c30 <vSpi1Write>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <vPaSelectInit>:
  * @brief Power Amplifier Initialization
  * @param ucPaSelect: Power Amplifier Value
  * @retval None
  */
void vPaSelectInit(uint8_t ucPaSelect)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaConfig);
 800100a:	2009      	movs	r0, #9
 800100c:	f7ff fe78 	bl	8000d00 <ucSpi1Read>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x7F;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800101a:	73fb      	strb	r3, [r7, #15]
  if (ucPaSelect == 0u || ucPaSelect == 1u)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <vPaSelectInit+0x2c>
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d10c      	bne.n	8001042 <vPaSelectInit+0x46>
  {
    ucData |= (ucPaSelect << 7);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	01db      	lsls	r3, r3, #7
 800102c:	b25a      	sxtb	r2, r3
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4313      	orrs	r3, r2
 8001034:	b25b      	sxtb	r3, r3
 8001036:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaConfig, ucData);
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	4619      	mov	r1, r3
 800103c:	2009      	movs	r0, #9
 800103e:	f7ff fdf7 	bl	8000c30 <vSpi1Write>
  }
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <vOutputPowerInit>:
  * @brief Output Power Initialization
  * @param ucOutputPower: Output Power Value
  * @retval None
  */
void vOutputPowerInit(uint8_t ucOutputPower)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaConfig);
 8001058:	2009      	movs	r0, #9
 800105a:	f7ff fe51 	bl	8000d00 <ucSpi1Read>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF0;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	f023 030f 	bic.w	r3, r3, #15
 8001068:	73fb      	strb	r3, [r7, #15]
  if (ucOutputPower >= 0u && ucOutputPower <= 15u)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d808      	bhi.n	8001082 <vOutputPowerInit+0x38>
  {
    ucData |= ucOutputPower;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	4313      	orrs	r3, r2
 8001076:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaConfig, ucData);
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	4619      	mov	r1, r3
 800107c:	2009      	movs	r0, #9
 800107e:	f7ff fdd7 	bl	8000c30 <vSpi1Write>
  }
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <vOcpTrimInit>:
  * @brief  Overload Current Protection Initialization
  * @param ucOcpTrim: OcpTrim Value
  * @retval None
  */
void vOcpTrimInit(uint8_t ucOcpTrim)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOcp);
 8001098:	200b      	movs	r0, #11
 800109a:	f7ff fe31 	bl	8000d00 <ucSpi1Read>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xE0;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	f023 031f 	bic.w	r3, r3, #31
 80010a8:	73fb      	strb	r3, [r7, #15]
  if (ucOcpTrim >= 0u && ucOcpTrim <= 31u)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b1f      	cmp	r3, #31
 80010ae:	d808      	bhi.n	80010c2 <vOcpTrimInit+0x38>
  {
    ucData |= ucOcpTrim;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOcp, ucData);
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	4619      	mov	r1, r3
 80010bc:	200b      	movs	r0, #11
 80010be:	f7ff fdb7 	bl	8000c30 <vSpi1Write>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <vFifoTxBaseAddrInit>:
  * @brief Base address in FIFO data buffer for TX modulator Initialization
  * @param ucFifoTxBaseAddr: Base Address Value for Tx
  * @retval None
  */
void vFifoTxBaseAddrInit(uint8_t ucFifoTxBaseAddr)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegFifoTxBaseAddr, ucFifoTxBaseAddr);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4619      	mov	r1, r3
 80010d8:	200e      	movs	r0, #14
 80010da:	f7ff fda9 	bl	8000c30 <vSpi1Write>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <vFifoRxBaseAddrInit>:
  * @brief Base address in FIFO data buffer for RX modulator Initialization
  * @param ucFifoRxBaseAddr: Base Address Value for Rx
  * @retval None
  */
void vFifoRxBaseAddrInit(uint8_t ucFifoRxBaseAddr)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegFifoRxBaseAddr, ucFifoRxBaseAddr);
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	4619      	mov	r1, r3
 80010f4:	200f      	movs	r0, #15
 80010f6:	f7ff fd9b 	bl	8000c30 <vSpi1Write>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <vCodingRateInit>:
  * @brief Error coding rate Initialization
  * @param ucCodingRate: Error coding rate Value
  * @retval None
  */
void vCodingRateInit(uint8_t ucCodingRate)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig1);
 8001110:	201d      	movs	r0, #29
 8001112:	f7ff fdf5 	bl	8000d00 <ucSpi1Read>
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF1;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f023 030e 	bic.w	r3, r3, #14
 8001120:	73fb      	strb	r3, [r7, #15]
  if (ucCodingRate >= 1u && ucCodingRate <= 4u)
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00f      	beq.n	8001148 <vCodingRateInit+0x46>
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b04      	cmp	r3, #4
 800112c:	d80c      	bhi.n	8001148 <vCodingRateInit+0x46>
  {
    ucData |= (ucCodingRate << 1);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	b25a      	sxtb	r2, r3
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001138:	4313      	orrs	r3, r2
 800113a:	b25b      	sxtb	r3, r3
 800113c:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig1, ucData);
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	4619      	mov	r1, r3
 8001142:	201d      	movs	r0, #29
 8001144:	f7ff fd74 	bl	8000c30 <vSpi1Write>
  }
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <vImplicitHeaderModeOnInit>:
  * @brief Explicit or Implicit Header mode Initialization
  * @param ucHeaderMode: Error coding rate Value
  * @retval None
  */
void vImplicitHeaderModeOnInit(uint8_t ucHeaderMode)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig1);
 800115e:	201d      	movs	r0, #29
 8001160:	f7ff fdce 	bl	8000d00 <ucSpi1Read>
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xFE;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
  if (ucHeaderMode == 0u || ucHeaderMode == 1u)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <vImplicitHeaderModeOnInit+0x2c>
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d108      	bne.n	800118e <vImplicitHeaderModeOnInit+0x3e>
  {
    ucData |= ucHeaderMode;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4313      	orrs	r3, r2
 8001182:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig1, ucData);
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	4619      	mov	r1, r3
 8001188:	201d      	movs	r0, #29
 800118a:	f7ff fd51 	bl	8000c30 <vSpi1Write>
  }
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <vSpreadingFactorInit>:
  * @brief Spreading Factor rate Initialization
  * @param ucSpreadingFactor: Spreading Factor Value
  * @retval None
  */
void vSpreadingFactorInit(uint8_t ucSpreadingFactor)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig2);
 80011a4:	201e      	movs	r0, #30
 80011a6:	f7ff fdab 	bl	8000d00 <ucSpi1Read>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x0F;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	73fb      	strb	r3, [r7, #15]
  if (ucSpreadingFactor >= 6u && ucSpreadingFactor <= 12u)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d90f      	bls.n	80011dc <vSpreadingFactorInit+0x46>
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	d80c      	bhi.n	80011dc <vSpreadingFactorInit+0x46>
  {
    ucData |= (ucSpreadingFactor << 4);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	b25a      	sxtb	r2, r3
 80011c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig2, ucData);
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	4619      	mov	r1, r3
 80011d6:	201e      	movs	r0, #30
 80011d8:	f7ff fd2a 	bl	8000c30 <vSpi1Write>
  }
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <vRxPayloadCrcOnInit>:
  * @brief CRC generation and check on payload Initialization
  * @param ucRxPayloadCrcOn: CRCON Value
  * @retval None
  */
void vRxPayloadCrcOnInit(uint8_t ucRxPayloadCrcOn)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig2);
 80011f2:	201e      	movs	r0, #30
 80011f4:	f7ff fd84 	bl	8000d00 <ucSpi1Read>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xFB;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	f023 0304 	bic.w	r3, r3, #4
 8001202:	73fb      	strb	r3, [r7, #15]
  if (ucRxPayloadCrcOn == 0u || ucRxPayloadCrcOn == 1u)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <vRxPayloadCrcOnInit+0x2c>
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d10c      	bne.n	800122a <vRxPayloadCrcOnInit+0x46>
  {
    ucData |= (ucRxPayloadCrcOn << 2);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	b25a      	sxtb	r2, r3
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	4313      	orrs	r3, r2
 800121c:	b25b      	sxtb	r3, r3
 800121e:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig2, ucData);
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	4619      	mov	r1, r3
 8001224:	201e      	movs	r0, #30
 8001226:	f7ff fd03 	bl	8000c30 <vSpi1Write>
  }
}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <vPreambleLengthInit>:
  * @brief Preamble Length Initialization
  * @param ucPreambleLength: Preamble Length Value
  * @retval None
  */
void vPreambleLengthInit(uint16_t ucPreambleLength)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	80fb      	strh	r3, [r7, #6]
  vSpi1Write(RegPreambleMsb, (uint8_t)(ucPreambleLength >> 8));
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29b      	uxth	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	2020      	movs	r0, #32
 8001248:	f7ff fcf2 	bl	8000c30 <vSpi1Write>
  vSpi1Write(RegPreambleLsb, (uint8_t)(ucPreambleLength));
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4619      	mov	r1, r3
 8001252:	2021      	movs	r0, #33	; 0x21
 8001254:	f7ff fcec 	bl	8000c30 <vSpi1Write>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <vPayloadLengthInit>:
  * @brief Payload Length Initialization
  * @param ucPayloadLength: Payload Length Value
  * @retval None
  */
void vPayloadLengthInit(uint8_t ucPayloadLength)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegPayloadLength, ucPayloadLength);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4619      	mov	r1, r3
 800126e:	2022      	movs	r0, #34	; 0x22
 8001270:	f7ff fcde 	bl	8000c30 <vSpi1Write>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <vDetectionOptimizeInit>:
  * @brief  LoRa Detection Optimize Initialization
  * @param ucDetectionOptimize: Detection Optimize Value
  * @retval None
  */
void vDetectionOptimizeInit(uint8_t ucDetectionOptimize)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegDetectOptimize);
 800128a:	2031      	movs	r0, #49	; 0x31
 800128c:	f7ff fd38 	bl	8000d00 <ucSpi1Read>
 8001290:	4603      	mov	r3, r0
 8001292:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	f023 0307 	bic.w	r3, r3, #7
 800129a:	73fb      	strb	r3, [r7, #15]
  if (ucDetectionOptimize == 3u || ucDetectionOptimize == 5u)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d002      	beq.n	80012a8 <vDetectionOptimizeInit+0x2c>
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d108      	bne.n	80012ba <vDetectionOptimizeInit+0x3e>
  {
    ucData |= ucDetectionOptimize;
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegDetectOptimize, ucData);
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	4619      	mov	r1, r3
 80012b4:	2031      	movs	r0, #49	; 0x31
 80012b6:	f7ff fcbb 	bl	8000c30 <vSpi1Write>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <vDetectionThresholdInit>:
  * @brief LoRa detection threshold Initialization
  * @param ucDetectionThreshold: LoRa detection threshold Value
  * @retval None
  */
void vDetectionThresholdInit(uint8_t ucDetectionThreshold)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  if (ucDetectionThreshold == 0x0A || ucDetectionThreshold == 0x0C)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b0a      	cmp	r3, #10
 80012d0:	d002      	beq.n	80012d8 <vDetectionThresholdInit+0x16>
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b0c      	cmp	r3, #12
 80012d6:	d104      	bne.n	80012e2 <vDetectionThresholdInit+0x20>
  {
    vSpi1Write(RegDetectionThreshold, ucDetectionThreshold);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4619      	mov	r1, r3
 80012dc:	2037      	movs	r0, #55	; 0x37
 80012de:	f7ff fca7 	bl	8000c30 <vSpi1Write>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <vTcxoInputOnInit>:
  * @brief Controls the crystal oscillator Initialization
  * @param ucTcxoInputOn: Tcxo Input On Value
  * @retval None
  */
void vTcxoInputOnInit(uint8_t ucTcxoInputOn)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegTcxo);
 80012f8:	204b      	movs	r0, #75	; 0x4b
 80012fa:	f7ff fd01 	bl	8000d00 <ucSpi1Read>
 80012fe:	4603      	mov	r3, r0
 8001300:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xEF;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	f023 0310 	bic.w	r3, r3, #16
 8001308:	73fb      	strb	r3, [r7, #15]
  if (ucTcxoInputOn == 0u || ucTcxoInputOn == 1u)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <vTcxoInputOnInit+0x2c>
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d10c      	bne.n	8001330 <vTcxoInputOnInit+0x46>
  {
    ucData |= (ucTcxoInputOn << 4);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	b25a      	sxtb	r2, r3
 800131c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001320:	4313      	orrs	r3, r2
 8001322:	b25b      	sxtb	r3, r3
 8001324:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegTcxo, ucData);
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	4619      	mov	r1, r3
 800132a:	204b      	movs	r0, #75	; 0x4b
 800132c:	f7ff fc80 	bl	8000c30 <vSpi1Write>
  }
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <vPaDacInit>:
  * @brief Enables the +20dBm option on PA_BOOST pin Initialization
  * @param ucPaDac: Pa Dac Value
  * @retval None
  */
void vPaDacInit(uint8_t ucPaDac)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaDac);
 8001346:	204d      	movs	r0, #77	; 0x4d
 8001348:	f7ff fcda 	bl	8000d00 <ucSpi1Read>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	f023 0307 	bic.w	r3, r3, #7
 8001356:	73fb      	strb	r3, [r7, #15]
  if (ucPaDac == 4u || ucPaDac == 7u)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b04      	cmp	r3, #4
 800135c:	d002      	beq.n	8001364 <vPaDacInit+0x2c>
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b07      	cmp	r3, #7
 8001362:	d108      	bne.n	8001376 <vPaDacInit+0x3e>
  {
    ucData |= ucPaDac;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4313      	orrs	r3, r2
 800136a:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaDac, ucData);
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	4619      	mov	r1, r3
 8001370:	204d      	movs	r0, #77	; 0x4d
 8001372:	f7ff fc5d 	bl	8000c30 <vSpi1Write>
  }
}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <vLoraInit>:
  * @brief Lora Module Initialization
  * @param: None
  * @retval: None
  */
void vLoraInit(void)
{
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	b093      	sub	sp, #76	; 0x4c
 8001384:	af0e      	add	r7, sp, #56	; 0x38

  STM_LOGD("LoRa", "LoRa init");
 8001386:	f000 feb3 	bl	80020f0 <HAL_GetTick>
 800138a:	4603      	mov	r3, r0
 800138c:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8001390:	9202      	str	r2, [sp, #8]
 8001392:	4a64      	ldr	r2, [pc, #400]	; (8001524 <vLoraInit+0x1a4>)
 8001394:	9201      	str	r2, [sp, #4]
 8001396:	4a64      	ldr	r2, [pc, #400]	; (8001528 <vLoraInit+0x1a8>)
 8001398:	9200      	str	r2, [sp, #0]
 800139a:	4a64      	ldr	r2, [pc, #400]	; (800152c <vLoraInit+0x1ac>)
 800139c:	4962      	ldr	r1, [pc, #392]	; (8001528 <vLoraInit+0x1a8>)
 800139e:	2004      	movs	r0, #4
 80013a0:	f000 fd8e 	bl	8001ec0 <stm_log_write>

  vLongRangeModeInit(LORA_MODE); /*  Init Module Lora into Lora TM Mode */
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff fd3f 	bl	8000e28 <vLongRangeModeInit>
  // LORA_GET_REGISTER(RegOpMode);

  vModeInit(STDBY_MODE);                              /* Init Module Lora into Standby Mode */
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff fdb4 	bl	8000f18 <vModeInit>
  vAccessSharedRegInit(ACCESS_LORA_REGISTERS);        /* Access LoRa registers page 0x0D: 0x3F */
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fd63 	bl	8000e7c <vAccessSharedRegInit>
  vLowFrequencyModeOnInit(ACCESS_LOW_FREQUENCY_MODE); /* Access Low Frequency Mode registers */
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff fd87 	bl	8000eca <vLowFrequencyModeOnInit>
  // LORA_GET_REGISTER(RegOpMode);

  vFrfInit(RF_FREQUENCY); /*  Init RF carrier frequency */
 80013bc:	f44f 00d9 	mov.w	r0, #7110656	; 0x6c8000
 80013c0:	f7ff fe00 	bl	8000fc4 <vFrfInit>
  // LORA_GET_REGISTER(RegFrfMsb);
  // LORA_GET_REGISTER(RegFrfMid);
  // LORA_GET_REGISTER(RegFrfLsb);

  vPaSelectInit(PA_BOOST); /* Output power is limited to +20 dBm */
 80013c4:	2001      	movs	r0, #1
 80013c6:	f7ff fe19 	bl	8000ffc <vPaSelectInit>
  // vMaxPowerInit(MAX_POWER);
  vOutputPowerInit(OUTPUT_POWER); /* Pout=17-(15-OutputPower) */
 80013ca:	200f      	movs	r0, #15
 80013cc:	f7ff fe3d 	bl	800104a <vOutputPowerInit>

  // vPaRampInit(PA_RAMP);
  // LORA_GET_REGISTER(RegPaRamp);

  // vOcpOnInit(OCP_ON); /* OCP enabled */
  vOcpTrimInit(OCP_TRIM); /* Trimming of OCP current: Imax = 240mA */
 80013d0:	201b      	movs	r0, #27
 80013d2:	f7ff fe5a 	bl	800108a <vOcpTrimInit>
  // vLnaGainInit(G1); /* LNA gain setting: G1 = maximum gain */
  // vLnaBoostLfInit(LNA_BOOST_LF); /* Low Frequency (RFI_LF) LNA current adjustment Default LNA current */
  // vLnaBoostHfInit(LNA_BOOST_HF); /* High Frequency (RFI_HF) LNA current adjustment Boost on, 150% LNA current */
  // LORA_GET_REGISTER(RegLna);

  vFifoTxBaseAddrInit(FIFO_TX_BASE_ADDR); /* Write base address in FIFO data buffer for TX modulator */
 80013d6:	2080      	movs	r0, #128	; 0x80
 80013d8:	f7ff fe77 	bl	80010ca <vFifoTxBaseAddrInit>
  // LORA_GET_REGISTER(RegFifoTxBaseAddr);

  vFifoRxBaseAddrInit(FIFO_RX_BASE_ADDR); /* Read base address in FIFO data buffer for RX demodulator */
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fe82 	bl	80010e6 <vFifoRxBaseAddrInit>

  // vIrqFlagsMaskInit(IRQ_FLAGS_MASK); /* Disable all interrupts mask */
  // LORA_GET_REGISTER(RegIrqFlagsMask);

  // vBandWidthInit(BANDWIDTH_125K); /*  Signal bandwidth: BANDWIDTH_125K */
  vCodingRateInit(CODING_RATE_4_5); /* ANCHOR Error coding rate 4/5 */
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff fe8d 	bl	8001102 <vCodingRateInit>

  // vBandWidthInit(BANDWIDTH_125K);
  // vCodingRateInit(CODING_RATE_4_5);
  vImplicitHeaderModeOnInit(IMPLICIT_HEADER); /* ANCHOR Init Implicit Header mode */
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff feb1 	bl	8001150 <vImplicitHeaderModeOnInit>
  // LORA_GET_REGISTER(RegModemConfig1);

  vSpreadingFactorInit(SPREADING_FACTOR_6_64); /* ANCHOR SF rate 64 chips / symbol */
 80013ee:	2006      	movs	r0, #6
 80013f0:	f7ff fed1 	bl	8001196 <vSpreadingFactorInit>
  // vTxContinuousModeInit(TX_SINGLE); /* ANCHOR Normal mode, a single packet is sent */
  vRxPayloadCrcOnInit(CRC_ENABLE); /* ANCHOR Enable CRC generation and check on payload */
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fef5 	bl	80011e4 <vRxPayloadCrcOnInit>

  // vSymbTimeoutInit(RX_TIMEOUT); /* ANCHOR RX operation time-out */
  // // LORA_GET_REGISTER(RegModemConfig2);
  // // LORA_GET_REGISTER(RegSymbTimeoutLsb);

  vPreambleLengthInit(PREAMBLE_LENGTH); /* ANCHOR Preamble length = PreambleLength + 4.25 Symbols */
 80013fa:	2008      	movs	r0, #8
 80013fc:	f7ff ff19 	bl	8001232 <vPreambleLengthInit>
  // // LORA_GET_REGISTER(RegPreambleMsb);
  // // LORA_GET_REGISTER(RegPreambleLsb);

  vPayloadLengthInit(PAYLOAD_LENGTH); /*  Init Payload length */
 8001400:	200a      	movs	r0, #10
 8001402:	f7ff ff2d 	bl	8001260 <vPayloadLengthInit>

  // vLowDataRateOptimizeInit(LOW_DATA_RATE_OPTIMIZE); /*  Enabled; mandated for when the symbol length exceeds16ms */
  // vAgcAutoOnInit(AGC_AUTO); /* 0 -> LNA gain set by register LnaGain 1 -> LNA gain set by the internal AGC loop*/
  // // LORA_GET_REGISTER(RegModemConfig3);

  vDetectionOptimizeInit(LORA_DETECTION_OPTIMIZE); /* LoRa Detection Optimize 0x03 -> SF7 to SF12; 0x05 -> SF6 */
 8001406:	2005      	movs	r0, #5
 8001408:	f7ff ff38 	bl	800127c <vDetectionOptimizeInit>
  // LORA_GET_REGISTER(RegDetectOptimize);

  // vInvertIQInit(INVERT_IQ); /* ANCHOR Invert the LoRa I and Q signals */
  // // LORA_GET_REGISTER(RegInvertIQ);

  vDetectionThresholdInit(LORA_DETECTION_THRESHOLD); /* ANCHOR LoRa detection threshold 0x0A -> SF7 to SF12; 0x0C -> SF6 */
 800140c:	200c      	movs	r0, #12
 800140e:	f7ff ff58 	bl	80012c2 <vDetectionThresholdInit>

  // vMapPreambleDetect(PREAMBBLE_DETECT_INTERRUPT);
  // // LORA_GET_REGISTER(RegTcxo);
  // printf("RegTcxo = 0x%x\r\n", ucData);

  vTcxoInputOnInit(XTAL_INPUT); /* ANCHOR Controls the crystal oscillator */
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff ff69 	bl	80012ea <vTcxoInputOnInit>
  // LORA_GET_REGISTER(RegTcxo);

  vPaDacInit(PA_DAC); /* Enables the +20dBm option on PA_BOOST pin */
 8001418:	2007      	movs	r0, #7
 800141a:	f7ff ff8d 	bl	8001338 <vPaDacInit>
  // LORA_GET_REGISTER(RegPaDac);
  // LORA_GET_REGISTER(RegLna);
  // LORA_GET_REGISTER(RegVersion);
  // LORA_GET_REGISTER(RegOpMode);
  LORA_GET_REGISTER(RegVersion);
 800141e:	2042      	movs	r0, #66	; 0x42
 8001420:	f7ff fc6e 	bl	8000d00 <ucSpi1Read>
 8001424:	4603      	mov	r3, r0
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	f000 fe62 	bl	80020f0 <HAL_GetTick>
 800142c:	4686      	mov	lr, r0
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001436:	2a00      	cmp	r2, #0
 8001438:	da01      	bge.n	800143e <vLoraInit+0xbe>
 800143a:	2231      	movs	r2, #49	; 0x31
 800143c:	e000      	b.n	8001440 <vLoraInit+0xc0>
 800143e:	2230      	movs	r2, #48	; 0x30
 8001440:	7bf9      	ldrb	r1, [r7, #15]
 8001442:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8001446:	2900      	cmp	r1, #0
 8001448:	d001      	beq.n	800144e <vLoraInit+0xce>
 800144a:	2131      	movs	r1, #49	; 0x31
 800144c:	e000      	b.n	8001450 <vLoraInit+0xd0>
 800144e:	2130      	movs	r1, #48	; 0x30
 8001450:	7bf8      	ldrb	r0, [r7, #15]
 8001452:	f000 0020 	and.w	r0, r0, #32
 8001456:	2800      	cmp	r0, #0
 8001458:	d001      	beq.n	800145e <vLoraInit+0xde>
 800145a:	2031      	movs	r0, #49	; 0x31
 800145c:	e000      	b.n	8001460 <vLoraInit+0xe0>
 800145e:	2030      	movs	r0, #48	; 0x30
 8001460:	7bfc      	ldrb	r4, [r7, #15]
 8001462:	f004 0410 	and.w	r4, r4, #16
 8001466:	2c00      	cmp	r4, #0
 8001468:	d001      	beq.n	800146e <vLoraInit+0xee>
 800146a:	2431      	movs	r4, #49	; 0x31
 800146c:	e000      	b.n	8001470 <vLoraInit+0xf0>
 800146e:	2430      	movs	r4, #48	; 0x30
 8001470:	7bfd      	ldrb	r5, [r7, #15]
 8001472:	f005 0508 	and.w	r5, r5, #8
 8001476:	2d00      	cmp	r5, #0
 8001478:	d001      	beq.n	800147e <vLoraInit+0xfe>
 800147a:	2531      	movs	r5, #49	; 0x31
 800147c:	e000      	b.n	8001480 <vLoraInit+0x100>
 800147e:	2530      	movs	r5, #48	; 0x30
 8001480:	7bfe      	ldrb	r6, [r7, #15]
 8001482:	f006 0604 	and.w	r6, r6, #4
 8001486:	2e00      	cmp	r6, #0
 8001488:	d001      	beq.n	800148e <vLoraInit+0x10e>
 800148a:	2631      	movs	r6, #49	; 0x31
 800148c:	e000      	b.n	8001490 <vLoraInit+0x110>
 800148e:	2630      	movs	r6, #48	; 0x30
 8001490:	f897 c00f 	ldrb.w	ip, [r7, #15]
 8001494:	f00c 0c02 	and.w	ip, ip, #2
 8001498:	f1bc 0f00 	cmp.w	ip, #0
 800149c:	d002      	beq.n	80014a4 <vLoraInit+0x124>
 800149e:	2331      	movs	r3, #49	; 0x31
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	e001      	b.n	80014a8 <vLoraInit+0x128>
 80014a4:	2330      	movs	r3, #48	; 0x30
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	f897 c00f 	ldrb.w	ip, [r7, #15]
 80014ac:	f00c 0c01 	and.w	ip, ip, #1
 80014b0:	f1bc 0f00 	cmp.w	ip, #0
 80014b4:	d001      	beq.n	80014ba <vLoraInit+0x13a>
 80014b6:	2331      	movs	r3, #49	; 0x31
 80014b8:	e000      	b.n	80014bc <vLoraInit+0x13c>
 80014ba:	2330      	movs	r3, #48	; 0x30
 80014bc:	930c      	str	r3, [sp, #48]	; 0x30
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80014c2:	960a      	str	r6, [sp, #40]	; 0x28
 80014c4:	9509      	str	r5, [sp, #36]	; 0x24
 80014c6:	9408      	str	r4, [sp, #32]
 80014c8:	9007      	str	r0, [sp, #28]
 80014ca:	9106      	str	r1, [sp, #24]
 80014cc:	9205      	str	r2, [sp, #20]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	9304      	str	r3, [sp, #16]
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <vLoraInit+0x1b0>)
 80014d4:	9303      	str	r3, [sp, #12]
 80014d6:	f240 5343 	movw	r3, #1347	; 0x543
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <vLoraInit+0x1a4>)
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <vLoraInit+0x1b4>)
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	4673      	mov	r3, lr
 80014e6:	4a14      	ldr	r2, [pc, #80]	; (8001538 <vLoraInit+0x1b8>)
 80014e8:	4912      	ldr	r1, [pc, #72]	; (8001534 <vLoraInit+0x1b4>)
 80014ea:	2005      	movs	r0, #5
 80014ec:	f000 fce8 	bl	8001ec0 <stm_log_write>

  /* Reset Rx Pointer */
  STM_LOGD("LoRa", "Reset RxPointer");
 80014f0:	f000 fdfe 	bl	80020f0 <HAL_GetTick>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f240 5246 	movw	r2, #1350	; 0x546
 80014fa:	9202      	str	r2, [sp, #8]
 80014fc:	4a09      	ldr	r2, [pc, #36]	; (8001524 <vLoraInit+0x1a4>)
 80014fe:	9201      	str	r2, [sp, #4]
 8001500:	4a09      	ldr	r2, [pc, #36]	; (8001528 <vLoraInit+0x1a8>)
 8001502:	9200      	str	r2, [sp, #0]
 8001504:	4a0d      	ldr	r2, [pc, #52]	; (800153c <vLoraInit+0x1bc>)
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <vLoraInit+0x1a8>)
 8001508:	2004      	movs	r0, #4
 800150a:	f000 fcd9 	bl	8001ec0 <stm_log_write>
  vModeInit(STDBY_MODE);
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff fd02 	bl	8000f18 <vModeInit>
  vModeInit(RXCONTINUOUS_MODE);
 8001514:	2005      	movs	r0, #5
 8001516:	f7ff fcff 	bl	8000f18 <vModeInit>
  // STM_LOGD("lora.c", "---------- LoraInit Finish ----------");
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001522:	bf00      	nop
 8001524:	0800b740 	.word	0x0800b740
 8001528:	0800b078 	.word	0x0800b078
 800152c:	0800b080 	.word	0x0800b080
 8001530:	0800b0f4 	.word	0x0800b0f4
 8001534:	0800b0ec 	.word	0x0800b0ec
 8001538:	0800b0b0 	.word	0x0800b0b0
 800153c:	0800b100 	.word	0x0800b100

08001540 <LoRaTransmit>:
{
  return (ucSpi1Read(RegModemConfig2) & SPREADING_FACTOR_Msk) >> SPREADING_FACTOR_MskPos;
}

void LoRaTransmit(uint8_t* data, uint8_t size, uint32_t timeoutMs)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08e      	sub	sp, #56	; 0x38
 8001544:	af06      	add	r7, sp, #24
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	460b      	mov	r3, r1
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	72fb      	strb	r3, [r7, #11]
  bool isTransmitOk = true;
 800154e:	2301      	movs	r3, #1
 8001550:	77fb      	strb	r3, [r7, #31]
  vModeInit(STDBY_MODE);
 8001552:	2001      	movs	r0, #1
 8001554:	f7ff fce0 	bl	8000f18 <vModeInit>

  /* STANDBY MODE */
  vSpi1Write(RegFifoAddrPtr, FIFO_TX_BASE_ADDR); /* Set FifoPtrAddr to FifoTxPtrBase */
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	200d      	movs	r0, #13
 800155c:	f7ff fb68 	bl	8000c30 <vSpi1Write>
  /* WRITE DATA FIFO */
  for (size_t i = 0u; i < size; i++)
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	e0c2      	b.n	80016ec <LoRaTransmit+0x1ac>
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	3b02      	subs	r3, #2
 800156a:	2b05      	cmp	r3, #5
 800156c:	f200 809c 	bhi.w	80016a8 <LoRaTransmit+0x168>
 8001570:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <LoRaTransmit+0x38>)
 8001572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001576:	bf00      	nop
 8001578:	08001591 	.word	0x08001591
 800157c:	080015db 	.word	0x080015db
 8001580:	080016a9 	.word	0x080016a9
 8001584:	080016a9 	.word	0x080016a9
 8001588:	08001615 	.word	0x08001615
 800158c:	0800165f 	.word	0x0800165f
  {
    switch (i) {
    case INDEX_MSG_TYPE:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_MSG_TYPE(*(data + i)));
 8001590:	f000 fdae 	bl	80020f0 <HAL_GetTick>
 8001594:	4601      	mov	r1, r0
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	4413      	add	r3, r2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <LoRaTransmit+0x76>
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <LoRaTransmit+0x72>
 80015ae:	4b7b      	ldr	r3, [pc, #492]	; (800179c <LoRaTransmit+0x25c>)
 80015b0:	e002      	b.n	80015b8 <LoRaTransmit+0x78>
 80015b2:	4b7b      	ldr	r3, [pc, #492]	; (80017a0 <LoRaTransmit+0x260>)
 80015b4:	e000      	b.n	80015b8 <LoRaTransmit+0x78>
 80015b6:	4b7b      	ldr	r3, [pc, #492]	; (80017a4 <LoRaTransmit+0x264>)
 80015b8:	9304      	str	r3, [sp, #16]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	9303      	str	r3, [sp, #12]
 80015be:	f240 638d 	movw	r3, #1677	; 0x68d
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	4b78      	ldr	r3, [pc, #480]	; (80017a8 <LoRaTransmit+0x268>)
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	4b78      	ldr	r3, [pc, #480]	; (80017ac <LoRaTransmit+0x26c>)
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	460b      	mov	r3, r1
 80015ce:	4a78      	ldr	r2, [pc, #480]	; (80017b0 <LoRaTransmit+0x270>)
 80015d0:	4976      	ldr	r1, [pc, #472]	; (80017ac <LoRaTransmit+0x26c>)
 80015d2:	2005      	movs	r0, #5
 80015d4:	f000 fc74 	bl	8001ec0 <stm_log_write>
      break;
 80015d8:	e07d      	b.n	80016d6 <LoRaTransmit+0x196>
    case INDEX_MSG_STATUS:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_MSG_STS(*(data + i)));
 80015da:	f000 fd89 	bl	80020f0 <HAL_GetTick>
 80015de:	4601      	mov	r1, r0
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4413      	add	r3, r2
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <LoRaTransmit+0xb0>
 80015ec:	4b71      	ldr	r3, [pc, #452]	; (80017b4 <LoRaTransmit+0x274>)
 80015ee:	e000      	b.n	80015f2 <LoRaTransmit+0xb2>
 80015f0:	4b71      	ldr	r3, [pc, #452]	; (80017b8 <LoRaTransmit+0x278>)
 80015f2:	9304      	str	r3, [sp, #16]
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	9303      	str	r3, [sp, #12]
 80015f8:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <LoRaTransmit+0x268>)
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	4b6a      	ldr	r3, [pc, #424]	; (80017ac <LoRaTransmit+0x26c>)
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	460b      	mov	r3, r1
 8001608:	4a69      	ldr	r2, [pc, #420]	; (80017b0 <LoRaTransmit+0x270>)
 800160a:	4968      	ldr	r1, [pc, #416]	; (80017ac <LoRaTransmit+0x26c>)
 800160c:	2005      	movs	r0, #5
 800160e:	f000 fc57 	bl	8001ec0 <stm_log_write>
      break;
 8001612:	e060      	b.n	80016d6 <LoRaTransmit+0x196>
    case INDEX_DATA_RELAY_STATE:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_RELAY(*(data + i)));
 8001614:	f000 fd6c 	bl	80020f0 <HAL_GetTick>
 8001618:	4601      	mov	r1, r0
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	4413      	add	r3, r2
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d009      	beq.n	800163a <LoRaTransmit+0xfa>
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	4413      	add	r3, r2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <LoRaTransmit+0xf6>
 8001632:	4b62      	ldr	r3, [pc, #392]	; (80017bc <LoRaTransmit+0x27c>)
 8001634:	e002      	b.n	800163c <LoRaTransmit+0xfc>
 8001636:	4b62      	ldr	r3, [pc, #392]	; (80017c0 <LoRaTransmit+0x280>)
 8001638:	e000      	b.n	800163c <LoRaTransmit+0xfc>
 800163a:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <LoRaTransmit+0x284>)
 800163c:	9304      	str	r3, [sp, #16]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	9303      	str	r3, [sp, #12]
 8001642:	f240 6393 	movw	r3, #1683	; 0x693
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	4b57      	ldr	r3, [pc, #348]	; (80017a8 <LoRaTransmit+0x268>)
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	4b57      	ldr	r3, [pc, #348]	; (80017ac <LoRaTransmit+0x26c>)
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	460b      	mov	r3, r1
 8001652:	4a57      	ldr	r2, [pc, #348]	; (80017b0 <LoRaTransmit+0x270>)
 8001654:	4955      	ldr	r1, [pc, #340]	; (80017ac <LoRaTransmit+0x26c>)
 8001656:	2005      	movs	r0, #5
 8001658:	f000 fc32 	bl	8001ec0 <stm_log_write>
      break;
 800165c:	e03b      	b.n	80016d6 <LoRaTransmit+0x196>
    case INDEX_DATA_ERR_CODE:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_RELAY_ERR(*(data + i)));
 800165e:	f000 fd47 	bl	80020f0 <HAL_GetTick>
 8001662:	4601      	mov	r1, r0
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4413      	add	r3, r2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d009      	beq.n	8001684 <LoRaTransmit+0x144>
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4413      	add	r3, r2
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <LoRaTransmit+0x140>
 800167c:	4b52      	ldr	r3, [pc, #328]	; (80017c8 <LoRaTransmit+0x288>)
 800167e:	e002      	b.n	8001686 <LoRaTransmit+0x146>
 8001680:	4b52      	ldr	r3, [pc, #328]	; (80017cc <LoRaTransmit+0x28c>)
 8001682:	e000      	b.n	8001686 <LoRaTransmit+0x146>
 8001684:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <LoRaTransmit+0x290>)
 8001686:	9304      	str	r3, [sp, #16]
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	9303      	str	r3, [sp, #12]
 800168c:	f240 6396 	movw	r3, #1686	; 0x696
 8001690:	9302      	str	r3, [sp, #8]
 8001692:	4b45      	ldr	r3, [pc, #276]	; (80017a8 <LoRaTransmit+0x268>)
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	4b45      	ldr	r3, [pc, #276]	; (80017ac <LoRaTransmit+0x26c>)
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	460b      	mov	r3, r1
 800169c:	4a44      	ldr	r2, [pc, #272]	; (80017b0 <LoRaTransmit+0x270>)
 800169e:	4943      	ldr	r1, [pc, #268]	; (80017ac <LoRaTransmit+0x26c>)
 80016a0:	2005      	movs	r0, #5
 80016a2:	f000 fc0d 	bl	8001ec0 <stm_log_write>
      break;
 80016a6:	e016      	b.n	80016d6 <LoRaTransmit+0x196>
    default:
      STM_LOGV("LoRaTX", "data transmit[%d]: %d", i, *(data + i));
 80016a8:	f000 fd22 	bl	80020f0 <HAL_GetTick>
 80016ac:	4601      	mov	r1, r0
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	9304      	str	r3, [sp, #16]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	9303      	str	r3, [sp, #12]
 80016bc:	f240 6399 	movw	r3, #1689	; 0x699
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <LoRaTransmit+0x268>)
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	4b39      	ldr	r3, [pc, #228]	; (80017ac <LoRaTransmit+0x26c>)
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	460b      	mov	r3, r1
 80016cc:	4a41      	ldr	r2, [pc, #260]	; (80017d4 <LoRaTransmit+0x294>)
 80016ce:	4937      	ldr	r1, [pc, #220]	; (80017ac <LoRaTransmit+0x26c>)
 80016d0:	2005      	movs	r0, #5
 80016d2:	f000 fbf5 	bl	8001ec0 <stm_log_write>
    }

    // LORA_GET_REGISTER(RegFifoAddrPtr);
    vSpi1Write(RegFifo, *(data + i));
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	4413      	add	r3, r2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	4619      	mov	r1, r3
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff faa5 	bl	8000c30 <vSpi1Write>
  for (size_t i = 0u; i < size; i++)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	7afb      	ldrb	r3, [r7, #11]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	f4ff af38 	bcc.w	8001566 <LoRaTransmit+0x26>
  }
  /* MODE REQUEST TX */
  vModeInit(TX_MODE);
 80016f6:	2003      	movs	r0, #3
 80016f8:	f7ff fc0e 	bl	8000f18 <vModeInit>
  // LORA_GET_REGISTER(RegOpMode);
  /* Init Module Lora into TX Mode */
  uint32_t startTick = HAL_GetTick();
 80016fc:	f000 fcf8 	bl	80020f0 <HAL_GetTick>
 8001700:	6178      	str	r0, [r7, #20]
  STM_LOGV("LoRaTX", "Wait for TX_DONE ...\r\n");
 8001702:	f000 fcf5 	bl	80020f0 <HAL_GetTick>
 8001706:	4603      	mov	r3, r0
 8001708:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800170c:	9202      	str	r2, [sp, #8]
 800170e:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <LoRaTransmit+0x268>)
 8001710:	9201      	str	r2, [sp, #4]
 8001712:	4a26      	ldr	r2, [pc, #152]	; (80017ac <LoRaTransmit+0x26c>)
 8001714:	9200      	str	r2, [sp, #0]
 8001716:	4a30      	ldr	r2, [pc, #192]	; (80017d8 <LoRaTransmit+0x298>)
 8001718:	4924      	ldr	r1, [pc, #144]	; (80017ac <LoRaTransmit+0x26c>)
 800171a:	2005      	movs	r0, #5
 800171c:	f000 fbd0 	bl	8001ec0 <stm_log_write>
  while ((ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos == 0u)
 8001720:	e019      	b.n	8001756 <LoRaTransmit+0x216>
  {
    if (HAL_GetTick() - startTick >= timeoutMs)
 8001722:	f000 fce5 	bl	80020f0 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	d811      	bhi.n	8001756 <LoRaTransmit+0x216>
    {
      STM_LOGE("LoRaTX", "TX_TIMEOUT");
 8001732:	f000 fcdd 	bl	80020f0 <HAL_GetTick>
 8001736:	4603      	mov	r3, r0
 8001738:	f240 62a9 	movw	r2, #1705	; 0x6a9
 800173c:	9202      	str	r2, [sp, #8]
 800173e:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <LoRaTransmit+0x268>)
 8001740:	9201      	str	r2, [sp, #4]
 8001742:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <LoRaTransmit+0x26c>)
 8001744:	9200      	str	r2, [sp, #0]
 8001746:	4a25      	ldr	r2, [pc, #148]	; (80017dc <LoRaTransmit+0x29c>)
 8001748:	4918      	ldr	r1, [pc, #96]	; (80017ac <LoRaTransmit+0x26c>)
 800174a:	2001      	movs	r0, #1
 800174c:	f000 fbb8 	bl	8001ec0 <stm_log_write>
      isTransmitOk = false;
 8001750:	2300      	movs	r3, #0
 8001752:	77fb      	strb	r3, [r7, #31]
      break;
 8001754:	e008      	b.n	8001768 <LoRaTransmit+0x228>
  while ((ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos == 0u)
 8001756:	2012      	movs	r0, #18
 8001758:	f7ff fad2 	bl	8000d00 <ucSpi1Read>
 800175c:	4603      	mov	r3, r0
 800175e:	10db      	asrs	r3, r3, #3
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0dc      	beq.n	8001722 <LoRaTransmit+0x1e2>
    }
  }
  if (isTransmitOk)
 8001768:	7ffb      	ldrb	r3, [r7, #31]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00e      	beq.n	800178c <LoRaTransmit+0x24c>
    STM_LOGD("LoRaTX", "Send msg to GW success");
 800176e:	f000 fcbf 	bl	80020f0 <HAL_GetTick>
 8001772:	4603      	mov	r3, r0
 8001774:	f240 62af 	movw	r2, #1711	; 0x6af
 8001778:	9202      	str	r2, [sp, #8]
 800177a:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <LoRaTransmit+0x268>)
 800177c:	9201      	str	r2, [sp, #4]
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <LoRaTransmit+0x26c>)
 8001780:	9200      	str	r2, [sp, #0]
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <LoRaTransmit+0x2a0>)
 8001784:	4909      	ldr	r1, [pc, #36]	; (80017ac <LoRaTransmit+0x26c>)
 8001786:	2004      	movs	r0, #4
 8001788:	f000 fb9a 	bl	8001ec0 <stm_log_write>
  /* Clear TxDone Flag */
  vSpi1Write(RegIrqFlags, TX_DONE_Msk);
 800178c:	2108      	movs	r1, #8
 800178e:	2012      	movs	r0, #18
 8001790:	f7ff fa4e 	bl	8000c30 <vSpi1Write>
}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	0800b134 	.word	0x0800b134
 80017a0:	0800b140 	.word	0x0800b140
 80017a4:	0800b148 	.word	0x0800b148
 80017a8:	0800b74c 	.word	0x0800b74c
 80017ac:	0800b184 	.word	0x0800b184
 80017b0:	0800b150 	.word	0x0800b150
 80017b4:	0800b18c 	.word	0x0800b18c
 80017b8:	0800b198 	.word	0x0800b198
 80017bc:	0800b1a8 	.word	0x0800b1a8
 80017c0:	0800b1b4 	.word	0x0800b1b4
 80017c4:	0800b1c4 	.word	0x0800b1c4
 80017c8:	0800b1d0 	.word	0x0800b1d0
 80017cc:	0800b1dc 	.word	0x0800b1dc
 80017d0:	0800b1e8 	.word	0x0800b1e8
 80017d4:	0800b1f4 	.word	0x0800b1f4
 80017d8:	0800b228 	.word	0x0800b228
 80017dc:	0800b25c 	.word	0x0800b25c
 80017e0:	0800b28c 	.word	0x0800b28c

080017e4 <LoRaGetITFlag>:
  vSpi1Write(RegIrqFlags, RX_DONE_Msk | PAYLOAD_CRC_ERROR_Msk);
  // LORA_GET_REGISTER(RegIrqFlags);
}

uint8_t LoRaGetITFlag(uint8_t irqFlag)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if (irqFlag < 0 || irqFlag > 7)
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b07      	cmp	r3, #7
 80017f2:	d901      	bls.n	80017f8 <LoRaGetITFlag+0x14>
    return -1;
 80017f4:	23ff      	movs	r3, #255	; 0xff
 80017f6:	e064      	b.n	80018c2 <LoRaGetITFlag+0xde>

  switch (irqFlag)
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	2b07      	cmp	r3, #7
 80017fc:	d860      	bhi.n	80018c0 <LoRaGetITFlag+0xdc>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <LoRaGetITFlag+0x20>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001825 	.word	0x08001825
 8001808:	08001835 	.word	0x08001835
 800180c:	08001849 	.word	0x08001849
 8001810:	0800185d 	.word	0x0800185d
 8001814:	08001871 	.word	0x08001871
 8001818:	08001885 	.word	0x08001885
 800181c:	08001899 	.word	0x08001899
 8001820:	080018ad 	.word	0x080018ad
  {
  case CAD_DETECTED_MskPos:
    return (ucSpi1Read(RegIrqFlags) & CAD_DETECTED_Msk) >> CAD_DETECTED_MskPos;
 8001824:	2012      	movs	r0, #18
 8001826:	f7ff fa6b 	bl	8000d00 <ucSpi1Read>
 800182a:	4603      	mov	r3, r0
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	e046      	b.n	80018c2 <LoRaGetITFlag+0xde>
  case FHSS_CHANGE_CHANNEL_MskPos:
    return (ucSpi1Read(RegIrqFlags) & FHSS_CHANGE_CHANNEL_Msk) >> FHSS_CHANGE_CHANNEL_MskPos;
 8001834:	2012      	movs	r0, #18
 8001836:	f7ff fa63 	bl	8000d00 <ucSpi1Read>
 800183a:	4603      	mov	r3, r0
 800183c:	105b      	asrs	r3, r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e03c      	b.n	80018c2 <LoRaGetITFlag+0xde>
  case CAD_DONE_MskPos:
    return (ucSpi1Read(RegIrqFlags) & CAD_DONE_Msk) >> CAD_DONE_MskPos;
 8001848:	2012      	movs	r0, #18
 800184a:	f7ff fa59 	bl	8000d00 <ucSpi1Read>
 800184e:	4603      	mov	r3, r0
 8001850:	109b      	asrs	r3, r3, #2
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	e032      	b.n	80018c2 <LoRaGetITFlag+0xde>
  case TX_DONE_MskPos:
    return (ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos;
 800185c:	2012      	movs	r0, #18
 800185e:	f7ff fa4f 	bl	8000d00 <ucSpi1Read>
 8001862:	4603      	mov	r3, r0
 8001864:	10db      	asrs	r3, r3, #3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	e028      	b.n	80018c2 <LoRaGetITFlag+0xde>
  case VALID_HEADER_MskPos:
    return (ucSpi1Read(RegIrqFlags) & VALID_HEADER_Msk) >> VALID_HEADER_MskPos;
 8001870:	2012      	movs	r0, #18
 8001872:	f7ff fa45 	bl	8000d00 <ucSpi1Read>
 8001876:	4603      	mov	r3, r0
 8001878:	111b      	asrs	r3, r3, #4
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	e01e      	b.n	80018c2 <LoRaGetITFlag+0xde>
  case PAYLOAD_CRC_ERROR_MskPos:
    return (ucSpi1Read(RegIrqFlags) & PAYLOAD_CRC_ERROR_Msk) >> PAYLOAD_CRC_ERROR_MskPos;
 8001884:	2012      	movs	r0, #18
 8001886:	f7ff fa3b 	bl	8000d00 <ucSpi1Read>
 800188a:	4603      	mov	r3, r0
 800188c:	115b      	asrs	r3, r3, #5
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	b2db      	uxtb	r3, r3
 8001896:	e014      	b.n	80018c2 <LoRaGetITFlag+0xde>
  case RX_DONE_MskPos:
    return (ucSpi1Read(RegIrqFlags) & RX_DONE_Msk) >> RX_DONE_MskPos;
 8001898:	2012      	movs	r0, #18
 800189a:	f7ff fa31 	bl	8000d00 <ucSpi1Read>
 800189e:	4603      	mov	r3, r0
 80018a0:	119b      	asrs	r3, r3, #6
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	e00a      	b.n	80018c2 <LoRaGetITFlag+0xde>
  case RX_TIMEOUT_MskPos:
    return (ucSpi1Read(RegIrqFlags) & RX_TIMEOUT_Msk) >> RX_TIMEOUT_MskPos;
 80018ac:	2012      	movs	r0, #18
 80018ae:	f7ff fa27 	bl	8000d00 <ucSpi1Read>
 80018b2:	4603      	mov	r3, r0
 80018b4:	11db      	asrs	r3, r3, #7
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	e000      	b.n	80018c2 <LoRaGetITFlag+0xde>
  }
  return -1;
 80018c0:	23ff      	movs	r3, #255	; 0xff
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop

080018cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d0:	f000 fbe6 	bl	80020a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d4:	f000 f811 	bl	80018fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d8:	f7ff f8f6 	bl	8000ac8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80018dc:	f7fe fc38 	bl	8000150 <MX_ADC1_Init>
  MX_SPI1_Init();
 80018e0:	f000 f950 	bl	8001b84 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80018e4:	f000 fb3e 	bl	8001f64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  vLoraInit();
 80018e8:	f7ff fd4a 	bl	8001380 <vLoraInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80018ec:	f004 f8f6 	bl	8005adc <osKernelInitialize>
  MX_FREERTOS_Init();
 80018f0:	f7fe fcbe 	bl	8000270 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80018f4:	f004 f924 	bl	8005b40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <main+0x2c>

080018fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b094      	sub	sp, #80	; 0x50
 80018fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001900:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001904:	2228      	movs	r2, #40	; 0x28
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f007 fec7 	bl	800969c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800192a:	2309      	movs	r3, #9
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800192e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001938:	2301      	movs	r3, #1
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800193c:	2301      	movs	r3, #1
 800193e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001940:	2302      	movs	r3, #2
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001948:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800194a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800194e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001954:	4618      	mov	r0, r3
 8001956:	f001 fd91 	bl	800347c <HAL_RCC_OscConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001960:	f000 f83a 	bl	80019d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001964:	230f      	movs	r3, #15
 8001966:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001968:	2302      	movs	r3, #2
 800196a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2102      	movs	r1, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f002 f8ec 	bl	8003b5c <HAL_RCC_ClockConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0x94>
  {
    Error_Handler();
 800198a:	f000 f825 	bl	80019d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800198e:	2302      	movs	r3, #2
 8001990:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001992:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001996:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fb60 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80019a6:	f000 f817 	bl	80019d8 <Error_Handler>
  }
}
 80019aa:	bf00      	nop
 80019ac:	3750      	adds	r7, #80	; 0x50
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019c6:	f000 fb81 	bl	80020cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40000800 	.word	0x40000800

080019d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
}
 80019de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <Error_Handler+0x8>

080019e2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
	...

080019f8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <RetargetInit+0x28>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <RetargetInit+0x2c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6898      	ldr	r0, [r3, #8]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2202      	movs	r2, #2
 8001a10:	2100      	movs	r1, #0
 8001a12:	f007 fec1 	bl	8009798 <setvbuf>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20003a10 	.word	0x20003a10
 8001a24:	20000018 	.word	0x20000018

08001a28 <_isatty>:

int _isatty(int fd) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db04      	blt.n	8001a40 <_isatty+0x18>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	dc01      	bgt.n	8001a40 <_isatty+0x18>
    return 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e005      	b.n	8001a4c <_isatty+0x24>

  errno = EBADF;
 8001a40:	f007 fdf4 	bl	800962c <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2209      	movs	r2, #9
 8001a48:	601a      	str	r2, [r3, #0]
  return 0;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_write>:

int _write(int fd, char* ptr, int len) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d002      	beq.n	8001a6c <_write+0x18>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d111      	bne.n	8001a90 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <_write+0x54>)
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	f003 fde5 	bl	8005648 <HAL_UART_Transmit>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <_write+0x38>
      return len;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	e008      	b.n	8001a9e <_write+0x4a>
    else
      return EIO;
 8001a8c:	2305      	movs	r3, #5
 8001a8e:	e006      	b.n	8001a9e <_write+0x4a>
  }
  errno = EBADF;
 8001a90:	f007 fdcc 	bl	800962c <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2209      	movs	r2, #9
 8001a98:	601a      	str	r2, [r3, #0]
  return -1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20003a10 	.word	0x20003a10

08001aac <_close>:

int _close(int fd) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db04      	blt.n	8001ac4 <_close+0x18>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	dc01      	bgt.n	8001ac4 <_close+0x18>
    return 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e006      	b.n	8001ad2 <_close+0x26>

  errno = EBADF;
 8001ac4:	f007 fdb2 	bl	800962c <__errno>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2209      	movs	r2, #9
 8001acc:	601a      	str	r2, [r3, #0]
  return -1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001ae6:	f007 fda1 	bl	800962c <__errno>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2209      	movs	r2, #9
 8001aee:	601a      	str	r2, [r3, #0]
  return -1;
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_read>:

int _read(int fd, char* ptr, int len) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d110      	bne.n	8001b30 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <_read+0x4c>)
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	2201      	movs	r2, #1
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	f003 fe27 	bl	800576c <HAL_UART_Receive>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <_read+0x30>
      return 1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e008      	b.n	8001b3e <_read+0x42>
    else
      return EIO;
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	e006      	b.n	8001b3e <_read+0x42>
  }
  errno = EBADF;
 8001b30:	f007 fd7c 	bl	800962c <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2209      	movs	r2, #9
 8001b38:	601a      	str	r2, [r3, #0]
  return -1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20003a10 	.word	0x20003a10

08001b4c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db08      	blt.n	8001b6e <_fstat+0x22>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	dc05      	bgt.n	8001b6e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b68:	605a      	str	r2, [r3, #4]
    return 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e005      	b.n	8001b7a <_fstat+0x2e>
  }

  errno = EBADF;
 8001b6e:	f007 fd5d 	bl	800962c <__errno>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2209      	movs	r2, #9
 8001b76:	601a      	str	r2, [r3, #0]
  return 0;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001b8a:	4a18      	ldr	r2, [pc, #96]	; (8001bec <MX_SPI1_Init+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001bd0:	220a      	movs	r2, #10
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <MX_SPI1_Init+0x64>)
 8001bd6:	f002 fb4d 	bl	8004274 <HAL_SPI_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001be0:	f7ff fefa 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20003a14 	.word	0x20003a14
 8001bec:	40013000 	.word	0x40013000

08001bf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d12f      	bne.n	8001c70 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_SPI_MspInit+0x8c>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_SPI_MspInit+0x8c>)
 8001c16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_SPI_MspInit+0x8c>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_SPI_MspInit+0x8c>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_SPI_MspInit+0x8c>)
 8001c2e:	f043 0304 	orr.w	r3, r3, #4
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_SPI_MspInit+0x8c>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c40:	23a0      	movs	r3, #160	; 0xa0
 8001c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	4619      	mov	r1, r3
 8001c52:	480b      	ldr	r0, [pc, #44]	; (8001c80 <HAL_SPI_MspInit+0x90>)
 8001c54:	f001 f930 	bl	8002eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c58:	2340      	movs	r3, #64	; 0x40
 8001c5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	f107 0310 	add.w	r3, r7, #16
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <HAL_SPI_MspInit+0x90>)
 8001c6c:	f001 f924 	bl	8002eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c70:	bf00      	nop
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40013000 	.word	0x40013000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40010800 	.word	0x40010800

08001c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_MspInit+0x68>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_MspInit+0x68>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6193      	str	r3, [r2, #24]
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_MspInit+0x68>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_MspInit+0x68>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a11      	ldr	r2, [pc, #68]	; (8001cec <HAL_MspInit+0x68>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_MspInit+0x68>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	210f      	movs	r1, #15
 8001cbe:	f06f 0001 	mvn.w	r0, #1
 8001cc2:	f001 f8b5 	bl	8002e30 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_MspInit+0x6c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_MspInit+0x6c>)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000

08001cf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	201e      	movs	r0, #30
 8001d0a:	f001 f891 	bl	8002e30 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d0e:	201e      	movs	r0, #30
 8001d10:	f001 f8ba 	bl	8002e88 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_InitTick+0x9c>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_InitTick+0x9c>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	61d3      	str	r3, [r2, #28]
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_InitTick+0x9c>)
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d2c:	f107 0210 	add.w	r2, r7, #16
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 f932 	bl	8003fa0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d3c:	f002 f908 	bl	8003f50 <HAL_RCC_GetPCLK1Freq>
 8001d40:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <HAL_InitTick+0xa0>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0c9b      	lsrs	r3, r3, #18
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_InitTick+0xa4>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_InitTick+0xa8>)
 8001d54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_InitTick+0xa4>)
 8001d58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d5c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <HAL_InitTick+0xa4>)
 8001d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d62:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_InitTick+0xa4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_InitTick+0xa4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001d70:	4809      	ldr	r0, [pc, #36]	; (8001d98 <HAL_InitTick+0xa4>)
 8001d72:	f003 f901 	bl	8004f78 <HAL_TIM_Base_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d104      	bne.n	8001d86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001d7c:	4806      	ldr	r0, [pc, #24]	; (8001d98 <HAL_InitTick+0xa4>)
 8001d7e:	f003 f9af 	bl	80050e0 <HAL_TIM_Base_Start_IT>
 8001d82:	4603      	mov	r3, r0
 8001d84:	e000      	b.n	8001d88 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3730      	adds	r7, #48	; 0x30
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	431bde83 	.word	0x431bde83
 8001d98:	20003a6c 	.word	0x20003a6c
 8001d9c:	40000800 	.word	0x40000800

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <NMI_Handler+0x4>

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler+0x4>

08001db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001dce:	2008      	movs	r0, #8
 8001dd0:	f001 fb3c 	bl	800344c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <ADC1_2_IRQHandler+0x10>)
 8001dde:	f000 fc07 	bl	80025f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200039c8 	.word	0x200039c8

08001dec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <TIM4_IRQHandler+0x10>)
 8001df2:	f003 f9e1 	bl	80051b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20003a6c 	.word	0x20003a6c

08001e00 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af04      	add	r7, sp, #16
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == INTERRUPT_LORA_Pin)
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d119      	bne.n	8001e44 <HAL_GPIO_EXTI_Callback+0x44>
  {
    osStatus_t err = osSemaphoreRelease(rxDoneSemaphoreHandle);
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f004 f93b 	bl	8006090 <osSemaphoreRelease>
 8001e1a:	60f8      	str	r0, [r7, #12]
    if (!err) {
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d110      	bne.n	8001e44 <HAL_GPIO_EXTI_Callback+0x44>
      printf("\r\n");
 8001e22:	480b      	ldr	r0, [pc, #44]	; (8001e50 <HAL_GPIO_EXTI_Callback+0x50>)
 8001e24:	f007 fcb0 	bl	8009788 <puts>
      STM_LOGD("EXTI_ISR", "release rxDoneSemaphore ok");
 8001e28:	f000 f962 	bl	80020f0 <HAL_GetTick>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	22de      	movs	r2, #222	; 0xde
 8001e30:	9202      	str	r2, [sp, #8]
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_GPIO_EXTI_Callback+0x54>)
 8001e34:	9201      	str	r2, [sp, #4]
 8001e36:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <HAL_GPIO_EXTI_Callback+0x58>)
 8001e38:	9200      	str	r2, [sp, #0]
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001e3c:	4906      	ldr	r1, [pc, #24]	; (8001e58 <HAL_GPIO_EXTI_Callback+0x58>)
 8001e3e:	2004      	movs	r0, #4
 8001e40:	f000 f83e 	bl	8001ec0 <stm_log_write>
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200039f8 	.word	0x200039f8
 8001e50:	0800b388 	.word	0x0800b388
 8001e54:	0800b75c 	.word	0x0800b75c
 8001e58:	0800b3cc 	.word	0x0800b3cc
 8001e5c:	0800b38c 	.word	0x0800b38c

08001e60 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af04      	add	r7, sp, #16
 8001e66:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == hadc1.Instance)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_ADC_ConvCpltCallback+0x4c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d117      	bne.n	8001ea4 <HAL_ADC_ConvCpltCallback+0x44>
  {
    adcLightSensor = HAL_ADC_GetValue(hadc);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fb9b 	bl	80025b0 <HAL_ADC_GetValue>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x50>)
 8001e7e:	6013      	str	r3, [r2, #0]
    STM_LOGI("ADC_ISR", "lightSensor: %d", adcLightSensor);
 8001e80:	f000 f936 	bl	80020f0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x50>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	9303      	str	r3, [sp, #12]
 8001e8c:	23e8      	movs	r3, #232	; 0xe8
 8001e8e:	9302      	str	r3, [sp, #8]
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_ADC_ConvCpltCallback+0x54>)
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_ADC_ConvCpltCallback+0x58>)
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <HAL_ADC_ConvCpltCallback+0x5c>)
 8001e9c:	4906      	ldr	r1, [pc, #24]	; (8001eb8 <HAL_ADC_ConvCpltCallback+0x58>)
 8001e9e:	2003      	movs	r0, #3
 8001ea0:	f000 f80e 	bl	8001ec0 <stm_log_write>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200039c8 	.word	0x200039c8
 8001eb0:	20003ab4 	.word	0x20003ab4
 8001eb4:	0800b774 	.word	0x0800b774
 8001eb8:	0800b40c 	.word	0x0800b40c
 8001ebc:	0800b3d8 	.word	0x0800b3d8

08001ec0 <stm_log_write>:
#include <stdarg.h>

void stm_log_write(stm_log_level_t level,
                   const char *tag,
                   const char *format, ...)
{
 8001ec0:	b40c      	push	{r2, r3}
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	6039      	str	r1, [r7, #0]
 8001ecc:	71fb      	strb	r3, [r7, #7]
    va_list arg;
    va_start(arg, format);
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	60fb      	str	r3, [r7, #12]
    vprintf(format, arg);
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	69b8      	ldr	r0, [r7, #24]
 8001ed8:	f007 fd24 	bl	8009924 <viprintf>
    va_end(arg);
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ee6:	b002      	add	sp, #8
 8001ee8:	4770      	bx	lr
	...

08001eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef4:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <_sbrk+0x5c>)
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <_sbrk+0x60>)
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <_sbrk+0x64>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <_sbrk+0x68>)
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d207      	bcs.n	8001f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f1c:	f007 fb86 	bl	800962c <__errno>
 8001f20:	4603      	mov	r3, r0
 8001f22:	220c      	movs	r2, #12
 8001f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	e009      	b.n	8001f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <_sbrk+0x64>)
 8001f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20005000 	.word	0x20005000
 8001f4c:	00000400 	.word	0x00000400
 8001f50:	200000a4 	.word	0x200000a4
 8001f54:	20003b50 	.word	0x20003b50

08001f58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <MX_USART1_UART_Init+0x50>)
 8001f6a:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <MX_USART1_UART_Init+0x54>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_USART1_UART_Init+0x50>)
 8001f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_USART1_UART_Init+0x50>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <MX_USART1_UART_Init+0x50>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_USART1_UART_Init+0x50>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <MX_USART1_UART_Init+0x50>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_USART1_UART_Init+0x50>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <MX_USART1_UART_Init+0x50>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f9a:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <MX_USART1_UART_Init+0x50>)
 8001f9c:	f003 faac 	bl	80054f8 <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fa6:	f7ff fd17 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  RetargetInit(&huart1);
 8001faa:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <MX_USART1_UART_Init+0x50>)
 8001fac:	f7ff fd24 	bl	80019f8 <RetargetInit>
  /* USER CODE END USART1_Init 2 */

}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20003ab8 	.word	0x20003ab8
 8001fb8:	40013800 	.word	0x40013800

08001fbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_UART_MspInit+0x8c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d131      	bne.n	8002040 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_UART_MspInit+0x90>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_UART_MspInit+0x90>)
 8001fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_UART_MspInit+0x90>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_UART_MspInit+0x90>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <HAL_UART_MspInit+0x90>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_UART_MspInit+0x90>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800200c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002010:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	4619      	mov	r1, r3
 8002020:	480b      	ldr	r0, [pc, #44]	; (8002050 <HAL_UART_MspInit+0x94>)
 8002022:	f000 ff49 	bl	8002eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	4619      	mov	r1, r3
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <HAL_UART_MspInit+0x94>)
 800203c:	f000 ff3c 	bl	8002eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002040:	bf00      	nop
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40013800 	.word	0x40013800
 800204c:	40021000 	.word	0x40021000
 8002050:	40010800 	.word	0x40010800

08002054 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002054:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002056:	e003      	b.n	8002060 <LoopCopyDataInit>

08002058 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800205a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800205c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800205e:	3104      	adds	r1, #4

08002060 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002060:	480a      	ldr	r0, [pc, #40]	; (800208c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002064:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002066:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002068:	d3f6      	bcc.n	8002058 <CopyDataInit>
  ldr r2, =_sbss
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800206c:	e002      	b.n	8002074 <LoopFillZerobss>

0800206e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002070:	f842 3b04 	str.w	r3, [r2], #4

08002074 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002076:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002078:	d3f9      	bcc.n	800206e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800207a:	f7ff ff6d 	bl	8001f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800207e:	f007 fadb 	bl	8009638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002082:	f7ff fc23 	bl	80018cc <main>
  bx lr
 8002086:	4770      	bx	lr
  ldr r3, =_sidata
 8002088:	0800b848 	.word	0x0800b848
  ldr r0, =_sdata
 800208c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002090:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8002094:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8002098:	20003b4c 	.word	0x20003b4c

0800209c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800209c:	e7fe      	b.n	800209c <CAN1_RX1_IRQHandler>
	...

080020a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_Init+0x28>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_Init+0x28>)
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b0:	2003      	movs	r0, #3
 80020b2:	f000 fe9d 	bl	8002df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff fe1c 	bl	8001cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020bc:	f7ff fde2 	bl	8001c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000

080020cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_IncTick+0x1c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_IncTick+0x20>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a03      	ldr	r2, [pc, #12]	; (80020ec <HAL_IncTick+0x20>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	20000010 	.word	0x20000010
 80020ec:	20003af8 	.word	0x20003af8

080020f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b02      	ldr	r3, [pc, #8]	; (8002100 <HAL_GetTick+0x10>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20003af8 	.word	0x20003af8

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff fff0 	bl	80020f0 <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_Delay+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffe0 	bl	80020f0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000010 	.word	0x20000010

0800214c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e153      	b.n	8002416 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a9f      	ldr	r2, [pc, #636]	; (80023f0 <HAL_ADC_Init+0x2a4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d009      	beq.n	800218c <HAL_ADC_Init+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a9d      	ldr	r2, [pc, #628]	; (80023f4 <HAL_ADC_Init+0x2a8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d004      	beq.n	800218c <HAL_ADC_Init+0x40>
 8002182:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002186:	489c      	ldr	r0, [pc, #624]	; (80023f8 <HAL_ADC_Init+0x2ac>)
 8002188:	f7ff fc2b 	bl	80019e2 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <HAL_ADC_Init+0x5c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800219c:	d004      	beq.n	80021a8 <HAL_ADC_Init+0x5c>
 800219e:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80021a2:	4895      	ldr	r0, [pc, #596]	; (80023f8 <HAL_ADC_Init+0x2ac>)
 80021a4:	f7ff fc1d 	bl	80019e2 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d009      	beq.n	80021c4 <HAL_ADC_Init+0x78>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b8:	d004      	beq.n	80021c4 <HAL_ADC_Init+0x78>
 80021ba:	f240 11b5 	movw	r1, #437	; 0x1b5
 80021be:	488e      	ldr	r0, [pc, #568]	; (80023f8 <HAL_ADC_Init+0x2ac>)
 80021c0:	f7ff fc0f 	bl	80019e2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7b1b      	ldrb	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_ADC_Init+0x92>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7b1b      	ldrb	r3, [r3, #12]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d004      	beq.n	80021de <HAL_ADC_Init+0x92>
 80021d4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80021d8:	4887      	ldr	r0, [pc, #540]	; (80023f8 <HAL_ADC_Init+0x2ac>)
 80021da:	f7ff fc02 	bl	80019e2 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d022      	beq.n	800222c <HAL_ADC_Init+0xe0>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021ee:	d01d      	beq.n	800222c <HAL_ADC_Init+0xe0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80021f8:	d018      	beq.n	800222c <HAL_ADC_Init+0xe0>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002202:	d013      	beq.n	800222c <HAL_ADC_Init+0xe0>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800220c:	d00e      	beq.n	800222c <HAL_ADC_Init+0xe0>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002216:	d009      	beq.n	800222c <HAL_ADC_Init+0xe0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002220:	d004      	beq.n	800222c <HAL_ADC_Init+0xe0>
 8002222:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002226:	4874      	ldr	r0, [pc, #464]	; (80023f8 <HAL_ADC_Init+0x2ac>)
 8002228:	f7ff fbdb 	bl	80019e2 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d02a      	beq.n	800228a <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_ADC_Init+0xf8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b10      	cmp	r3, #16
 8002242:	d904      	bls.n	800224e <HAL_ADC_Init+0x102>
 8002244:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002248:	486b      	ldr	r0, [pc, #428]	; (80023f8 <HAL_ADC_Init+0x2ac>)
 800224a:	f7ff fbca 	bl	80019e2 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7d1b      	ldrb	r3, [r3, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_ADC_Init+0x11c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7d1b      	ldrb	r3, [r3, #20]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d004      	beq.n	8002268 <HAL_ADC_Init+0x11c>
 800225e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002262:	4865      	ldr	r0, [pc, #404]	; (80023f8 <HAL_ADC_Init+0x2ac>)
 8002264:	f7ff fbbd 	bl	80019e2 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7d1b      	ldrb	r3, [r3, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00c      	beq.n	800228a <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_ADC_Init+0x134>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d904      	bls.n	800228a <HAL_ADC_Init+0x13e>
 8002280:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002284:	485c      	ldr	r0, [pc, #368]	; (80023f8 <HAL_ADC_Init+0x2ac>)
 8002286:	f7ff fbac 	bl	80019e2 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7fd ff93 	bl	80001cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fcb4 	bl	8002c14 <ADC_ConversionStop_Disable>
 80022ac:	4603      	mov	r3, r0
 80022ae:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 80a3 	bne.w	8002404 <HAL_ADC_Init+0x2b8>
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 809f 	bne.w	8002404 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022ce:	f023 0302 	bic.w	r3, r3, #2
 80022d2:	f043 0202 	orr.w	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022e2:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7b1b      	ldrb	r3, [r3, #12]
 80022e8:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022ea:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fa:	d003      	beq.n	8002304 <HAL_ADC_Init+0x1b8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d102      	bne.n	800230a <HAL_ADC_Init+0x1be>
 8002304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002308:	e000      	b.n	800230c <HAL_ADC_Init+0x1c0>
 800230a:	2300      	movs	r3, #0
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7d1b      	ldrb	r3, [r3, #20]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d119      	bne.n	800234e <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7b1b      	ldrb	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	3b01      	subs	r3, #1
 8002328:	035a      	lsls	r2, r3, #13
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	e00b      	b.n	800234e <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	f043 0220 	orr.w	r2, r3, #32
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	f043 0201 	orr.w	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	430a      	orrs	r2, r1
 8002360:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_ADC_Init+0x2b0>)
 800236a:	4013      	ands	r3, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	430b      	orrs	r3, r1
 8002374:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800237e:	d003      	beq.n	8002388 <HAL_ADC_Init+0x23c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d104      	bne.n	8002392 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	3b01      	subs	r3, #1
 800238e:	051b      	lsls	r3, r3, #20
 8002390:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_ADC_Init+0x2b4>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d10b      	bne.n	80023ce <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	f023 0303 	bic.w	r3, r3, #3
 80023c4:	f043 0201 	orr.w	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023cc:	e022      	b.n	8002414 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	f023 0312 	bic.w	r3, r3, #18
 80023d6:	f043 0210 	orr.w	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023ee:	e011      	b.n	8002414 <HAL_ADC_Init+0x2c8>
 80023f0:	40012400 	.word	0x40012400
 80023f4:	40012800 	.word	0x40012800
 80023f8:	0800b414 	.word	0x0800b414
 80023fc:	ffe1f7fd 	.word	0xffe1f7fd
 8002400:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	f043 0210 	orr.w	r2, r3, #16
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002414:	7dfb      	ldrb	r3, [r7, #23]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop

08002420 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a5c      	ldr	r2, [pc, #368]	; (80025a4 <HAL_ADC_Start_IT+0x184>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_ADC_Start_IT+0x2a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a5b      	ldr	r2, [pc, #364]	; (80025a8 <HAL_ADC_Start_IT+0x188>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d004      	beq.n	800244a <HAL_ADC_Start_IT+0x2a>
 8002440:	f240 516c 	movw	r1, #1388	; 0x56c
 8002444:	4859      	ldr	r0, [pc, #356]	; (80025ac <HAL_ADC_Start_IT+0x18c>)
 8002446:	f7ff facc 	bl	80019e2 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_ADC_Start_IT+0x38>
 8002454:	2302      	movs	r3, #2
 8002456:	e0a0      	b.n	800259a <HAL_ADC_Start_IT+0x17a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fb85 	bl	8002b70 <ADC_Enable>
 8002466:	4603      	mov	r3, r0
 8002468:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 808f 	bne.w	8002590 <HAL_ADC_Start_IT+0x170>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a47      	ldr	r2, [pc, #284]	; (80025a8 <HAL_ADC_Start_IT+0x188>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d105      	bne.n	800249c <HAL_ADC_Start_IT+0x7c>
 8002490:	4b44      	ldr	r3, [pc, #272]	; (80025a4 <HAL_ADC_Start_IT+0x184>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d115      	bne.n	80024c8 <HAL_ADC_Start_IT+0xa8>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d026      	beq.n	8002504 <HAL_ADC_Start_IT+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024c6:	e01d      	b.n	8002504 <HAL_ADC_Start_IT+0xe4>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a32      	ldr	r2, [pc, #200]	; (80025a4 <HAL_ADC_Start_IT+0x184>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d004      	beq.n	80024e8 <HAL_ADC_Start_IT+0xc8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a31      	ldr	r2, [pc, #196]	; (80025a8 <HAL_ADC_Start_IT+0x188>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d10d      	bne.n	8002504 <HAL_ADC_Start_IT+0xe4>
 80024e8:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_ADC_Start_IT+0x184>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_ADC_Start_IT+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <HAL_ADC_Start_IT+0xfe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	f023 0206 	bic.w	r2, r3, #6
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
 800251c:	e002      	b.n	8002524 <HAL_ADC_Start_IT+0x104>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0202 	mvn.w	r2, #2
 8002534:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0220 	orr.w	r2, r2, #32
 8002544:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002550:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002554:	d113      	bne.n	800257e <HAL_ADC_Start_IT+0x15e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800255a:	4a13      	ldr	r2, [pc, #76]	; (80025a8 <HAL_ADC_Start_IT+0x188>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d105      	bne.n	800256c <HAL_ADC_Start_IT+0x14c>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_ADC_Start_IT+0x184>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002568:	2b00      	cmp	r3, #0
 800256a:	d108      	bne.n	800257e <HAL_ADC_Start_IT+0x15e>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	e00c      	b.n	8002598 <HAL_ADC_Start_IT+0x178>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	e003      	b.n	8002598 <HAL_ADC_Start_IT+0x178>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40012400 	.word	0x40012400
 80025a8:	40012800 	.word	0x40012800
 80025ac:	0800b414 	.word	0x0800b414

080025b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <HAL_ADC_GetValue+0x34>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d009      	beq.n	80025d6 <HAL_ADC_GetValue+0x26>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <HAL_ADC_GetValue+0x38>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d004      	beq.n	80025d6 <HAL_ADC_GetValue+0x26>
 80025cc:	f240 61e3 	movw	r1, #1763	; 0x6e3
 80025d0:	4806      	ldr	r0, [pc, #24]	; (80025ec <HAL_ADC_GetValue+0x3c>)
 80025d2:	f7ff fa06 	bl	80019e2 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40012400 	.word	0x40012400
 80025e8:	40012800 	.word	0x40012800
 80025ec:	0800b414 	.word	0x0800b414

080025f0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a72      	ldr	r2, [pc, #456]	; (80027c8 <HAL_ADC_IRQHandler+0x1d8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_ADC_IRQHandler+0x26>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a71      	ldr	r2, [pc, #452]	; (80027cc <HAL_ADC_IRQHandler+0x1dc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_ADC_IRQHandler+0x26>
 800260c:	f240 61f4 	movw	r1, #1780	; 0x6f4
 8002610:	486f      	ldr	r0, [pc, #444]	; (80027d0 <HAL_ADC_IRQHandler+0x1e0>)
 8002612:	f7ff f9e6 	bl	80019e2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7b1b      	ldrb	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_ADC_IRQHandler+0x40>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7b1b      	ldrb	r3, [r3, #12]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d004      	beq.n	8002630 <HAL_ADC_IRQHandler+0x40>
 8002626:	f240 61f5 	movw	r1, #1781	; 0x6f5
 800262a:	4869      	ldr	r0, [pc, #420]	; (80027d0 <HAL_ADC_IRQHandler+0x1e0>)
 800262c:	f7ff f9d9 	bl	80019e2 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_ADC_IRQHandler+0x50>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2b10      	cmp	r3, #16
 800263e:	d904      	bls.n	800264a <HAL_ADC_IRQHandler+0x5a>
 8002640:	f240 61f6 	movw	r1, #1782	; 0x6f6
 8002644:	4862      	ldr	r0, [pc, #392]	; (80027d0 <HAL_ADC_IRQHandler+0x1e0>)
 8002646:	f7ff f9cc 	bl	80019e2 <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b20      	cmp	r3, #32
 8002656:	d140      	bne.n	80026da <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b02      	cmp	r3, #2
 8002664:	d139      	bne.n	80026da <HAL_ADC_IRQHandler+0xea>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d105      	bne.n	800267e <HAL_ADC_IRQHandler+0x8e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002688:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800268c:	d11d      	bne.n	80026ca <HAL_ADC_IRQHandler+0xda>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002692:	2b00      	cmp	r3, #0
 8002694:	d119      	bne.n	80026ca <HAL_ADC_IRQHandler+0xda>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0220 	bic.w	r2, r2, #32
 80026a4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <HAL_ADC_IRQHandler+0xda>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fbc8 	bl	8001e60 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0212 	mvn.w	r2, #18
 80026d8:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e4:	2b80      	cmp	r3, #128	; 0x80
 80026e6:	d14f      	bne.n	8002788 <HAL_ADC_IRQHandler+0x198>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d148      	bne.n	8002788 <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d105      	bne.n	800270e <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002718:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800271c:	d012      	beq.n	8002744 <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002728:	2b00      	cmp	r3, #0
 800272a:	d125      	bne.n	8002778 <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002736:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800273a:	d11d      	bne.n	8002778 <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002740:	2b00      	cmp	r3, #0
 8002742:	d119      	bne.n	8002778 <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002752:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fa85 	bl	8002c88 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f06f 020c 	mvn.w	r2, #12
 8002786:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002792:	2b40      	cmp	r3, #64	; 0x40
 8002794:	d114      	bne.n	80027c0 <HAL_ADC_IRQHandler+0x1d0>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d10d      	bne.n	80027c0 <HAL_ADC_IRQHandler+0x1d0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f80f 	bl	80027d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f06f 0201 	mvn.w	r2, #1
 80027be:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40012400 	.word	0x40012400
 80027cc:	40012800 	.word	0x40012800
 80027d0:	0800b414 	.word	0x0800b414

080027d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
	...

080027e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a88      	ldr	r2, [pc, #544]	; (8002a20 <HAL_ADC_ConfigChannel+0x238>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d009      	beq.n	8002818 <HAL_ADC_ConfigChannel+0x30>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a86      	ldr	r2, [pc, #536]	; (8002a24 <HAL_ADC_ConfigChannel+0x23c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d004      	beq.n	8002818 <HAL_ADC_ConfigChannel+0x30>
 800280e:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8002812:	4885      	ldr	r0, [pc, #532]	; (8002a28 <HAL_ADC_ConfigChannel+0x240>)
 8002814:	f7ff f8e5 	bl	80019e2 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d048      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d044      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d040      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d03c      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d038      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b05      	cmp	r3, #5
 8002846:	d034      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b06      	cmp	r3, #6
 800284e:	d030      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b07      	cmp	r3, #7
 8002856:	d02c      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d028      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b09      	cmp	r3, #9
 8002866:	d024      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b0a      	cmp	r3, #10
 800286e:	d020      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b0b      	cmp	r3, #11
 8002876:	d01c      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b0c      	cmp	r3, #12
 800287e:	d018      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b0d      	cmp	r3, #13
 8002886:	d014      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b0e      	cmp	r3, #14
 800288e:	d010      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b0f      	cmp	r3, #15
 8002896:	d00c      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b10      	cmp	r3, #16
 800289e:	d008      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b11      	cmp	r3, #17
 80028a6:	d004      	beq.n	80028b2 <HAL_ADC_ConfigChannel+0xca>
 80028a8:	f240 71d2 	movw	r1, #2002	; 0x7d2
 80028ac:	485e      	ldr	r0, [pc, #376]	; (8002a28 <HAL_ADC_ConfigChannel+0x240>)
 80028ae:	f7ff f898 	bl	80019e2 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d040      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d03c      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d038      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d034      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d030      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d02c      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b07      	cmp	r3, #7
 80028e8:	d028      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d024      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b09      	cmp	r3, #9
 80028f8:	d020      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b0a      	cmp	r3, #10
 8002900:	d01c      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b0b      	cmp	r3, #11
 8002908:	d018      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b0c      	cmp	r3, #12
 8002910:	d014      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b0d      	cmp	r3, #13
 8002918:	d010      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b0e      	cmp	r3, #14
 8002920:	d00c      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b0f      	cmp	r3, #15
 8002928:	d008      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b10      	cmp	r3, #16
 8002930:	d004      	beq.n	800293c <HAL_ADC_ConfigChannel+0x154>
 8002932:	f240 71d3 	movw	r1, #2003	; 0x7d3
 8002936:	483c      	ldr	r0, [pc, #240]	; (8002a28 <HAL_ADC_ConfigChannel+0x240>)
 8002938:	f7ff f853 	bl	80019e2 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x19e>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d01c      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x19e>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d018      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x19e>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d014      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x19e>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b04      	cmp	r3, #4
 8002962:	d010      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x19e>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b05      	cmp	r3, #5
 800296a:	d00c      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x19e>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b06      	cmp	r3, #6
 8002972:	d008      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x19e>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b07      	cmp	r3, #7
 800297a:	d004      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x19e>
 800297c:	f240 71d4 	movw	r1, #2004	; 0x7d4
 8002980:	4829      	ldr	r0, [pc, #164]	; (8002a28 <HAL_ADC_ConfigChannel+0x240>)
 8002982:	f7ff f82e 	bl	80019e2 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x1ac>
 8002990:	2302      	movs	r3, #2
 8002992:	e0e2      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x372>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b06      	cmp	r3, #6
 80029a2:	d81c      	bhi.n	80029de <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	3b05      	subs	r3, #5
 80029b6:	221f      	movs	r2, #31
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	4019      	ands	r1, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	3b05      	subs	r3, #5
 80029d0:	fa00 f203 	lsl.w	r2, r0, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	635a      	str	r2, [r3, #52]	; 0x34
 80029dc:	e042      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d822      	bhi.n	8002a2c <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	3b23      	subs	r3, #35	; 0x23
 80029f8:	221f      	movs	r2, #31
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	4019      	ands	r1, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b23      	subs	r3, #35	; 0x23
 8002a12:	fa00 f203 	lsl.w	r2, r0, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a1e:	e021      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x27c>
 8002a20:	40012400 	.word	0x40012400
 8002a24:	40012800 	.word	0x40012800
 8002a28:	0800b414 	.word	0x0800b414
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b41      	subs	r3, #65	; 0x41
 8002a3e:	221f      	movs	r2, #31
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	4019      	ands	r1, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	3b41      	subs	r3, #65	; 0x41
 8002a58:	fa00 f203 	lsl.w	r2, r0, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b09      	cmp	r3, #9
 8002a6a:	d91c      	bls.n	8002aa6 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68d9      	ldr	r1, [r3, #12]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b1e      	subs	r3, #30
 8002a7e:	2207      	movs	r2, #7
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	4019      	ands	r1, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6898      	ldr	r0, [r3, #8]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	3b1e      	subs	r3, #30
 8002a98:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	60da      	str	r2, [r3, #12]
 8002aa4:	e019      	b.n	8002ada <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6919      	ldr	r1, [r3, #16]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	4019      	ands	r1, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6898      	ldr	r0, [r3, #8]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d003      	beq.n	8002aea <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ae6:	2b11      	cmp	r3, #17
 8002ae8:	d132      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_ADC_ConfigChannel+0x37c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d125      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d126      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b10:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d11a      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_ADC_ConfigChannel+0x380>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <HAL_ADC_ConfigChannel+0x384>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	0c9a      	lsrs	r2, r3, #18
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b30:	e002      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f9      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x34a>
 8002b3e:	e007      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40012400 	.word	0x40012400
 8002b68:	20000008 	.word	0x20000008
 8002b6c:	431bde83 	.word	0x431bde83

08002b70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d039      	beq.n	8002c02 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0201 	orr.w	r2, r2, #1
 8002b9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <ADC_Enable+0x9c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <ADC_Enable+0xa0>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bac:	e002      	b.n	8002bb4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bba:	f7ff fa99 	bl	80020f0 <HAL_GetTick>
 8002bbe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bc0:	e018      	b.n	8002bf4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bc2:	f7ff fa95 	bl	80020f0 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d911      	bls.n	8002bf4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	f043 0210 	orr.w	r2, r3, #16
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e007      	b.n	8002c04 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d1df      	bne.n	8002bc2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000008 	.word	0x20000008
 8002c10:	431bde83 	.word	0x431bde83

08002c14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d127      	bne.n	8002c7e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c3e:	f7ff fa57 	bl	80020f0 <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c44:	e014      	b.n	8002c70 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c46:	f7ff fa53 	bl	80020f0 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d90d      	bls.n	8002c70 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	f043 0210 	orr.w	r2, r3, #16
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	f043 0201 	orr.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e007      	b.n	8002c80 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d0e3      	beq.n	8002c46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
	...

08002c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	60d3      	str	r3, [r2, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <__NVIC_GetPriorityGrouping+0x18>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0307 	and.w	r3, r3, #7
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db0b      	blt.n	8002d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4906      	ldr	r1, [pc, #24]	; (8002d34 <__NVIC_EnableIRQ+0x34>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2001      	movs	r0, #1
 8002d22:	fa00 f202 	lsl.w	r2, r0, r2
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	e000e100 	.word	0xe000e100

08002d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	6039      	str	r1, [r7, #0]
 8002d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	db0a      	blt.n	8002d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	490c      	ldr	r1, [pc, #48]	; (8002d84 <__NVIC_SetPriority+0x4c>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	0112      	lsls	r2, r2, #4
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d60:	e00a      	b.n	8002d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4908      	ldr	r1, [pc, #32]	; (8002d88 <__NVIC_SetPriority+0x50>)
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	3b04      	subs	r3, #4
 8002d70:	0112      	lsls	r2, r2, #4
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	440b      	add	r3, r1
 8002d76:	761a      	strb	r2, [r3, #24]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	e000e100 	.word	0xe000e100
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b089      	sub	sp, #36	; 0x24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f1c3 0307 	rsb	r3, r3, #7
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	bf28      	it	cs
 8002daa:	2304      	movcs	r3, #4
 8002dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3304      	adds	r3, #4
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d902      	bls.n	8002dbc <NVIC_EncodePriority+0x30>
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3b03      	subs	r3, #3
 8002dba:	e000      	b.n	8002dbe <NVIC_EncodePriority+0x32>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	401a      	ands	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	43d9      	mvns	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	4313      	orrs	r3, r2
         );
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b07      	cmp	r3, #7
 8002dfc:	d00f      	beq.n	8002e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b06      	cmp	r3, #6
 8002e02:	d00c      	beq.n	8002e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d009      	beq.n	8002e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d006      	beq.n	8002e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d003      	beq.n	8002e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e16:	2192      	movs	r1, #146	; 0x92
 8002e18:	4804      	ldr	r0, [pc, #16]	; (8002e2c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002e1a:	f7fe fde2 	bl	80019e2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff3c 	bl	8002c9c <__NVIC_SetPriorityGrouping>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	0800b44c 	.word	0x0800b44c

08002e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0f      	cmp	r3, #15
 8002e46:	d903      	bls.n	8002e50 <HAL_NVIC_SetPriority+0x20>
 8002e48:	21aa      	movs	r1, #170	; 0xaa
 8002e4a:	480e      	ldr	r0, [pc, #56]	; (8002e84 <HAL_NVIC_SetPriority+0x54>)
 8002e4c:	f7fe fdc9 	bl	80019e2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b0f      	cmp	r3, #15
 8002e54:	d903      	bls.n	8002e5e <HAL_NVIC_SetPriority+0x2e>
 8002e56:	21ab      	movs	r1, #171	; 0xab
 8002e58:	480a      	ldr	r0, [pc, #40]	; (8002e84 <HAL_NVIC_SetPriority+0x54>)
 8002e5a:	f7fe fdc2 	bl	80019e2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e5e:	f7ff ff41 	bl	8002ce4 <__NVIC_GetPriorityGrouping>
 8002e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	6978      	ldr	r0, [r7, #20]
 8002e6a:	f7ff ff8f 	bl	8002d8c <NVIC_EncodePriority>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff5e 	bl	8002d38 <__NVIC_SetPriority>
}
 8002e7c:	bf00      	nop
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	0800b44c 	.word	0x0800b44c

08002e88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	da03      	bge.n	8002ea2 <HAL_NVIC_EnableIRQ+0x1a>
 8002e9a:	21be      	movs	r1, #190	; 0xbe
 8002e9c:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <HAL_NVIC_EnableIRQ+0x2c>)
 8002e9e:	f7fe fda0 	bl	80019e2 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ff2a 	bl	8002d00 <__NVIC_EnableIRQ>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	0800b44c 	.word	0x0800b44c

08002eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4aa1      	ldr	r2, [pc, #644]	; (8003154 <HAL_GPIO_Init+0x29c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <HAL_GPIO_Init+0x42>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4aa0      	ldr	r2, [pc, #640]	; (8003158 <HAL_GPIO_Init+0x2a0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00f      	beq.n	8002efa <HAL_GPIO_Init+0x42>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a9f      	ldr	r2, [pc, #636]	; (800315c <HAL_GPIO_Init+0x2a4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <HAL_GPIO_Init+0x42>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a9e      	ldr	r2, [pc, #632]	; (8003160 <HAL_GPIO_Init+0x2a8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <HAL_GPIO_Init+0x42>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a9d      	ldr	r2, [pc, #628]	; (8003164 <HAL_GPIO_Init+0x2ac>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x42>
 8002ef2:	21bd      	movs	r1, #189	; 0xbd
 8002ef4:	489c      	ldr	r0, [pc, #624]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 8002ef6:	f7fe fd74 	bl	80019e2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_GPIO_Init+0x58>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	041b      	lsls	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x60>
 8002f10:	21be      	movs	r1, #190	; 0xbe
 8002f12:	4895      	ldr	r0, [pc, #596]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 8002f14:	f7fe fd65 	bl	80019e2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 821d 	beq.w	800335c <HAL_GPIO_Init+0x4a4>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	f000 8218 	beq.w	800335c <HAL_GPIO_Init+0x4a4>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b11      	cmp	r3, #17
 8002f32:	f000 8213 	beq.w	800335c <HAL_GPIO_Init+0x4a4>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	f000 820e 	beq.w	800335c <HAL_GPIO_Init+0x4a4>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b12      	cmp	r3, #18
 8002f46:	f000 8209 	beq.w	800335c <HAL_GPIO_Init+0x4a4>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4a87      	ldr	r2, [pc, #540]	; (800316c <HAL_GPIO_Init+0x2b4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	f000 8203 	beq.w	800335c <HAL_GPIO_Init+0x4a4>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a85      	ldr	r2, [pc, #532]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	f000 81fd 	beq.w	800335c <HAL_GPIO_Init+0x4a4>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a83      	ldr	r2, [pc, #524]	; (8003174 <HAL_GPIO_Init+0x2bc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	f000 81f7 	beq.w	800335c <HAL_GPIO_Init+0x4a4>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4a81      	ldr	r2, [pc, #516]	; (8003178 <HAL_GPIO_Init+0x2c0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	f000 81f1 	beq.w	800335c <HAL_GPIO_Init+0x4a4>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a7f      	ldr	r2, [pc, #508]	; (800317c <HAL_GPIO_Init+0x2c4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	f000 81eb 	beq.w	800335c <HAL_GPIO_Init+0x4a4>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a7d      	ldr	r2, [pc, #500]	; (8003180 <HAL_GPIO_Init+0x2c8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	f000 81e5 	beq.w	800335c <HAL_GPIO_Init+0x4a4>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	f000 81e0 	beq.w	800335c <HAL_GPIO_Init+0x4a4>
 8002f9c:	21bf      	movs	r1, #191	; 0xbf
 8002f9e:	4872      	ldr	r0, [pc, #456]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 8002fa0:	f7fe fd1f 	bl	80019e2 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa4:	e1da      	b.n	800335c <HAL_GPIO_Init+0x4a4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	f040 81c9 	bne.w	8003356 <HAL_GPIO_Init+0x49e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a63      	ldr	r2, [pc, #396]	; (8003154 <HAL_GPIO_Init+0x29c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d013      	beq.n	8002ff4 <HAL_GPIO_Init+0x13c>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a62      	ldr	r2, [pc, #392]	; (8003158 <HAL_GPIO_Init+0x2a0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00f      	beq.n	8002ff4 <HAL_GPIO_Init+0x13c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a61      	ldr	r2, [pc, #388]	; (800315c <HAL_GPIO_Init+0x2a4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00b      	beq.n	8002ff4 <HAL_GPIO_Init+0x13c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a60      	ldr	r2, [pc, #384]	; (8003160 <HAL_GPIO_Init+0x2a8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d007      	beq.n	8002ff4 <HAL_GPIO_Init+0x13c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a5f      	ldr	r2, [pc, #380]	; (8003164 <HAL_GPIO_Init+0x2ac>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x13c>
 8002fec:	21cd      	movs	r1, #205	; 0xcd
 8002fee:	485e      	ldr	r0, [pc, #376]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 8002ff0:	f7fe fcf7 	bl	80019e2 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a61      	ldr	r2, [pc, #388]	; (8003180 <HAL_GPIO_Init+0x2c8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	f000 80c2 	beq.w	8003184 <HAL_GPIO_Init+0x2cc>
 8003000:	4a5f      	ldr	r2, [pc, #380]	; (8003180 <HAL_GPIO_Init+0x2c8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	f200 80e8 	bhi.w	80031d8 <HAL_GPIO_Init+0x320>
 8003008:	4a5a      	ldr	r2, [pc, #360]	; (8003174 <HAL_GPIO_Init+0x2bc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	f000 80ba 	beq.w	8003184 <HAL_GPIO_Init+0x2cc>
 8003010:	4a58      	ldr	r2, [pc, #352]	; (8003174 <HAL_GPIO_Init+0x2bc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	f200 80e0 	bhi.w	80031d8 <HAL_GPIO_Init+0x320>
 8003018:	4a58      	ldr	r2, [pc, #352]	; (800317c <HAL_GPIO_Init+0x2c4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	f000 80b2 	beq.w	8003184 <HAL_GPIO_Init+0x2cc>
 8003020:	4a56      	ldr	r2, [pc, #344]	; (800317c <HAL_GPIO_Init+0x2c4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	f200 80d8 	bhi.w	80031d8 <HAL_GPIO_Init+0x320>
 8003028:	4a51      	ldr	r2, [pc, #324]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	f000 80aa 	beq.w	8003184 <HAL_GPIO_Init+0x2cc>
 8003030:	4a4f      	ldr	r2, [pc, #316]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	f200 80d0 	bhi.w	80031d8 <HAL_GPIO_Init+0x320>
 8003038:	4a4f      	ldr	r2, [pc, #316]	; (8003178 <HAL_GPIO_Init+0x2c0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	f000 80a2 	beq.w	8003184 <HAL_GPIO_Init+0x2cc>
 8003040:	4a4d      	ldr	r2, [pc, #308]	; (8003178 <HAL_GPIO_Init+0x2c0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	f200 80c8 	bhi.w	80031d8 <HAL_GPIO_Init+0x320>
 8003048:	2b12      	cmp	r3, #18
 800304a:	d82b      	bhi.n	80030a4 <HAL_GPIO_Init+0x1ec>
 800304c:	2b12      	cmp	r3, #18
 800304e:	f200 80c3 	bhi.w	80031d8 <HAL_GPIO_Init+0x320>
 8003052:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <HAL_GPIO_Init+0x1a0>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	08003185 	.word	0x08003185
 800305c:	080030ad 	.word	0x080030ad
 8003060:	080030ff 	.word	0x080030ff
 8003064:	080031d3 	.word	0x080031d3
 8003068:	080031d9 	.word	0x080031d9
 800306c:	080031d9 	.word	0x080031d9
 8003070:	080031d9 	.word	0x080031d9
 8003074:	080031d9 	.word	0x080031d9
 8003078:	080031d9 	.word	0x080031d9
 800307c:	080031d9 	.word	0x080031d9
 8003080:	080031d9 	.word	0x080031d9
 8003084:	080031d9 	.word	0x080031d9
 8003088:	080031d9 	.word	0x080031d9
 800308c:	080031d9 	.word	0x080031d9
 8003090:	080031d9 	.word	0x080031d9
 8003094:	080031d9 	.word	0x080031d9
 8003098:	080031d9 	.word	0x080031d9
 800309c:	080030d5 	.word	0x080030d5
 80030a0:	08003129 	.word	0x08003129
 80030a4:	4a31      	ldr	r2, [pc, #196]	; (800316c <HAL_GPIO_Init+0x2b4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d06c      	beq.n	8003184 <HAL_GPIO_Init+0x2cc>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030aa:	e095      	b.n	80031d8 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d00b      	beq.n	80030cc <HAL_GPIO_Init+0x214>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d007      	beq.n	80030cc <HAL_GPIO_Init+0x214>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x214>
 80030c4:	21d5      	movs	r1, #213	; 0xd5
 80030c6:	4828      	ldr	r0, [pc, #160]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 80030c8:	f7fe fc8b 	bl	80019e2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	623b      	str	r3, [r7, #32]
          break;
 80030d2:	e082      	b.n	80031da <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d00b      	beq.n	80030f4 <HAL_GPIO_Init+0x23c>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d007      	beq.n	80030f4 <HAL_GPIO_Init+0x23c>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x23c>
 80030ec:	21dc      	movs	r1, #220	; 0xdc
 80030ee:	481e      	ldr	r0, [pc, #120]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 80030f0:	f7fe fc77 	bl	80019e2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	3304      	adds	r3, #4
 80030fa:	623b      	str	r3, [r7, #32]
          break;
 80030fc:	e06d      	b.n	80031da <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d00b      	beq.n	800311e <HAL_GPIO_Init+0x266>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d007      	beq.n	800311e <HAL_GPIO_Init+0x266>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x266>
 8003116:	21e3      	movs	r1, #227	; 0xe3
 8003118:	4813      	ldr	r0, [pc, #76]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 800311a:	f7fe fc62 	bl	80019e2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	3308      	adds	r3, #8
 8003124:	623b      	str	r3, [r7, #32]
          break;
 8003126:	e058      	b.n	80031da <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d00b      	beq.n	8003148 <HAL_GPIO_Init+0x290>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d007      	beq.n	8003148 <HAL_GPIO_Init+0x290>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x290>
 8003140:	21ea      	movs	r1, #234	; 0xea
 8003142:	4809      	ldr	r0, [pc, #36]	; (8003168 <HAL_GPIO_Init+0x2b0>)
 8003144:	f7fe fc4d 	bl	80019e2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	330c      	adds	r3, #12
 800314e:	623b      	str	r3, [r7, #32]
          break;
 8003150:	e043      	b.n	80031da <HAL_GPIO_Init+0x322>
 8003152:	bf00      	nop
 8003154:	40010800 	.word	0x40010800
 8003158:	40010c00 	.word	0x40010c00
 800315c:	40011000 	.word	0x40011000
 8003160:	40011400 	.word	0x40011400
 8003164:	40011800 	.word	0x40011800
 8003168:	0800b488 	.word	0x0800b488
 800316c:	10110000 	.word	0x10110000
 8003170:	10210000 	.word	0x10210000
 8003174:	10310000 	.word	0x10310000
 8003178:	10120000 	.word	0x10120000
 800317c:	10220000 	.word	0x10220000
 8003180:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <HAL_GPIO_Init+0x2ec>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d007      	beq.n	80031a4 <HAL_GPIO_Init+0x2ec>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_Init+0x2ec>
 800319c:	21f7      	movs	r1, #247	; 0xf7
 800319e:	4876      	ldr	r0, [pc, #472]	; (8003378 <HAL_GPIO_Init+0x4c0>)
 80031a0:	f7fe fc1f 	bl	80019e2 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <HAL_GPIO_Init+0x2fa>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031ac:	2304      	movs	r3, #4
 80031ae:	623b      	str	r3, [r7, #32]
          break;
 80031b0:	e013      	b.n	80031da <HAL_GPIO_Init+0x322>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_GPIO_Init+0x30e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031ba:	2308      	movs	r3, #8
 80031bc:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	611a      	str	r2, [r3, #16]
          break;
 80031c4:	e009      	b.n	80031da <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031c6:	2308      	movs	r3, #8
 80031c8:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	615a      	str	r2, [r3, #20]
          break;
 80031d0:	e003      	b.n	80031da <HAL_GPIO_Init+0x322>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031d2:	2300      	movs	r3, #0
 80031d4:	623b      	str	r3, [r7, #32]
          break;
 80031d6:	e000      	b.n	80031da <HAL_GPIO_Init+0x322>
          break;
 80031d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2bff      	cmp	r3, #255	; 0xff
 80031de:	d801      	bhi.n	80031e4 <HAL_GPIO_Init+0x32c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	e001      	b.n	80031e8 <HAL_GPIO_Init+0x330>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2bff      	cmp	r3, #255	; 0xff
 80031ee:	d802      	bhi.n	80031f6 <HAL_GPIO_Init+0x33e>
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	e002      	b.n	80031fc <HAL_GPIO_Init+0x344>
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	3b08      	subs	r3, #8
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	210f      	movs	r1, #15
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	401a      	ands	r2, r3
 800320e:	6a39      	ldr	r1, [r7, #32]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	431a      	orrs	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8096 	beq.w	8003356 <HAL_GPIO_Init+0x49e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800322a:	4b54      	ldr	r3, [pc, #336]	; (800337c <HAL_GPIO_Init+0x4c4>)
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	4a53      	ldr	r2, [pc, #332]	; (800337c <HAL_GPIO_Init+0x4c4>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6193      	str	r3, [r2, #24]
 8003236:	4b51      	ldr	r3, [pc, #324]	; (800337c <HAL_GPIO_Init+0x4c4>)
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003242:	4a4f      	ldr	r2, [pc, #316]	; (8003380 <HAL_GPIO_Init+0x4c8>)
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	3302      	adds	r3, #2
 800324a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	220f      	movs	r2, #15
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4013      	ands	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a46      	ldr	r2, [pc, #280]	; (8003384 <HAL_GPIO_Init+0x4cc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_GPIO_Init+0x3de>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a45      	ldr	r2, [pc, #276]	; (8003388 <HAL_GPIO_Init+0x4d0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00d      	beq.n	8003292 <HAL_GPIO_Init+0x3da>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a44      	ldr	r2, [pc, #272]	; (800338c <HAL_GPIO_Init+0x4d4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <HAL_GPIO_Init+0x3d6>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a43      	ldr	r2, [pc, #268]	; (8003390 <HAL_GPIO_Init+0x4d8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d101      	bne.n	800328a <HAL_GPIO_Init+0x3d2>
 8003286:	2303      	movs	r3, #3
 8003288:	e006      	b.n	8003298 <HAL_GPIO_Init+0x3e0>
 800328a:	2304      	movs	r3, #4
 800328c:	e004      	b.n	8003298 <HAL_GPIO_Init+0x3e0>
 800328e:	2302      	movs	r3, #2
 8003290:	e002      	b.n	8003298 <HAL_GPIO_Init+0x3e0>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_GPIO_Init+0x3e0>
 8003296:	2300      	movs	r3, #0
 8003298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329a:	f002 0203 	and.w	r2, r2, #3
 800329e:	0092      	lsls	r2, r2, #2
 80032a0:	4093      	lsls	r3, r2
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032a8:	4935      	ldr	r1, [pc, #212]	; (8003380 <HAL_GPIO_Init+0x4c8>)
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	3302      	adds	r3, #2
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <HAL_GPIO_Init+0x418>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032c2:	4b34      	ldr	r3, [pc, #208]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4933      	ldr	r1, [pc, #204]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
 80032ce:	e006      	b.n	80032de <HAL_GPIO_Init+0x426>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032d0:	4b30      	ldr	r3, [pc, #192]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	492e      	ldr	r1, [pc, #184]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 80032da:	4013      	ands	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d006      	beq.n	80032f8 <HAL_GPIO_Init+0x440>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	4929      	ldr	r1, [pc, #164]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]
 80032f6:	e006      	b.n	8003306 <HAL_GPIO_Init+0x44e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032f8:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	43db      	mvns	r3, r3
 8003300:	4924      	ldr	r1, [pc, #144]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 8003302:	4013      	ands	r3, r2
 8003304:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d006      	beq.n	8003320 <HAL_GPIO_Init+0x468>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	491f      	ldr	r1, [pc, #124]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
 800331e:	e006      	b.n	800332e <HAL_GPIO_Init+0x476>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003320:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	43db      	mvns	r3, r3
 8003328:	491a      	ldr	r1, [pc, #104]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 800332a:	4013      	ands	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d006      	beq.n	8003348 <HAL_GPIO_Init+0x490>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	4915      	ldr	r1, [pc, #84]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]
 8003346:	e006      	b.n	8003356 <HAL_GPIO_Init+0x49e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	43db      	mvns	r3, r3
 8003350:	4910      	ldr	r1, [pc, #64]	; (8003394 <HAL_GPIO_Init+0x4dc>)
 8003352:	4013      	ands	r3, r2
 8003354:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	3301      	adds	r3, #1
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	fa22 f303 	lsr.w	r3, r2, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	f47f ae1d 	bne.w	8002fa6 <HAL_GPIO_Init+0xee>
  }
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	3728      	adds	r7, #40	; 0x28
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	0800b488 	.word	0x0800b488
 800337c:	40021000 	.word	0x40021000
 8003380:	40010000 	.word	0x40010000
 8003384:	40010800 	.word	0x40010800
 8003388:	40010c00 	.word	0x40010c00
 800338c:	40011000 	.word	0x40011000
 8003390:	40011400 	.word	0x40011400
 8003394:	40010400 	.word	0x40010400

08003398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	807b      	strh	r3, [r7, #2]
 80033a4:	4613      	mov	r3, r2
 80033a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80033a8:	887b      	ldrh	r3, [r7, #2]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <HAL_GPIO_WritePin+0x20>
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	041b      	lsls	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <HAL_GPIO_WritePin+0x2a>
 80033b8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80033bc:	480e      	ldr	r0, [pc, #56]	; (80033f8 <HAL_GPIO_WritePin+0x60>)
 80033be:	f7fe fb10 	bl	80019e2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80033c2:	787b      	ldrb	r3, [r7, #1]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_GPIO_WritePin+0x40>
 80033c8:	787b      	ldrb	r3, [r7, #1]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d004      	beq.n	80033d8 <HAL_GPIO_WritePin+0x40>
 80033ce:	f240 11d5 	movw	r1, #469	; 0x1d5
 80033d2:	4809      	ldr	r0, [pc, #36]	; (80033f8 <HAL_GPIO_WritePin+0x60>)
 80033d4:	f7fe fb05 	bl	80019e2 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80033d8:	787b      	ldrb	r3, [r7, #1]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033e4:	e003      	b.n	80033ee <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033e6:	887b      	ldrh	r3, [r7, #2]
 80033e8:	041a      	lsls	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	611a      	str	r2, [r3, #16]
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	0800b488 	.word	0x0800b488

080033fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003408:	887b      	ldrh	r3, [r7, #2]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d004      	beq.n	8003418 <HAL_GPIO_TogglePin+0x1c>
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <HAL_GPIO_TogglePin+0x26>
 8003418:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800341c:	480a      	ldr	r0, [pc, #40]	; (8003448 <HAL_GPIO_TogglePin+0x4c>)
 800341e:	f7fe fae0 	bl	80019e2 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003428:	887a      	ldrh	r2, [r7, #2]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4013      	ands	r3, r2
 800342e:	041a      	lsls	r2, r3, #16
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	43d9      	mvns	r1, r3
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	400b      	ands	r3, r1
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	611a      	str	r2, [r3, #16]
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	0800b488 	.word	0x0800b488

0800344c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d006      	beq.n	8003470 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003462:	4a05      	ldr	r2, [pc, #20]	; (8003478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fcc8 	bl	8001e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40010400 	.word	0x40010400

0800347c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e35c      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01c      	beq.n	80034d0 <HAL_RCC_OscConfig+0x54>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d116      	bne.n	80034d0 <HAL_RCC_OscConfig+0x54>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d110      	bne.n	80034d0 <HAL_RCC_OscConfig+0x54>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <HAL_RCC_OscConfig+0x54>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d104      	bne.n	80034d0 <HAL_RCC_OscConfig+0x54>
 80034c6:	f240 1167 	movw	r1, #359	; 0x167
 80034ca:	48a5      	ldr	r0, [pc, #660]	; (8003760 <HAL_RCC_OscConfig+0x2e4>)
 80034cc:	f7fe fa89 	bl	80019e2 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 809a 	beq.w	8003612 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00e      	beq.n	8003504 <HAL_RCC_OscConfig+0x88>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ee:	d009      	beq.n	8003504 <HAL_RCC_OscConfig+0x88>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f8:	d004      	beq.n	8003504 <HAL_RCC_OscConfig+0x88>
 80034fa:	f240 116d 	movw	r1, #365	; 0x16d
 80034fe:	4898      	ldr	r0, [pc, #608]	; (8003760 <HAL_RCC_OscConfig+0x2e4>)
 8003500:	f7fe fa6f 	bl	80019e2 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003504:	4b97      	ldr	r3, [pc, #604]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b04      	cmp	r3, #4
 800350e:	d00c      	beq.n	800352a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003510:	4b94      	ldr	r3, [pc, #592]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b08      	cmp	r3, #8
 800351a:	d112      	bne.n	8003542 <HAL_RCC_OscConfig+0xc6>
 800351c:	4b91      	ldr	r3, [pc, #580]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d10b      	bne.n	8003542 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352a:	4b8e      	ldr	r3, [pc, #568]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d06c      	beq.n	8003610 <HAL_RCC_OscConfig+0x194>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d168      	bne.n	8003610 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e302      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354a:	d106      	bne.n	800355a <HAL_RCC_OscConfig+0xde>
 800354c:	4b85      	ldr	r3, [pc, #532]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a84      	ldr	r2, [pc, #528]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	e02e      	b.n	80035b8 <HAL_RCC_OscConfig+0x13c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x100>
 8003562:	4b80      	ldr	r3, [pc, #512]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7f      	ldr	r2, [pc, #508]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b7d      	ldr	r3, [pc, #500]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7c      	ldr	r2, [pc, #496]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e01d      	b.n	80035b8 <HAL_RCC_OscConfig+0x13c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x124>
 8003586:	4b77      	ldr	r3, [pc, #476]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a76      	ldr	r2, [pc, #472]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 800358c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4b74      	ldr	r3, [pc, #464]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a73      	ldr	r2, [pc, #460]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e00b      	b.n	80035b8 <HAL_RCC_OscConfig+0x13c>
 80035a0:	4b70      	ldr	r3, [pc, #448]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6f      	ldr	r2, [pc, #444]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b6d      	ldr	r3, [pc, #436]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a6c      	ldr	r2, [pc, #432]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 80035b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fe fd96 	bl	80020f0 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fe fd92 	bl	80020f0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e2b6      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b62      	ldr	r3, [pc, #392]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x14c>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fe fd82 	bl	80020f0 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fe fd7e 	bl	80020f0 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e2a2      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003602:	4b58      	ldr	r3, [pc, #352]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x174>
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d079      	beq.n	8003712 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_RCC_OscConfig+0x1bc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d004      	beq.n	8003638 <HAL_RCC_OscConfig+0x1bc>
 800362e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003632:	484b      	ldr	r0, [pc, #300]	; (8003760 <HAL_RCC_OscConfig+0x2e4>)
 8003634:	f7fe f9d5 	bl	80019e2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	2b1f      	cmp	r3, #31
 800363e:	d904      	bls.n	800364a <HAL_RCC_OscConfig+0x1ce>
 8003640:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003644:	4846      	ldr	r0, [pc, #280]	; (8003760 <HAL_RCC_OscConfig+0x2e4>)
 8003646:	f7fe f9cc 	bl	80019e2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800364a:	4b46      	ldr	r3, [pc, #280]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003656:	4b43      	ldr	r3, [pc, #268]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b08      	cmp	r3, #8
 8003660:	d11c      	bne.n	800369c <HAL_RCC_OscConfig+0x220>
 8003662:	4b40      	ldr	r3, [pc, #256]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_RCC_OscConfig+0x20a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e260      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003686:	4b37      	ldr	r3, [pc, #220]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4933      	ldr	r1, [pc, #204]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	e03a      	b.n	8003712 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d020      	beq.n	80036e6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a4:	4b30      	ldr	r3, [pc, #192]	; (8003768 <HAL_RCC_OscConfig+0x2ec>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe fd21 	bl	80020f0 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fe fd1d 	bl	80020f0 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e241      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	4b27      	ldr	r3, [pc, #156]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4921      	ldr	r1, [pc, #132]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]
 80036e4:	e015      	b.n	8003712 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e6:	4b20      	ldr	r3, [pc, #128]	; (8003768 <HAL_RCC_OscConfig+0x2ec>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe fd00 	bl	80020f0 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fe fcfc 	bl	80020f0 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e220      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	4b17      	ldr	r3, [pc, #92]	; (8003764 <HAL_RCC_OscConfig+0x2e8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d048      	beq.n	80037b0 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_RCC_OscConfig+0x2bc>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d004      	beq.n	8003738 <HAL_RCC_OscConfig+0x2bc>
 800372e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003732:	480b      	ldr	r0, [pc, #44]	; (8003760 <HAL_RCC_OscConfig+0x2e4>)
 8003734:	f7fe f955 	bl	80019e2 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d021      	beq.n	8003784 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <HAL_RCC_OscConfig+0x2f0>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003746:	f7fe fcd3 	bl	80020f0 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374c:	e010      	b.n	8003770 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374e:	f7fe fccf 	bl	80020f0 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d909      	bls.n	8003770 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e1f3      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
 8003760:	0800b4c4 	.word	0x0800b4c4
 8003764:	40021000 	.word	0x40021000
 8003768:	42420000 	.word	0x42420000
 800376c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003770:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0e8      	beq.n	800374e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800377c:	2001      	movs	r0, #1
 800377e:	f000 fc51 	bl	8004024 <RCC_Delay>
 8003782:	e015      	b.n	80037b0 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003784:	4b63      	ldr	r3, [pc, #396]	; (8003914 <HAL_RCC_OscConfig+0x498>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378a:	f7fe fcb1 	bl	80020f0 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003792:	f7fe fcad 	bl	80020f0 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e1d1      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a4:	4b5a      	ldr	r3, [pc, #360]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80c0 	beq.w	800393e <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037be:	2300      	movs	r3, #0
 80037c0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00c      	beq.n	80037e4 <HAL_RCC_OscConfig+0x368>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d008      	beq.n	80037e4 <HAL_RCC_OscConfig+0x368>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2b05      	cmp	r3, #5
 80037d8:	d004      	beq.n	80037e4 <HAL_RCC_OscConfig+0x368>
 80037da:	f240 2111 	movw	r1, #529	; 0x211
 80037de:	484e      	ldr	r0, [pc, #312]	; (8003918 <HAL_RCC_OscConfig+0x49c>)
 80037e0:	f7fe f8ff 	bl	80019e2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e4:	4b4a      	ldr	r3, [pc, #296]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10d      	bne.n	800380c <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f0:	4b47      	ldr	r3, [pc, #284]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	4a46      	ldr	r2, [pc, #280]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 80037f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fa:	61d3      	str	r3, [r2, #28]
 80037fc:	4b44      	ldr	r3, [pc, #272]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003808:	2301      	movs	r3, #1
 800380a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	4b43      	ldr	r3, [pc, #268]	; (800391c <HAL_RCC_OscConfig+0x4a0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d118      	bne.n	800384a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003818:	4b40      	ldr	r3, [pc, #256]	; (800391c <HAL_RCC_OscConfig+0x4a0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a3f      	ldr	r2, [pc, #252]	; (800391c <HAL_RCC_OscConfig+0x4a0>)
 800381e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003822:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003824:	f7fe fc64 	bl	80020f0 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382c:	f7fe fc60 	bl	80020f0 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	; 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e184      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	4b37      	ldr	r3, [pc, #220]	; (800391c <HAL_RCC_OscConfig+0x4a0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d106      	bne.n	8003860 <HAL_RCC_OscConfig+0x3e4>
 8003852:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4a2e      	ldr	r2, [pc, #184]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6213      	str	r3, [r2, #32]
 800385e:	e02d      	b.n	80038bc <HAL_RCC_OscConfig+0x440>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10c      	bne.n	8003882 <HAL_RCC_OscConfig+0x406>
 8003868:	4b29      	ldr	r3, [pc, #164]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4a28      	ldr	r2, [pc, #160]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	6213      	str	r3, [r2, #32]
 8003874:	4b26      	ldr	r3, [pc, #152]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	4a25      	ldr	r2, [pc, #148]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 800387a:	f023 0304 	bic.w	r3, r3, #4
 800387e:	6213      	str	r3, [r2, #32]
 8003880:	e01c      	b.n	80038bc <HAL_RCC_OscConfig+0x440>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b05      	cmp	r3, #5
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x428>
 800388a:	4b21      	ldr	r3, [pc, #132]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a20      	ldr	r2, [pc, #128]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	6213      	str	r3, [r2, #32]
 8003896:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6213      	str	r3, [r2, #32]
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0x440>
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4a19      	ldr	r2, [pc, #100]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	6213      	str	r3, [r2, #32]
 80038b0:	4b17      	ldr	r3, [pc, #92]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	4a16      	ldr	r2, [pc, #88]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 80038b6:	f023 0304 	bic.w	r3, r3, #4
 80038ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c4:	f7fe fc14 	bl	80020f0 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fe fc10 	bl	80020f0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e132      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RCC_OscConfig+0x494>)
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0ee      	beq.n	80038cc <HAL_RCC_OscConfig+0x450>
 80038ee:	e01d      	b.n	800392c <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f0:	f7fe fbfe 	bl	80020f0 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	e013      	b.n	8003920 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7fe fbfa 	bl	80020f0 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d90a      	bls.n	8003920 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e11c      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	42420480 	.word	0x42420480
 8003918:	0800b4c4 	.word	0x0800b4c4
 800391c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003920:	4b8b      	ldr	r3, [pc, #556]	; (8003b50 <HAL_RCC_OscConfig+0x6d4>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e5      	bne.n	80038f8 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003932:	4b87      	ldr	r3, [pc, #540]	; (8003b50 <HAL_RCC_OscConfig+0x6d4>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	4a86      	ldr	r2, [pc, #536]	; (8003b50 <HAL_RCC_OscConfig+0x6d4>)
 8003938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <HAL_RCC_OscConfig+0x4e4>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d008      	beq.n	8003960 <HAL_RCC_OscConfig+0x4e4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d004      	beq.n	8003960 <HAL_RCC_OscConfig+0x4e4>
 8003956:	f240 21af 	movw	r1, #687	; 0x2af
 800395a:	487e      	ldr	r0, [pc, #504]	; (8003b54 <HAL_RCC_OscConfig+0x6d8>)
 800395c:	f7fe f841 	bl	80019e2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80ee 	beq.w	8003b46 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800396a:	4b79      	ldr	r3, [pc, #484]	; (8003b50 <HAL_RCC_OscConfig+0x6d4>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b08      	cmp	r3, #8
 8003974:	f000 80ce 	beq.w	8003b14 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	2b02      	cmp	r3, #2
 800397e:	f040 80b2 	bne.w	8003ae6 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <HAL_RCC_OscConfig+0x522>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003992:	d004      	beq.n	800399e <HAL_RCC_OscConfig+0x522>
 8003994:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003998:	486e      	ldr	r0, [pc, #440]	; (8003b54 <HAL_RCC_OscConfig+0x6d8>)
 800399a:	f7fe f822 	bl	80019e2 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d04a      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ae:	d045      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039b8:	d040      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039c2:	d03b      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039cc:	d036      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80039d6:	d031      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80039e0:	d02c      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039ea:	d027      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039f4:	d022      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039fe:	d01d      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a08:	d018      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a12:	d013      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a1c:	d00e      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003a26:	d009      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003a30:	d004      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5c0>
 8003a32:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003a36:	4847      	ldr	r0, [pc, #284]	; (8003b54 <HAL_RCC_OscConfig+0x6d8>)
 8003a38:	f7fd ffd3 	bl	80019e2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3c:	4b46      	ldr	r3, [pc, #280]	; (8003b58 <HAL_RCC_OscConfig+0x6dc>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a42:	f7fe fb55 	bl	80020f0 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4a:	f7fe fb51 	bl	80020f0 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e075      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5c:	4b3c      	ldr	r3, [pc, #240]	; (8003b50 <HAL_RCC_OscConfig+0x6d4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f0      	bne.n	8003a4a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a70:	d116      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_RCC_OscConfig+0x612>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a82:	d004      	beq.n	8003a8e <HAL_RCC_OscConfig+0x612>
 8003a84:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003a88:	4832      	ldr	r0, [pc, #200]	; (8003b54 <HAL_RCC_OscConfig+0x6d8>)
 8003a8a:	f7fd ffaa 	bl	80019e2 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a8e:	4b30      	ldr	r3, [pc, #192]	; (8003b50 <HAL_RCC_OscConfig+0x6d4>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	492d      	ldr	r1, [pc, #180]	; (8003b50 <HAL_RCC_OscConfig+0x6d4>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa0:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <HAL_RCC_OscConfig+0x6d4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a19      	ldr	r1, [r3, #32]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	4927      	ldr	r1, [pc, #156]	; (8003b50 <HAL_RCC_OscConfig+0x6d4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x6dc>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7fe fb17 	bl	80020f0 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac6:	f7fe fb13 	bl	80020f0 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e037      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_RCC_OscConfig+0x6d4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x64a>
 8003ae4:	e02f      	b.n	8003b46 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <HAL_RCC_OscConfig+0x6dc>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fe fb00 	bl	80020f0 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fe fafc 	bl	80020f0 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e020      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_RCC_OscConfig+0x6d4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x678>
 8003b12:	e018      	b.n	8003b46 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e013      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCC_OscConfig+0x6d4>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d106      	bne.n	8003b42 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d001      	beq.n	8003b46 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40021000 	.word	0x40021000
 8003b54:	0800b4c4 	.word	0x0800b4c4
 8003b58:	42420060 	.word	0x42420060

08003b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e176      	b.n	8003e5e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d116      	bne.n	8003baa <HAL_RCC_ClockConfig+0x4e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d110      	bne.n	8003baa <HAL_RCC_ClockConfig+0x4e>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <HAL_RCC_ClockConfig+0x4e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <HAL_RCC_ClockConfig+0x4e>
 8003ba0:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003ba4:	4874      	ldr	r0, [pc, #464]	; (8003d78 <HAL_RCC_ClockConfig+0x21c>)
 8003ba6:	f7fd ff1c 	bl	80019e2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x6a>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d007      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x6a>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d004      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x6a>
 8003bbc:	f240 3139 	movw	r1, #825	; 0x339
 8003bc0:	486d      	ldr	r0, [pc, #436]	; (8003d78 <HAL_RCC_ClockConfig+0x21c>)
 8003bc2:	f7fd ff0e 	bl	80019e2 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc6:	4b6d      	ldr	r3, [pc, #436]	; (8003d7c <HAL_RCC_ClockConfig+0x220>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d910      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd4:	4b69      	ldr	r3, [pc, #420]	; (8003d7c <HAL_RCC_ClockConfig+0x220>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f023 0207 	bic.w	r2, r3, #7
 8003bdc:	4967      	ldr	r1, [pc, #412]	; (8003d7c <HAL_RCC_ClockConfig+0x220>)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be4:	4b65      	ldr	r3, [pc, #404]	; (8003d7c <HAL_RCC_ClockConfig+0x220>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e133      	b.n	8003e5e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d049      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c0e:	4b5c      	ldr	r3, [pc, #368]	; (8003d80 <HAL_RCC_ClockConfig+0x224>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4a5b      	ldr	r2, [pc, #364]	; (8003d80 <HAL_RCC_ClockConfig+0x224>)
 8003c14:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c18:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c26:	4b56      	ldr	r3, [pc, #344]	; (8003d80 <HAL_RCC_ClockConfig+0x224>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4a55      	ldr	r2, [pc, #340]	; (8003d80 <HAL_RCC_ClockConfig+0x224>)
 8003c2c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c30:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d024      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x128>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b80      	cmp	r3, #128	; 0x80
 8003c40:	d020      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x128>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b90      	cmp	r3, #144	; 0x90
 8003c48:	d01c      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x128>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2ba0      	cmp	r3, #160	; 0xa0
 8003c50:	d018      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x128>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2bb0      	cmp	r3, #176	; 0xb0
 8003c58:	d014      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x128>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c60:	d010      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x128>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2bd0      	cmp	r3, #208	; 0xd0
 8003c68:	d00c      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x128>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2be0      	cmp	r3, #224	; 0xe0
 8003c70:	d008      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x128>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2bf0      	cmp	r3, #240	; 0xf0
 8003c78:	d004      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x128>
 8003c7a:	f240 315f 	movw	r1, #863	; 0x35f
 8003c7e:	483e      	ldr	r0, [pc, #248]	; (8003d78 <HAL_RCC_ClockConfig+0x21c>)
 8003c80:	f7fd feaf 	bl	80019e2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c84:	4b3e      	ldr	r3, [pc, #248]	; (8003d80 <HAL_RCC_ClockConfig+0x224>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	493b      	ldr	r1, [pc, #236]	; (8003d80 <HAL_RCC_ClockConfig+0x224>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d051      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x168>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d008      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x168>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d004      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x168>
 8003cba:	f240 3166 	movw	r1, #870	; 0x366
 8003cbe:	482e      	ldr	r0, [pc, #184]	; (8003d78 <HAL_RCC_ClockConfig+0x21c>)
 8003cc0:	f7fd fe8f 	bl	80019e2 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <HAL_RCC_ClockConfig+0x224>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d115      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0c0      	b.n	8003e5e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce4:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <HAL_RCC_ClockConfig+0x224>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0b4      	b.n	8003e5e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf4:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_RCC_ClockConfig+0x224>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0ac      	b.n	8003e5e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d04:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <HAL_RCC_ClockConfig+0x224>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f023 0203 	bic.w	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	491b      	ldr	r1, [pc, #108]	; (8003d80 <HAL_RCC_ClockConfig+0x224>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d16:	f7fe f9eb 	bl	80020f0 <HAL_GetTick>
 8003d1a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d1e:	f7fe f9e7 	bl	80020f0 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e094      	b.n	8003e5e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d34:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_RCC_ClockConfig+0x224>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 020c 	and.w	r2, r3, #12
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d1eb      	bne.n	8003d1e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <HAL_RCC_ClockConfig+0x220>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d217      	bcs.n	8003d84 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_RCC_ClockConfig+0x220>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 0207 	bic.w	r2, r3, #7
 8003d5c:	4907      	ldr	r1, [pc, #28]	; (8003d7c <HAL_RCC_ClockConfig+0x220>)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_ClockConfig+0x220>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d008      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e073      	b.n	8003e5e <HAL_RCC_ClockConfig+0x302>
 8003d76:	bf00      	nop
 8003d78:	0800b4c4 	.word	0x0800b4c4
 8003d7c:	40022000 	.word	0x40022000
 8003d80:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d025      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d018      	beq.n	8003dca <HAL_RCC_ClockConfig+0x26e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da0:	d013      	beq.n	8003dca <HAL_RCC_ClockConfig+0x26e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003daa:	d00e      	beq.n	8003dca <HAL_RCC_ClockConfig+0x26e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003db4:	d009      	beq.n	8003dca <HAL_RCC_ClockConfig+0x26e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dbe:	d004      	beq.n	8003dca <HAL_RCC_ClockConfig+0x26e>
 8003dc0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003dc4:	4828      	ldr	r0, [pc, #160]	; (8003e68 <HAL_RCC_ClockConfig+0x30c>)
 8003dc6:	f7fd fe0c 	bl	80019e2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dca:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <HAL_RCC_ClockConfig+0x310>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	4925      	ldr	r1, [pc, #148]	; (8003e6c <HAL_RCC_ClockConfig+0x310>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d026      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d018      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x2c6>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d013      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x2c6>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003e02:	d00e      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x2c6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x2c6>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e16:	d004      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x2c6>
 8003e18:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003e1c:	4812      	ldr	r0, [pc, #72]	; (8003e68 <HAL_RCC_ClockConfig+0x30c>)
 8003e1e:	f7fd fde0 	bl	80019e2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <HAL_RCC_ClockConfig+0x310>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <HAL_RCC_ClockConfig+0x310>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e36:	f000 f821 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_ClockConfig+0x310>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	490a      	ldr	r1, [pc, #40]	; (8003e70 <HAL_RCC_ClockConfig+0x314>)
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x318>)
 8003e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_ClockConfig+0x31c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fd ff4c 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	0800b4c4 	.word	0x0800b4c4
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	0800b790 	.word	0x0800b790
 8003e74:	20000008 	.word	0x20000008
 8003e78:	2000000c 	.word	0x2000000c

08003e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e7c:	b490      	push	{r4, r7}
 8003e7e:	b08a      	sub	sp, #40	; 0x28
 8003e80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e82:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e84:	1d3c      	adds	r4, r7, #4
 8003e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e8c:	f240 2301 	movw	r3, #513	; 0x201
 8003e90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d002      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0x40>
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x46>
 8003eba:	e02d      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ebe:	623b      	str	r3, [r7, #32]
      break;
 8003ec0:	e02d      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	0c9b      	lsrs	r3, r3, #18
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ece:	4413      	add	r3, r2
 8003ed0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ed4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d013      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	0c5b      	lsrs	r3, r3, #17
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003eee:	4413      	add	r3, r2
 8003ef0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ef4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4a0e      	ldr	r2, [pc, #56]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003efa:	fb02 f203 	mul.w	r2, r2, r3
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
 8003f06:	e004      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4a0b      	ldr	r2, [pc, #44]	; (8003f38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f0c:	fb02 f303 	mul.w	r3, r2, r3
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	623b      	str	r3, [r7, #32]
      break;
 8003f16:	e002      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f1a:	623b      	str	r3, [r7, #32]
      break;
 8003f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3728      	adds	r7, #40	; 0x28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc90      	pop	{r4, r7}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	0800b4fc 	.word	0x0800b4fc
 8003f30:	40021000 	.word	0x40021000
 8003f34:	007a1200 	.word	0x007a1200
 8003f38:	003d0900 	.word	0x003d0900

08003f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f40:	4b02      	ldr	r3, [pc, #8]	; (8003f4c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f42:	681b      	ldr	r3, [r3, #0]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	20000008 	.word	0x20000008

08003f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f54:	f7ff fff2 	bl	8003f3c <HAL_RCC_GetHCLKFreq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	4903      	ldr	r1, [pc, #12]	; (8003f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f66:	5ccb      	ldrb	r3, [r1, r3]
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40021000 	.word	0x40021000
 8003f74:	0800b7a0 	.word	0x0800b7a0

08003f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f7c:	f7ff ffde 	bl	8003f3c <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	0adb      	lsrs	r3, r3, #11
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4903      	ldr	r1, [pc, #12]	; (8003f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	0800b7a0 	.word	0x0800b7a0

08003fa0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <HAL_RCC_GetClockConfig+0x1a>
 8003fb0:	f240 5123 	movw	r1, #1315	; 0x523
 8003fb4:	4818      	ldr	r0, [pc, #96]	; (8004018 <HAL_RCC_GetClockConfig+0x78>)
 8003fb6:	f7fd fd14 	bl	80019e2 <assert_failed>
  assert_param(pFLatency != NULL);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d104      	bne.n	8003fca <HAL_RCC_GetClockConfig+0x2a>
 8003fc0:	f240 5124 	movw	r1, #1316	; 0x524
 8003fc4:	4814      	ldr	r0, [pc, #80]	; (8004018 <HAL_RCC_GetClockConfig+0x78>)
 8003fc6:	f7fd fd0c 	bl	80019e2 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	220f      	movs	r2, #15
 8003fce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fd0:	4b12      	ldr	r3, [pc, #72]	; (800401c <HAL_RCC_GetClockConfig+0x7c>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0203 	and.w	r2, r3, #3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <HAL_RCC_GetClockConfig+0x7c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <HAL_RCC_GetClockConfig+0x7c>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_RCC_GetClockConfig+0x7c>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	08db      	lsrs	r3, r3, #3
 8003ffa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <HAL_RCC_GetClockConfig+0x80>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0207 	and.w	r2, r3, #7
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	0800b4c4 	.word	0x0800b4c4
 800401c:	40021000 	.word	0x40021000
 8004020:	40022000 	.word	0x40022000

08004024 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <RCC_Delay+0x34>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0a      	ldr	r2, [pc, #40]	; (800405c <RCC_Delay+0x38>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	0a5b      	lsrs	r3, r3, #9
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004040:	bf00      	nop
  }
  while (Delay --);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1e5a      	subs	r2, r3, #1
 8004046:	60fa      	str	r2, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f9      	bne.n	8004040 <RCC_Delay+0x1c>
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr
 8004058:	20000008 	.word	0x20000008
 800405c:	10624dd3 	.word	0x10624dd3

08004060 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10f      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	d103      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004094:	216c      	movs	r1, #108	; 0x6c
 8004096:	4873      	ldr	r0, [pc, #460]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004098:	f7fd fca3 	bl	80019e2 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8095 	beq.w	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d012      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ba:	d00d      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c4:	d008      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ce:	d003      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80040d0:	2172      	movs	r1, #114	; 0x72
 80040d2:	4864      	ldr	r0, [pc, #400]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80040d4:	f7fd fc85 	bl	80019e2 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 80040d8:	2300      	movs	r3, #0
 80040da:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040dc:	4b62      	ldr	r3, [pc, #392]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10d      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e8:	4b5f      	ldr	r3, [pc, #380]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	4a5e      	ldr	r2, [pc, #376]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f2:	61d3      	str	r3, [r2, #28]
 80040f4:	4b5c      	ldr	r3, [pc, #368]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004100:	2301      	movs	r3, #1
 8004102:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	4b59      	ldr	r3, [pc, #356]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d118      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004110:	4b56      	ldr	r3, [pc, #344]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a55      	ldr	r2, [pc, #340]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800411c:	f7fd ffe8 	bl	80020f0 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004122:	e008      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004124:	f7fd ffe4 	bl	80020f0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	; 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e092      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004136:	4b4d      	ldr	r3, [pc, #308]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004142:	4b49      	ldr	r3, [pc, #292]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d02e      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	429a      	cmp	r2, r3
 800415e:	d027      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004160:	4b41      	ldr	r3, [pc, #260]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004168:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800416a:	4b41      	ldr	r3, [pc, #260]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800416c:	2201      	movs	r2, #1
 800416e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004170:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004176:	4a3c      	ldr	r2, [pc, #240]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d014      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004186:	f7fd ffb3 	bl	80020f0 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418c:	e00a      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418e:	f7fd ffaf 	bl	80020f0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f241 3288 	movw	r2, #5000	; 0x1388
 800419c:	4293      	cmp	r3, r2
 800419e:	d901      	bls.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e05b      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a4:	4b30      	ldr	r3, [pc, #192]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0ee      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b0:	4b2d      	ldr	r3, [pc, #180]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	492a      	ldr	r1, [pc, #168]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c8:	4b27      	ldr	r3, [pc, #156]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	4a26      	ldr	r2, [pc, #152]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80041ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01f      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f0:	d00d      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fa:	d008      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004204:	d003      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004206:	21b9      	movs	r1, #185	; 0xb9
 8004208:	4816      	ldr	r0, [pc, #88]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800420a:	f7fd fbea 	bl	80019e2 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800420e:	4b16      	ldr	r3, [pc, #88]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	4913      	ldr	r1, [pc, #76]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	d016      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004234:	d008      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800423e:	f240 1115 	movw	r1, #277	; 0x115
 8004242:	4808      	ldr	r0, [pc, #32]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004244:	f7fd fbcd 	bl	80019e2 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004248:	4b07      	ldr	r3, [pc, #28]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4904      	ldr	r1, [pc, #16]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004256:	4313      	orrs	r3, r2
 8004258:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	0800b50c 	.word	0x0800b50c
 8004268:	40021000 	.word	0x40021000
 800426c:	40007000 	.word	0x40007000
 8004270:	42420440 	.word	0x42420440

08004274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e16d      	b.n	8004562 <HAL_SPI_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6b      	ldr	r2, [pc, #428]	; (8004438 <HAL_SPI_Init+0x1c4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d009      	beq.n	80042a4 <HAL_SPI_Init+0x30>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a69      	ldr	r2, [pc, #420]	; (800443c <HAL_SPI_Init+0x1c8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_SPI_Init+0x30>
 800429a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800429e:	4868      	ldr	r0, [pc, #416]	; (8004440 <HAL_SPI_Init+0x1cc>)
 80042a0:	f7fd fb9f 	bl	80019e2 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d009      	beq.n	80042c0 <HAL_SPI_Init+0x4c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b4:	d004      	beq.n	80042c0 <HAL_SPI_Init+0x4c>
 80042b6:	f240 1159 	movw	r1, #345	; 0x159
 80042ba:	4861      	ldr	r0, [pc, #388]	; (8004440 <HAL_SPI_Init+0x1cc>)
 80042bc:	f7fd fb91 	bl	80019e2 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00e      	beq.n	80042e6 <HAL_SPI_Init+0x72>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d0:	d009      	beq.n	80042e6 <HAL_SPI_Init+0x72>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042da:	d004      	beq.n	80042e6 <HAL_SPI_Init+0x72>
 80042dc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80042e0:	4857      	ldr	r0, [pc, #348]	; (8004440 <HAL_SPI_Init+0x1cc>)
 80042e2:	f7fd fb7e 	bl	80019e2 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ee:	d008      	beq.n	8004302 <HAL_SPI_Init+0x8e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d004      	beq.n	8004302 <HAL_SPI_Init+0x8e>
 80042f8:	f240 115b 	movw	r1, #347	; 0x15b
 80042fc:	4850      	ldr	r0, [pc, #320]	; (8004440 <HAL_SPI_Init+0x1cc>)
 80042fe:	f7fd fb70 	bl	80019e2 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800430a:	d00d      	beq.n	8004328 <HAL_SPI_Init+0xb4>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d009      	beq.n	8004328 <HAL_SPI_Init+0xb4>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800431c:	d004      	beq.n	8004328 <HAL_SPI_Init+0xb4>
 800431e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8004322:	4847      	ldr	r0, [pc, #284]	; (8004440 <HAL_SPI_Init+0x1cc>)
 8004324:	f7fd fb5d 	bl	80019e2 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_SPI_Init+0xfe>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d01c      	beq.n	8004372 <HAL_SPI_Init+0xfe>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	2b10      	cmp	r3, #16
 800433e:	d018      	beq.n	8004372 <HAL_SPI_Init+0xfe>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	2b18      	cmp	r3, #24
 8004346:	d014      	beq.n	8004372 <HAL_SPI_Init+0xfe>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	2b20      	cmp	r3, #32
 800434e:	d010      	beq.n	8004372 <HAL_SPI_Init+0xfe>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	2b28      	cmp	r3, #40	; 0x28
 8004356:	d00c      	beq.n	8004372 <HAL_SPI_Init+0xfe>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	2b30      	cmp	r3, #48	; 0x30
 800435e:	d008      	beq.n	8004372 <HAL_SPI_Init+0xfe>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	2b38      	cmp	r3, #56	; 0x38
 8004366:	d004      	beq.n	8004372 <HAL_SPI_Init+0xfe>
 8004368:	f240 115d 	movw	r1, #349	; 0x15d
 800436c:	4834      	ldr	r0, [pc, #208]	; (8004440 <HAL_SPI_Init+0x1cc>)
 800436e:	f7fd fb38 	bl	80019e2 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_SPI_Init+0x118>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	2b80      	cmp	r3, #128	; 0x80
 8004380:	d004      	beq.n	800438c <HAL_SPI_Init+0x118>
 8004382:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004386:	482e      	ldr	r0, [pc, #184]	; (8004440 <HAL_SPI_Init+0x1cc>)
 8004388:	f7fd fb2b 	bl	80019e2 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <HAL_SPI_Init+0x12a>
 8004394:	f240 1161 	movw	r1, #353	; 0x161
 8004398:	4829      	ldr	r0, [pc, #164]	; (8004440 <HAL_SPI_Init+0x1cc>)
 800439a:	f7fd fb22 	bl	80019e2 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d14e      	bne.n	8004444 <HAL_SPI_Init+0x1d0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_SPI_Init+0x14c>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d004      	beq.n	80043c0 <HAL_SPI_Init+0x14c>
 80043b6:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80043ba:	4821      	ldr	r0, [pc, #132]	; (8004440 <HAL_SPI_Init+0x1cc>)
 80043bc:	f7fd fb11 	bl	80019e2 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_SPI_Init+0x166>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d004      	beq.n	80043da <HAL_SPI_Init+0x166>
 80043d0:	f240 1165 	movw	r1, #357	; 0x165
 80043d4:	481a      	ldr	r0, [pc, #104]	; (8004440 <HAL_SPI_Init+0x1cc>)
 80043d6:	f7fd fb04 	bl	80019e2 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e2:	d125      	bne.n	8004430 <HAL_SPI_Init+0x1bc>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d056      	beq.n	800449a <HAL_SPI_Init+0x226>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d052      	beq.n	800449a <HAL_SPI_Init+0x226>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d04e      	beq.n	800449a <HAL_SPI_Init+0x226>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	2b18      	cmp	r3, #24
 8004402:	d04a      	beq.n	800449a <HAL_SPI_Init+0x226>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	2b20      	cmp	r3, #32
 800440a:	d046      	beq.n	800449a <HAL_SPI_Init+0x226>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	2b28      	cmp	r3, #40	; 0x28
 8004412:	d042      	beq.n	800449a <HAL_SPI_Init+0x226>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	2b30      	cmp	r3, #48	; 0x30
 800441a:	d03e      	beq.n	800449a <HAL_SPI_Init+0x226>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	2b38      	cmp	r3, #56	; 0x38
 8004422:	d03a      	beq.n	800449a <HAL_SPI_Init+0x226>
 8004424:	f240 1169 	movw	r1, #361	; 0x169
 8004428:	4805      	ldr	r0, [pc, #20]	; (8004440 <HAL_SPI_Init+0x1cc>)
 800442a:	f7fd fada 	bl	80019e2 <assert_failed>
 800442e:	e034      	b.n	800449a <HAL_SPI_Init+0x226>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	61da      	str	r2, [r3, #28]
 8004436:	e030      	b.n	800449a <HAL_SPI_Init+0x226>
 8004438:	40013000 	.word	0x40013000
 800443c:	40003800 	.word	0x40003800
 8004440:	0800b558 	.word	0x0800b558
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d020      	beq.n	800448e <HAL_SPI_Init+0x21a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d01c      	beq.n	800448e <HAL_SPI_Init+0x21a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	2b10      	cmp	r3, #16
 800445a:	d018      	beq.n	800448e <HAL_SPI_Init+0x21a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	2b18      	cmp	r3, #24
 8004462:	d014      	beq.n	800448e <HAL_SPI_Init+0x21a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	2b20      	cmp	r3, #32
 800446a:	d010      	beq.n	800448e <HAL_SPI_Init+0x21a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	2b28      	cmp	r3, #40	; 0x28
 8004472:	d00c      	beq.n	800448e <HAL_SPI_Init+0x21a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	2b30      	cmp	r3, #48	; 0x30
 800447a:	d008      	beq.n	800448e <HAL_SPI_Init+0x21a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	2b38      	cmp	r3, #56	; 0x38
 8004482:	d004      	beq.n	800448e <HAL_SPI_Init+0x21a>
 8004484:	f240 1173 	movw	r1, #371	; 0x173
 8004488:	4838      	ldr	r0, [pc, #224]	; (800456c <HAL_SPI_Init+0x2f8>)
 800448a:	f7fd faaa 	bl	80019e2 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <HAL_SPI_Init+0x246>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fd fb9b 	bl	8001bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	ea42 0103 	orr.w	r1, r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004526:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	0c1a      	lsrs	r2, r3, #16
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f002 0204 	and.w	r2, r2, #4
 8004540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	0800b558 	.word	0x0800b558

08004570 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d009      	beq.n	80045a0 <HAL_SPI_Transmit+0x30>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004594:	d004      	beq.n	80045a0 <HAL_SPI_Transmit+0x30>
 8004596:	f240 3122 	movw	r1, #802	; 0x322
 800459a:	4893      	ldr	r0, [pc, #588]	; (80047e8 <HAL_SPI_Transmit+0x278>)
 800459c:	f7fd fa21 	bl	80019e2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_SPI_Transmit+0x3e>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e128      	b.n	8004800 <HAL_SPI_Transmit+0x290>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045b6:	f7fd fd9b 	bl	80020f0 <HAL_GetTick>
 80045ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d002      	beq.n	80045d2 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
 80045ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045d0:	e10d      	b.n	80047ee <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_SPI_Transmit+0x6e>
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045e2:	e104      	b.n	80047ee <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2203      	movs	r2, #3
 80045e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	88fa      	ldrh	r2, [r7, #6]
 80045fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462a:	d10f      	bne.n	800464c <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800463a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800464a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d007      	beq.n	800466a <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004668:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004672:	d14b      	bne.n	800470c <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_SPI_Transmit+0x112>
 800467c:	8afb      	ldrh	r3, [r7, #22]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d13e      	bne.n	8004700 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	881a      	ldrh	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	1c9a      	adds	r2, r3, #2
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046a6:	e02b      	b.n	8004700 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d112      	bne.n	80046dc <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	881a      	ldrh	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	1c9a      	adds	r2, r3, #2
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80046da:	e011      	b.n	8004700 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046dc:	f7fd fd08 	bl	80020f0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d803      	bhi.n	80046f4 <HAL_SPI_Transmit+0x184>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d102      	bne.n	80046fa <HAL_SPI_Transmit+0x18a>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046fe:	e076      	b.n	80047ee <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1ce      	bne.n	80046a8 <HAL_SPI_Transmit+0x138>
 800470a:	e04c      	b.n	80047a6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_SPI_Transmit+0x1aa>
 8004714:	8afb      	ldrh	r3, [r7, #22]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d140      	bne.n	800479c <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	7812      	ldrb	r2, [r2, #0]
 8004726:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004740:	e02c      	b.n	800479c <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b02      	cmp	r3, #2
 800474e:	d113      	bne.n	8004778 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	330c      	adds	r3, #12
 800475a:	7812      	ldrb	r2, [r2, #0]
 800475c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	86da      	strh	r2, [r3, #54]	; 0x36
 8004776:	e011      	b.n	800479c <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004778:	f7fd fcba 	bl	80020f0 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d803      	bhi.n	8004790 <HAL_SPI_Transmit+0x220>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478e:	d102      	bne.n	8004796 <HAL_SPI_Transmit+0x226>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	77fb      	strb	r3, [r7, #31]
          goto error;
 800479a:	e028      	b.n	80047ee <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1cd      	bne.n	8004742 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	6839      	ldr	r1, [r7, #0]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fbc6 	bl	8004f3c <SPI_EndRxTxTransaction>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d004      	beq.n	80047ec <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	77fb      	strb	r3, [r7, #31]
 80047e6:	e002      	b.n	80047ee <HAL_SPI_Transmit+0x27e>
 80047e8:	0800b558 	.word	0x0800b558
  }

error:
 80047ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004824:	d112      	bne.n	800484c <HAL_SPI_Receive+0x44>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10e      	bne.n	800484c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2204      	movs	r2, #4
 8004832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004836:	88fa      	ldrh	r2, [r7, #6]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f8f2 	bl	8004a2c <HAL_SPI_TransmitReceive>
 8004848:	4603      	mov	r3, r0
 800484a:	e0ea      	b.n	8004a22 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_SPI_Receive+0x52>
 8004856:	2302      	movs	r3, #2
 8004858:	e0e3      	b.n	8004a22 <HAL_SPI_Receive+0x21a>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004862:	f7fd fc45 	bl	80020f0 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d002      	beq.n	800487a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004874:	2302      	movs	r3, #2
 8004876:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004878:	e0ca      	b.n	8004a10 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_SPI_Receive+0x7e>
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	75fb      	strb	r3, [r7, #23]
    goto error;
 800488a:	e0c1      	b.n	8004a10 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2204      	movs	r2, #4
 8004890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	88fa      	ldrh	r2, [r7, #6]
 80048a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d2:	d10f      	bne.n	80048f4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fe:	2b40      	cmp	r3, #64	; 0x40
 8004900:	d007      	beq.n	8004912 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004910:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d162      	bne.n	80049e0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800491a:	e02e      	b.n	800497a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b01      	cmp	r3, #1
 8004928:	d115      	bne.n	8004956 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f103 020c 	add.w	r2, r3, #12
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	7812      	ldrb	r2, [r2, #0]
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004954:	e011      	b.n	800497a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004956:	f7fd fbcb 	bl	80020f0 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d803      	bhi.n	800496e <HAL_SPI_Receive+0x166>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d102      	bne.n	8004974 <HAL_SPI_Receive+0x16c>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004978:	e04a      	b.n	8004a10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1cb      	bne.n	800491c <HAL_SPI_Receive+0x114>
 8004984:	e031      	b.n	80049ea <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d113      	bne.n	80049bc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	b292      	uxth	r2, r2
 80049a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	1c9a      	adds	r2, r3, #2
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ba:	e011      	b.n	80049e0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049bc:	f7fd fb98 	bl	80020f0 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d803      	bhi.n	80049d4 <HAL_SPI_Receive+0x1cc>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d102      	bne.n	80049da <HAL_SPI_Receive+0x1d2>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049de:	e017      	b.n	8004a10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1cd      	bne.n	8004986 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	6839      	ldr	r1, [r7, #0]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fa52 	bl	8004e98 <SPI_EndRxTransaction>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	75fb      	strb	r3, [r7, #23]
 8004a0c:	e000      	b.n	8004a10 <HAL_SPI_Receive+0x208>
  }

error :
 8004a0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08c      	sub	sp, #48	; 0x30
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <HAL_SPI_TransmitReceive+0x2a>
 8004a4c:	f240 419e 	movw	r1, #1182	; 0x49e
 8004a50:	4884      	ldr	r0, [pc, #528]	; (8004c64 <HAL_SPI_TransmitReceive+0x238>)
 8004a52:	f7fc ffc6 	bl	80019e2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x38>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e18d      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x354>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a6c:	f7fd fb40 	bl	80020f0 <HAL_GetTick>
 8004a70:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a82:	887b      	ldrh	r3, [r7, #2]
 8004a84:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d00f      	beq.n	8004aae <HAL_SPI_TransmitReceive+0x82>
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a94:	d107      	bne.n	8004aa6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <HAL_SPI_TransmitReceive+0x7a>
 8004a9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d003      	beq.n	8004aae <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004aac:	e15e      	b.n	8004d6c <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_SPI_TransmitReceive+0x94>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_TransmitReceive+0x94>
 8004aba:	887b      	ldrh	r3, [r7, #2]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d103      	bne.n	8004ac8 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ac6:	e151      	b.n	8004d6c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d003      	beq.n	8004adc <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2205      	movs	r2, #5
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	887a      	ldrh	r2, [r7, #2]
 8004aec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	887a      	ldrh	r2, [r7, #2]
 8004af2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	887a      	ldrh	r2, [r7, #2]
 8004afe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	887a      	ldrh	r2, [r7, #2]
 8004b04:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b40      	cmp	r3, #64	; 0x40
 8004b1e:	d007      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b38:	d178      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_SPI_TransmitReceive+0x11c>
 8004b42:	8b7b      	ldrh	r3, [r7, #26]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d166      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	881a      	ldrh	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	1c9a      	adds	r2, r3, #2
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b6c:	e053      	b.n	8004c16 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d11b      	bne.n	8004bb4 <HAL_SPI_TransmitReceive+0x188>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d016      	beq.n	8004bb4 <HAL_SPI_TransmitReceive+0x188>
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d113      	bne.n	8004bb4 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	881a      	ldrh	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	1c9a      	adds	r2, r3, #2
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d119      	bne.n	8004bf6 <HAL_SPI_TransmitReceive+0x1ca>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d014      	beq.n	8004bf6 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	b292      	uxth	r2, r2
 8004bd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	1c9a      	adds	r2, r3, #2
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bf6:	f7fd fa7b 	bl	80020f0 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d807      	bhi.n	8004c16 <HAL_SPI_TransmitReceive+0x1ea>
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d003      	beq.n	8004c16 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c14:	e0aa      	b.n	8004d6c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1a6      	bne.n	8004b6e <HAL_SPI_TransmitReceive+0x142>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1a1      	bne.n	8004b6e <HAL_SPI_TransmitReceive+0x142>
 8004c2a:	e07f      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_SPI_TransmitReceive+0x20e>
 8004c34:	8b7b      	ldrh	r3, [r7, #26]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d16e      	bne.n	8004d18 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	7812      	ldrb	r2, [r2, #0]
 8004c46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c60:	e05a      	b.n	8004d18 <HAL_SPI_TransmitReceive+0x2ec>
 8004c62:	bf00      	nop
 8004c64:	0800b558 	.word	0x0800b558
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d11c      	bne.n	8004cb0 <HAL_SPI_TransmitReceive+0x284>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d017      	beq.n	8004cb0 <HAL_SPI_TransmitReceive+0x284>
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d114      	bne.n	8004cb0 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	330c      	adds	r3, #12
 8004c90:	7812      	ldrb	r2, [r2, #0]
 8004c92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d119      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x2c6>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d014      	beq.n	8004cf2 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cf2:	f7fd f9fd 	bl	80020f0 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d803      	bhi.n	8004d0a <HAL_SPI_TransmitReceive+0x2de>
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d102      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0x2e4>
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d16:	e029      	b.n	8004d6c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1a2      	bne.n	8004c68 <HAL_SPI_TransmitReceive+0x23c>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d19d      	bne.n	8004c68 <HAL_SPI_TransmitReceive+0x23c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f903 	bl	8004f3c <SPI_EndRxTxTransaction>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d006      	beq.n	8004d4a <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d48:	e010      	b.n	8004d6c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10b      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	e000      	b.n	8004d6c <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8004d6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3730      	adds	r7, #48	; 0x30
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d98:	f7fd f9aa 	bl	80020f0 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	4413      	add	r3, r2
 8004da6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004da8:	f7fd f9a2 	bl	80020f0 <HAL_GetTick>
 8004dac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dae:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	015b      	lsls	r3, r3, #5
 8004db4:	0d1b      	lsrs	r3, r3, #20
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	fb02 f303 	mul.w	r3, r2, r3
 8004dbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dbe:	e054      	b.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d050      	beq.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dc8:	f7fd f992 	bl	80020f0 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d902      	bls.n	8004dde <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d13d      	bne.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df6:	d111      	bne.n	8004e1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e00:	d004      	beq.n	8004e0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0a:	d107      	bne.n	8004e1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e24:	d10f      	bne.n	8004e46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e017      	b.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4013      	ands	r3, r2
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	bf0c      	ite	eq
 8004e7a:	2301      	moveq	r3, #1
 8004e7c:	2300      	movne	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d19b      	bne.n	8004dc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000008 	.word	0x20000008

08004e98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eac:	d111      	bne.n	8004ed2 <SPI_EndRxTransaction+0x3a>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb6:	d004      	beq.n	8004ec2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec0:	d107      	bne.n	8004ed2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eda:	d117      	bne.n	8004f0c <SPI_EndRxTransaction+0x74>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee4:	d112      	bne.n	8004f0c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2200      	movs	r2, #0
 8004eee:	2101      	movs	r1, #1
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f7ff ff49 	bl	8004d88 <SPI_WaitFlagStateUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01a      	beq.n	8004f32 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	f043 0220 	orr.w	r2, r3, #32
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e013      	b.n	8004f34 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2200      	movs	r2, #0
 8004f14:	2180      	movs	r1, #128	; 0x80
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7ff ff36 	bl	8004d88 <SPI_WaitFlagStateUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	f043 0220 	orr.w	r2, r3, #32
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e000      	b.n	8004f34 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2180      	movs	r1, #128	; 0x80
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff ff18 	bl	8004d88 <SPI_WaitFlagStateUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f62:	f043 0220 	orr.w	r2, r3, #32
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e000      	b.n	8004f70 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e093      	b.n	80050b2 <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a4b      	ldr	r2, [pc, #300]	; (80050bc <HAL_TIM_Base_Init+0x144>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <HAL_TIM_Base_Init+0x44>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9c:	d00e      	beq.n	8004fbc <HAL_TIM_Base_Init+0x44>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a47      	ldr	r2, [pc, #284]	; (80050c0 <HAL_TIM_Base_Init+0x148>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <HAL_TIM_Base_Init+0x44>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a45      	ldr	r2, [pc, #276]	; (80050c4 <HAL_TIM_Base_Init+0x14c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_TIM_Base_Init+0x44>
 8004fb2:	f240 1113 	movw	r1, #275	; 0x113
 8004fb6:	4844      	ldr	r0, [pc, #272]	; (80050c8 <HAL_TIM_Base_Init+0x150>)
 8004fb8:	f7fc fd13 	bl	80019e2 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d014      	beq.n	8004fee <HAL_TIM_Base_Init+0x76>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b10      	cmp	r3, #16
 8004fca:	d010      	beq.n	8004fee <HAL_TIM_Base_Init+0x76>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d00c      	beq.n	8004fee <HAL_TIM_Base_Init+0x76>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b40      	cmp	r3, #64	; 0x40
 8004fda:	d008      	beq.n	8004fee <HAL_TIM_Base_Init+0x76>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b60      	cmp	r3, #96	; 0x60
 8004fe2:	d004      	beq.n	8004fee <HAL_TIM_Base_Init+0x76>
 8004fe4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004fe8:	4837      	ldr	r0, [pc, #220]	; (80050c8 <HAL_TIM_Base_Init+0x150>)
 8004fea:	f7fc fcfa 	bl	80019e2 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00e      	beq.n	8005014 <HAL_TIM_Base_Init+0x9c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffe:	d009      	beq.n	8005014 <HAL_TIM_Base_Init+0x9c>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005008:	d004      	beq.n	8005014 <HAL_TIM_Base_Init+0x9c>
 800500a:	f240 1115 	movw	r1, #277	; 0x115
 800500e:	482e      	ldr	r0, [pc, #184]	; (80050c8 <HAL_TIM_Base_Init+0x150>)
 8005010:	f7fc fce7 	bl	80019e2 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_TIM_Base_Init+0xb6>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b80      	cmp	r3, #128	; 0x80
 8005022:	d004      	beq.n	800502e <HAL_TIM_Base_Init+0xb6>
 8005024:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005028:	4827      	ldr	r0, [pc, #156]	; (80050c8 <HAL_TIM_Base_Init+0x150>)
 800502a:	f7fc fcda 	bl	80019e2 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f842 	bl	80050cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f000 f9d8 	bl	8005410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40000400 	.word	0x40000400
 80050c4:	40000800 	.word	0x40000800
 80050c8:	0800b590 	.word	0x0800b590

080050cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
	...

080050e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2e      	ldr	r2, [pc, #184]	; (80051a8 <HAL_TIM_Base_Start_IT+0xc8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <HAL_TIM_Base_Start_IT+0x3a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fa:	d00e      	beq.n	800511a <HAL_TIM_Base_Start_IT+0x3a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a2a      	ldr	r2, [pc, #168]	; (80051ac <HAL_TIM_Base_Start_IT+0xcc>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d009      	beq.n	800511a <HAL_TIM_Base_Start_IT+0x3a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a29      	ldr	r2, [pc, #164]	; (80051b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_TIM_Base_Start_IT+0x3a>
 8005110:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005114:	4827      	ldr	r0, [pc, #156]	; (80051b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005116:	f7fc fc64 	bl	80019e2 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b01      	cmp	r3, #1
 8005124:	d001      	beq.n	800512a <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e03a      	b.n	80051a0 <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0201 	orr.w	r2, r2, #1
 8005140:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a18      	ldr	r2, [pc, #96]	; (80051a8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00e      	beq.n	800516a <HAL_TIM_Base_Start_IT+0x8a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005154:	d009      	beq.n	800516a <HAL_TIM_Base_Start_IT+0x8a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a14      	ldr	r2, [pc, #80]	; (80051ac <HAL_TIM_Base_Start_IT+0xcc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d004      	beq.n	800516a <HAL_TIM_Base_Start_IT+0x8a>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d111      	bne.n	800518e <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b06      	cmp	r3, #6
 800517a:	d010      	beq.n	800519e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518c:	e007      	b.n	800519e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	0800b590 	.word	0x0800b590

080051b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0202 	mvn.w	r2, #2
 80051e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f8ed 	bl	80053da <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8e0 	bl	80053c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f8ef 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b04      	cmp	r3, #4
 8005220:	d122      	bne.n	8005268 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b04      	cmp	r3, #4
 800522e:	d11b      	bne.n	8005268 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0204 	mvn.w	r2, #4
 8005238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2202      	movs	r2, #2
 800523e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f8c3 	bl	80053da <HAL_TIM_IC_CaptureCallback>
 8005254:	e005      	b.n	8005262 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f8b6 	bl	80053c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f8c5 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b08      	cmp	r3, #8
 8005274:	d122      	bne.n	80052bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b08      	cmp	r3, #8
 8005282:	d11b      	bne.n	80052bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0208 	mvn.w	r2, #8
 800528c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2204      	movs	r2, #4
 8005292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f899 	bl	80053da <HAL_TIM_IC_CaptureCallback>
 80052a8:	e005      	b.n	80052b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f88c 	bl	80053c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f89b 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2b10      	cmp	r3, #16
 80052c8:	d122      	bne.n	8005310 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d11b      	bne.n	8005310 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0210 	mvn.w	r2, #16
 80052e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2208      	movs	r2, #8
 80052e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f86f 	bl	80053da <HAL_TIM_IC_CaptureCallback>
 80052fc:	e005      	b.n	800530a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f862 	bl	80053c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f871 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	d10e      	bne.n	800533c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b01      	cmp	r3, #1
 800532a:	d107      	bne.n	800533c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0201 	mvn.w	r2, #1
 8005334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fc fb3c 	bl	80019b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b80      	cmp	r3, #128	; 0x80
 8005348:	d10e      	bne.n	8005368 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005354:	2b80      	cmp	r3, #128	; 0x80
 8005356:	d107      	bne.n	8005368 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8bf 	bl	80054e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	d10e      	bne.n	8005394 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b40      	cmp	r3, #64	; 0x40
 8005382:	d107      	bne.n	8005394 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800538c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f835 	bl	80053fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d10e      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d107      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0220 	mvn.w	r2, #32
 80053b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f88a 	bl	80054d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr

080053da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr

080053fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a29      	ldr	r2, [pc, #164]	; (80054c8 <TIM_Base_SetConfig+0xb8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00b      	beq.n	8005440 <TIM_Base_SetConfig+0x30>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542e:	d007      	beq.n	8005440 <TIM_Base_SetConfig+0x30>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a26      	ldr	r2, [pc, #152]	; (80054cc <TIM_Base_SetConfig+0xbc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_Base_SetConfig+0x30>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a25      	ldr	r2, [pc, #148]	; (80054d0 <TIM_Base_SetConfig+0xc0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d108      	bne.n	8005452 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a1c      	ldr	r2, [pc, #112]	; (80054c8 <TIM_Base_SetConfig+0xb8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00b      	beq.n	8005472 <TIM_Base_SetConfig+0x62>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005460:	d007      	beq.n	8005472 <TIM_Base_SetConfig+0x62>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a19      	ldr	r2, [pc, #100]	; (80054cc <TIM_Base_SetConfig+0xbc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d003      	beq.n	8005472 <TIM_Base_SetConfig+0x62>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <TIM_Base_SetConfig+0xc0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d108      	bne.n	8005484 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a07      	ldr	r2, [pc, #28]	; (80054c8 <TIM_Base_SetConfig+0xb8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d103      	bne.n	80054b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	615a      	str	r2, [r3, #20]
}
 80054be:	bf00      	nop
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800

080054d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e092      	b.n	8005630 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d02c      	beq.n	800556c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a48      	ldr	r2, [pc, #288]	; (8005638 <HAL_UART_Init+0x140>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00e      	beq.n	800553a <HAL_UART_Init+0x42>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a46      	ldr	r2, [pc, #280]	; (800563c <HAL_UART_Init+0x144>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d009      	beq.n	800553a <HAL_UART_Init+0x42>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a45      	ldr	r2, [pc, #276]	; (8005640 <HAL_UART_Init+0x148>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d004      	beq.n	800553a <HAL_UART_Init+0x42>
 8005530:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005534:	4843      	ldr	r0, [pc, #268]	; (8005644 <HAL_UART_Init+0x14c>)
 8005536:	f7fc fa54 	bl	80019e2 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d028      	beq.n	8005594 <HAL_UART_Init+0x9c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554a:	d023      	beq.n	8005594 <HAL_UART_Init+0x9c>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005554:	d01e      	beq.n	8005594 <HAL_UART_Init+0x9c>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800555e:	d019      	beq.n	8005594 <HAL_UART_Init+0x9c>
 8005560:	f240 1147 	movw	r1, #327	; 0x147
 8005564:	4837      	ldr	r0, [pc, #220]	; (8005644 <HAL_UART_Init+0x14c>)
 8005566:	f7fc fa3c 	bl	80019e2 <assert_failed>
 800556a:	e013      	b.n	8005594 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a31      	ldr	r2, [pc, #196]	; (8005638 <HAL_UART_Init+0x140>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <HAL_UART_Init+0x9c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a30      	ldr	r2, [pc, #192]	; (800563c <HAL_UART_Init+0x144>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_UART_Init+0x9c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2e      	ldr	r2, [pc, #184]	; (8005640 <HAL_UART_Init+0x148>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_UART_Init+0x9c>
 800558a:	f240 114b 	movw	r1, #331	; 0x14b
 800558e:	482d      	ldr	r0, [pc, #180]	; (8005644 <HAL_UART_Init+0x14c>)
 8005590:	f7fc fa27 	bl	80019e2 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <HAL_UART_Init+0xb8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a4:	d004      	beq.n	80055b0 <HAL_UART_Init+0xb8>
 80055a6:	f240 114d 	movw	r1, #333	; 0x14d
 80055aa:	4826      	ldr	r0, [pc, #152]	; (8005644 <HAL_UART_Init+0x14c>)
 80055ac:	f7fc fa19 	bl	80019e2 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7fc fcf9 	bl	8001fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2224      	movs	r2, #36	; 0x24
 80055ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f9ac 	bl	8005940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695a      	ldr	r2, [r3, #20]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005606:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005616:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40013800 	.word	0x40013800
 800563c:	40004400 	.word	0x40004400
 8005640:	40004800 	.word	0x40004800
 8005644:	0800b5c8 	.word	0x0800b5c8

08005648 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	; 0x28
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b20      	cmp	r3, #32
 8005666:	d17c      	bne.n	8005762 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_UART_Transmit+0x2c>
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e075      	b.n	8005764 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_UART_Transmit+0x3e>
 8005682:	2302      	movs	r3, #2
 8005684:	e06e      	b.n	8005764 <HAL_UART_Transmit+0x11c>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2221      	movs	r2, #33	; 0x21
 8005698:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800569c:	f7fc fd28 	bl	80020f0 <HAL_GetTick>
 80056a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	88fa      	ldrh	r2, [r7, #6]
 80056ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b6:	d108      	bne.n	80056ca <HAL_UART_Transmit+0x82>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	e003      	b.n	80056d2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80056da:	e02a      	b.n	8005732 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	2180      	movs	r1, #128	; 0x80
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f8df 	bl	80058aa <UART_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e036      	b.n	8005764 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10b      	bne.n	8005714 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800570a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	3302      	adds	r3, #2
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	e007      	b.n	8005724 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	781a      	ldrb	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	3301      	adds	r3, #1
 8005722:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1cf      	bne.n	80056dc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2200      	movs	r2, #0
 8005744:	2140      	movs	r1, #64	; 0x40
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f8af 	bl	80058aa <UART_WaitOnFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e006      	b.n	8005764 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	; 0x28
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	4613      	mov	r3, r2
 800577a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b20      	cmp	r3, #32
 800578a:	f040 8089 	bne.w	80058a0 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <HAL_UART_Receive+0x2e>
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e081      	b.n	80058a2 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_UART_Receive+0x40>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e07a      	b.n	80058a2 <HAL_UART_Receive+0x136>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2222      	movs	r2, #34	; 0x22
 80057be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80057c2:	f7fc fc95 	bl	80020f0 <HAL_GetTick>
 80057c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	88fa      	ldrh	r2, [r7, #6]
 80057cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	88fa      	ldrh	r2, [r7, #6]
 80057d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057dc:	d108      	bne.n	80057f0 <HAL_UART_Receive+0x84>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d104      	bne.n	80057f0 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	e003      	b.n	80057f8 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005800:	e043      	b.n	800588a <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2200      	movs	r2, #0
 800580a:	2120      	movs	r1, #32
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f84c 	bl	80058aa <UART_WaitOnFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e042      	b.n	80058a2 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10c      	bne.n	800583c <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582e:	b29a      	uxth	r2, r3
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	3302      	adds	r3, #2
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e01f      	b.n	800587c <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005844:	d007      	beq.n	8005856 <HAL_UART_Receive+0xea>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10a      	bne.n	8005864 <HAL_UART_Receive+0xf8>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	b2da      	uxtb	r2, r3
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	e008      	b.n	8005876 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	b2db      	uxtb	r3, r3
 800586c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005870:	b2da      	uxtb	r2, r3
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	3301      	adds	r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1b6      	bne.n	8005802 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	e000      	b.n	80058a2 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80058a0:	2302      	movs	r3, #2
  }
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	4613      	mov	r3, r2
 80058b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ba:	e02c      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c2:	d028      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <UART_WaitOnFlagUntilTimeout+0x30>
 80058ca:	f7fc fc11 	bl	80020f0 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d21d      	bcs.n	8005916 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695a      	ldr	r2, [r3, #20]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0201 	bic.w	r2, r2, #1
 80058f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e00f      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4013      	ands	r3, r2
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	429a      	cmp	r2, r3
 8005932:	d0c3      	beq.n	80058bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a5f      	ldr	r2, [pc, #380]	; (8005acc <UART_SetConfig+0x18c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d904      	bls.n	800595c <UART_SetConfig+0x1c>
 8005952:	f640 31f6 	movw	r1, #3062	; 0xbf6
 8005956:	485e      	ldr	r0, [pc, #376]	; (8005ad0 <UART_SetConfig+0x190>)
 8005958:	f7fc f843 	bl	80019e2 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d009      	beq.n	8005978 <UART_SetConfig+0x38>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800596c:	d004      	beq.n	8005978 <UART_SetConfig+0x38>
 800596e:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8005972:	4857      	ldr	r0, [pc, #348]	; (8005ad0 <UART_SetConfig+0x190>)
 8005974:	f7fc f835 	bl	80019e2 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00e      	beq.n	800599e <UART_SetConfig+0x5e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005988:	d009      	beq.n	800599e <UART_SetConfig+0x5e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005992:	d004      	beq.n	800599e <UART_SetConfig+0x5e>
 8005994:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8005998:	484d      	ldr	r0, [pc, #308]	; (8005ad0 <UART_SetConfig+0x190>)
 800599a:	f7fc f822 	bl	80019e2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d103      	bne.n	80059b4 <UART_SetConfig+0x74>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d104      	bne.n	80059be <UART_SetConfig+0x7e>
 80059b4:	f640 31f9 	movw	r1, #3065	; 0xbf9
 80059b8:	4845      	ldr	r0, [pc, #276]	; (8005ad0 <UART_SetConfig+0x190>)
 80059ba:	f7fc f812 	bl	80019e2 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80059f0:	f023 030c 	bic.w	r3, r3, #12
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	430b      	orrs	r3, r1
 80059fc:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a2e      	ldr	r2, [pc, #184]	; (8005ad4 <UART_SetConfig+0x194>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d103      	bne.n	8005a26 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a1e:	f7fe faab 	bl	8003f78 <HAL_RCC_GetPCLK2Freq>
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	e002      	b.n	8005a2c <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a26:	f7fe fa93 	bl	8003f50 <HAL_RCC_GetPCLK1Freq>
 8005a2a:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009a      	lsls	r2, r3, #2
 8005a36:	441a      	add	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	4a25      	ldr	r2, [pc, #148]	; (8005ad8 <UART_SetConfig+0x198>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	0119      	lsls	r1, r3, #4
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009a      	lsls	r2, r3, #2
 8005a56:	441a      	add	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a62:	4b1d      	ldr	r3, [pc, #116]	; (8005ad8 <UART_SetConfig+0x198>)
 8005a64:	fba3 0302 	umull	r0, r3, r3, r2
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	2064      	movs	r0, #100	; 0x64
 8005a6c:	fb00 f303 	mul.w	r3, r0, r3
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	3332      	adds	r3, #50	; 0x32
 8005a76:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <UART_SetConfig+0x198>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a82:	4419      	add	r1, r3
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009a      	lsls	r2, r3, #2
 8005a8e:	441a      	add	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <UART_SetConfig+0x198>)
 8005a9c:	fba3 0302 	umull	r0, r3, r3, r2
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	2064      	movs	r0, #100	; 0x64
 8005aa4:	fb00 f303 	mul.w	r3, r0, r3
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	3332      	adds	r3, #50	; 0x32
 8005aae:	4a0a      	ldr	r2, [pc, #40]	; (8005ad8 <UART_SetConfig+0x198>)
 8005ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	f003 020f 	and.w	r2, r3, #15
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	440a      	add	r2, r1
 8005ac0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	0044aa20 	.word	0x0044aa20
 8005ad0:	0800b5c8 	.word	0x0800b5c8
 8005ad4:	40013800 	.word	0x40013800
 8005ad8:	51eb851f 	.word	0x51eb851f

08005adc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae2:	f3ef 8305 	mrs	r3, IPSR
 8005ae6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10f      	bne.n	8005b0e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aee:	f3ef 8310 	mrs	r3, PRIMASK
 8005af2:	607b      	str	r3, [r7, #4]
  return(result);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <osKernelInitialize+0x32>
 8005afa:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <osKernelInitialize+0x60>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d109      	bne.n	8005b16 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b02:	f3ef 8311 	mrs	r3, BASEPRI
 8005b06:	603b      	str	r3, [r7, #0]
  return(result);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005b0e:	f06f 0305 	mvn.w	r3, #5
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e00c      	b.n	8005b30 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <osKernelInitialize+0x60>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d105      	bne.n	8005b2a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <osKernelInitialize+0x60>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e002      	b.n	8005b30 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005b30:	68fb      	ldr	r3, [r7, #12]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr
 8005b3c:	200000a8 	.word	0x200000a8

08005b40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b46:	f3ef 8305 	mrs	r3, IPSR
 8005b4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10f      	bne.n	8005b72 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b52:	f3ef 8310 	mrs	r3, PRIMASK
 8005b56:	607b      	str	r3, [r7, #4]
  return(result);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d109      	bne.n	8005b72 <osKernelStart+0x32>
 8005b5e:	4b11      	ldr	r3, [pc, #68]	; (8005ba4 <osKernelStart+0x64>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d109      	bne.n	8005b7a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b66:	f3ef 8311 	mrs	r3, BASEPRI
 8005b6a:	603b      	str	r3, [r7, #0]
  return(result);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005b72:	f06f 0305 	mvn.w	r3, #5
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e00e      	b.n	8005b98 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <osKernelStart+0x64>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d107      	bne.n	8005b92 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005b82:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <osKernelStart+0x64>)
 8005b84:	2202      	movs	r2, #2
 8005b86:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005b88:	f002 f824 	bl	8007bd4 <vTaskStartScheduler>
      stat = osOK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	e002      	b.n	8005b98 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005b92:	f04f 33ff 	mov.w	r3, #4294967295
 8005b96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005b98:	68fb      	ldr	r3, [r7, #12]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200000a8 	.word	0x200000a8

08005ba8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b092      	sub	sp, #72	; 0x48
 8005bac:	af04      	add	r7, sp, #16
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bb8:	f3ef 8305 	mrs	r3, IPSR
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f040 8094 	bne.w	8005cee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bca:	623b      	str	r3, [r7, #32]
  return(result);
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f040 808d 	bne.w	8005cee <osThreadNew+0x146>
 8005bd4:	4b48      	ldr	r3, [pc, #288]	; (8005cf8 <osThreadNew+0x150>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d106      	bne.n	8005bea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8005be0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f040 8082 	bne.w	8005cee <osThreadNew+0x146>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d07e      	beq.n	8005cee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005bf0:	2340      	movs	r3, #64	; 0x40
 8005bf2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005bf4:	2318      	movs	r3, #24
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005bfc:	f107 031b 	add.w	r3, r7, #27
 8005c00:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
 8005c06:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d045      	beq.n	8005c9a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <osThreadNew+0x74>
        name = attr->name;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <osThreadNew+0x9a>
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	2b38      	cmp	r3, #56	; 0x38
 8005c34:	d805      	bhi.n	8005c42 <osThreadNew+0x9a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <osThreadNew+0x9e>
        return (NULL);
 8005c42:	2300      	movs	r3, #0
 8005c44:	e054      	b.n	8005cf0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	089b      	lsrs	r3, r3, #2
 8005c54:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00e      	beq.n	8005c7c <osThreadNew+0xd4>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	2b6f      	cmp	r3, #111	; 0x6f
 8005c64:	d90a      	bls.n	8005c7c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d006      	beq.n	8005c7c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <osThreadNew+0xd4>
        mem = 1;
 8005c76:	2301      	movs	r3, #1
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c7a:	e010      	b.n	8005c9e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10c      	bne.n	8005c9e <osThreadNew+0xf6>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d108      	bne.n	8005c9e <osThreadNew+0xf6>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <osThreadNew+0xf6>
          mem = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c98:	e001      	b.n	8005c9e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d110      	bne.n	8005cc6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cac:	9202      	str	r2, [sp, #8]
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f001 fdba 	bl	8007834 <xTaskCreateStatic>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e013      	b.n	8005cee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d110      	bne.n	8005cee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	f107 0314 	add.w	r3, r7, #20
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f001 fe04 	bl	80078ec <xTaskCreate>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d001      	beq.n	8005cee <osThreadNew+0x146>
          hTask = NULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005cee:	697b      	ldr	r3, [r7, #20]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3738      	adds	r7, #56	; 0x38
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	200000a8 	.word	0x200000a8

08005cfc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d04:	f3ef 8305 	mrs	r3, IPSR
 8005d08:	613b      	str	r3, [r7, #16]
  return(result);
 8005d0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10f      	bne.n	8005d30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d10:	f3ef 8310 	mrs	r3, PRIMASK
 8005d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d109      	bne.n	8005d30 <osDelay+0x34>
 8005d1c:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <osDelay+0x58>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d109      	bne.n	8005d38 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d24:	f3ef 8311 	mrs	r3, BASEPRI
 8005d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <osDelay+0x3c>
    stat = osErrorISR;
 8005d30:	f06f 0305 	mvn.w	r3, #5
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	e007      	b.n	8005d48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 ff12 	bl	8007b6c <vTaskDelay>
    }
  }

  return (stat);
 8005d48:	697b      	ldr	r3, [r7, #20]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	200000a8 	.word	0x200000a8

08005d58 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08a      	sub	sp, #40	; 0x28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d64:	f3ef 8305 	mrs	r3, IPSR
 8005d68:	613b      	str	r3, [r7, #16]
  return(result);
 8005d6a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f040 8085 	bne.w	8005e7c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d72:	f3ef 8310 	mrs	r3, PRIMASK
 8005d76:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d17e      	bne.n	8005e7c <osMutexNew+0x124>
 8005d7e:	4b42      	ldr	r3, [pc, #264]	; (8005e88 <osMutexNew+0x130>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d105      	bne.n	8005d92 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d86:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d174      	bne.n	8005e7c <osMutexNew+0x124>
    if (attr != NULL) {
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <osMutexNew+0x48>
      type = attr->attr_bits;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	623b      	str	r3, [r7, #32]
 8005d9e:	e001      	b.n	8005da4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <osMutexNew+0x5c>
      rmtx = 1U;
 8005dae:	2301      	movs	r3, #1
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	e001      	b.n	8005db8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d15c      	bne.n	8005e7c <osMutexNew+0x124>
      mem = -1;
 8005dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d015      	beq.n	8005dfa <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d006      	beq.n	8005de4 <osMutexNew+0x8c>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b4f      	cmp	r3, #79	; 0x4f
 8005ddc:	d902      	bls.n	8005de4 <osMutexNew+0x8c>
          mem = 1;
 8005dde:	2301      	movs	r3, #1
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	e00c      	b.n	8005dfe <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d108      	bne.n	8005dfe <osMutexNew+0xa6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <osMutexNew+0xa6>
            mem = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	e001      	b.n	8005dfe <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d112      	bne.n	8005e2a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	2004      	movs	r0, #4
 8005e12:	f000 fdcd 	bl	80069b0 <xQueueCreateMutexStatic>
 8005e16:	6278      	str	r0, [r7, #36]	; 0x24
 8005e18:	e016      	b.n	8005e48 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	2001      	movs	r0, #1
 8005e22:	f000 fdc5 	bl	80069b0 <xQueueCreateMutexStatic>
 8005e26:	6278      	str	r0, [r7, #36]	; 0x24
 8005e28:	e00e      	b.n	8005e48 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10b      	bne.n	8005e48 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d004      	beq.n	8005e40 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005e36:	2004      	movs	r0, #4
 8005e38:	f000 fda2 	bl	8006980 <xQueueCreateMutex>
 8005e3c:	6278      	str	r0, [r7, #36]	; 0x24
 8005e3e:	e003      	b.n	8005e48 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8005e40:	2001      	movs	r0, #1
 8005e42:	f000 fd9d 	bl	8006980 <xQueueCreateMutex>
 8005e46:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <osMutexNew+0x110>
        if (attr != NULL) {
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <osMutexNew+0x104>
          name = attr->name;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	e001      	b.n	8005e60 <osMutexNew+0x108>
        } else {
          name = NULL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8005e60:	6979      	ldr	r1, [r7, #20]
 8005e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e64:	f001 fc60 	bl	8007728 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d006      	beq.n	8005e7c <osMutexNew+0x124>
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3728      	adds	r7, #40	; 0x28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	200000a8 	.word	0x200000a8

08005e8c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08c      	sub	sp, #48	; 0x30
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e9c:	f3ef 8305 	mrs	r3, IPSR
 8005ea0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ea2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f040 8086 	bne.w	8005fb6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8005eae:	617b      	str	r3, [r7, #20]
  return(result);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d17f      	bne.n	8005fb6 <osSemaphoreNew+0x12a>
 8005eb6:	4b42      	ldr	r3, [pc, #264]	; (8005fc0 <osSemaphoreNew+0x134>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d105      	bne.n	8005eca <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ebe:	f3ef 8311 	mrs	r3, BASEPRI
 8005ec2:	613b      	str	r3, [r7, #16]
  return(result);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d175      	bne.n	8005fb6 <osSemaphoreNew+0x12a>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d072      	beq.n	8005fb6 <osSemaphoreNew+0x12a>
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d86e      	bhi.n	8005fb6 <osSemaphoreNew+0x12a>
    mem = -1;
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d015      	beq.n	8005f10 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d006      	beq.n	8005efa <osSemaphoreNew+0x6e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b4f      	cmp	r3, #79	; 0x4f
 8005ef2:	d902      	bls.n	8005efa <osSemaphoreNew+0x6e>
        mem = 1;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	623b      	str	r3, [r7, #32]
 8005ef8:	e00c      	b.n	8005f14 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d108      	bne.n	8005f14 <osSemaphoreNew+0x88>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <osSemaphoreNew+0x88>
          mem = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	623b      	str	r3, [r7, #32]
 8005f0e:	e001      	b.n	8005f14 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1a:	d04c      	beq.n	8005fb6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d128      	bne.n	8005f74 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d10a      	bne.n	8005f3e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	9200      	str	r2, [sp, #0]
 8005f30:	2200      	movs	r2, #0
 8005f32:	2100      	movs	r1, #0
 8005f34:	2001      	movs	r0, #1
 8005f36:	f000 fc31 	bl	800679c <xQueueGenericCreateStatic>
 8005f3a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f3c:	e005      	b.n	8005f4a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005f3e:	2203      	movs	r2, #3
 8005f40:	2100      	movs	r1, #0
 8005f42:	2001      	movs	r0, #1
 8005f44:	f000 fca1 	bl	800688a <xQueueGenericCreate>
 8005f48:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d022      	beq.n	8005f96 <osSemaphoreNew+0x10a>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01f      	beq.n	8005f96 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005f56:	2300      	movs	r3, #0
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f5e:	f000 fdad 	bl	8006abc <xQueueGenericSend>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d016      	beq.n	8005f96 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f6a:	f001 fa93 	bl	8007494 <vQueueDelete>
            hSemaphore = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
 8005f72:	e010      	b.n	8005f96 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d108      	bne.n	8005f8c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 fd2f 	bl	80069e6 <xQueueCreateCountingSemaphoreStatic>
 8005f88:	6278      	str	r0, [r7, #36]	; 0x24
 8005f8a:	e004      	b.n	8005f96 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fd60 	bl	8006a54 <xQueueCreateCountingSemaphore>
 8005f94:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00c      	beq.n	8005fb6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <osSemaphoreNew+0x11e>
          name = attr->name;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	61fb      	str	r3, [r7, #28]
 8005fa8:	e001      	b.n	8005fae <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005fae:	69f9      	ldr	r1, [r7, #28]
 8005fb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fb2:	f001 fbb9 	bl	8007728 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3728      	adds	r7, #40	; 0x28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	200000a8 	.word	0x200000a8

08005fc4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005fdc:	f06f 0303 	mvn.w	r3, #3
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	e04b      	b.n	800607c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fe4:	f3ef 8305 	mrs	r3, IPSR
 8005fe8:	617b      	str	r3, [r7, #20]
  return(result);
 8005fea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10f      	bne.n	8006010 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff4:	613b      	str	r3, [r7, #16]
  return(result);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d109      	bne.n	8006010 <osSemaphoreAcquire+0x4c>
 8005ffc:	4b22      	ldr	r3, [pc, #136]	; (8006088 <osSemaphoreAcquire+0xc4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b02      	cmp	r3, #2
 8006002:	d128      	bne.n	8006056 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006004:	f3ef 8311 	mrs	r3, BASEPRI
 8006008:	60fb      	str	r3, [r7, #12]
  return(result);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d022      	beq.n	8006056 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006016:	f06f 0303 	mvn.w	r3, #3
 800601a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800601c:	e02d      	b.n	800607a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800601e:	2300      	movs	r3, #0
 8006020:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006022:	f107 0308 	add.w	r3, r7, #8
 8006026:	461a      	mov	r2, r3
 8006028:	2100      	movs	r1, #0
 800602a:	69b8      	ldr	r0, [r7, #24]
 800602c:	f001 f956 	bl	80072dc <xQueueReceiveFromISR>
 8006030:	4603      	mov	r3, r0
 8006032:	2b01      	cmp	r3, #1
 8006034:	d003      	beq.n	800603e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006036:	f06f 0302 	mvn.w	r3, #2
 800603a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800603c:	e01d      	b.n	800607a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01a      	beq.n	800607a <osSemaphoreAcquire+0xb6>
 8006044:	4b11      	ldr	r3, [pc, #68]	; (800608c <osSemaphoreAcquire+0xc8>)
 8006046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006054:	e011      	b.n	800607a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	69b8      	ldr	r0, [r7, #24]
 800605a:	f001 f833 	bl	80070c4 <xQueueSemaphoreTake>
 800605e:	4603      	mov	r3, r0
 8006060:	2b01      	cmp	r3, #1
 8006062:	d00b      	beq.n	800607c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800606a:	f06f 0301 	mvn.w	r3, #1
 800606e:	61fb      	str	r3, [r7, #28]
 8006070:	e004      	b.n	800607c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006072:	f06f 0302 	mvn.w	r3, #2
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	e000      	b.n	800607c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800607a:	bf00      	nop
      }
    }
  }

  return (stat);
 800607c:	69fb      	ldr	r3, [r7, #28]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3720      	adds	r7, #32
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	200000a8 	.word	0x200000a8
 800608c:	e000ed04 	.word	0xe000ed04

08006090 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800609c:	2300      	movs	r3, #0
 800609e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d103      	bne.n	80060ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80060a6:	f06f 0303 	mvn.w	r3, #3
 80060aa:	61fb      	str	r3, [r7, #28]
 80060ac:	e03e      	b.n	800612c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ae:	f3ef 8305 	mrs	r3, IPSR
 80060b2:	617b      	str	r3, [r7, #20]
  return(result);
 80060b4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10f      	bne.n	80060da <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ba:	f3ef 8310 	mrs	r3, PRIMASK
 80060be:	613b      	str	r3, [r7, #16]
  return(result);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <osSemaphoreRelease+0x4a>
 80060c6:	4b1c      	ldr	r3, [pc, #112]	; (8006138 <osSemaphoreRelease+0xa8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d120      	bne.n	8006110 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060ce:	f3ef 8311 	mrs	r3, BASEPRI
 80060d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01a      	beq.n	8006110 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80060de:	f107 0308 	add.w	r3, r7, #8
 80060e2:	4619      	mov	r1, r3
 80060e4:	69b8      	ldr	r0, [r7, #24]
 80060e6:	f000 fe7f 	bl	8006de8 <xQueueGiveFromISR>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d003      	beq.n	80060f8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80060f0:	f06f 0302 	mvn.w	r3, #2
 80060f4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80060f6:	e018      	b.n	800612a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d015      	beq.n	800612a <osSemaphoreRelease+0x9a>
 80060fe:	4b0f      	ldr	r3, [pc, #60]	; (800613c <osSemaphoreRelease+0xac>)
 8006100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800610e:	e00c      	b.n	800612a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006110:	2300      	movs	r3, #0
 8006112:	2200      	movs	r2, #0
 8006114:	2100      	movs	r1, #0
 8006116:	69b8      	ldr	r0, [r7, #24]
 8006118:	f000 fcd0 	bl	8006abc <xQueueGenericSend>
 800611c:	4603      	mov	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d004      	beq.n	800612c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006122:	f06f 0302 	mvn.w	r3, #2
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	e000      	b.n	800612c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800612a:	bf00      	nop
    }
  }

  return (stat);
 800612c:	69fb      	ldr	r3, [r7, #28]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	200000a8 	.word	0x200000a8
 800613c:	e000ed04 	.word	0xe000ed04

08006140 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b08c      	sub	sp, #48	; 0x30
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800614c:	2300      	movs	r3, #0
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006150:	f3ef 8305 	mrs	r3, IPSR
 8006154:	61bb      	str	r3, [r7, #24]
  return(result);
 8006156:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006158:	2b00      	cmp	r3, #0
 800615a:	d16f      	bne.n	800623c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800615c:	f3ef 8310 	mrs	r3, PRIMASK
 8006160:	617b      	str	r3, [r7, #20]
  return(result);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d169      	bne.n	800623c <osMessageQueueNew+0xfc>
 8006168:	4b37      	ldr	r3, [pc, #220]	; (8006248 <osMessageQueueNew+0x108>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d105      	bne.n	800617c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006170:	f3ef 8311 	mrs	r3, BASEPRI
 8006174:	613b      	str	r3, [r7, #16]
  return(result);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d15f      	bne.n	800623c <osMessageQueueNew+0xfc>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d05c      	beq.n	800623c <osMessageQueueNew+0xfc>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d059      	beq.n	800623c <osMessageQueueNew+0xfc>
    mem = -1;
 8006188:	f04f 33ff 	mov.w	r3, #4294967295
 800618c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d029      	beq.n	80061e8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d012      	beq.n	80061c2 <osMessageQueueNew+0x82>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b4f      	cmp	r3, #79	; 0x4f
 80061a2:	d90e      	bls.n	80061c2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	695a      	ldr	r2, [r3, #20]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	fb01 f303 	mul.w	r3, r1, r3
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d302      	bcc.n	80061c2 <osMessageQueueNew+0x82>
        mem = 1;
 80061bc:	2301      	movs	r3, #1
 80061be:	623b      	str	r3, [r7, #32]
 80061c0:	e014      	b.n	80061ec <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d110      	bne.n	80061ec <osMessageQueueNew+0xac>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10c      	bne.n	80061ec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d108      	bne.n	80061ec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d104      	bne.n	80061ec <osMessageQueueNew+0xac>
          mem = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	e001      	b.n	80061ec <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d10b      	bne.n	800620a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691a      	ldr	r2, [r3, #16]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2100      	movs	r1, #0
 80061fc:	9100      	str	r1, [sp, #0]
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 facb 	bl	800679c <xQueueGenericCreateStatic>
 8006206:	6278      	str	r0, [r7, #36]	; 0x24
 8006208:	e008      	b.n	800621c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d105      	bne.n	800621c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006210:	2200      	movs	r2, #0
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fb38 	bl	800688a <xQueueGenericCreate>
 800621a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00c      	beq.n	800623c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	61fb      	str	r3, [r7, #28]
 800622e:	e001      	b.n	8006234 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006234:	69f9      	ldr	r1, [r7, #28]
 8006236:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006238:	f001 fa76 	bl	8007728 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800623e:	4618      	mov	r0, r3
 8006240:	3728      	adds	r7, #40	; 0x28
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	200000a8 	.word	0x200000a8

0800624c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	; 0x28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006260:	2300      	movs	r3, #0
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006264:	f3ef 8305 	mrs	r3, IPSR
 8006268:	61fb      	str	r3, [r7, #28]
  return(result);
 800626a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10f      	bne.n	8006290 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006270:	f3ef 8310 	mrs	r3, PRIMASK
 8006274:	61bb      	str	r3, [r7, #24]
  return(result);
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d109      	bne.n	8006290 <osMessageQueuePut+0x44>
 800627c:	4b2b      	ldr	r3, [pc, #172]	; (800632c <osMessageQueuePut+0xe0>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d12e      	bne.n	80062e2 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006284:	f3ef 8311 	mrs	r3, BASEPRI
 8006288:	617b      	str	r3, [r7, #20]
  return(result);
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d028      	beq.n	80062e2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <osMessageQueuePut+0x56>
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <osMessageQueuePut+0x56>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80062a2:	f06f 0303 	mvn.w	r3, #3
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80062a8:	e039      	b.n	800631e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80062ae:	f107 0210 	add.w	r2, r7, #16
 80062b2:	2300      	movs	r3, #0
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	6a38      	ldr	r0, [r7, #32]
 80062b8:	f000 fcfe 	bl	8006cb8 <xQueueGenericSendFromISR>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d003      	beq.n	80062ca <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80062c2:	f06f 0302 	mvn.w	r3, #2
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80062c8:	e029      	b.n	800631e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d026      	beq.n	800631e <osMessageQueuePut+0xd2>
 80062d0:	4b17      	ldr	r3, [pc, #92]	; (8006330 <osMessageQueuePut+0xe4>)
 80062d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80062e0:	e01d      	b.n	800631e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <osMessageQueuePut+0xa2>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d103      	bne.n	80062f6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80062ee:	f06f 0303 	mvn.w	r3, #3
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
 80062f4:	e014      	b.n	8006320 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80062f6:	2300      	movs	r3, #0
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	6a38      	ldr	r0, [r7, #32]
 80062fe:	f000 fbdd 	bl	8006abc <xQueueGenericSend>
 8006302:	4603      	mov	r3, r0
 8006304:	2b01      	cmp	r3, #1
 8006306:	d00b      	beq.n	8006320 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800630e:	f06f 0301 	mvn.w	r3, #1
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
 8006314:	e004      	b.n	8006320 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006316:	f06f 0302 	mvn.w	r3, #2
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
 800631c:	e000      	b.n	8006320 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800631e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006322:	4618      	mov	r0, r3
 8006324:	3728      	adds	r7, #40	; 0x28
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200000a8 	.word	0x200000a8
 8006330:	e000ed04 	.word	0xe000ed04

08006334 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b08a      	sub	sp, #40	; 0x28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006346:	2300      	movs	r3, #0
 8006348:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800634a:	f3ef 8305 	mrs	r3, IPSR
 800634e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006350:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10f      	bne.n	8006376 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006356:	f3ef 8310 	mrs	r3, PRIMASK
 800635a:	61bb      	str	r3, [r7, #24]
  return(result);
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d109      	bne.n	8006376 <osMessageQueueGet+0x42>
 8006362:	4b2b      	ldr	r3, [pc, #172]	; (8006410 <osMessageQueueGet+0xdc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b02      	cmp	r3, #2
 8006368:	d12e      	bne.n	80063c8 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800636a:	f3ef 8311 	mrs	r3, BASEPRI
 800636e:	617b      	str	r3, [r7, #20]
  return(result);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d028      	beq.n	80063c8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <osMessageQueueGet+0x54>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <osMessageQueueGet+0x54>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006388:	f06f 0303 	mvn.w	r3, #3
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800638e:	e038      	b.n	8006402 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006394:	f107 0310 	add.w	r3, r7, #16
 8006398:	461a      	mov	r2, r3
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	6a38      	ldr	r0, [r7, #32]
 800639e:	f000 ff9d 	bl	80072dc <xQueueReceiveFromISR>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d003      	beq.n	80063b0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80063a8:	f06f 0302 	mvn.w	r3, #2
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80063ae:	e028      	b.n	8006402 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d025      	beq.n	8006402 <osMessageQueueGet+0xce>
 80063b6:	4b17      	ldr	r3, [pc, #92]	; (8006414 <osMessageQueueGet+0xe0>)
 80063b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80063c6:	e01c      	b.n	8006402 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <osMessageQueueGet+0xa0>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d103      	bne.n	80063dc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80063d4:	f06f 0303 	mvn.w	r3, #3
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
 80063da:	e013      	b.n	8006404 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	6a38      	ldr	r0, [r7, #32]
 80063e2:	f000 fd8f 	bl	8006f04 <xQueueReceive>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d00b      	beq.n	8006404 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80063f2:	f06f 0301 	mvn.w	r3, #1
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
 80063f8:	e004      	b.n	8006404 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80063fa:	f06f 0302 	mvn.w	r3, #2
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006400:	e000      	b.n	8006404 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006402:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006406:	4618      	mov	r0, r3
 8006408:	3728      	adds	r7, #40	; 0x28
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	200000a8 	.word	0x200000a8
 8006414:	e000ed04 	.word	0xe000ed04

08006418 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <osMessageQueueGetCount+0x18>
    count = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	e01e      	b.n	800646e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006430:	f3ef 8305 	mrs	r3, IPSR
 8006434:	617b      	str	r3, [r7, #20]
  return(result);
 8006436:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10f      	bne.n	800645c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643c:	f3ef 8310 	mrs	r3, PRIMASK
 8006440:	613b      	str	r3, [r7, #16]
  return(result);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <osMessageQueueGetCount+0x44>
 8006448:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <osMessageQueueGetCount+0x60>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d10a      	bne.n	8006466 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006450:	f3ef 8311 	mrs	r3, BASEPRI
 8006454:	60fb      	str	r3, [r7, #12]
  return(result);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d004      	beq.n	8006466 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800645c:	69b8      	ldr	r0, [r7, #24]
 800645e:	f000 fffe 	bl	800745e <uxQueueMessagesWaitingFromISR>
 8006462:	61f8      	str	r0, [r7, #28]
 8006464:	e003      	b.n	800646e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006466:	69b8      	ldr	r0, [r7, #24]
 8006468:	f000 ffb8 	bl	80073dc <uxQueueMessagesWaiting>
 800646c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800646e:	69fb      	ldr	r3, [r7, #28]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3720      	adds	r7, #32
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	200000a8 	.word	0x200000a8

0800647c <osMessageQueueGetSpace>:

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800647c:	b580      	push	{r7, lr}
 800647e:	b08c      	sub	sp, #48	; 0x30
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	2b00      	cmp	r3, #0
 800648c:	d102      	bne.n	8006494 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006492:	e034      	b.n	80064fe <osMessageQueueGetSpace+0x82>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006494:	f3ef 8305 	mrs	r3, IPSR
 8006498:	623b      	str	r3, [r7, #32]
  return(result);
 800649a:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10f      	bne.n	80064c0 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064a0:	f3ef 8310 	mrs	r3, PRIMASK
 80064a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d109      	bne.n	80064c0 <osMessageQueueGetSpace+0x44>
 80064ac:	4b16      	ldr	r3, [pc, #88]	; (8006508 <osMessageQueueGetSpace+0x8c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d120      	bne.n	80064f6 <osMessageQueueGetSpace+0x7a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064b4:	f3ef 8311 	mrs	r3, BASEPRI
 80064b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01a      	beq.n	80064f6 <osMessageQueueGetSpace+0x7a>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064c0:	f3ef 8211 	mrs	r2, BASEPRI
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	613a      	str	r2, [r7, #16]
 80064d6:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064d8:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 80064da:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064f2:	bf00      	nop

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 80064f4:	e003      	b.n	80064fe <osMessageQueueGetSpace+0x82>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 80064f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f8:	f000 ff8e 	bl	8007418 <uxQueueSpacesAvailable>
 80064fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006500:	4618      	mov	r0, r3
 8006502:	3730      	adds	r7, #48	; 0x30
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	200000a8 	.word	0x200000a8

0800650c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a06      	ldr	r2, [pc, #24]	; (8006534 <vApplicationGetIdleTaskMemory+0x28>)
 800651c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4a05      	ldr	r2, [pc, #20]	; (8006538 <vApplicationGetIdleTaskMemory+0x2c>)
 8006522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2240      	movs	r2, #64	; 0x40
 8006528:	601a      	str	r2, [r3, #0]
}
 800652a:	bf00      	nop
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr
 8006534:	200000ac 	.word	0x200000ac
 8006538:	2000011c 	.word	0x2000011c

0800653c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4a06      	ldr	r2, [pc, #24]	; (8006564 <vApplicationGetTimerTaskMemory+0x28>)
 800654c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4a05      	ldr	r2, [pc, #20]	; (8006568 <vApplicationGetTimerTaskMemory+0x2c>)
 8006552:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2280      	movs	r2, #128	; 0x80
 8006558:	601a      	str	r2, [r3, #0]
}
 800655a:	bf00      	nop
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	bc80      	pop	{r7}
 8006562:	4770      	bx	lr
 8006564:	2000021c 	.word	0x2000021c
 8006568:	2000028c 	.word	0x2000028c

0800656c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f103 0208 	add.w	r2, r3, #8
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f04f 32ff 	mov.w	r2, #4294967295
 8006584:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f103 0208 	add.w	r2, r3, #8
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f103 0208 	add.w	r2, r3, #8
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	bc80      	pop	{r7}
 80065c0:	4770      	bx	lr

080065c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	601a      	str	r2, [r3, #0]
}
 80065fe:	bf00      	nop
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr

08006608 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661e:	d103      	bne.n	8006628 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	e00c      	b.n	8006642 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3308      	adds	r3, #8
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	e002      	b.n	8006636 <vListInsert+0x2e>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	429a      	cmp	r2, r3
 8006640:	d2f6      	bcs.n	8006630 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	601a      	str	r2, [r3, #0]
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr

08006678 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6892      	ldr	r2, [r2, #8]
 800668e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6852      	ldr	r2, [r2, #4]
 8006698:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d103      	bne.n	80066ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	1e5a      	subs	r2, r3, #1
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr
	...

080066cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <xQueueGenericReset+0x2a>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	60bb      	str	r3, [r7, #8]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80066f6:	f002 fcc1 	bl	800907c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006706:	fb01 f303 	mul.w	r3, r1, r3
 800670a:	441a      	add	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006726:	3b01      	subs	r3, #1
 8006728:	68f9      	ldr	r1, [r7, #12]
 800672a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	441a      	add	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	22ff      	movs	r2, #255	; 0xff
 800673a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	22ff      	movs	r2, #255	; 0xff
 8006742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d114      	bne.n	8006776 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01a      	beq.n	800678a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3310      	adds	r3, #16
 8006758:	4618      	mov	r0, r3
 800675a:	f001 fce3 	bl	8008124 <xTaskRemoveFromEventList>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d012      	beq.n	800678a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <xQueueGenericReset+0xcc>)
 8006766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	e009      	b.n	800678a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3310      	adds	r3, #16
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff fef6 	bl	800656c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3324      	adds	r3, #36	; 0x24
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fef1 	bl	800656c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800678a:	f002 fca7 	bl	80090dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800678e:	2301      	movs	r3, #1
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	e000ed04 	.word	0xe000ed04

0800679c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08e      	sub	sp, #56	; 0x38
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10a      	bne.n	80067c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067de:	bf00      	nop
 80067e0:	e7fe      	b.n	80067e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <xQueueGenericCreateStatic+0x52>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <xQueueGenericCreateStatic+0x56>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <xQueueGenericCreateStatic+0x58>
 80067f2:	2300      	movs	r3, #0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10a      	bne.n	800680e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	623b      	str	r3, [r7, #32]
}
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d102      	bne.n	800681a <xQueueGenericCreateStatic+0x7e>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <xQueueGenericCreateStatic+0x82>
 800681a:	2301      	movs	r3, #1
 800681c:	e000      	b.n	8006820 <xQueueGenericCreateStatic+0x84>
 800681e:	2300      	movs	r3, #0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	61fb      	str	r3, [r7, #28]
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800683a:	2350      	movs	r3, #80	; 0x50
 800683c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b50      	cmp	r3, #80	; 0x50
 8006842:	d00a      	beq.n	800685a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	61bb      	str	r3, [r7, #24]
}
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00d      	beq.n	8006880 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800686c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	4613      	mov	r3, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 f843 	bl	8006906 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006882:	4618      	mov	r0, r3
 8006884:	3730      	adds	r7, #48	; 0x30
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800688a:	b580      	push	{r7, lr}
 800688c:	b08a      	sub	sp, #40	; 0x28
 800688e:	af02      	add	r7, sp, #8
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	4613      	mov	r3, r2
 8006896:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <xQueueGenericCreate+0x2a>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	613b      	str	r3, [r7, #16]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d102      	bne.n	80068c0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
 80068be:	e004      	b.n	80068ca <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	fb02 f303 	mul.w	r3, r2, r3
 80068c8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	3350      	adds	r3, #80	; 0x50
 80068ce:	4618      	mov	r0, r3
 80068d0:	f002 fcd4 	bl	800927c <pvPortMalloc>
 80068d4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00f      	beq.n	80068fc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	3350      	adds	r3, #80	; 0x50
 80068e0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068ea:	79fa      	ldrb	r2, [r7, #7]
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 f805 	bl	8006906 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80068fc:	69bb      	ldr	r3, [r7, #24]
	}
 80068fe:	4618      	mov	r0, r3
 8006900:	3720      	adds	r7, #32
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d103      	bne.n	8006922 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	e002      	b.n	8006928 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006934:	2101      	movs	r1, #1
 8006936:	69b8      	ldr	r0, [r7, #24]
 8006938:	f7ff fec8 	bl	80066cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	78fa      	ldrb	r2, [r7, #3]
 8006940:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800696c:	2300      	movs	r3, #0
 800696e:	2200      	movs	r2, #0
 8006970:	2100      	movs	r1, #0
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f8a2 	bl	8006abc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006978:	bf00      	nop
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800698a:	2301      	movs	r3, #1
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	461a      	mov	r2, r3
 8006996:	6939      	ldr	r1, [r7, #16]
 8006998:	6978      	ldr	r0, [r7, #20]
 800699a:	f7ff ff76 	bl	800688a <xQueueGenericCreate>
 800699e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f7ff ffd3 	bl	800694c <prvInitialiseMutex>

		return pxNewQueue;
 80069a6:	68fb      	ldr	r3, [r7, #12]
	}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	4603      	mov	r3, r0
 80069b8:	6039      	str	r1, [r7, #0]
 80069ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80069bc:	2301      	movs	r3, #1
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	2300      	movs	r3, #0
 80069c2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2200      	movs	r2, #0
 80069cc:	6939      	ldr	r1, [r7, #16]
 80069ce:	6978      	ldr	r0, [r7, #20]
 80069d0:	f7ff fee4 	bl	800679c <xQueueGenericCreateStatic>
 80069d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff ffb8 	bl	800694c <prvInitialiseMutex>

		return pxNewQueue;
 80069dc:	68fb      	ldr	r3, [r7, #12]
	}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b08a      	sub	sp, #40	; 0x28
 80069ea:	af02      	add	r7, sp, #8
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	61bb      	str	r3, [r7, #24]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d90a      	bls.n	8006a2c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	617b      	str	r3, [r7, #20]
}
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	2100      	movs	r1, #0
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f7ff feb0 	bl	800679c <xQueueGenericCreateStatic>
 8006a3c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006a4a:	69fb      	ldr	r3, [r7, #28]
	}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3720      	adds	r7, #32
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10a      	bne.n	8006a7a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	613b      	str	r3, [r7, #16]
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d90a      	bls.n	8006a98 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60fb      	str	r3, [r7, #12]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006a98:	2202      	movs	r2, #2
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff fef4 	bl	800688a <xQueueGenericCreate>
 8006aa2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ab0:	697b      	ldr	r3, [r7, #20]
	}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08e      	sub	sp, #56	; 0x38
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006aca:	2300      	movs	r3, #0
 8006acc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10a      	bne.n	8006aee <xQueueGenericSend+0x32>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006aea:	bf00      	nop
 8006aec:	e7fe      	b.n	8006aec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <xQueueGenericSend+0x40>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <xQueueGenericSend+0x44>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <xQueueGenericSend+0x46>
 8006b00:	2300      	movs	r3, #0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <xQueueGenericSend+0x60>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b18:	bf00      	nop
 8006b1a:	e7fe      	b.n	8006b1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d103      	bne.n	8006b2a <xQueueGenericSend+0x6e>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <xQueueGenericSend+0x72>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <xQueueGenericSend+0x74>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10a      	bne.n	8006b4a <xQueueGenericSend+0x8e>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	623b      	str	r3, [r7, #32]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b4a:	f001 fcad 	bl	80084a8 <xTaskGetSchedulerState>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d102      	bne.n	8006b5a <xQueueGenericSend+0x9e>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <xQueueGenericSend+0xa2>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <xQueueGenericSend+0xa4>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <xQueueGenericSend+0xbe>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	61fb      	str	r3, [r7, #28]
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b7a:	f002 fa7f 	bl	800907c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d302      	bcc.n	8006b90 <xQueueGenericSend+0xd4>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d129      	bne.n	8006be4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b96:	f000 fcb7 	bl	8007508 <prvCopyDataToQueue>
 8006b9a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d010      	beq.n	8006bc6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	3324      	adds	r3, #36	; 0x24
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 fabb 	bl	8008124 <xTaskRemoveFromEventList>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d013      	beq.n	8006bdc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bb4:	4b3f      	ldr	r3, [pc, #252]	; (8006cb4 <xQueueGenericSend+0x1f8>)
 8006bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	e00a      	b.n	8006bdc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bcc:	4b39      	ldr	r3, [pc, #228]	; (8006cb4 <xQueueGenericSend+0x1f8>)
 8006bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bdc:	f002 fa7e 	bl	80090dc <vPortExitCritical>
				return pdPASS;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e063      	b.n	8006cac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d103      	bne.n	8006bf2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bea:	f002 fa77 	bl	80090dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e05c      	b.n	8006cac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bf8:	f107 0314 	add.w	r3, r7, #20
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 faf5 	bl	80081ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c02:	2301      	movs	r3, #1
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c06:	f002 fa69 	bl	80090dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c0a:	f001 f84b 	bl	8007ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c0e:	f002 fa35 	bl	800907c <vPortEnterCritical>
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c18:	b25b      	sxtb	r3, r3
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1e:	d103      	bne.n	8006c28 <xQueueGenericSend+0x16c>
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c2e:	b25b      	sxtb	r3, r3
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d103      	bne.n	8006c3e <xQueueGenericSend+0x182>
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c3e:	f002 fa4d 	bl	80090dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c42:	1d3a      	adds	r2, r7, #4
 8006c44:	f107 0314 	add.w	r3, r7, #20
 8006c48:	4611      	mov	r1, r2
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 fae4 	bl	8008218 <xTaskCheckForTimeOut>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d124      	bne.n	8006ca0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c58:	f000 fd4e 	bl	80076f8 <prvIsQueueFull>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d018      	beq.n	8006c94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	3310      	adds	r3, #16
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 fa0a 	bl	8008084 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c72:	f000 fcd9 	bl	8007628 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c76:	f001 f823 	bl	8007cc0 <xTaskResumeAll>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f47f af7c 	bne.w	8006b7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c82:	4b0c      	ldr	r3, [pc, #48]	; (8006cb4 <xQueueGenericSend+0x1f8>)
 8006c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	e772      	b.n	8006b7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c96:	f000 fcc7 	bl	8007628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c9a:	f001 f811 	bl	8007cc0 <xTaskResumeAll>
 8006c9e:	e76c      	b.n	8006b7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ca2:	f000 fcc1 	bl	8007628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ca6:	f001 f80b 	bl	8007cc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006caa:	2300      	movs	r3, #0
		}
	}
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3738      	adds	r7, #56	; 0x38
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	e000ed04 	.word	0xe000ed04

08006cb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08e      	sub	sp, #56	; 0x38
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d103      	bne.n	8006cf4 <xQueueGenericSendFromISR+0x3c>
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <xQueueGenericSendFromISR+0x40>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e000      	b.n	8006cfa <xQueueGenericSendFromISR+0x42>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	623b      	str	r3, [r7, #32]
}
 8006d10:	bf00      	nop
 8006d12:	e7fe      	b.n	8006d12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d103      	bne.n	8006d22 <xQueueGenericSendFromISR+0x6a>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <xQueueGenericSendFromISR+0x6e>
 8006d22:	2301      	movs	r3, #1
 8006d24:	e000      	b.n	8006d28 <xQueueGenericSendFromISR+0x70>
 8006d26:	2300      	movs	r3, #0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10a      	bne.n	8006d42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	61fb      	str	r3, [r7, #28]
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d42:	f002 fa5d 	bl	8009200 <vPortValidateInterruptPriority>
	__asm volatile
 8006d46:	f3ef 8211 	mrs	r2, BASEPRI
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	61ba      	str	r2, [r7, #24]
 8006d5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d302      	bcc.n	8006d74 <xQueueGenericSendFromISR+0xbc>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d12c      	bne.n	8006dce <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	68b9      	ldr	r1, [r7, #8]
 8006d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d84:	f000 fbc0 	bl	8007508 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d88:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d90:	d112      	bne.n	8006db8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d016      	beq.n	8006dc8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	3324      	adds	r3, #36	; 0x24
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f001 f9c0 	bl	8008124 <xTaskRemoveFromEventList>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00e      	beq.n	8006dc8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	e007      	b.n	8006dc8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006db8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	b25a      	sxtb	r2, r3
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006dcc:	e001      	b.n	8006dd2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f383 8811 	msr	BASEPRI, r3
}
 8006ddc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3738      	adds	r7, #56	; 0x38
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08e      	sub	sp, #56	; 0x38
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	623b      	str	r3, [r7, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	61fb      	str	r3, [r7, #28]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d103      	bne.n	8006e40 <xQueueGiveFromISR+0x58>
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <xQueueGiveFromISR+0x5c>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <xQueueGiveFromISR+0x5e>
 8006e44:	2300      	movs	r3, #0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10a      	bne.n	8006e60 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	61bb      	str	r3, [r7, #24]
}
 8006e5c:	bf00      	nop
 8006e5e:	e7fe      	b.n	8006e5e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e60:	f002 f9ce 	bl	8009200 <vPortValidateInterruptPriority>
	__asm volatile
 8006e64:	f3ef 8211 	mrs	r2, BASEPRI
 8006e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	617a      	str	r2, [r7, #20]
 8006e7a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006e7c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d22b      	bcs.n	8006ee8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ea2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eaa:	d112      	bne.n	8006ed2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d016      	beq.n	8006ee2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	3324      	adds	r3, #36	; 0x24
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f001 f933 	bl	8008124 <xTaskRemoveFromEventList>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00e      	beq.n	8006ee2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00b      	beq.n	8006ee2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	e007      	b.n	8006ee2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	b25a      	sxtb	r2, r3
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee6:	e001      	b.n	8006eec <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f383 8811 	msr	BASEPRI, r3
}
 8006ef6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3738      	adds	r7, #56	; 0x38
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08c      	sub	sp, #48	; 0x30
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f10:	2300      	movs	r3, #0
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <xQueueReceive+0x30>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	623b      	str	r3, [r7, #32]
}
 8006f30:	bf00      	nop
 8006f32:	e7fe      	b.n	8006f32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d103      	bne.n	8006f42 <xQueueReceive+0x3e>
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <xQueueReceive+0x42>
 8006f42:	2301      	movs	r3, #1
 8006f44:	e000      	b.n	8006f48 <xQueueReceive+0x44>
 8006f46:	2300      	movs	r3, #0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <xQueueReceive+0x5e>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	61fb      	str	r3, [r7, #28]
}
 8006f5e:	bf00      	nop
 8006f60:	e7fe      	b.n	8006f60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f62:	f001 faa1 	bl	80084a8 <xTaskGetSchedulerState>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d102      	bne.n	8006f72 <xQueueReceive+0x6e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <xQueueReceive+0x72>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <xQueueReceive+0x74>
 8006f76:	2300      	movs	r3, #0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <xQueueReceive+0x8e>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	61bb      	str	r3, [r7, #24]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f92:	f002 f873 	bl	800907c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01f      	beq.n	8006fe2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa6:	f000 fb19 	bl	80075dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	1e5a      	subs	r2, r3, #1
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00f      	beq.n	8006fda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	3310      	adds	r3, #16
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 f8b0 	bl	8008124 <xTaskRemoveFromEventList>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fca:	4b3d      	ldr	r3, [pc, #244]	; (80070c0 <xQueueReceive+0x1bc>)
 8006fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fda:	f002 f87f 	bl	80090dc <vPortExitCritical>
				return pdPASS;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e069      	b.n	80070b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d103      	bne.n	8006ff0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fe8:	f002 f878 	bl	80090dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e062      	b.n	80070b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ff6:	f107 0310 	add.w	r3, r7, #16
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 f8f6 	bl	80081ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007000:	2301      	movs	r3, #1
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007004:	f002 f86a 	bl	80090dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007008:	f000 fe4c 	bl	8007ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800700c:	f002 f836 	bl	800907c <vPortEnterCritical>
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007016:	b25b      	sxtb	r3, r3
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d103      	bne.n	8007026 <xQueueReceive+0x122>
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800702c:	b25b      	sxtb	r3, r3
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007032:	d103      	bne.n	800703c <xQueueReceive+0x138>
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800703c:	f002 f84e 	bl	80090dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007040:	1d3a      	adds	r2, r7, #4
 8007042:	f107 0310 	add.w	r3, r7, #16
 8007046:	4611      	mov	r1, r2
 8007048:	4618      	mov	r0, r3
 800704a:	f001 f8e5 	bl	8008218 <xTaskCheckForTimeOut>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d123      	bne.n	800709c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007056:	f000 fb39 	bl	80076cc <prvIsQueueEmpty>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d017      	beq.n	8007090 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	3324      	adds	r3, #36	; 0x24
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	4611      	mov	r1, r2
 8007068:	4618      	mov	r0, r3
 800706a:	f001 f80b 	bl	8008084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800706e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007070:	f000 fada 	bl	8007628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007074:	f000 fe24 	bl	8007cc0 <xTaskResumeAll>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d189      	bne.n	8006f92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800707e:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <xQueueReceive+0x1bc>)
 8007080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	e780      	b.n	8006f92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007092:	f000 fac9 	bl	8007628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007096:	f000 fe13 	bl	8007cc0 <xTaskResumeAll>
 800709a:	e77a      	b.n	8006f92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800709c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800709e:	f000 fac3 	bl	8007628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070a2:	f000 fe0d 	bl	8007cc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a8:	f000 fb10 	bl	80076cc <prvIsQueueEmpty>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f43f af6f 	beq.w	8006f92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3730      	adds	r7, #48	; 0x30
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	e000ed04 	.word	0xe000ed04

080070c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08e      	sub	sp, #56	; 0x38
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80070d6:	2300      	movs	r3, #0
 80070d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	623b      	str	r3, [r7, #32]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	61fb      	str	r3, [r7, #28]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007114:	f001 f9c8 	bl	80084a8 <xTaskGetSchedulerState>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <xQueueSemaphoreTake+0x60>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <xQueueSemaphoreTake+0x64>
 8007124:	2301      	movs	r3, #1
 8007126:	e000      	b.n	800712a <xQueueSemaphoreTake+0x66>
 8007128:	2300      	movs	r3, #0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	61bb      	str	r3, [r7, #24]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007144:	f001 ff9a 	bl	800907c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007150:	2b00      	cmp	r3, #0
 8007152:	d024      	beq.n	800719e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	1e5a      	subs	r2, r3, #1
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007164:	f001 fb20 	bl	80087a8 <pvTaskIncrementMutexHeldCount>
 8007168:	4602      	mov	r2, r0
 800716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00f      	beq.n	8007196 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	3310      	adds	r3, #16
 800717a:	4618      	mov	r0, r3
 800717c:	f000 ffd2 	bl	8008124 <xTaskRemoveFromEventList>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d007      	beq.n	8007196 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007186:	4b54      	ldr	r3, [pc, #336]	; (80072d8 <xQueueSemaphoreTake+0x214>)
 8007188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007196:	f001 ffa1 	bl	80090dc <vPortExitCritical>
				return pdPASS;
 800719a:	2301      	movs	r3, #1
 800719c:	e097      	b.n	80072ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d111      	bne.n	80071c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	617b      	str	r3, [r7, #20]
}
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80071c0:	f001 ff8c 	bl	80090dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071c4:	2300      	movs	r3, #0
 80071c6:	e082      	b.n	80072ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071ce:	f107 030c 	add.w	r3, r7, #12
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 f80a 	bl	80081ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071d8:	2301      	movs	r3, #1
 80071da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071dc:	f001 ff7e 	bl	80090dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071e0:	f000 fd60 	bl	8007ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071e4:	f001 ff4a 	bl	800907c <vPortEnterCritical>
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071ee:	b25b      	sxtb	r3, r3
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f4:	d103      	bne.n	80071fe <xQueueSemaphoreTake+0x13a>
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007204:	b25b      	sxtb	r3, r3
 8007206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720a:	d103      	bne.n	8007214 <xQueueSemaphoreTake+0x150>
 800720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007214:	f001 ff62 	bl	80090dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007218:	463a      	mov	r2, r7
 800721a:	f107 030c 	add.w	r3, r7, #12
 800721e:	4611      	mov	r1, r2
 8007220:	4618      	mov	r0, r3
 8007222:	f000 fff9 	bl	8008218 <xTaskCheckForTimeOut>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d132      	bne.n	8007292 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800722c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800722e:	f000 fa4d 	bl	80076cc <prvIsQueueEmpty>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d026      	beq.n	8007286 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d109      	bne.n	8007254 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007240:	f001 ff1c 	bl	800907c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	4618      	mov	r0, r3
 800724a:	f001 f94b 	bl	80084e4 <xTaskPriorityInherit>
 800724e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007250:	f001 ff44 	bl	80090dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	3324      	adds	r3, #36	; 0x24
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	4611      	mov	r1, r2
 800725c:	4618      	mov	r0, r3
 800725e:	f000 ff11 	bl	8008084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007264:	f000 f9e0 	bl	8007628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007268:	f000 fd2a 	bl	8007cc0 <xTaskResumeAll>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	f47f af68 	bne.w	8007144 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007274:	4b18      	ldr	r3, [pc, #96]	; (80072d8 <xQueueSemaphoreTake+0x214>)
 8007276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	e75e      	b.n	8007144 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007288:	f000 f9ce 	bl	8007628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800728c:	f000 fd18 	bl	8007cc0 <xTaskResumeAll>
 8007290:	e758      	b.n	8007144 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007292:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007294:	f000 f9c8 	bl	8007628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007298:	f000 fd12 	bl	8007cc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800729c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800729e:	f000 fa15 	bl	80076cc <prvIsQueueEmpty>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f43f af4d 	beq.w	8007144 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00d      	beq.n	80072cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80072b0:	f001 fee4 	bl	800907c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80072b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072b6:	f000 f910 	bl	80074da <prvGetDisinheritPriorityAfterTimeout>
 80072ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 f9ea 	bl	800869c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80072c8:	f001 ff08 	bl	80090dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3738      	adds	r7, #56	; 0x38
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	e000ed04 	.word	0xe000ed04

080072dc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08e      	sub	sp, #56	; 0x38
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	623b      	str	r3, [r7, #32]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d103      	bne.n	8007316 <xQueueReceiveFromISR+0x3a>
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <xQueueReceiveFromISR+0x3e>
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <xQueueReceiveFromISR+0x40>
 800731a:	2300      	movs	r3, #0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	61fb      	str	r3, [r7, #28]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007336:	f001 ff63 	bl	8009200 <vPortValidateInterruptPriority>
	__asm volatile
 800733a:	f3ef 8211 	mrs	r2, BASEPRI
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	61ba      	str	r2, [r7, #24]
 8007350:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007352:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007354:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	2b00      	cmp	r3, #0
 8007360:	d02f      	beq.n	80073c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007370:	f000 f934 	bl	80075dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	1e5a      	subs	r2, r3, #1
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800737c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007384:	d112      	bne.n	80073ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d016      	beq.n	80073bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	3310      	adds	r3, #16
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fec6 	bl	8008124 <xTaskRemoveFromEventList>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00e      	beq.n	80073bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	e007      	b.n	80073bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80073ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073b0:	3301      	adds	r3, #1
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	b25a      	sxtb	r2, r3
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80073bc:	2301      	movs	r3, #1
 80073be:	637b      	str	r3, [r7, #52]	; 0x34
 80073c0:	e001      	b.n	80073c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f383 8811 	msr	BASEPRI, r3
}
 80073d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3738      	adds	r7, #56	; 0x38
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	60bb      	str	r3, [r7, #8]
}
 80073fc:	bf00      	nop
 80073fe:	e7fe      	b.n	80073fe <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007400:	f001 fe3c 	bl	800907c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007408:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800740a:	f001 fe67 	bl	80090dc <vPortExitCritical>

	return uxReturn;
 800740e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	60fb      	str	r3, [r7, #12]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8007440:	f001 fe1c 	bl	800907c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007450:	f001 fe44 	bl	80090dc <vPortExitCritical>

	return uxReturn;
 8007454:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10a      	bne.n	8007482 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	60bb      	str	r3, [r7, #8]
}
 800747e:	bf00      	nop
 8007480:	e7fe      	b.n	8007480 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8007488:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	bc80      	pop	{r7}
 8007492:	4770      	bx	lr

08007494 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <vQueueDelete+0x28>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	60bb      	str	r3, [r7, #8]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f95b 	bl	8007778 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d102      	bne.n	80074d2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f001 ff99 	bl	8009404 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80074d2:	bf00      	nop
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d006      	beq.n	80074f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	e001      	b.n	80074fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074fc:	68fb      	ldr	r3, [r7, #12]
	}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	bc80      	pop	{r7}
 8007506:	4770      	bx	lr

08007508 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10d      	bne.n	8007542 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d14d      	bne.n	80075ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	4618      	mov	r0, r3
 8007534:	f001 f844 	bl	80085c0 <xTaskPriorityDisinherit>
 8007538:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	605a      	str	r2, [r3, #4]
 8007540:	e043      	b.n	80075ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d119      	bne.n	800757c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6898      	ldr	r0, [r3, #8]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	461a      	mov	r2, r3
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	f002 f894 	bl	8009680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	441a      	add	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	429a      	cmp	r2, r3
 8007570:	d32b      	bcc.n	80075ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	609a      	str	r2, [r3, #8]
 800757a:	e026      	b.n	80075ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68d8      	ldr	r0, [r3, #12]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	461a      	mov	r2, r3
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	f002 f87a 	bl	8009680 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	425b      	negs	r3, r3
 8007596:	441a      	add	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d207      	bcs.n	80075b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	425b      	negs	r3, r3
 80075b2:	441a      	add	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d105      	bne.n	80075ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075d2:	697b      	ldr	r3, [r7, #20]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d018      	beq.n	8007620 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	441a      	add	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	429a      	cmp	r2, r3
 8007606:	d303      	bcc.n	8007610 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68d9      	ldr	r1, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	461a      	mov	r2, r3
 800761a:	6838      	ldr	r0, [r7, #0]
 800761c:	f002 f830 	bl	8009680 <memcpy>
	}
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007630:	f001 fd24 	bl	800907c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800763a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800763c:	e011      	b.n	8007662 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	2b00      	cmp	r3, #0
 8007644:	d012      	beq.n	800766c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3324      	adds	r3, #36	; 0x24
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fd6a 	bl	8008124 <xTaskRemoveFromEventList>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007656:	f000 fe41 	bl	80082dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	3b01      	subs	r3, #1
 800765e:	b2db      	uxtb	r3, r3
 8007660:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007666:	2b00      	cmp	r3, #0
 8007668:	dce9      	bgt.n	800763e <prvUnlockQueue+0x16>
 800766a:	e000      	b.n	800766e <prvUnlockQueue+0x46>
					break;
 800766c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	22ff      	movs	r2, #255	; 0xff
 8007672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007676:	f001 fd31 	bl	80090dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800767a:	f001 fcff 	bl	800907c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007684:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007686:	e011      	b.n	80076ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d012      	beq.n	80076b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3310      	adds	r3, #16
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fd45 	bl	8008124 <xTaskRemoveFromEventList>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076a0:	f000 fe1c 	bl	80082dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	dce9      	bgt.n	8007688 <prvUnlockQueue+0x60>
 80076b4:	e000      	b.n	80076b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	22ff      	movs	r2, #255	; 0xff
 80076bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076c0:	f001 fd0c 	bl	80090dc <vPortExitCritical>
}
 80076c4:	bf00      	nop
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076d4:	f001 fcd2 	bl	800907c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d102      	bne.n	80076e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	e001      	b.n	80076ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076ea:	f001 fcf7 	bl	80090dc <vPortExitCritical>

	return xReturn;
 80076ee:	68fb      	ldr	r3, [r7, #12]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007700:	f001 fcbc 	bl	800907c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770c:	429a      	cmp	r2, r3
 800770e:	d102      	bne.n	8007716 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007710:	2301      	movs	r3, #1
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e001      	b.n	800771a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800771a:	f001 fcdf 	bl	80090dc <vPortExitCritical>

	return xReturn;
 800771e:	68fb      	ldr	r3, [r7, #12]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	e014      	b.n	8007762 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007738:	4a0e      	ldr	r2, [pc, #56]	; (8007774 <vQueueAddToRegistry+0x4c>)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10b      	bne.n	800775c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007744:	490b      	ldr	r1, [pc, #44]	; (8007774 <vQueueAddToRegistry+0x4c>)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800774e:	4a09      	ldr	r2, [pc, #36]	; (8007774 <vQueueAddToRegistry+0x4c>)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4413      	add	r3, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800775a:	e006      	b.n	800776a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3301      	adds	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b07      	cmp	r3, #7
 8007766:	d9e7      	bls.n	8007738 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr
 8007774:	20003afc 	.word	0x20003afc

08007778 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007780:	2300      	movs	r3, #0
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	e016      	b.n	80077b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007786:	4a10      	ldr	r2, [pc, #64]	; (80077c8 <vQueueUnregisterQueue+0x50>)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	4413      	add	r3, r2
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	429a      	cmp	r2, r3
 8007794:	d10b      	bne.n	80077ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007796:	4a0c      	ldr	r2, [pc, #48]	; (80077c8 <vQueueUnregisterQueue+0x50>)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2100      	movs	r1, #0
 800779c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80077a0:	4a09      	ldr	r2, [pc, #36]	; (80077c8 <vQueueUnregisterQueue+0x50>)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	4413      	add	r3, r2
 80077a8:	2200      	movs	r2, #0
 80077aa:	605a      	str	r2, [r3, #4]
				break;
 80077ac:	e006      	b.n	80077bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3301      	adds	r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b07      	cmp	r3, #7
 80077b8:	d9e5      	bls.n	8007786 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	20003afc 	.word	0x20003afc

080077cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077dc:	f001 fc4e 	bl	800907c <vPortEnterCritical>
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077e6:	b25b      	sxtb	r3, r3
 80077e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ec:	d103      	bne.n	80077f6 <vQueueWaitForMessageRestricted+0x2a>
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077fc:	b25b      	sxtb	r3, r3
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	d103      	bne.n	800780c <vQueueWaitForMessageRestricted+0x40>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800780c:	f001 fc66 	bl	80090dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	2b00      	cmp	r3, #0
 8007816:	d106      	bne.n	8007826 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	3324      	adds	r3, #36	; 0x24
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fc53 	bl	80080cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007826:	6978      	ldr	r0, [r7, #20]
 8007828:	f7ff fefe 	bl	8007628 <prvUnlockQueue>
	}
 800782c:	bf00      	nop
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08e      	sub	sp, #56	; 0x38
 8007838:	af04      	add	r7, sp, #16
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	623b      	str	r3, [r7, #32]
}
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10a      	bne.n	800787a <xTaskCreateStatic+0x46>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	61fb      	str	r3, [r7, #28]
}
 8007876:	bf00      	nop
 8007878:	e7fe      	b.n	8007878 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800787a:	2370      	movs	r3, #112	; 0x70
 800787c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	2b70      	cmp	r3, #112	; 0x70
 8007882:	d00a      	beq.n	800789a <xTaskCreateStatic+0x66>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	61bb      	str	r3, [r7, #24]
}
 8007896:	bf00      	nop
 8007898:	e7fe      	b.n	8007898 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	2b00      	cmp	r3, #0
 800789e:	d01e      	beq.n	80078de <xTaskCreateStatic+0xaa>
 80078a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d01b      	beq.n	80078de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078b8:	2300      	movs	r3, #0
 80078ba:	9303      	str	r3, [sp, #12]
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	9302      	str	r3, [sp, #8]
 80078c0:	f107 0314 	add.w	r3, r7, #20
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f850 	bl	8007976 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078d8:	f000 f8d8 	bl	8007a8c <prvAddNewTaskToReadyList>
 80078dc:	e001      	b.n	80078e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078e2:	697b      	ldr	r3, [r7, #20]
	}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3728      	adds	r7, #40	; 0x28
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08c      	sub	sp, #48	; 0x30
 80078f0:	af04      	add	r7, sp, #16
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	4613      	mov	r3, r2
 80078fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078fc:	88fb      	ldrh	r3, [r7, #6]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4618      	mov	r0, r3
 8007902:	f001 fcbb 	bl	800927c <pvPortMalloc>
 8007906:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00e      	beq.n	800792c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800790e:	2070      	movs	r0, #112	; 0x70
 8007910:	f001 fcb4 	bl	800927c <pvPortMalloc>
 8007914:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	631a      	str	r2, [r3, #48]	; 0x30
 8007922:	e005      	b.n	8007930 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007924:	6978      	ldr	r0, [r7, #20]
 8007926:	f001 fd6d 	bl	8009404 <vPortFree>
 800792a:	e001      	b.n	8007930 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800792c:	2300      	movs	r3, #0
 800792e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d017      	beq.n	8007966 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800793e:	88fa      	ldrh	r2, [r7, #6]
 8007940:	2300      	movs	r3, #0
 8007942:	9303      	str	r3, [sp, #12]
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	9302      	str	r3, [sp, #8]
 8007948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	68b9      	ldr	r1, [r7, #8]
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f80e 	bl	8007976 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800795a:	69f8      	ldr	r0, [r7, #28]
 800795c:	f000 f896 	bl	8007a8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007960:	2301      	movs	r3, #1
 8007962:	61bb      	str	r3, [r7, #24]
 8007964:	e002      	b.n	800796c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007966:	f04f 33ff 	mov.w	r3, #4294967295
 800796a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800796c:	69bb      	ldr	r3, [r7, #24]
	}
 800796e:	4618      	mov	r0, r3
 8007970:	3720      	adds	r7, #32
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b088      	sub	sp, #32
 800797a:	af00      	add	r7, sp, #0
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	607a      	str	r2, [r7, #4]
 8007982:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	461a      	mov	r2, r3
 800798e:	21a5      	movs	r1, #165	; 0xa5
 8007990:	f001 fe84 	bl	800969c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800799e:	3b01      	subs	r3, #1
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	f023 0307 	bic.w	r3, r3, #7
 80079ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	f003 0307 	and.w	r3, r3, #7
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <prvInitialiseNewTask+0x58>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	617b      	str	r3, [r7, #20]
}
 80079ca:	bf00      	nop
 80079cc:	e7fe      	b.n	80079cc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079ce:	2300      	movs	r3, #0
 80079d0:	61fb      	str	r3, [r7, #28]
 80079d2:	e012      	b.n	80079fa <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	4413      	add	r3, r2
 80079da:	7819      	ldrb	r1, [r3, #0]
 80079dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	4413      	add	r3, r2
 80079e2:	3334      	adds	r3, #52	; 0x34
 80079e4:	460a      	mov	r2, r1
 80079e6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	4413      	add	r3, r2
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d006      	beq.n	8007a02 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	3301      	adds	r3, #1
 80079f8:	61fb      	str	r3, [r7, #28]
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	2b1f      	cmp	r3, #31
 80079fe:	d9e9      	bls.n	80079d4 <prvInitialiseNewTask+0x5e>
 8007a00:	e000      	b.n	8007a04 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007a02:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	2b37      	cmp	r3, #55	; 0x37
 8007a10:	d901      	bls.n	8007a16 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a12:	2337      	movs	r3, #55	; 0x37
 8007a14:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a1a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a20:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	2200      	movs	r2, #0
 8007a26:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe fdbc 	bl	80065aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	3318      	adds	r3, #24
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe fdb7 	bl	80065aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a50:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	2200      	movs	r2, #0
 8007a56:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	68f9      	ldr	r1, [r7, #12]
 8007a6a:	69b8      	ldr	r0, [r7, #24]
 8007a6c:	f001 fa16 	bl	8008e9c <pxPortInitialiseStack>
 8007a70:	4602      	mov	r2, r0
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a82:	bf00      	nop
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a94:	f001 faf2 	bl	800907c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a98:	4b2d      	ldr	r3, [pc, #180]	; (8007b50 <prvAddNewTaskToReadyList+0xc4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	4a2c      	ldr	r2, [pc, #176]	; (8007b50 <prvAddNewTaskToReadyList+0xc4>)
 8007aa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007aa2:	4b2c      	ldr	r3, [pc, #176]	; (8007b54 <prvAddNewTaskToReadyList+0xc8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d109      	bne.n	8007abe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007aaa:	4a2a      	ldr	r2, [pc, #168]	; (8007b54 <prvAddNewTaskToReadyList+0xc8>)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ab0:	4b27      	ldr	r3, [pc, #156]	; (8007b50 <prvAddNewTaskToReadyList+0xc4>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d110      	bne.n	8007ada <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ab8:	f000 fc34 	bl	8008324 <prvInitialiseTaskLists>
 8007abc:	e00d      	b.n	8007ada <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007abe:	4b26      	ldr	r3, [pc, #152]	; (8007b58 <prvAddNewTaskToReadyList+0xcc>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d109      	bne.n	8007ada <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ac6:	4b23      	ldr	r3, [pc, #140]	; (8007b54 <prvAddNewTaskToReadyList+0xc8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d802      	bhi.n	8007ada <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ad4:	4a1f      	ldr	r2, [pc, #124]	; (8007b54 <prvAddNewTaskToReadyList+0xc8>)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ada:	4b20      	ldr	r3, [pc, #128]	; (8007b5c <prvAddNewTaskToReadyList+0xd0>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	4a1e      	ldr	r2, [pc, #120]	; (8007b5c <prvAddNewTaskToReadyList+0xd0>)
 8007ae2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ae4:	4b1d      	ldr	r3, [pc, #116]	; (8007b5c <prvAddNewTaskToReadyList+0xd0>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af0:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <prvAddNewTaskToReadyList+0xd4>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d903      	bls.n	8007b00 <prvAddNewTaskToReadyList+0x74>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afc:	4a18      	ldr	r2, [pc, #96]	; (8007b60 <prvAddNewTaskToReadyList+0xd4>)
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b04:	4613      	mov	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4a15      	ldr	r2, [pc, #84]	; (8007b64 <prvAddNewTaskToReadyList+0xd8>)
 8007b0e:	441a      	add	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4619      	mov	r1, r3
 8007b16:	4610      	mov	r0, r2
 8007b18:	f7fe fd53 	bl	80065c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b1c:	f001 fade 	bl	80090dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b20:	4b0d      	ldr	r3, [pc, #52]	; (8007b58 <prvAddNewTaskToReadyList+0xcc>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00e      	beq.n	8007b46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b28:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <prvAddNewTaskToReadyList+0xc8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d207      	bcs.n	8007b46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b36:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <prvAddNewTaskToReadyList+0xdc>)
 8007b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000960 	.word	0x20000960
 8007b54:	2000048c 	.word	0x2000048c
 8007b58:	2000096c 	.word	0x2000096c
 8007b5c:	2000097c 	.word	0x2000097c
 8007b60:	20000968 	.word	0x20000968
 8007b64:	20000490 	.word	0x20000490
 8007b68:	e000ed04 	.word	0xe000ed04

08007b6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b74:	2300      	movs	r3, #0
 8007b76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d017      	beq.n	8007bae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b7e:	4b13      	ldr	r3, [pc, #76]	; (8007bcc <vTaskDelay+0x60>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <vTaskDelay+0x30>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	60bb      	str	r3, [r7, #8]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b9c:	f000 f882 	bl	8007ca4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fe14 	bl	80087d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ba8:	f000 f88a 	bl	8007cc0 <xTaskResumeAll>
 8007bac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d107      	bne.n	8007bc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007bb4:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <vTaskDelay+0x64>)
 8007bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bc4:	bf00      	nop
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	20000988 	.word	0x20000988
 8007bd0:	e000ed04 	.word	0xe000ed04

08007bd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08a      	sub	sp, #40	; 0x28
 8007bd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007be2:	463a      	mov	r2, r7
 8007be4:	1d39      	adds	r1, r7, #4
 8007be6:	f107 0308 	add.w	r3, r7, #8
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fc8e 	bl	800650c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	9202      	str	r2, [sp, #8]
 8007bf8:	9301      	str	r3, [sp, #4]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	460a      	mov	r2, r1
 8007c02:	4922      	ldr	r1, [pc, #136]	; (8007c8c <vTaskStartScheduler+0xb8>)
 8007c04:	4822      	ldr	r0, [pc, #136]	; (8007c90 <vTaskStartScheduler+0xbc>)
 8007c06:	f7ff fe15 	bl	8007834 <xTaskCreateStatic>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4a21      	ldr	r2, [pc, #132]	; (8007c94 <vTaskStartScheduler+0xc0>)
 8007c0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c10:	4b20      	ldr	r3, [pc, #128]	; (8007c94 <vTaskStartScheduler+0xc0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	e001      	b.n	8007c22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d102      	bne.n	8007c2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c28:	f000 fe26 	bl	8008878 <xTimerCreateTimerTask>
 8007c2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d118      	bne.n	8007c66 <vTaskStartScheduler+0x92>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	613b      	str	r3, [r7, #16]
}
 8007c46:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c48:	4b13      	ldr	r3, [pc, #76]	; (8007c98 <vTaskStartScheduler+0xc4>)
 8007c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c50:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <vTaskStartScheduler+0xc8>)
 8007c52:	2201      	movs	r2, #1
 8007c54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007c56:	4b12      	ldr	r3, [pc, #72]	; (8007ca0 <vTaskStartScheduler+0xcc>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007c5c:	f7f8 fafa 	bl	8000254 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c60:	f001 f99a 	bl	8008f98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c64:	e00e      	b.n	8007c84 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d10a      	bne.n	8007c84 <vTaskStartScheduler+0xb0>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	60fb      	str	r3, [r7, #12]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <vTaskStartScheduler+0xae>
}
 8007c84:	bf00      	nop
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	0800b604 	.word	0x0800b604
 8007c90:	080082f5 	.word	0x080082f5
 8007c94:	20000984 	.word	0x20000984
 8007c98:	20000980 	.word	0x20000980
 8007c9c:	2000096c 	.word	0x2000096c
 8007ca0:	20000964 	.word	0x20000964

08007ca4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ca8:	4b04      	ldr	r3, [pc, #16]	; (8007cbc <vTaskSuspendAll+0x18>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3301      	adds	r3, #1
 8007cae:	4a03      	ldr	r2, [pc, #12]	; (8007cbc <vTaskSuspendAll+0x18>)
 8007cb0:	6013      	str	r3, [r2, #0]
}
 8007cb2:	bf00      	nop
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bc80      	pop	{r7}
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	20000988 	.word	0x20000988

08007cc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cce:	4b42      	ldr	r3, [pc, #264]	; (8007dd8 <xTaskResumeAll+0x118>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10a      	bne.n	8007cec <xTaskResumeAll+0x2c>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	603b      	str	r3, [r7, #0]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cec:	f001 f9c6 	bl	800907c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cf0:	4b39      	ldr	r3, [pc, #228]	; (8007dd8 <xTaskResumeAll+0x118>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	4a38      	ldr	r2, [pc, #224]	; (8007dd8 <xTaskResumeAll+0x118>)
 8007cf8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cfa:	4b37      	ldr	r3, [pc, #220]	; (8007dd8 <xTaskResumeAll+0x118>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d162      	bne.n	8007dc8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d02:	4b36      	ldr	r3, [pc, #216]	; (8007ddc <xTaskResumeAll+0x11c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d05e      	beq.n	8007dc8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d0a:	e02f      	b.n	8007d6c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007d0c:	4b34      	ldr	r3, [pc, #208]	; (8007de0 <xTaskResumeAll+0x120>)
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3318      	adds	r3, #24
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fe fcad 	bl	8006678 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3304      	adds	r3, #4
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fca8 	bl	8006678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2c:	4b2d      	ldr	r3, [pc, #180]	; (8007de4 <xTaskResumeAll+0x124>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d903      	bls.n	8007d3c <xTaskResumeAll+0x7c>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	4a2a      	ldr	r2, [pc, #168]	; (8007de4 <xTaskResumeAll+0x124>)
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d40:	4613      	mov	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4a27      	ldr	r2, [pc, #156]	; (8007de8 <xTaskResumeAll+0x128>)
 8007d4a:	441a      	add	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3304      	adds	r3, #4
 8007d50:	4619      	mov	r1, r3
 8007d52:	4610      	mov	r0, r2
 8007d54:	f7fe fc35 	bl	80065c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5c:	4b23      	ldr	r3, [pc, #140]	; (8007dec <xTaskResumeAll+0x12c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d302      	bcc.n	8007d6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d66:	4b22      	ldr	r3, [pc, #136]	; (8007df0 <xTaskResumeAll+0x130>)
 8007d68:	2201      	movs	r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d6c:	4b1c      	ldr	r3, [pc, #112]	; (8007de0 <xTaskResumeAll+0x120>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1cb      	bne.n	8007d0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d7a:	f000 fb71 	bl	8008460 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d7e:	4b1d      	ldr	r3, [pc, #116]	; (8007df4 <xTaskResumeAll+0x134>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d010      	beq.n	8007dac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d8a:	f000 f845 	bl	8007e18 <xTaskIncrementTick>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d94:	4b16      	ldr	r3, [pc, #88]	; (8007df0 <xTaskResumeAll+0x130>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1f1      	bne.n	8007d8a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007da6:	4b13      	ldr	r3, [pc, #76]	; (8007df4 <xTaskResumeAll+0x134>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dac:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <xTaskResumeAll+0x130>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d009      	beq.n	8007dc8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007db4:	2301      	movs	r3, #1
 8007db6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007db8:	4b0f      	ldr	r3, [pc, #60]	; (8007df8 <xTaskResumeAll+0x138>)
 8007dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dc8:	f001 f988 	bl	80090dc <vPortExitCritical>

	return xAlreadyYielded;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000988 	.word	0x20000988
 8007ddc:	20000960 	.word	0x20000960
 8007de0:	20000920 	.word	0x20000920
 8007de4:	20000968 	.word	0x20000968
 8007de8:	20000490 	.word	0x20000490
 8007dec:	2000048c 	.word	0x2000048c
 8007df0:	20000974 	.word	0x20000974
 8007df4:	20000970 	.word	0x20000970
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e02:	4b04      	ldr	r3, [pc, #16]	; (8007e14 <xTaskGetTickCount+0x18>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e08:	687b      	ldr	r3, [r7, #4]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc80      	pop	{r7}
 8007e12:	4770      	bx	lr
 8007e14:	20000964 	.word	0x20000964

08007e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e22:	4b51      	ldr	r3, [pc, #324]	; (8007f68 <xTaskIncrementTick+0x150>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f040 808e 	bne.w	8007f48 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e2c:	4b4f      	ldr	r3, [pc, #316]	; (8007f6c <xTaskIncrementTick+0x154>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3301      	adds	r3, #1
 8007e32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e34:	4a4d      	ldr	r2, [pc, #308]	; (8007f6c <xTaskIncrementTick+0x154>)
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d120      	bne.n	8007e82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e40:	4b4b      	ldr	r3, [pc, #300]	; (8007f70 <xTaskIncrementTick+0x158>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <xTaskIncrementTick+0x48>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	603b      	str	r3, [r7, #0]
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <xTaskIncrementTick+0x46>
 8007e60:	4b43      	ldr	r3, [pc, #268]	; (8007f70 <xTaskIncrementTick+0x158>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	60fb      	str	r3, [r7, #12]
 8007e66:	4b43      	ldr	r3, [pc, #268]	; (8007f74 <xTaskIncrementTick+0x15c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a41      	ldr	r2, [pc, #260]	; (8007f70 <xTaskIncrementTick+0x158>)
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	4a41      	ldr	r2, [pc, #260]	; (8007f74 <xTaskIncrementTick+0x15c>)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	4b40      	ldr	r3, [pc, #256]	; (8007f78 <xTaskIncrementTick+0x160>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	4a3f      	ldr	r2, [pc, #252]	; (8007f78 <xTaskIncrementTick+0x160>)
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	f000 faef 	bl	8008460 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e82:	4b3e      	ldr	r3, [pc, #248]	; (8007f7c <xTaskIncrementTick+0x164>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d34e      	bcc.n	8007f2a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e8c:	4b38      	ldr	r3, [pc, #224]	; (8007f70 <xTaskIncrementTick+0x158>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <xTaskIncrementTick+0x82>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e000      	b.n	8007e9c <xTaskIncrementTick+0x84>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d004      	beq.n	8007eaa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ea0:	4b36      	ldr	r3, [pc, #216]	; (8007f7c <xTaskIncrementTick+0x164>)
 8007ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea6:	601a      	str	r2, [r3, #0]
					break;
 8007ea8:	e03f      	b.n	8007f2a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007eaa:	4b31      	ldr	r3, [pc, #196]	; (8007f70 <xTaskIncrementTick+0x158>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d203      	bcs.n	8007eca <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ec2:	4a2e      	ldr	r2, [pc, #184]	; (8007f7c <xTaskIncrementTick+0x164>)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6013      	str	r3, [r2, #0]
						break;
 8007ec8:	e02f      	b.n	8007f2a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fbd2 	bl	8006678 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	3318      	adds	r3, #24
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe fbc9 	bl	8006678 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eea:	4b25      	ldr	r3, [pc, #148]	; (8007f80 <xTaskIncrementTick+0x168>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d903      	bls.n	8007efa <xTaskIncrementTick+0xe2>
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	4a22      	ldr	r2, [pc, #136]	; (8007f80 <xTaskIncrementTick+0x168>)
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4a1f      	ldr	r2, [pc, #124]	; (8007f84 <xTaskIncrementTick+0x16c>)
 8007f08:	441a      	add	r2, r3
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f7fe fb56 	bl	80065c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	4b1b      	ldr	r3, [pc, #108]	; (8007f88 <xTaskIncrementTick+0x170>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d3b3      	bcc.n	8007e8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f24:	2301      	movs	r3, #1
 8007f26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f28:	e7b0      	b.n	8007e8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f2a:	4b17      	ldr	r3, [pc, #92]	; (8007f88 <xTaskIncrementTick+0x170>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f30:	4914      	ldr	r1, [pc, #80]	; (8007f84 <xTaskIncrementTick+0x16c>)
 8007f32:	4613      	mov	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	440b      	add	r3, r1
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d907      	bls.n	8007f52 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007f42:	2301      	movs	r3, #1
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	e004      	b.n	8007f52 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f48:	4b10      	ldr	r3, [pc, #64]	; (8007f8c <xTaskIncrementTick+0x174>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	4a0f      	ldr	r2, [pc, #60]	; (8007f8c <xTaskIncrementTick+0x174>)
 8007f50:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f52:	4b0f      	ldr	r3, [pc, #60]	; (8007f90 <xTaskIncrementTick+0x178>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007f5e:	697b      	ldr	r3, [r7, #20]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	20000988 	.word	0x20000988
 8007f6c:	20000964 	.word	0x20000964
 8007f70:	20000918 	.word	0x20000918
 8007f74:	2000091c 	.word	0x2000091c
 8007f78:	20000978 	.word	0x20000978
 8007f7c:	20000980 	.word	0x20000980
 8007f80:	20000968 	.word	0x20000968
 8007f84:	20000490 	.word	0x20000490
 8007f88:	2000048c 	.word	0x2000048c
 8007f8c:	20000970 	.word	0x20000970
 8007f90:	20000974 	.word	0x20000974

08007f94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f9a:	4b33      	ldr	r3, [pc, #204]	; (8008068 <vTaskSwitchContext+0xd4>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fa2:	4b32      	ldr	r3, [pc, #200]	; (800806c <vTaskSwitchContext+0xd8>)
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fa8:	e05a      	b.n	8008060 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 8007faa:	4b30      	ldr	r3, [pc, #192]	; (800806c <vTaskSwitchContext+0xd8>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007fb0:	f7f8 f956 	bl	8000260 <getRunTimeCounterValue>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	4a2e      	ldr	r2, [pc, #184]	; (8008070 <vTaskSwitchContext+0xdc>)
 8007fb8:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007fba:	4b2d      	ldr	r3, [pc, #180]	; (8008070 <vTaskSwitchContext+0xdc>)
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4b2d      	ldr	r3, [pc, #180]	; (8008074 <vTaskSwitchContext+0xe0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d909      	bls.n	8007fda <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007fc6:	4b2c      	ldr	r3, [pc, #176]	; (8008078 <vTaskSwitchContext+0xe4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8007fcc:	4a28      	ldr	r2, [pc, #160]	; (8008070 <vTaskSwitchContext+0xdc>)
 8007fce:	6810      	ldr	r0, [r2, #0]
 8007fd0:	4a28      	ldr	r2, [pc, #160]	; (8008074 <vTaskSwitchContext+0xe0>)
 8007fd2:	6812      	ldr	r2, [r2, #0]
 8007fd4:	1a82      	subs	r2, r0, r2
 8007fd6:	440a      	add	r2, r1
 8007fd8:	665a      	str	r2, [r3, #100]	; 0x64
				ulTaskSwitchedInTime = ulTotalRunTime;
 8007fda:	4b25      	ldr	r3, [pc, #148]	; (8008070 <vTaskSwitchContext+0xdc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a25      	ldr	r2, [pc, #148]	; (8008074 <vTaskSwitchContext+0xe0>)
 8007fe0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007fe2:	4b26      	ldr	r3, [pc, #152]	; (800807c <vTaskSwitchContext+0xe8>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	e010      	b.n	800800c <vTaskSwitchContext+0x78>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <vTaskSwitchContext+0x72>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	607b      	str	r3, [r7, #4]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <vTaskSwitchContext+0x70>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3b01      	subs	r3, #1
 800800a:	60fb      	str	r3, [r7, #12]
 800800c:	491c      	ldr	r1, [pc, #112]	; (8008080 <vTaskSwitchContext+0xec>)
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0e4      	beq.n	8007fea <vTaskSwitchContext+0x56>
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4a15      	ldr	r2, [pc, #84]	; (8008080 <vTaskSwitchContext+0xec>)
 800802c:	4413      	add	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	605a      	str	r2, [r3, #4]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	3308      	adds	r3, #8
 8008042:	429a      	cmp	r2, r3
 8008044:	d104      	bne.n	8008050 <vTaskSwitchContext+0xbc>
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	605a      	str	r2, [r3, #4]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	4a08      	ldr	r2, [pc, #32]	; (8008078 <vTaskSwitchContext+0xe4>)
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	4a08      	ldr	r2, [pc, #32]	; (800807c <vTaskSwitchContext+0xe8>)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6013      	str	r3, [r2, #0]
}
 8008060:	bf00      	nop
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	20000988 	.word	0x20000988
 800806c:	20000974 	.word	0x20000974
 8008070:	20000990 	.word	0x20000990
 8008074:	2000098c 	.word	0x2000098c
 8008078:	2000048c 	.word	0x2000048c
 800807c:	20000968 	.word	0x20000968
 8008080:	20000490 	.word	0x20000490

08008084 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10a      	bne.n	80080aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	60fb      	str	r3, [r7, #12]
}
 80080a6:	bf00      	nop
 80080a8:	e7fe      	b.n	80080a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080aa:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <vTaskPlaceOnEventList+0x44>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3318      	adds	r3, #24
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7fe faa8 	bl	8006608 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080b8:	2101      	movs	r1, #1
 80080ba:	6838      	ldr	r0, [r7, #0]
 80080bc:	f000 fb88 	bl	80087d0 <prvAddCurrentTaskToDelayedList>
}
 80080c0:	bf00      	nop
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	2000048c 	.word	0x2000048c

080080cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10a      	bne.n	80080f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	617b      	str	r3, [r7, #20]
}
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080f4:	4b0a      	ldr	r3, [pc, #40]	; (8008120 <vTaskPlaceOnEventListRestricted+0x54>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3318      	adds	r3, #24
 80080fa:	4619      	mov	r1, r3
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f7fe fa60 	bl	80065c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008108:	f04f 33ff 	mov.w	r3, #4294967295
 800810c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	68b8      	ldr	r0, [r7, #8]
 8008112:	f000 fb5d 	bl	80087d0 <prvAddCurrentTaskToDelayedList>
	}
 8008116:	bf00      	nop
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	2000048c 	.word	0x2000048c

08008124 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	60fb      	str	r3, [r7, #12]
}
 800814c:	bf00      	nop
 800814e:	e7fe      	b.n	800814e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	3318      	adds	r3, #24
 8008154:	4618      	mov	r0, r3
 8008156:	f7fe fa8f 	bl	8006678 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800815a:	4b1e      	ldr	r3, [pc, #120]	; (80081d4 <xTaskRemoveFromEventList+0xb0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d11d      	bne.n	800819e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	3304      	adds	r3, #4
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fa86 	bl	8006678 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008170:	4b19      	ldr	r3, [pc, #100]	; (80081d8 <xTaskRemoveFromEventList+0xb4>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	429a      	cmp	r2, r3
 8008176:	d903      	bls.n	8008180 <xTaskRemoveFromEventList+0x5c>
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	4a16      	ldr	r2, [pc, #88]	; (80081d8 <xTaskRemoveFromEventList+0xb4>)
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4a13      	ldr	r2, [pc, #76]	; (80081dc <xTaskRemoveFromEventList+0xb8>)
 800818e:	441a      	add	r2, r3
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	3304      	adds	r3, #4
 8008194:	4619      	mov	r1, r3
 8008196:	4610      	mov	r0, r2
 8008198:	f7fe fa13 	bl	80065c2 <vListInsertEnd>
 800819c:	e005      	b.n	80081aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	3318      	adds	r3, #24
 80081a2:	4619      	mov	r1, r3
 80081a4:	480e      	ldr	r0, [pc, #56]	; (80081e0 <xTaskRemoveFromEventList+0xbc>)
 80081a6:	f7fe fa0c 	bl	80065c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ae:	4b0d      	ldr	r3, [pc, #52]	; (80081e4 <xTaskRemoveFromEventList+0xc0>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d905      	bls.n	80081c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081b8:	2301      	movs	r3, #1
 80081ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <xTaskRemoveFromEventList+0xc4>)
 80081be:	2201      	movs	r2, #1
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	e001      	b.n	80081c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80081c8:	697b      	ldr	r3, [r7, #20]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20000988 	.word	0x20000988
 80081d8:	20000968 	.word	0x20000968
 80081dc:	20000490 	.word	0x20000490
 80081e0:	20000920 	.word	0x20000920
 80081e4:	2000048c 	.word	0x2000048c
 80081e8:	20000974 	.word	0x20000974

080081ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081f4:	4b06      	ldr	r3, [pc, #24]	; (8008210 <vTaskInternalSetTimeOutState+0x24>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081fc:	4b05      	ldr	r3, [pc, #20]	; (8008214 <vTaskInternalSetTimeOutState+0x28>)
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	605a      	str	r2, [r3, #4]
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	bc80      	pop	{r7}
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	20000978 	.word	0x20000978
 8008214:	20000964 	.word	0x20000964

08008218 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10a      	bne.n	800823e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	613b      	str	r3, [r7, #16]
}
 800823a:	bf00      	nop
 800823c:	e7fe      	b.n	800823c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	60fb      	str	r3, [r7, #12]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800825a:	f000 ff0f 	bl	800907c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800825e:	4b1d      	ldr	r3, [pc, #116]	; (80082d4 <xTaskCheckForTimeOut+0xbc>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d102      	bne.n	800827e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008278:	2300      	movs	r3, #0
 800827a:	61fb      	str	r3, [r7, #28]
 800827c:	e023      	b.n	80082c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4b15      	ldr	r3, [pc, #84]	; (80082d8 <xTaskCheckForTimeOut+0xc0>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	429a      	cmp	r2, r3
 8008288:	d007      	beq.n	800829a <xTaskCheckForTimeOut+0x82>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	429a      	cmp	r2, r3
 8008292:	d302      	bcc.n	800829a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008294:	2301      	movs	r3, #1
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	e015      	b.n	80082c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d20b      	bcs.n	80082bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	1ad2      	subs	r2, r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff ff9b 	bl	80081ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082b6:	2300      	movs	r3, #0
 80082b8:	61fb      	str	r3, [r7, #28]
 80082ba:	e004      	b.n	80082c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2200      	movs	r2, #0
 80082c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80082c2:	2301      	movs	r3, #1
 80082c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082c6:	f000 ff09 	bl	80090dc <vPortExitCritical>

	return xReturn;
 80082ca:	69fb      	ldr	r3, [r7, #28]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3720      	adds	r7, #32
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000964 	.word	0x20000964
 80082d8:	20000978 	.word	0x20000978

080082dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082dc:	b480      	push	{r7}
 80082de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082e0:	4b03      	ldr	r3, [pc, #12]	; (80082f0 <vTaskMissedYield+0x14>)
 80082e2:	2201      	movs	r2, #1
 80082e4:	601a      	str	r2, [r3, #0]
}
 80082e6:	bf00      	nop
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bc80      	pop	{r7}
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	20000974 	.word	0x20000974

080082f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082fc:	f000 f852 	bl	80083a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008300:	4b06      	ldr	r3, [pc, #24]	; (800831c <prvIdleTask+0x28>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d9f9      	bls.n	80082fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008308:	4b05      	ldr	r3, [pc, #20]	; (8008320 <prvIdleTask+0x2c>)
 800830a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008318:	e7f0      	b.n	80082fc <prvIdleTask+0x8>
 800831a:	bf00      	nop
 800831c:	20000490 	.word	0x20000490
 8008320:	e000ed04 	.word	0xe000ed04

08008324 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800832a:	2300      	movs	r3, #0
 800832c:	607b      	str	r3, [r7, #4]
 800832e:	e00c      	b.n	800834a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4a12      	ldr	r2, [pc, #72]	; (8008384 <prvInitialiseTaskLists+0x60>)
 800833c:	4413      	add	r3, r2
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe f914 	bl	800656c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3301      	adds	r3, #1
 8008348:	607b      	str	r3, [r7, #4]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b37      	cmp	r3, #55	; 0x37
 800834e:	d9ef      	bls.n	8008330 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008350:	480d      	ldr	r0, [pc, #52]	; (8008388 <prvInitialiseTaskLists+0x64>)
 8008352:	f7fe f90b 	bl	800656c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008356:	480d      	ldr	r0, [pc, #52]	; (800838c <prvInitialiseTaskLists+0x68>)
 8008358:	f7fe f908 	bl	800656c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800835c:	480c      	ldr	r0, [pc, #48]	; (8008390 <prvInitialiseTaskLists+0x6c>)
 800835e:	f7fe f905 	bl	800656c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008362:	480c      	ldr	r0, [pc, #48]	; (8008394 <prvInitialiseTaskLists+0x70>)
 8008364:	f7fe f902 	bl	800656c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008368:	480b      	ldr	r0, [pc, #44]	; (8008398 <prvInitialiseTaskLists+0x74>)
 800836a:	f7fe f8ff 	bl	800656c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800836e:	4b0b      	ldr	r3, [pc, #44]	; (800839c <prvInitialiseTaskLists+0x78>)
 8008370:	4a05      	ldr	r2, [pc, #20]	; (8008388 <prvInitialiseTaskLists+0x64>)
 8008372:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008374:	4b0a      	ldr	r3, [pc, #40]	; (80083a0 <prvInitialiseTaskLists+0x7c>)
 8008376:	4a05      	ldr	r2, [pc, #20]	; (800838c <prvInitialiseTaskLists+0x68>)
 8008378:	601a      	str	r2, [r3, #0]
}
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000490 	.word	0x20000490
 8008388:	200008f0 	.word	0x200008f0
 800838c:	20000904 	.word	0x20000904
 8008390:	20000920 	.word	0x20000920
 8008394:	20000934 	.word	0x20000934
 8008398:	2000094c 	.word	0x2000094c
 800839c:	20000918 	.word	0x20000918
 80083a0:	2000091c 	.word	0x2000091c

080083a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083aa:	e019      	b.n	80083e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083ac:	f000 fe66 	bl	800907c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80083b0:	4b10      	ldr	r3, [pc, #64]	; (80083f4 <prvCheckTasksWaitingTermination+0x50>)
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe f95b 	bl	8006678 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083c2:	4b0d      	ldr	r3, [pc, #52]	; (80083f8 <prvCheckTasksWaitingTermination+0x54>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	4a0b      	ldr	r2, [pc, #44]	; (80083f8 <prvCheckTasksWaitingTermination+0x54>)
 80083ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083cc:	4b0b      	ldr	r3, [pc, #44]	; (80083fc <prvCheckTasksWaitingTermination+0x58>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	4a0a      	ldr	r2, [pc, #40]	; (80083fc <prvCheckTasksWaitingTermination+0x58>)
 80083d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083d6:	f000 fe81 	bl	80090dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f810 	bl	8008400 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083e0:	4b06      	ldr	r3, [pc, #24]	; (80083fc <prvCheckTasksWaitingTermination+0x58>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e1      	bne.n	80083ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083e8:	bf00      	nop
 80083ea:	bf00      	nop
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000934 	.word	0x20000934
 80083f8:	20000960 	.word	0x20000960
 80083fc:	20000948 	.word	0x20000948

08008400 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800840e:	2b00      	cmp	r3, #0
 8008410:	d108      	bne.n	8008424 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fff4 	bl	8009404 <vPortFree>
				vPortFree( pxTCB );
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fff1 	bl	8009404 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008422:	e018      	b.n	8008456 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800842a:	2b01      	cmp	r3, #1
 800842c:	d103      	bne.n	8008436 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 ffe8 	bl	8009404 <vPortFree>
	}
 8008434:	e00f      	b.n	8008456 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800843c:	2b02      	cmp	r3, #2
 800843e:	d00a      	beq.n	8008456 <prvDeleteTCB+0x56>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	60fb      	str	r3, [r7, #12]
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <prvDeleteTCB+0x54>
	}
 8008456:	bf00      	nop
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008466:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <prvResetNextTaskUnblockTime+0x40>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <prvResetNextTaskUnblockTime+0x14>
 8008470:	2301      	movs	r3, #1
 8008472:	e000      	b.n	8008476 <prvResetNextTaskUnblockTime+0x16>
 8008474:	2300      	movs	r3, #0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d004      	beq.n	8008484 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800847a:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <prvResetNextTaskUnblockTime+0x44>)
 800847c:	f04f 32ff 	mov.w	r2, #4294967295
 8008480:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008482:	e008      	b.n	8008496 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008484:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <prvResetNextTaskUnblockTime+0x40>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	4a04      	ldr	r2, [pc, #16]	; (80084a4 <prvResetNextTaskUnblockTime+0x44>)
 8008494:	6013      	str	r3, [r2, #0]
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr
 80084a0:	20000918 	.word	0x20000918
 80084a4:	20000980 	.word	0x20000980

080084a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084ae:	4b0b      	ldr	r3, [pc, #44]	; (80084dc <xTaskGetSchedulerState+0x34>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d102      	bne.n	80084bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084b6:	2301      	movs	r3, #1
 80084b8:	607b      	str	r3, [r7, #4]
 80084ba:	e008      	b.n	80084ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084bc:	4b08      	ldr	r3, [pc, #32]	; (80084e0 <xTaskGetSchedulerState+0x38>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d102      	bne.n	80084ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084c4:	2302      	movs	r3, #2
 80084c6:	607b      	str	r3, [r7, #4]
 80084c8:	e001      	b.n	80084ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084ca:	2300      	movs	r3, #0
 80084cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084ce:	687b      	ldr	r3, [r7, #4]
	}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bc80      	pop	{r7}
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	2000096c 	.word	0x2000096c
 80084e0:	20000988 	.word	0x20000988

080084e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80084f0:	2300      	movs	r3, #0
 80084f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d056      	beq.n	80085a8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fe:	4b2d      	ldr	r3, [pc, #180]	; (80085b4 <xTaskPriorityInherit+0xd0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	429a      	cmp	r2, r3
 8008506:	d246      	bcs.n	8008596 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	db06      	blt.n	800851e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008510:	4b28      	ldr	r3, [pc, #160]	; (80085b4 <xTaskPriorityInherit+0xd0>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	6959      	ldr	r1, [r3, #20]
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008526:	4613      	mov	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4a22      	ldr	r2, [pc, #136]	; (80085b8 <xTaskPriorityInherit+0xd4>)
 8008530:	4413      	add	r3, r2
 8008532:	4299      	cmp	r1, r3
 8008534:	d101      	bne.n	800853a <xTaskPriorityInherit+0x56>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <xTaskPriorityInherit+0x58>
 800853a:	2300      	movs	r3, #0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d022      	beq.n	8008586 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	3304      	adds	r3, #4
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe f897 	bl	8006678 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800854a:	4b1a      	ldr	r3, [pc, #104]	; (80085b4 <xTaskPriorityInherit+0xd0>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008558:	4b18      	ldr	r3, [pc, #96]	; (80085bc <xTaskPriorityInherit+0xd8>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	429a      	cmp	r2, r3
 800855e:	d903      	bls.n	8008568 <xTaskPriorityInherit+0x84>
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	4a15      	ldr	r2, [pc, #84]	; (80085bc <xTaskPriorityInherit+0xd8>)
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4a10      	ldr	r2, [pc, #64]	; (80085b8 <xTaskPriorityInherit+0xd4>)
 8008576:	441a      	add	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f7fe f81f 	bl	80065c2 <vListInsertEnd>
 8008584:	e004      	b.n	8008590 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008586:	4b0b      	ldr	r3, [pc, #44]	; (80085b4 <xTaskPriorityInherit+0xd0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008590:	2301      	movs	r3, #1
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	e008      	b.n	80085a8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800859a:	4b06      	ldr	r3, [pc, #24]	; (80085b4 <xTaskPriorityInherit+0xd0>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d201      	bcs.n	80085a8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085a8:	68fb      	ldr	r3, [r7, #12]
	}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	2000048c 	.word	0x2000048c
 80085b8:	20000490 	.word	0x20000490
 80085bc:	20000968 	.word	0x20000968

080085c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d056      	beq.n	8008684 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085d6:	4b2e      	ldr	r3, [pc, #184]	; (8008690 <xTaskPriorityDisinherit+0xd0>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d00a      	beq.n	80085f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	60fb      	str	r3, [r7, #12]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10a      	bne.n	8008614 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	60bb      	str	r3, [r7, #8]
}
 8008610:	bf00      	nop
 8008612:	e7fe      	b.n	8008612 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008618:	1e5a      	subs	r2, r3, #1
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008626:	429a      	cmp	r2, r3
 8008628:	d02c      	beq.n	8008684 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800862e:	2b00      	cmp	r3, #0
 8008630:	d128      	bne.n	8008684 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	3304      	adds	r3, #4
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe f81e 	bl	8006678 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008654:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <xTaskPriorityDisinherit+0xd4>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	429a      	cmp	r2, r3
 800865a:	d903      	bls.n	8008664 <xTaskPriorityDisinherit+0xa4>
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	4a0c      	ldr	r2, [pc, #48]	; (8008694 <xTaskPriorityDisinherit+0xd4>)
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4a09      	ldr	r2, [pc, #36]	; (8008698 <xTaskPriorityDisinherit+0xd8>)
 8008672:	441a      	add	r2, r3
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	3304      	adds	r3, #4
 8008678:	4619      	mov	r1, r3
 800867a:	4610      	mov	r0, r2
 800867c:	f7fd ffa1 	bl	80065c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008680:	2301      	movs	r3, #1
 8008682:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008684:	697b      	ldr	r3, [r7, #20]
	}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	2000048c 	.word	0x2000048c
 8008694:	20000968 	.word	0x20000968
 8008698:	20000490 	.word	0x20000490

0800869c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800869c:	b580      	push	{r7, lr}
 800869e:	b088      	sub	sp, #32
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80086aa:	2301      	movs	r3, #1
 80086ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d06f      	beq.n	8008794 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	60fb      	str	r3, [r7, #12]
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d902      	bls.n	80086e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	61fb      	str	r3, [r7, #28]
 80086e0:	e002      	b.n	80086e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d050      	beq.n	8008794 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d14b      	bne.n	8008794 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80086fc:	4b27      	ldr	r3, [pc, #156]	; (800879c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	429a      	cmp	r2, r3
 8008704:	d10a      	bne.n	800871c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	60bb      	str	r3, [r7, #8]
}
 8008718:	bf00      	nop
 800871a:	e7fe      	b.n	800871a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	69fa      	ldr	r2, [r7, #28]
 8008726:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	2b00      	cmp	r3, #0
 800872e:	db04      	blt.n	800873a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	6959      	ldr	r1, [r3, #20]
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4a15      	ldr	r2, [pc, #84]	; (80087a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800874a:	4413      	add	r3, r2
 800874c:	4299      	cmp	r1, r3
 800874e:	d101      	bne.n	8008754 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008750:	2301      	movs	r3, #1
 8008752:	e000      	b.n	8008756 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008754:	2300      	movs	r3, #0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01c      	beq.n	8008794 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	3304      	adds	r3, #4
 800875e:	4618      	mov	r0, r3
 8008760:	f7fd ff8a 	bl	8006678 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008768:	4b0e      	ldr	r3, [pc, #56]	; (80087a4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d903      	bls.n	8008778 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	4a0b      	ldr	r2, [pc, #44]	; (80087a4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4a06      	ldr	r2, [pc, #24]	; (80087a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008786:	441a      	add	r2, r3
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	3304      	adds	r3, #4
 800878c:	4619      	mov	r1, r3
 800878e:	4610      	mov	r0, r2
 8008790:	f7fd ff17 	bl	80065c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008794:	bf00      	nop
 8008796:	3720      	adds	r7, #32
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	2000048c 	.word	0x2000048c
 80087a0:	20000490 	.word	0x20000490
 80087a4:	20000968 	.word	0x20000968

080087a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80087ac:	4b07      	ldr	r3, [pc, #28]	; (80087cc <pvTaskIncrementMutexHeldCount+0x24>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d004      	beq.n	80087be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80087b4:	4b05      	ldr	r3, [pc, #20]	; (80087cc <pvTaskIncrementMutexHeldCount+0x24>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80087ba:	3201      	adds	r2, #1
 80087bc:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 80087be:	4b03      	ldr	r3, [pc, #12]	; (80087cc <pvTaskIncrementMutexHeldCount+0x24>)
 80087c0:	681b      	ldr	r3, [r3, #0]
	}
 80087c2:	4618      	mov	r0, r3
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bc80      	pop	{r7}
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	2000048c 	.word	0x2000048c

080087d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087da:	4b21      	ldr	r3, [pc, #132]	; (8008860 <prvAddCurrentTaskToDelayedList+0x90>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087e0:	4b20      	ldr	r3, [pc, #128]	; (8008864 <prvAddCurrentTaskToDelayedList+0x94>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3304      	adds	r3, #4
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fd ff46 	bl	8006678 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f2:	d10a      	bne.n	800880a <prvAddCurrentTaskToDelayedList+0x3a>
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d007      	beq.n	800880a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087fa:	4b1a      	ldr	r3, [pc, #104]	; (8008864 <prvAddCurrentTaskToDelayedList+0x94>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3304      	adds	r3, #4
 8008800:	4619      	mov	r1, r3
 8008802:	4819      	ldr	r0, [pc, #100]	; (8008868 <prvAddCurrentTaskToDelayedList+0x98>)
 8008804:	f7fd fedd 	bl	80065c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008808:	e026      	b.n	8008858 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4413      	add	r3, r2
 8008810:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008812:	4b14      	ldr	r3, [pc, #80]	; (8008864 <prvAddCurrentTaskToDelayedList+0x94>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	429a      	cmp	r2, r3
 8008820:	d209      	bcs.n	8008836 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008822:	4b12      	ldr	r3, [pc, #72]	; (800886c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <prvAddCurrentTaskToDelayedList+0x94>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3304      	adds	r3, #4
 800882c:	4619      	mov	r1, r3
 800882e:	4610      	mov	r0, r2
 8008830:	f7fd feea 	bl	8006608 <vListInsert>
}
 8008834:	e010      	b.n	8008858 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008836:	4b0e      	ldr	r3, [pc, #56]	; (8008870 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <prvAddCurrentTaskToDelayedList+0x94>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3304      	adds	r3, #4
 8008840:	4619      	mov	r1, r3
 8008842:	4610      	mov	r0, r2
 8008844:	f7fd fee0 	bl	8006608 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008848:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <prvAddCurrentTaskToDelayedList+0xa4>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	429a      	cmp	r2, r3
 8008850:	d202      	bcs.n	8008858 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008852:	4a08      	ldr	r2, [pc, #32]	; (8008874 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	6013      	str	r3, [r2, #0]
}
 8008858:	bf00      	nop
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	20000964 	.word	0x20000964
 8008864:	2000048c 	.word	0x2000048c
 8008868:	2000094c 	.word	0x2000094c
 800886c:	2000091c 	.word	0x2000091c
 8008870:	20000918 	.word	0x20000918
 8008874:	20000980 	.word	0x20000980

08008878 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08a      	sub	sp, #40	; 0x28
 800887c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800887e:	2300      	movs	r3, #0
 8008880:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008882:	f000 facb 	bl	8008e1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008886:	4b1c      	ldr	r3, [pc, #112]	; (80088f8 <xTimerCreateTimerTask+0x80>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d021      	beq.n	80088d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008896:	1d3a      	adds	r2, r7, #4
 8008898:	f107 0108 	add.w	r1, r7, #8
 800889c:	f107 030c 	add.w	r3, r7, #12
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fd fe4b 	bl	800653c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088a6:	6879      	ldr	r1, [r7, #4]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	9202      	str	r2, [sp, #8]
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	2302      	movs	r3, #2
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	460a      	mov	r2, r1
 80088b8:	4910      	ldr	r1, [pc, #64]	; (80088fc <xTimerCreateTimerTask+0x84>)
 80088ba:	4811      	ldr	r0, [pc, #68]	; (8008900 <xTimerCreateTimerTask+0x88>)
 80088bc:	f7fe ffba 	bl	8007834 <xTaskCreateStatic>
 80088c0:	4603      	mov	r3, r0
 80088c2:	4a10      	ldr	r2, [pc, #64]	; (8008904 <xTimerCreateTimerTask+0x8c>)
 80088c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088c6:	4b0f      	ldr	r3, [pc, #60]	; (8008904 <xTimerCreateTimerTask+0x8c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80088ce:	2301      	movs	r3, #1
 80088d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10a      	bne.n	80088ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	613b      	str	r3, [r7, #16]
}
 80088ea:	bf00      	nop
 80088ec:	e7fe      	b.n	80088ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80088ee:	697b      	ldr	r3, [r7, #20]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3718      	adds	r7, #24
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	200009c4 	.word	0x200009c4
 80088fc:	0800b634 	.word	0x0800b634
 8008900:	08008a25 	.word	0x08008a25
 8008904:	200009c8 	.word	0x200009c8

08008908 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08a      	sub	sp, #40	; 0x28
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008916:	2300      	movs	r3, #0
 8008918:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10a      	bne.n	8008936 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	623b      	str	r3, [r7, #32]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008936:	4b1a      	ldr	r3, [pc, #104]	; (80089a0 <xTimerGenericCommand+0x98>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d02a      	beq.n	8008994 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2b05      	cmp	r3, #5
 800894e:	dc18      	bgt.n	8008982 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008950:	f7ff fdaa 	bl	80084a8 <xTaskGetSchedulerState>
 8008954:	4603      	mov	r3, r0
 8008956:	2b02      	cmp	r3, #2
 8008958:	d109      	bne.n	800896e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800895a:	4b11      	ldr	r3, [pc, #68]	; (80089a0 <xTimerGenericCommand+0x98>)
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	f107 0110 	add.w	r1, r7, #16
 8008962:	2300      	movs	r3, #0
 8008964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008966:	f7fe f8a9 	bl	8006abc <xQueueGenericSend>
 800896a:	6278      	str	r0, [r7, #36]	; 0x24
 800896c:	e012      	b.n	8008994 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800896e:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <xTimerGenericCommand+0x98>)
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	f107 0110 	add.w	r1, r7, #16
 8008976:	2300      	movs	r3, #0
 8008978:	2200      	movs	r2, #0
 800897a:	f7fe f89f 	bl	8006abc <xQueueGenericSend>
 800897e:	6278      	str	r0, [r7, #36]	; 0x24
 8008980:	e008      	b.n	8008994 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008982:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <xTimerGenericCommand+0x98>)
 8008984:	6818      	ldr	r0, [r3, #0]
 8008986:	f107 0110 	add.w	r1, r7, #16
 800898a:	2300      	movs	r3, #0
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	f7fe f993 	bl	8006cb8 <xQueueGenericSendFromISR>
 8008992:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008996:	4618      	mov	r0, r3
 8008998:	3728      	adds	r7, #40	; 0x28
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	200009c4 	.word	0x200009c4

080089a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b088      	sub	sp, #32
 80089a8:	af02      	add	r7, sp, #8
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089ae:	4b1c      	ldr	r3, [pc, #112]	; (8008a20 <prvProcessExpiredTimer+0x7c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fd fe5b 	bl	8006678 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d122      	bne.n	8008a10 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	699a      	ldr	r2, [r3, #24]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	18d1      	adds	r1, r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	6978      	ldr	r0, [r7, #20]
 80089d8:	f000 f8c8 	bl	8008b6c <prvInsertTimerInActiveList>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d016      	beq.n	8008a10 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089e2:	2300      	movs	r3, #0
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	2300      	movs	r3, #0
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	2100      	movs	r1, #0
 80089ec:	6978      	ldr	r0, [r7, #20]
 80089ee:	f7ff ff8b 	bl	8008908 <xTimerGenericCommand>
 80089f2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	60fb      	str	r3, [r7, #12]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	6978      	ldr	r0, [r7, #20]
 8008a16:	4798      	blx	r3
}
 8008a18:	bf00      	nop
 8008a1a:	3718      	adds	r7, #24
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	200009bc 	.word	0x200009bc

08008a24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a2c:	f107 0308 	add.w	r3, r7, #8
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 f857 	bl	8008ae4 <prvGetNextExpireTime>
 8008a36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 f803 	bl	8008a48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a42:	f000 f8d5 	bl	8008bf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a46:	e7f1      	b.n	8008a2c <prvTimerTask+0x8>

08008a48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008a52:	f7ff f927 	bl	8007ca4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a56:	f107 0308 	add.w	r3, r7, #8
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 f866 	bl	8008b2c <prvSampleTimeNow>
 8008a60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d130      	bne.n	8008aca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <prvProcessTimerOrBlockTask+0x3c>
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d806      	bhi.n	8008a84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a76:	f7ff f923 	bl	8007cc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a7a:	68f9      	ldr	r1, [r7, #12]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff ff91 	bl	80089a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a82:	e024      	b.n	8008ace <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d008      	beq.n	8008a9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a8a:	4b13      	ldr	r3, [pc, #76]	; (8008ad8 <prvProcessTimerOrBlockTask+0x90>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	bf0c      	ite	eq
 8008a94:	2301      	moveq	r3, #1
 8008a96:	2300      	movne	r3, #0
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a9c:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <prvProcessTimerOrBlockTask+0x94>)
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	f7fe fe8f 	bl	80077cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008aae:	f7ff f907 	bl	8007cc0 <xTaskResumeAll>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10a      	bne.n	8008ace <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ab8:	4b09      	ldr	r3, [pc, #36]	; (8008ae0 <prvProcessTimerOrBlockTask+0x98>)
 8008aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	f3bf 8f6f 	isb	sy
}
 8008ac8:	e001      	b.n	8008ace <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008aca:	f7ff f8f9 	bl	8007cc0 <xTaskResumeAll>
}
 8008ace:	bf00      	nop
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	200009c0 	.word	0x200009c0
 8008adc:	200009c4 	.word	0x200009c4
 8008ae0:	e000ed04 	.word	0xe000ed04

08008ae4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008aec:	4b0e      	ldr	r3, [pc, #56]	; (8008b28 <prvGetNextExpireTime+0x44>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	bf0c      	ite	eq
 8008af6:	2301      	moveq	r3, #1
 8008af8:	2300      	movne	r3, #0
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	461a      	mov	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d105      	bne.n	8008b16 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b0a:	4b07      	ldr	r3, [pc, #28]	; (8008b28 <prvGetNextExpireTime+0x44>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	e001      	b.n	8008b1a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bc80      	pop	{r7}
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	200009bc 	.word	0x200009bc

08008b2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b34:	f7ff f962 	bl	8007dfc <xTaskGetTickCount>
 8008b38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b3a:	4b0b      	ldr	r3, [pc, #44]	; (8008b68 <prvSampleTimeNow+0x3c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d205      	bcs.n	8008b50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b44:	f000 f908 	bl	8008d58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	e002      	b.n	8008b56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008b56:	4a04      	ldr	r2, [pc, #16]	; (8008b68 <prvSampleTimeNow+0x3c>)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	200009cc 	.word	0x200009cc

08008b6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d812      	bhi.n	8008bb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	1ad2      	subs	r2, r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d302      	bcc.n	8008ba6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	e01b      	b.n	8008bde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ba6:	4b10      	ldr	r3, [pc, #64]	; (8008be8 <prvInsertTimerInActiveList+0x7c>)
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3304      	adds	r3, #4
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	f7fd fd29 	bl	8006608 <vListInsert>
 8008bb6:	e012      	b.n	8008bde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d206      	bcs.n	8008bce <prvInsertTimerInActiveList+0x62>
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d302      	bcc.n	8008bce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	e007      	b.n	8008bde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bce:	4b07      	ldr	r3, [pc, #28]	; (8008bec <prvInsertTimerInActiveList+0x80>)
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4610      	mov	r0, r2
 8008bda:	f7fd fd15 	bl	8006608 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008bde:	697b      	ldr	r3, [r7, #20]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	200009c0 	.word	0x200009c0
 8008bec:	200009bc 	.word	0x200009bc

08008bf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08e      	sub	sp, #56	; 0x38
 8008bf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bf6:	e09d      	b.n	8008d34 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	da18      	bge.n	8008c30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008bfe:	1d3b      	adds	r3, r7, #4
 8008c00:	3304      	adds	r3, #4
 8008c02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10a      	bne.n	8008c20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	61fb      	str	r3, [r7, #28]
}
 8008c1c:	bf00      	nop
 8008c1e:	e7fe      	b.n	8008c1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c26:	6850      	ldr	r0, [r2, #4]
 8008c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c2a:	6892      	ldr	r2, [r2, #8]
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	db7d      	blt.n	8008d32 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c44:	3304      	adds	r3, #4
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fd fd16 	bl	8006678 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7ff ff6c 	bl	8008b2c <prvSampleTimeNow>
 8008c54:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b09      	cmp	r3, #9
 8008c5a:	d86b      	bhi.n	8008d34 <prvProcessReceivedCommands+0x144>
 8008c5c:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <prvProcessReceivedCommands+0x74>)
 8008c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c62:	bf00      	nop
 8008c64:	08008c8d 	.word	0x08008c8d
 8008c68:	08008c8d 	.word	0x08008c8d
 8008c6c:	08008c8d 	.word	0x08008c8d
 8008c70:	08008d35 	.word	0x08008d35
 8008c74:	08008ce9 	.word	0x08008ce9
 8008c78:	08008d21 	.word	0x08008d21
 8008c7c:	08008c8d 	.word	0x08008c8d
 8008c80:	08008c8d 	.word	0x08008c8d
 8008c84:	08008d35 	.word	0x08008d35
 8008c88:	08008ce9 	.word	0x08008ce9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	18d1      	adds	r1, r2, r3
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c9a:	f7ff ff67 	bl	8008b6c <prvInsertTimerInActiveList>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d047      	beq.n	8008d34 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008caa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d13f      	bne.n	8008d34 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	441a      	add	r2, r3
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cc6:	f7ff fe1f 	bl	8008908 <xTimerGenericCommand>
 8008cca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d130      	bne.n	8008d34 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	61bb      	str	r3, [r7, #24]
}
 8008ce4:	bf00      	nop
 8008ce6:	e7fe      	b.n	8008ce6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10a      	bne.n	8008d0c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	617b      	str	r3, [r7, #20]
}
 8008d08:	bf00      	nop
 8008d0a:	e7fe      	b.n	8008d0a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0e:	699a      	ldr	r2, [r3, #24]
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	18d1      	adds	r1, r2, r3
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d1a:	f7ff ff27 	bl	8008b6c <prvInsertTimerInActiveList>
					break;
 8008d1e:	e009      	b.n	8008d34 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d104      	bne.n	8008d34 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d2c:	f000 fb6a 	bl	8009404 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d30:	e000      	b.n	8008d34 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008d32:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <prvProcessReceivedCommands+0x164>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	1d39      	adds	r1, r7, #4
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fe f8e1 	bl	8006f04 <xQueueReceive>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f47f af57 	bne.w	8008bf8 <prvProcessReceivedCommands+0x8>
	}
}
 8008d4a:	bf00      	nop
 8008d4c:	bf00      	nop
 8008d4e:	3730      	adds	r7, #48	; 0x30
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	200009c4 	.word	0x200009c4

08008d58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d5e:	e045      	b.n	8008dec <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d60:	4b2c      	ldr	r3, [pc, #176]	; (8008e14 <prvSwitchTimerLists+0xbc>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d6a:	4b2a      	ldr	r3, [pc, #168]	; (8008e14 <prvSwitchTimerLists+0xbc>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	3304      	adds	r3, #4
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fd fc7d 	bl	8006678 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d12e      	bne.n	8008dec <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	693a      	ldr	r2, [r7, #16]
 8008d94:	4413      	add	r3, r2
 8008d96:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d90e      	bls.n	8008dbe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dac:	4b19      	ldr	r3, [pc, #100]	; (8008e14 <prvSwitchTimerLists+0xbc>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3304      	adds	r3, #4
 8008db4:	4619      	mov	r1, r3
 8008db6:	4610      	mov	r0, r2
 8008db8:	f7fd fc26 	bl	8006608 <vListInsert>
 8008dbc:	e016      	b.n	8008dec <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7ff fd9d 	bl	8008908 <xTimerGenericCommand>
 8008dce:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10a      	bne.n	8008dec <prvSwitchTimerLists+0x94>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	603b      	str	r3, [r7, #0]
}
 8008de8:	bf00      	nop
 8008dea:	e7fe      	b.n	8008dea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008dec:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <prvSwitchTimerLists+0xbc>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1b4      	bne.n	8008d60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008df6:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <prvSwitchTimerLists+0xbc>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008dfc:	4b06      	ldr	r3, [pc, #24]	; (8008e18 <prvSwitchTimerLists+0xc0>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a04      	ldr	r2, [pc, #16]	; (8008e14 <prvSwitchTimerLists+0xbc>)
 8008e02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e04:	4a04      	ldr	r2, [pc, #16]	; (8008e18 <prvSwitchTimerLists+0xc0>)
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	6013      	str	r3, [r2, #0]
}
 8008e0a:	bf00      	nop
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	200009bc 	.word	0x200009bc
 8008e18:	200009c0 	.word	0x200009c0

08008e1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e22:	f000 f92b 	bl	800907c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e26:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <prvCheckForValidListAndQueue+0x60>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d120      	bne.n	8008e70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e2e:	4814      	ldr	r0, [pc, #80]	; (8008e80 <prvCheckForValidListAndQueue+0x64>)
 8008e30:	f7fd fb9c 	bl	800656c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e34:	4813      	ldr	r0, [pc, #76]	; (8008e84 <prvCheckForValidListAndQueue+0x68>)
 8008e36:	f7fd fb99 	bl	800656c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e3a:	4b13      	ldr	r3, [pc, #76]	; (8008e88 <prvCheckForValidListAndQueue+0x6c>)
 8008e3c:	4a10      	ldr	r2, [pc, #64]	; (8008e80 <prvCheckForValidListAndQueue+0x64>)
 8008e3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e40:	4b12      	ldr	r3, [pc, #72]	; (8008e8c <prvCheckForValidListAndQueue+0x70>)
 8008e42:	4a10      	ldr	r2, [pc, #64]	; (8008e84 <prvCheckForValidListAndQueue+0x68>)
 8008e44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e46:	2300      	movs	r3, #0
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	4b11      	ldr	r3, [pc, #68]	; (8008e90 <prvCheckForValidListAndQueue+0x74>)
 8008e4c:	4a11      	ldr	r2, [pc, #68]	; (8008e94 <prvCheckForValidListAndQueue+0x78>)
 8008e4e:	2110      	movs	r1, #16
 8008e50:	200a      	movs	r0, #10
 8008e52:	f7fd fca3 	bl	800679c <xQueueGenericCreateStatic>
 8008e56:	4603      	mov	r3, r0
 8008e58:	4a08      	ldr	r2, [pc, #32]	; (8008e7c <prvCheckForValidListAndQueue+0x60>)
 8008e5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e5c:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <prvCheckForValidListAndQueue+0x60>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d005      	beq.n	8008e70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e64:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <prvCheckForValidListAndQueue+0x60>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	490b      	ldr	r1, [pc, #44]	; (8008e98 <prvCheckForValidListAndQueue+0x7c>)
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe fc5c 	bl	8007728 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e70:	f000 f934 	bl	80090dc <vPortExitCritical>
}
 8008e74:	bf00      	nop
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	200009c4 	.word	0x200009c4
 8008e80:	20000994 	.word	0x20000994
 8008e84:	200009a8 	.word	0x200009a8
 8008e88:	200009bc 	.word	0x200009bc
 8008e8c:	200009c0 	.word	0x200009c0
 8008e90:	20000a70 	.word	0x20000a70
 8008e94:	200009d0 	.word	0x200009d0
 8008e98:	0800b63c 	.word	0x0800b63c

08008e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3b04      	subs	r3, #4
 8008eac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3b04      	subs	r3, #4
 8008eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f023 0201 	bic.w	r2, r3, #1
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3b04      	subs	r3, #4
 8008eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ecc:	4a08      	ldr	r2, [pc, #32]	; (8008ef0 <pxPortInitialiseStack+0x54>)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3b14      	subs	r3, #20
 8008ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3b20      	subs	r3, #32
 8008ee2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bc80      	pop	{r7}
 8008eee:	4770      	bx	lr
 8008ef0:	08008ef5 	.word	0x08008ef5

08008ef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008efe:	4b12      	ldr	r3, [pc, #72]	; (8008f48 <prvTaskExitError+0x54>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f06:	d00a      	beq.n	8008f1e <prvTaskExitError+0x2a>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	60fb      	str	r3, [r7, #12]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <prvTaskExitError+0x28>
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	60bb      	str	r3, [r7, #8]
}
 8008f30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f32:	bf00      	nop
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0fc      	beq.n	8008f34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f3a:	bf00      	nop
 8008f3c:	bf00      	nop
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bc80      	pop	{r7}
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	20000014 	.word	0x20000014
 8008f4c:	00000000 	.word	0x00000000

08008f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f50:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <pxCurrentTCBConst2>)
 8008f52:	6819      	ldr	r1, [r3, #0]
 8008f54:	6808      	ldr	r0, [r1, #0]
 8008f56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008f5a:	f380 8809 	msr	PSP, r0
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f04f 0000 	mov.w	r0, #0
 8008f66:	f380 8811 	msr	BASEPRI, r0
 8008f6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008f6e:	4770      	bx	lr

08008f70 <pxCurrentTCBConst2>:
 8008f70:	2000048c 	.word	0x2000048c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop

08008f78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008f78:	4806      	ldr	r0, [pc, #24]	; (8008f94 <prvPortStartFirstTask+0x1c>)
 8008f7a:	6800      	ldr	r0, [r0, #0]
 8008f7c:	6800      	ldr	r0, [r0, #0]
 8008f7e:	f380 8808 	msr	MSP, r0
 8008f82:	b662      	cpsie	i
 8008f84:	b661      	cpsie	f
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	df00      	svc	0
 8008f90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f92:	bf00      	nop
 8008f94:	e000ed08 	.word	0xe000ed08

08008f98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f9e:	4b32      	ldr	r3, [pc, #200]	; (8009068 <xPortStartScheduler+0xd0>)
 8008fa0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	22ff      	movs	r2, #255	; 0xff
 8008fae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	4b2a      	ldr	r3, [pc, #168]	; (800906c <xPortStartScheduler+0xd4>)
 8008fc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fc6:	4b2a      	ldr	r3, [pc, #168]	; (8009070 <xPortStartScheduler+0xd8>)
 8008fc8:	2207      	movs	r2, #7
 8008fca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fcc:	e009      	b.n	8008fe2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008fce:	4b28      	ldr	r3, [pc, #160]	; (8009070 <xPortStartScheduler+0xd8>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	4a26      	ldr	r2, [pc, #152]	; (8009070 <xPortStartScheduler+0xd8>)
 8008fd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fd8:	78fb      	ldrb	r3, [r7, #3]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	005b      	lsls	r3, r3, #1
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fea:	2b80      	cmp	r3, #128	; 0x80
 8008fec:	d0ef      	beq.n	8008fce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fee:	4b20      	ldr	r3, [pc, #128]	; (8009070 <xPortStartScheduler+0xd8>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f1c3 0307 	rsb	r3, r3, #7
 8008ff6:	2b04      	cmp	r3, #4
 8008ff8:	d00a      	beq.n	8009010 <xPortStartScheduler+0x78>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	60bb      	str	r3, [r7, #8]
}
 800900c:	bf00      	nop
 800900e:	e7fe      	b.n	800900e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009010:	4b17      	ldr	r3, [pc, #92]	; (8009070 <xPortStartScheduler+0xd8>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	4a16      	ldr	r2, [pc, #88]	; (8009070 <xPortStartScheduler+0xd8>)
 8009018:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800901a:	4b15      	ldr	r3, [pc, #84]	; (8009070 <xPortStartScheduler+0xd8>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009022:	4a13      	ldr	r2, [pc, #76]	; (8009070 <xPortStartScheduler+0xd8>)
 8009024:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	b2da      	uxtb	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800902e:	4b11      	ldr	r3, [pc, #68]	; (8009074 <xPortStartScheduler+0xdc>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a10      	ldr	r2, [pc, #64]	; (8009074 <xPortStartScheduler+0xdc>)
 8009034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009038:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800903a:	4b0e      	ldr	r3, [pc, #56]	; (8009074 <xPortStartScheduler+0xdc>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a0d      	ldr	r2, [pc, #52]	; (8009074 <xPortStartScheduler+0xdc>)
 8009040:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009044:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009046:	f000 f8b9 	bl	80091bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800904a:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <xPortStartScheduler+0xe0>)
 800904c:	2200      	movs	r2, #0
 800904e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009050:	f7ff ff92 	bl	8008f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009054:	f7fe ff9e 	bl	8007f94 <vTaskSwitchContext>
	prvTaskExitError();
 8009058:	f7ff ff4c 	bl	8008ef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	e000e400 	.word	0xe000e400
 800906c:	20000ac0 	.word	0x20000ac0
 8009070:	20000ac4 	.word	0x20000ac4
 8009074:	e000ed20 	.word	0xe000ed20
 8009078:	20000014 	.word	0x20000014

0800907c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	607b      	str	r3, [r7, #4]
}
 8009094:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009096:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <vPortEnterCritical+0x58>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3301      	adds	r3, #1
 800909c:	4a0d      	ldr	r2, [pc, #52]	; (80090d4 <vPortEnterCritical+0x58>)
 800909e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090a0:	4b0c      	ldr	r3, [pc, #48]	; (80090d4 <vPortEnterCritical+0x58>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d10f      	bne.n	80090c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090a8:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <vPortEnterCritical+0x5c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00a      	beq.n	80090c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	603b      	str	r3, [r7, #0]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <vPortEnterCritical+0x4a>
	}
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	20000014 	.word	0x20000014
 80090d8:	e000ed04 	.word	0xe000ed04

080090dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090e2:	4b11      	ldr	r3, [pc, #68]	; (8009128 <vPortExitCritical+0x4c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <vPortExitCritical+0x24>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	607b      	str	r3, [r7, #4]
}
 80090fc:	bf00      	nop
 80090fe:	e7fe      	b.n	80090fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009100:	4b09      	ldr	r3, [pc, #36]	; (8009128 <vPortExitCritical+0x4c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3b01      	subs	r3, #1
 8009106:	4a08      	ldr	r2, [pc, #32]	; (8009128 <vPortExitCritical+0x4c>)
 8009108:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800910a:	4b07      	ldr	r3, [pc, #28]	; (8009128 <vPortExitCritical+0x4c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d105      	bne.n	800911e <vPortExitCritical+0x42>
 8009112:	2300      	movs	r3, #0
 8009114:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	f383 8811 	msr	BASEPRI, r3
}
 800911c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800911e:	bf00      	nop
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	bc80      	pop	{r7}
 8009126:	4770      	bx	lr
 8009128:	20000014 	.word	0x20000014
 800912c:	00000000 	.word	0x00000000

08009130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009130:	f3ef 8009 	mrs	r0, PSP
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	4b0d      	ldr	r3, [pc, #52]	; (8009170 <pxCurrentTCBConst>)
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009140:	6010      	str	r0, [r2, #0]
 8009142:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009146:	f04f 0050 	mov.w	r0, #80	; 0x50
 800914a:	f380 8811 	msr	BASEPRI, r0
 800914e:	f7fe ff21 	bl	8007f94 <vTaskSwitchContext>
 8009152:	f04f 0000 	mov.w	r0, #0
 8009156:	f380 8811 	msr	BASEPRI, r0
 800915a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800915e:	6819      	ldr	r1, [r3, #0]
 8009160:	6808      	ldr	r0, [r1, #0]
 8009162:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009166:	f380 8809 	msr	PSP, r0
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	4770      	bx	lr

08009170 <pxCurrentTCBConst>:
 8009170:	2000048c 	.word	0x2000048c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop

08009178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	607b      	str	r3, [r7, #4]
}
 8009190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009192:	f7fe fe41 	bl	8007e18 <xTaskIncrementTick>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800919c:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <SysTick_Handler+0x40>)
 800919e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	2300      	movs	r3, #0
 80091a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	f383 8811 	msr	BASEPRI, r3
}
 80091ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	e000ed04 	.word	0xe000ed04

080091bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091c0:	4b0a      	ldr	r3, [pc, #40]	; (80091ec <vPortSetupTimerInterrupt+0x30>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091c6:	4b0a      	ldr	r3, [pc, #40]	; (80091f0 <vPortSetupTimerInterrupt+0x34>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091cc:	4b09      	ldr	r3, [pc, #36]	; (80091f4 <vPortSetupTimerInterrupt+0x38>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a09      	ldr	r2, [pc, #36]	; (80091f8 <vPortSetupTimerInterrupt+0x3c>)
 80091d2:	fba2 2303 	umull	r2, r3, r2, r3
 80091d6:	095b      	lsrs	r3, r3, #5
 80091d8:	4a08      	ldr	r2, [pc, #32]	; (80091fc <vPortSetupTimerInterrupt+0x40>)
 80091da:	3b01      	subs	r3, #1
 80091dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091de:	4b03      	ldr	r3, [pc, #12]	; (80091ec <vPortSetupTimerInterrupt+0x30>)
 80091e0:	2207      	movs	r2, #7
 80091e2:	601a      	str	r2, [r3, #0]
}
 80091e4:	bf00      	nop
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bc80      	pop	{r7}
 80091ea:	4770      	bx	lr
 80091ec:	e000e010 	.word	0xe000e010
 80091f0:	e000e018 	.word	0xe000e018
 80091f4:	20000008 	.word	0x20000008
 80091f8:	51eb851f 	.word	0x51eb851f
 80091fc:	e000e014 	.word	0xe000e014

08009200 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009206:	f3ef 8305 	mrs	r3, IPSR
 800920a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b0f      	cmp	r3, #15
 8009210:	d914      	bls.n	800923c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009212:	4a16      	ldr	r2, [pc, #88]	; (800926c <vPortValidateInterruptPriority+0x6c>)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4413      	add	r3, r2
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800921c:	4b14      	ldr	r3, [pc, #80]	; (8009270 <vPortValidateInterruptPriority+0x70>)
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	7afa      	ldrb	r2, [r7, #11]
 8009222:	429a      	cmp	r2, r3
 8009224:	d20a      	bcs.n	800923c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	607b      	str	r3, [r7, #4]
}
 8009238:	bf00      	nop
 800923a:	e7fe      	b.n	800923a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800923c:	4b0d      	ldr	r3, [pc, #52]	; (8009274 <vPortValidateInterruptPriority+0x74>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009244:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <vPortValidateInterruptPriority+0x78>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	429a      	cmp	r2, r3
 800924a:	d90a      	bls.n	8009262 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	603b      	str	r3, [r7, #0]
}
 800925e:	bf00      	nop
 8009260:	e7fe      	b.n	8009260 <vPortValidateInterruptPriority+0x60>
	}
 8009262:	bf00      	nop
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	bc80      	pop	{r7}
 800926a:	4770      	bx	lr
 800926c:	e000e3f0 	.word	0xe000e3f0
 8009270:	20000ac0 	.word	0x20000ac0
 8009274:	e000ed0c 	.word	0xe000ed0c
 8009278:	20000ac4 	.word	0x20000ac4

0800927c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	; 0x28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009284:	2300      	movs	r3, #0
 8009286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009288:	f7fe fd0c 	bl	8007ca4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800928c:	4b58      	ldr	r3, [pc, #352]	; (80093f0 <pvPortMalloc+0x174>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009294:	f000 f910 	bl	80094b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009298:	4b56      	ldr	r3, [pc, #344]	; (80093f4 <pvPortMalloc+0x178>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4013      	ands	r3, r2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f040 808e 	bne.w	80093c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d01d      	beq.n	80092e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80092ac:	2208      	movs	r2, #8
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4413      	add	r3, r2
 80092b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d014      	beq.n	80092e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f023 0307 	bic.w	r3, r3, #7
 80092c4:	3308      	adds	r3, #8
 80092c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f003 0307 	and.w	r3, r3, #7
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <pvPortMalloc+0x6c>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	617b      	str	r3, [r7, #20]
}
 80092e4:	bf00      	nop
 80092e6:	e7fe      	b.n	80092e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d069      	beq.n	80093c2 <pvPortMalloc+0x146>
 80092ee:	4b42      	ldr	r3, [pc, #264]	; (80093f8 <pvPortMalloc+0x17c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d864      	bhi.n	80093c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092f8:	4b40      	ldr	r3, [pc, #256]	; (80093fc <pvPortMalloc+0x180>)
 80092fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092fc:	4b3f      	ldr	r3, [pc, #252]	; (80093fc <pvPortMalloc+0x180>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009302:	e004      	b.n	800930e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	429a      	cmp	r2, r3
 8009316:	d903      	bls.n	8009320 <pvPortMalloc+0xa4>
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1f1      	bne.n	8009304 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009320:	4b33      	ldr	r3, [pc, #204]	; (80093f0 <pvPortMalloc+0x174>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009326:	429a      	cmp	r2, r3
 8009328:	d04b      	beq.n	80093c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2208      	movs	r2, #8
 8009330:	4413      	add	r3, r2
 8009332:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	1ad2      	subs	r2, r2, r3
 8009344:	2308      	movs	r3, #8
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	429a      	cmp	r2, r3
 800934a:	d91f      	bls.n	800938c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800934c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4413      	add	r3, r2
 8009352:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00a      	beq.n	8009374 <pvPortMalloc+0xf8>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	613b      	str	r3, [r7, #16]
}
 8009370:	bf00      	nop
 8009372:	e7fe      	b.n	8009372 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	1ad2      	subs	r2, r2, r3
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009386:	69b8      	ldr	r0, [r7, #24]
 8009388:	f000 f8f8 	bl	800957c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800938c:	4b1a      	ldr	r3, [pc, #104]	; (80093f8 <pvPortMalloc+0x17c>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	4a18      	ldr	r2, [pc, #96]	; (80093f8 <pvPortMalloc+0x17c>)
 8009398:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800939a:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <pvPortMalloc+0x17c>)
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	4b18      	ldr	r3, [pc, #96]	; (8009400 <pvPortMalloc+0x184>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d203      	bcs.n	80093ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093a6:	4b14      	ldr	r3, [pc, #80]	; (80093f8 <pvPortMalloc+0x17c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a15      	ldr	r2, [pc, #84]	; (8009400 <pvPortMalloc+0x184>)
 80093ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	4b10      	ldr	r3, [pc, #64]	; (80093f4 <pvPortMalloc+0x178>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	431a      	orrs	r2, r3
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093c2:	f7fe fc7d 	bl	8007cc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	f003 0307 	and.w	r3, r3, #7
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00a      	beq.n	80093e6 <pvPortMalloc+0x16a>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	60fb      	str	r3, [r7, #12]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <pvPortMalloc+0x168>
	return pvReturn;
 80093e6:	69fb      	ldr	r3, [r7, #28]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3728      	adds	r7, #40	; 0x28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	200039b0 	.word	0x200039b0
 80093f4:	200039bc 	.word	0x200039bc
 80093f8:	200039b4 	.word	0x200039b4
 80093fc:	200039a8 	.word	0x200039a8
 8009400:	200039b8 	.word	0x200039b8

08009404 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d048      	beq.n	80094a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009416:	2308      	movs	r3, #8
 8009418:	425b      	negs	r3, r3
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4413      	add	r3, r2
 800941e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	4b21      	ldr	r3, [pc, #132]	; (80094b0 <vPortFree+0xac>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4013      	ands	r3, r2
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10a      	bne.n	8009448 <vPortFree+0x44>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	60fb      	str	r3, [r7, #12]
}
 8009444:	bf00      	nop
 8009446:	e7fe      	b.n	8009446 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00a      	beq.n	8009466 <vPortFree+0x62>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	60bb      	str	r3, [r7, #8]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	4b11      	ldr	r3, [pc, #68]	; (80094b0 <vPortFree+0xac>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4013      	ands	r3, r2
 8009470:	2b00      	cmp	r3, #0
 8009472:	d019      	beq.n	80094a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d115      	bne.n	80094a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	4b0b      	ldr	r3, [pc, #44]	; (80094b0 <vPortFree+0xac>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	43db      	mvns	r3, r3
 8009486:	401a      	ands	r2, r3
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800948c:	f7fe fc0a 	bl	8007ca4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <vPortFree+0xb0>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4413      	add	r3, r2
 800949a:	4a06      	ldr	r2, [pc, #24]	; (80094b4 <vPortFree+0xb0>)
 800949c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800949e:	6938      	ldr	r0, [r7, #16]
 80094a0:	f000 f86c 	bl	800957c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80094a4:	f7fe fc0c 	bl	8007cc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094a8:	bf00      	nop
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	200039bc 	.word	0x200039bc
 80094b4:	200039b4 	.word	0x200039b4

080094b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094be:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80094c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094c4:	4b27      	ldr	r3, [pc, #156]	; (8009564 <prvHeapInit+0xac>)
 80094c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f003 0307 	and.w	r3, r3, #7
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00c      	beq.n	80094ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3307      	adds	r3, #7
 80094d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f023 0307 	bic.w	r3, r3, #7
 80094de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	4a1f      	ldr	r2, [pc, #124]	; (8009564 <prvHeapInit+0xac>)
 80094e8:	4413      	add	r3, r2
 80094ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094f0:	4a1d      	ldr	r2, [pc, #116]	; (8009568 <prvHeapInit+0xb0>)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094f6:	4b1c      	ldr	r3, [pc, #112]	; (8009568 <prvHeapInit+0xb0>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	4413      	add	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009504:	2208      	movs	r2, #8
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	1a9b      	subs	r3, r3, r2
 800950a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f023 0307 	bic.w	r3, r3, #7
 8009512:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4a15      	ldr	r2, [pc, #84]	; (800956c <prvHeapInit+0xb4>)
 8009518:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800951a:	4b14      	ldr	r3, [pc, #80]	; (800956c <prvHeapInit+0xb4>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2200      	movs	r2, #0
 8009520:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009522:	4b12      	ldr	r3, [pc, #72]	; (800956c <prvHeapInit+0xb4>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2200      	movs	r2, #0
 8009528:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	1ad2      	subs	r2, r2, r3
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009538:	4b0c      	ldr	r3, [pc, #48]	; (800956c <prvHeapInit+0xb4>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	4a0a      	ldr	r2, [pc, #40]	; (8009570 <prvHeapInit+0xb8>)
 8009546:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	4a09      	ldr	r2, [pc, #36]	; (8009574 <prvHeapInit+0xbc>)
 800954e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009550:	4b09      	ldr	r3, [pc, #36]	; (8009578 <prvHeapInit+0xc0>)
 8009552:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009556:	601a      	str	r2, [r3, #0]
}
 8009558:	bf00      	nop
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	bc80      	pop	{r7}
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	20000ac8 	.word	0x20000ac8
 8009568:	200039a8 	.word	0x200039a8
 800956c:	200039b0 	.word	0x200039b0
 8009570:	200039b8 	.word	0x200039b8
 8009574:	200039b4 	.word	0x200039b4
 8009578:	200039bc 	.word	0x200039bc

0800957c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009584:	4b27      	ldr	r3, [pc, #156]	; (8009624 <prvInsertBlockIntoFreeList+0xa8>)
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	e002      	b.n	8009590 <prvInsertBlockIntoFreeList+0x14>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	60fb      	str	r3, [r7, #12]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	429a      	cmp	r2, r3
 8009598:	d8f7      	bhi.n	800958a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	4413      	add	r3, r2
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d108      	bne.n	80095be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	441a      	add	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	441a      	add	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d118      	bne.n	8009604 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	4b14      	ldr	r3, [pc, #80]	; (8009628 <prvInsertBlockIntoFreeList+0xac>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d00d      	beq.n	80095fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	441a      	add	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	e008      	b.n	800960c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095fa:	4b0b      	ldr	r3, [pc, #44]	; (8009628 <prvInsertBlockIntoFreeList+0xac>)
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	e003      	b.n	800960c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	429a      	cmp	r2, r3
 8009612:	d002      	beq.n	800961a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800961a:	bf00      	nop
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	bc80      	pop	{r7}
 8009622:	4770      	bx	lr
 8009624:	200039a8 	.word	0x200039a8
 8009628:	200039b0 	.word	0x200039b0

0800962c <__errno>:
 800962c:	4b01      	ldr	r3, [pc, #4]	; (8009634 <__errno+0x8>)
 800962e:	6818      	ldr	r0, [r3, #0]
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	20000018 	.word	0x20000018

08009638 <__libc_init_array>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	2600      	movs	r6, #0
 800963c:	4d0c      	ldr	r5, [pc, #48]	; (8009670 <__libc_init_array+0x38>)
 800963e:	4c0d      	ldr	r4, [pc, #52]	; (8009674 <__libc_init_array+0x3c>)
 8009640:	1b64      	subs	r4, r4, r5
 8009642:	10a4      	asrs	r4, r4, #2
 8009644:	42a6      	cmp	r6, r4
 8009646:	d109      	bne.n	800965c <__libc_init_array+0x24>
 8009648:	f001 f8d2 	bl	800a7f0 <_init>
 800964c:	2600      	movs	r6, #0
 800964e:	4d0a      	ldr	r5, [pc, #40]	; (8009678 <__libc_init_array+0x40>)
 8009650:	4c0a      	ldr	r4, [pc, #40]	; (800967c <__libc_init_array+0x44>)
 8009652:	1b64      	subs	r4, r4, r5
 8009654:	10a4      	asrs	r4, r4, #2
 8009656:	42a6      	cmp	r6, r4
 8009658:	d105      	bne.n	8009666 <__libc_init_array+0x2e>
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009660:	4798      	blx	r3
 8009662:	3601      	adds	r6, #1
 8009664:	e7ee      	b.n	8009644 <__libc_init_array+0xc>
 8009666:	f855 3b04 	ldr.w	r3, [r5], #4
 800966a:	4798      	blx	r3
 800966c:	3601      	adds	r6, #1
 800966e:	e7f2      	b.n	8009656 <__libc_init_array+0x1e>
 8009670:	0800b840 	.word	0x0800b840
 8009674:	0800b840 	.word	0x0800b840
 8009678:	0800b840 	.word	0x0800b840
 800967c:	0800b844 	.word	0x0800b844

08009680 <memcpy>:
 8009680:	440a      	add	r2, r1
 8009682:	4291      	cmp	r1, r2
 8009684:	f100 33ff 	add.w	r3, r0, #4294967295
 8009688:	d100      	bne.n	800968c <memcpy+0xc>
 800968a:	4770      	bx	lr
 800968c:	b510      	push	{r4, lr}
 800968e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009692:	4291      	cmp	r1, r2
 8009694:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009698:	d1f9      	bne.n	800968e <memcpy+0xe>
 800969a:	bd10      	pop	{r4, pc}

0800969c <memset>:
 800969c:	4603      	mov	r3, r0
 800969e:	4402      	add	r2, r0
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d100      	bne.n	80096a6 <memset+0xa>
 80096a4:	4770      	bx	lr
 80096a6:	f803 1b01 	strb.w	r1, [r3], #1
 80096aa:	e7f9      	b.n	80096a0 <memset+0x4>

080096ac <_puts_r>:
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	460e      	mov	r6, r1
 80096b0:	4605      	mov	r5, r0
 80096b2:	b118      	cbz	r0, 80096bc <_puts_r+0x10>
 80096b4:	6983      	ldr	r3, [r0, #24]
 80096b6:	b90b      	cbnz	r3, 80096bc <_puts_r+0x10>
 80096b8:	f000 fb24 	bl	8009d04 <__sinit>
 80096bc:	69ab      	ldr	r3, [r5, #24]
 80096be:	68ac      	ldr	r4, [r5, #8]
 80096c0:	b913      	cbnz	r3, 80096c8 <_puts_r+0x1c>
 80096c2:	4628      	mov	r0, r5
 80096c4:	f000 fb1e 	bl	8009d04 <__sinit>
 80096c8:	4b2c      	ldr	r3, [pc, #176]	; (800977c <_puts_r+0xd0>)
 80096ca:	429c      	cmp	r4, r3
 80096cc:	d120      	bne.n	8009710 <_puts_r+0x64>
 80096ce:	686c      	ldr	r4, [r5, #4]
 80096d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096d2:	07db      	lsls	r3, r3, #31
 80096d4:	d405      	bmi.n	80096e2 <_puts_r+0x36>
 80096d6:	89a3      	ldrh	r3, [r4, #12]
 80096d8:	0598      	lsls	r0, r3, #22
 80096da:	d402      	bmi.n	80096e2 <_puts_r+0x36>
 80096dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096de:	f000 fbaf 	bl	8009e40 <__retarget_lock_acquire_recursive>
 80096e2:	89a3      	ldrh	r3, [r4, #12]
 80096e4:	0719      	lsls	r1, r3, #28
 80096e6:	d51d      	bpl.n	8009724 <_puts_r+0x78>
 80096e8:	6923      	ldr	r3, [r4, #16]
 80096ea:	b1db      	cbz	r3, 8009724 <_puts_r+0x78>
 80096ec:	3e01      	subs	r6, #1
 80096ee:	68a3      	ldr	r3, [r4, #8]
 80096f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80096f4:	3b01      	subs	r3, #1
 80096f6:	60a3      	str	r3, [r4, #8]
 80096f8:	bb39      	cbnz	r1, 800974a <_puts_r+0x9e>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	da38      	bge.n	8009770 <_puts_r+0xc4>
 80096fe:	4622      	mov	r2, r4
 8009700:	210a      	movs	r1, #10
 8009702:	4628      	mov	r0, r5
 8009704:	f000 f924 	bl	8009950 <__swbuf_r>
 8009708:	3001      	adds	r0, #1
 800970a:	d011      	beq.n	8009730 <_puts_r+0x84>
 800970c:	250a      	movs	r5, #10
 800970e:	e011      	b.n	8009734 <_puts_r+0x88>
 8009710:	4b1b      	ldr	r3, [pc, #108]	; (8009780 <_puts_r+0xd4>)
 8009712:	429c      	cmp	r4, r3
 8009714:	d101      	bne.n	800971a <_puts_r+0x6e>
 8009716:	68ac      	ldr	r4, [r5, #8]
 8009718:	e7da      	b.n	80096d0 <_puts_r+0x24>
 800971a:	4b1a      	ldr	r3, [pc, #104]	; (8009784 <_puts_r+0xd8>)
 800971c:	429c      	cmp	r4, r3
 800971e:	bf08      	it	eq
 8009720:	68ec      	ldreq	r4, [r5, #12]
 8009722:	e7d5      	b.n	80096d0 <_puts_r+0x24>
 8009724:	4621      	mov	r1, r4
 8009726:	4628      	mov	r0, r5
 8009728:	f000 f964 	bl	80099f4 <__swsetup_r>
 800972c:	2800      	cmp	r0, #0
 800972e:	d0dd      	beq.n	80096ec <_puts_r+0x40>
 8009730:	f04f 35ff 	mov.w	r5, #4294967295
 8009734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009736:	07da      	lsls	r2, r3, #31
 8009738:	d405      	bmi.n	8009746 <_puts_r+0x9a>
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	059b      	lsls	r3, r3, #22
 800973e:	d402      	bmi.n	8009746 <_puts_r+0x9a>
 8009740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009742:	f000 fb7e 	bl	8009e42 <__retarget_lock_release_recursive>
 8009746:	4628      	mov	r0, r5
 8009748:	bd70      	pop	{r4, r5, r6, pc}
 800974a:	2b00      	cmp	r3, #0
 800974c:	da04      	bge.n	8009758 <_puts_r+0xac>
 800974e:	69a2      	ldr	r2, [r4, #24]
 8009750:	429a      	cmp	r2, r3
 8009752:	dc06      	bgt.n	8009762 <_puts_r+0xb6>
 8009754:	290a      	cmp	r1, #10
 8009756:	d004      	beq.n	8009762 <_puts_r+0xb6>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	1c5a      	adds	r2, r3, #1
 800975c:	6022      	str	r2, [r4, #0]
 800975e:	7019      	strb	r1, [r3, #0]
 8009760:	e7c5      	b.n	80096ee <_puts_r+0x42>
 8009762:	4622      	mov	r2, r4
 8009764:	4628      	mov	r0, r5
 8009766:	f000 f8f3 	bl	8009950 <__swbuf_r>
 800976a:	3001      	adds	r0, #1
 800976c:	d1bf      	bne.n	80096ee <_puts_r+0x42>
 800976e:	e7df      	b.n	8009730 <_puts_r+0x84>
 8009770:	250a      	movs	r5, #10
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	6022      	str	r2, [r4, #0]
 8009778:	701d      	strb	r5, [r3, #0]
 800977a:	e7db      	b.n	8009734 <_puts_r+0x88>
 800977c:	0800b7cc 	.word	0x0800b7cc
 8009780:	0800b7ec 	.word	0x0800b7ec
 8009784:	0800b7ac 	.word	0x0800b7ac

08009788 <puts>:
 8009788:	4b02      	ldr	r3, [pc, #8]	; (8009794 <puts+0xc>)
 800978a:	4601      	mov	r1, r0
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	f7ff bf8d 	b.w	80096ac <_puts_r>
 8009792:	bf00      	nop
 8009794:	20000018 	.word	0x20000018

08009798 <setvbuf>:
 8009798:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800979c:	461d      	mov	r5, r3
 800979e:	4b5d      	ldr	r3, [pc, #372]	; (8009914 <setvbuf+0x17c>)
 80097a0:	4604      	mov	r4, r0
 80097a2:	681f      	ldr	r7, [r3, #0]
 80097a4:	460e      	mov	r6, r1
 80097a6:	4690      	mov	r8, r2
 80097a8:	b127      	cbz	r7, 80097b4 <setvbuf+0x1c>
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	b913      	cbnz	r3, 80097b4 <setvbuf+0x1c>
 80097ae:	4638      	mov	r0, r7
 80097b0:	f000 faa8 	bl	8009d04 <__sinit>
 80097b4:	4b58      	ldr	r3, [pc, #352]	; (8009918 <setvbuf+0x180>)
 80097b6:	429c      	cmp	r4, r3
 80097b8:	d167      	bne.n	800988a <setvbuf+0xf2>
 80097ba:	687c      	ldr	r4, [r7, #4]
 80097bc:	f1b8 0f02 	cmp.w	r8, #2
 80097c0:	d006      	beq.n	80097d0 <setvbuf+0x38>
 80097c2:	f1b8 0f01 	cmp.w	r8, #1
 80097c6:	f200 809f 	bhi.w	8009908 <setvbuf+0x170>
 80097ca:	2d00      	cmp	r5, #0
 80097cc:	f2c0 809c 	blt.w	8009908 <setvbuf+0x170>
 80097d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097d2:	07db      	lsls	r3, r3, #31
 80097d4:	d405      	bmi.n	80097e2 <setvbuf+0x4a>
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	0598      	lsls	r0, r3, #22
 80097da:	d402      	bmi.n	80097e2 <setvbuf+0x4a>
 80097dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097de:	f000 fb2f 	bl	8009e40 <__retarget_lock_acquire_recursive>
 80097e2:	4621      	mov	r1, r4
 80097e4:	4638      	mov	r0, r7
 80097e6:	f000 f9f9 	bl	8009bdc <_fflush_r>
 80097ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097ec:	b141      	cbz	r1, 8009800 <setvbuf+0x68>
 80097ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097f2:	4299      	cmp	r1, r3
 80097f4:	d002      	beq.n	80097fc <setvbuf+0x64>
 80097f6:	4638      	mov	r0, r7
 80097f8:	f000 fb90 	bl	8009f1c <_free_r>
 80097fc:	2300      	movs	r3, #0
 80097fe:	6363      	str	r3, [r4, #52]	; 0x34
 8009800:	2300      	movs	r3, #0
 8009802:	61a3      	str	r3, [r4, #24]
 8009804:	6063      	str	r3, [r4, #4]
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	0619      	lsls	r1, r3, #24
 800980a:	d503      	bpl.n	8009814 <setvbuf+0x7c>
 800980c:	4638      	mov	r0, r7
 800980e:	6921      	ldr	r1, [r4, #16]
 8009810:	f000 fb84 	bl	8009f1c <_free_r>
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	f1b8 0f02 	cmp.w	r8, #2
 800981a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800981e:	f023 0303 	bic.w	r3, r3, #3
 8009822:	81a3      	strh	r3, [r4, #12]
 8009824:	d06c      	beq.n	8009900 <setvbuf+0x168>
 8009826:	ab01      	add	r3, sp, #4
 8009828:	466a      	mov	r2, sp
 800982a:	4621      	mov	r1, r4
 800982c:	4638      	mov	r0, r7
 800982e:	f000 fb09 	bl	8009e44 <__swhatbuf_r>
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	4318      	orrs	r0, r3
 8009836:	81a0      	strh	r0, [r4, #12]
 8009838:	2d00      	cmp	r5, #0
 800983a:	d130      	bne.n	800989e <setvbuf+0x106>
 800983c:	9d00      	ldr	r5, [sp, #0]
 800983e:	4628      	mov	r0, r5
 8009840:	f000 fb64 	bl	8009f0c <malloc>
 8009844:	4606      	mov	r6, r0
 8009846:	2800      	cmp	r0, #0
 8009848:	d155      	bne.n	80098f6 <setvbuf+0x15e>
 800984a:	f8dd 9000 	ldr.w	r9, [sp]
 800984e:	45a9      	cmp	r9, r5
 8009850:	d14a      	bne.n	80098e8 <setvbuf+0x150>
 8009852:	f04f 35ff 	mov.w	r5, #4294967295
 8009856:	2200      	movs	r2, #0
 8009858:	60a2      	str	r2, [r4, #8]
 800985a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800985e:	6022      	str	r2, [r4, #0]
 8009860:	6122      	str	r2, [r4, #16]
 8009862:	2201      	movs	r2, #1
 8009864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009868:	6162      	str	r2, [r4, #20]
 800986a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800986c:	f043 0302 	orr.w	r3, r3, #2
 8009870:	07d2      	lsls	r2, r2, #31
 8009872:	81a3      	strh	r3, [r4, #12]
 8009874:	d405      	bmi.n	8009882 <setvbuf+0xea>
 8009876:	f413 7f00 	tst.w	r3, #512	; 0x200
 800987a:	d102      	bne.n	8009882 <setvbuf+0xea>
 800987c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800987e:	f000 fae0 	bl	8009e42 <__retarget_lock_release_recursive>
 8009882:	4628      	mov	r0, r5
 8009884:	b003      	add	sp, #12
 8009886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800988a:	4b24      	ldr	r3, [pc, #144]	; (800991c <setvbuf+0x184>)
 800988c:	429c      	cmp	r4, r3
 800988e:	d101      	bne.n	8009894 <setvbuf+0xfc>
 8009890:	68bc      	ldr	r4, [r7, #8]
 8009892:	e793      	b.n	80097bc <setvbuf+0x24>
 8009894:	4b22      	ldr	r3, [pc, #136]	; (8009920 <setvbuf+0x188>)
 8009896:	429c      	cmp	r4, r3
 8009898:	bf08      	it	eq
 800989a:	68fc      	ldreq	r4, [r7, #12]
 800989c:	e78e      	b.n	80097bc <setvbuf+0x24>
 800989e:	2e00      	cmp	r6, #0
 80098a0:	d0cd      	beq.n	800983e <setvbuf+0xa6>
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	b913      	cbnz	r3, 80098ac <setvbuf+0x114>
 80098a6:	4638      	mov	r0, r7
 80098a8:	f000 fa2c 	bl	8009d04 <__sinit>
 80098ac:	f1b8 0f01 	cmp.w	r8, #1
 80098b0:	bf08      	it	eq
 80098b2:	89a3      	ldrheq	r3, [r4, #12]
 80098b4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80098b8:	bf04      	itt	eq
 80098ba:	f043 0301 	orreq.w	r3, r3, #1
 80098be:	81a3      	strheq	r3, [r4, #12]
 80098c0:	89a2      	ldrh	r2, [r4, #12]
 80098c2:	6026      	str	r6, [r4, #0]
 80098c4:	f012 0308 	ands.w	r3, r2, #8
 80098c8:	d01c      	beq.n	8009904 <setvbuf+0x16c>
 80098ca:	07d3      	lsls	r3, r2, #31
 80098cc:	bf41      	itttt	mi
 80098ce:	2300      	movmi	r3, #0
 80098d0:	426d      	negmi	r5, r5
 80098d2:	60a3      	strmi	r3, [r4, #8]
 80098d4:	61a5      	strmi	r5, [r4, #24]
 80098d6:	bf58      	it	pl
 80098d8:	60a5      	strpl	r5, [r4, #8]
 80098da:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80098dc:	f015 0501 	ands.w	r5, r5, #1
 80098e0:	d115      	bne.n	800990e <setvbuf+0x176>
 80098e2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80098e6:	e7c8      	b.n	800987a <setvbuf+0xe2>
 80098e8:	4648      	mov	r0, r9
 80098ea:	f000 fb0f 	bl	8009f0c <malloc>
 80098ee:	4606      	mov	r6, r0
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d0ae      	beq.n	8009852 <setvbuf+0xba>
 80098f4:	464d      	mov	r5, r9
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	e7d0      	b.n	80098a2 <setvbuf+0x10a>
 8009900:	2500      	movs	r5, #0
 8009902:	e7a8      	b.n	8009856 <setvbuf+0xbe>
 8009904:	60a3      	str	r3, [r4, #8]
 8009906:	e7e8      	b.n	80098da <setvbuf+0x142>
 8009908:	f04f 35ff 	mov.w	r5, #4294967295
 800990c:	e7b9      	b.n	8009882 <setvbuf+0xea>
 800990e:	2500      	movs	r5, #0
 8009910:	e7b7      	b.n	8009882 <setvbuf+0xea>
 8009912:	bf00      	nop
 8009914:	20000018 	.word	0x20000018
 8009918:	0800b7cc 	.word	0x0800b7cc
 800991c:	0800b7ec 	.word	0x0800b7ec
 8009920:	0800b7ac 	.word	0x0800b7ac

08009924 <viprintf>:
 8009924:	4b09      	ldr	r3, [pc, #36]	; (800994c <viprintf+0x28>)
 8009926:	b570      	push	{r4, r5, r6, lr}
 8009928:	681c      	ldr	r4, [r3, #0]
 800992a:	4605      	mov	r5, r0
 800992c:	460e      	mov	r6, r1
 800992e:	b124      	cbz	r4, 800993a <viprintf+0x16>
 8009930:	69a3      	ldr	r3, [r4, #24]
 8009932:	b913      	cbnz	r3, 800993a <viprintf+0x16>
 8009934:	4620      	mov	r0, r4
 8009936:	f000 f9e5 	bl	8009d04 <__sinit>
 800993a:	4633      	mov	r3, r6
 800993c:	462a      	mov	r2, r5
 800993e:	4620      	mov	r0, r4
 8009940:	68a1      	ldr	r1, [r4, #8]
 8009942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009946:	f000 bbb7 	b.w	800a0b8 <_vfiprintf_r>
 800994a:	bf00      	nop
 800994c:	20000018 	.word	0x20000018

08009950 <__swbuf_r>:
 8009950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009952:	460e      	mov	r6, r1
 8009954:	4614      	mov	r4, r2
 8009956:	4605      	mov	r5, r0
 8009958:	b118      	cbz	r0, 8009962 <__swbuf_r+0x12>
 800995a:	6983      	ldr	r3, [r0, #24]
 800995c:	b90b      	cbnz	r3, 8009962 <__swbuf_r+0x12>
 800995e:	f000 f9d1 	bl	8009d04 <__sinit>
 8009962:	4b21      	ldr	r3, [pc, #132]	; (80099e8 <__swbuf_r+0x98>)
 8009964:	429c      	cmp	r4, r3
 8009966:	d12b      	bne.n	80099c0 <__swbuf_r+0x70>
 8009968:	686c      	ldr	r4, [r5, #4]
 800996a:	69a3      	ldr	r3, [r4, #24]
 800996c:	60a3      	str	r3, [r4, #8]
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	071a      	lsls	r2, r3, #28
 8009972:	d52f      	bpl.n	80099d4 <__swbuf_r+0x84>
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	b36b      	cbz	r3, 80099d4 <__swbuf_r+0x84>
 8009978:	6923      	ldr	r3, [r4, #16]
 800997a:	6820      	ldr	r0, [r4, #0]
 800997c:	b2f6      	uxtb	r6, r6
 800997e:	1ac0      	subs	r0, r0, r3
 8009980:	6963      	ldr	r3, [r4, #20]
 8009982:	4637      	mov	r7, r6
 8009984:	4283      	cmp	r3, r0
 8009986:	dc04      	bgt.n	8009992 <__swbuf_r+0x42>
 8009988:	4621      	mov	r1, r4
 800998a:	4628      	mov	r0, r5
 800998c:	f000 f926 	bl	8009bdc <_fflush_r>
 8009990:	bb30      	cbnz	r0, 80099e0 <__swbuf_r+0x90>
 8009992:	68a3      	ldr	r3, [r4, #8]
 8009994:	3001      	adds	r0, #1
 8009996:	3b01      	subs	r3, #1
 8009998:	60a3      	str	r3, [r4, #8]
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	6022      	str	r2, [r4, #0]
 80099a0:	701e      	strb	r6, [r3, #0]
 80099a2:	6963      	ldr	r3, [r4, #20]
 80099a4:	4283      	cmp	r3, r0
 80099a6:	d004      	beq.n	80099b2 <__swbuf_r+0x62>
 80099a8:	89a3      	ldrh	r3, [r4, #12]
 80099aa:	07db      	lsls	r3, r3, #31
 80099ac:	d506      	bpl.n	80099bc <__swbuf_r+0x6c>
 80099ae:	2e0a      	cmp	r6, #10
 80099b0:	d104      	bne.n	80099bc <__swbuf_r+0x6c>
 80099b2:	4621      	mov	r1, r4
 80099b4:	4628      	mov	r0, r5
 80099b6:	f000 f911 	bl	8009bdc <_fflush_r>
 80099ba:	b988      	cbnz	r0, 80099e0 <__swbuf_r+0x90>
 80099bc:	4638      	mov	r0, r7
 80099be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <__swbuf_r+0x9c>)
 80099c2:	429c      	cmp	r4, r3
 80099c4:	d101      	bne.n	80099ca <__swbuf_r+0x7a>
 80099c6:	68ac      	ldr	r4, [r5, #8]
 80099c8:	e7cf      	b.n	800996a <__swbuf_r+0x1a>
 80099ca:	4b09      	ldr	r3, [pc, #36]	; (80099f0 <__swbuf_r+0xa0>)
 80099cc:	429c      	cmp	r4, r3
 80099ce:	bf08      	it	eq
 80099d0:	68ec      	ldreq	r4, [r5, #12]
 80099d2:	e7ca      	b.n	800996a <__swbuf_r+0x1a>
 80099d4:	4621      	mov	r1, r4
 80099d6:	4628      	mov	r0, r5
 80099d8:	f000 f80c 	bl	80099f4 <__swsetup_r>
 80099dc:	2800      	cmp	r0, #0
 80099de:	d0cb      	beq.n	8009978 <__swbuf_r+0x28>
 80099e0:	f04f 37ff 	mov.w	r7, #4294967295
 80099e4:	e7ea      	b.n	80099bc <__swbuf_r+0x6c>
 80099e6:	bf00      	nop
 80099e8:	0800b7cc 	.word	0x0800b7cc
 80099ec:	0800b7ec 	.word	0x0800b7ec
 80099f0:	0800b7ac 	.word	0x0800b7ac

080099f4 <__swsetup_r>:
 80099f4:	4b32      	ldr	r3, [pc, #200]	; (8009ac0 <__swsetup_r+0xcc>)
 80099f6:	b570      	push	{r4, r5, r6, lr}
 80099f8:	681d      	ldr	r5, [r3, #0]
 80099fa:	4606      	mov	r6, r0
 80099fc:	460c      	mov	r4, r1
 80099fe:	b125      	cbz	r5, 8009a0a <__swsetup_r+0x16>
 8009a00:	69ab      	ldr	r3, [r5, #24]
 8009a02:	b913      	cbnz	r3, 8009a0a <__swsetup_r+0x16>
 8009a04:	4628      	mov	r0, r5
 8009a06:	f000 f97d 	bl	8009d04 <__sinit>
 8009a0a:	4b2e      	ldr	r3, [pc, #184]	; (8009ac4 <__swsetup_r+0xd0>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	d10f      	bne.n	8009a30 <__swsetup_r+0x3c>
 8009a10:	686c      	ldr	r4, [r5, #4]
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a18:	0719      	lsls	r1, r3, #28
 8009a1a:	d42c      	bmi.n	8009a76 <__swsetup_r+0x82>
 8009a1c:	06dd      	lsls	r5, r3, #27
 8009a1e:	d411      	bmi.n	8009a44 <__swsetup_r+0x50>
 8009a20:	2309      	movs	r3, #9
 8009a22:	6033      	str	r3, [r6, #0]
 8009a24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a28:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2c:	81a3      	strh	r3, [r4, #12]
 8009a2e:	e03e      	b.n	8009aae <__swsetup_r+0xba>
 8009a30:	4b25      	ldr	r3, [pc, #148]	; (8009ac8 <__swsetup_r+0xd4>)
 8009a32:	429c      	cmp	r4, r3
 8009a34:	d101      	bne.n	8009a3a <__swsetup_r+0x46>
 8009a36:	68ac      	ldr	r4, [r5, #8]
 8009a38:	e7eb      	b.n	8009a12 <__swsetup_r+0x1e>
 8009a3a:	4b24      	ldr	r3, [pc, #144]	; (8009acc <__swsetup_r+0xd8>)
 8009a3c:	429c      	cmp	r4, r3
 8009a3e:	bf08      	it	eq
 8009a40:	68ec      	ldreq	r4, [r5, #12]
 8009a42:	e7e6      	b.n	8009a12 <__swsetup_r+0x1e>
 8009a44:	0758      	lsls	r0, r3, #29
 8009a46:	d512      	bpl.n	8009a6e <__swsetup_r+0x7a>
 8009a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a4a:	b141      	cbz	r1, 8009a5e <__swsetup_r+0x6a>
 8009a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a50:	4299      	cmp	r1, r3
 8009a52:	d002      	beq.n	8009a5a <__swsetup_r+0x66>
 8009a54:	4630      	mov	r0, r6
 8009a56:	f000 fa61 	bl	8009f1c <_free_r>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	6363      	str	r3, [r4, #52]	; 0x34
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a64:	81a3      	strh	r3, [r4, #12]
 8009a66:	2300      	movs	r3, #0
 8009a68:	6063      	str	r3, [r4, #4]
 8009a6a:	6923      	ldr	r3, [r4, #16]
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	f043 0308 	orr.w	r3, r3, #8
 8009a74:	81a3      	strh	r3, [r4, #12]
 8009a76:	6923      	ldr	r3, [r4, #16]
 8009a78:	b94b      	cbnz	r3, 8009a8e <__swsetup_r+0x9a>
 8009a7a:	89a3      	ldrh	r3, [r4, #12]
 8009a7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a84:	d003      	beq.n	8009a8e <__swsetup_r+0x9a>
 8009a86:	4621      	mov	r1, r4
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f000 f9ff 	bl	8009e8c <__smakebuf_r>
 8009a8e:	89a0      	ldrh	r0, [r4, #12]
 8009a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a94:	f010 0301 	ands.w	r3, r0, #1
 8009a98:	d00a      	beq.n	8009ab0 <__swsetup_r+0xbc>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60a3      	str	r3, [r4, #8]
 8009a9e:	6963      	ldr	r3, [r4, #20]
 8009aa0:	425b      	negs	r3, r3
 8009aa2:	61a3      	str	r3, [r4, #24]
 8009aa4:	6923      	ldr	r3, [r4, #16]
 8009aa6:	b943      	cbnz	r3, 8009aba <__swsetup_r+0xc6>
 8009aa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009aac:	d1ba      	bne.n	8009a24 <__swsetup_r+0x30>
 8009aae:	bd70      	pop	{r4, r5, r6, pc}
 8009ab0:	0781      	lsls	r1, r0, #30
 8009ab2:	bf58      	it	pl
 8009ab4:	6963      	ldrpl	r3, [r4, #20]
 8009ab6:	60a3      	str	r3, [r4, #8]
 8009ab8:	e7f4      	b.n	8009aa4 <__swsetup_r+0xb0>
 8009aba:	2000      	movs	r0, #0
 8009abc:	e7f7      	b.n	8009aae <__swsetup_r+0xba>
 8009abe:	bf00      	nop
 8009ac0:	20000018 	.word	0x20000018
 8009ac4:	0800b7cc 	.word	0x0800b7cc
 8009ac8:	0800b7ec 	.word	0x0800b7ec
 8009acc:	0800b7ac 	.word	0x0800b7ac

08009ad0 <__sflush_r>:
 8009ad0:	898a      	ldrh	r2, [r1, #12]
 8009ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	0710      	lsls	r0, r2, #28
 8009ada:	460c      	mov	r4, r1
 8009adc:	d458      	bmi.n	8009b90 <__sflush_r+0xc0>
 8009ade:	684b      	ldr	r3, [r1, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	dc05      	bgt.n	8009af0 <__sflush_r+0x20>
 8009ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	dc02      	bgt.n	8009af0 <__sflush_r+0x20>
 8009aea:	2000      	movs	r0, #0
 8009aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009af2:	2e00      	cmp	r6, #0
 8009af4:	d0f9      	beq.n	8009aea <__sflush_r+0x1a>
 8009af6:	2300      	movs	r3, #0
 8009af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009afc:	682f      	ldr	r7, [r5, #0]
 8009afe:	602b      	str	r3, [r5, #0]
 8009b00:	d032      	beq.n	8009b68 <__sflush_r+0x98>
 8009b02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	075a      	lsls	r2, r3, #29
 8009b08:	d505      	bpl.n	8009b16 <__sflush_r+0x46>
 8009b0a:	6863      	ldr	r3, [r4, #4]
 8009b0c:	1ac0      	subs	r0, r0, r3
 8009b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b10:	b10b      	cbz	r3, 8009b16 <__sflush_r+0x46>
 8009b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b14:	1ac0      	subs	r0, r0, r3
 8009b16:	2300      	movs	r3, #0
 8009b18:	4602      	mov	r2, r0
 8009b1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	6a21      	ldr	r1, [r4, #32]
 8009b20:	47b0      	blx	r6
 8009b22:	1c43      	adds	r3, r0, #1
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	d106      	bne.n	8009b36 <__sflush_r+0x66>
 8009b28:	6829      	ldr	r1, [r5, #0]
 8009b2a:	291d      	cmp	r1, #29
 8009b2c:	d82c      	bhi.n	8009b88 <__sflush_r+0xb8>
 8009b2e:	4a2a      	ldr	r2, [pc, #168]	; (8009bd8 <__sflush_r+0x108>)
 8009b30:	40ca      	lsrs	r2, r1
 8009b32:	07d6      	lsls	r6, r2, #31
 8009b34:	d528      	bpl.n	8009b88 <__sflush_r+0xb8>
 8009b36:	2200      	movs	r2, #0
 8009b38:	6062      	str	r2, [r4, #4]
 8009b3a:	6922      	ldr	r2, [r4, #16]
 8009b3c:	04d9      	lsls	r1, r3, #19
 8009b3e:	6022      	str	r2, [r4, #0]
 8009b40:	d504      	bpl.n	8009b4c <__sflush_r+0x7c>
 8009b42:	1c42      	adds	r2, r0, #1
 8009b44:	d101      	bne.n	8009b4a <__sflush_r+0x7a>
 8009b46:	682b      	ldr	r3, [r5, #0]
 8009b48:	b903      	cbnz	r3, 8009b4c <__sflush_r+0x7c>
 8009b4a:	6560      	str	r0, [r4, #84]	; 0x54
 8009b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b4e:	602f      	str	r7, [r5, #0]
 8009b50:	2900      	cmp	r1, #0
 8009b52:	d0ca      	beq.n	8009aea <__sflush_r+0x1a>
 8009b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b58:	4299      	cmp	r1, r3
 8009b5a:	d002      	beq.n	8009b62 <__sflush_r+0x92>
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f000 f9dd 	bl	8009f1c <_free_r>
 8009b62:	2000      	movs	r0, #0
 8009b64:	6360      	str	r0, [r4, #52]	; 0x34
 8009b66:	e7c1      	b.n	8009aec <__sflush_r+0x1c>
 8009b68:	6a21      	ldr	r1, [r4, #32]
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	47b0      	blx	r6
 8009b70:	1c41      	adds	r1, r0, #1
 8009b72:	d1c7      	bne.n	8009b04 <__sflush_r+0x34>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0c4      	beq.n	8009b04 <__sflush_r+0x34>
 8009b7a:	2b1d      	cmp	r3, #29
 8009b7c:	d001      	beq.n	8009b82 <__sflush_r+0xb2>
 8009b7e:	2b16      	cmp	r3, #22
 8009b80:	d101      	bne.n	8009b86 <__sflush_r+0xb6>
 8009b82:	602f      	str	r7, [r5, #0]
 8009b84:	e7b1      	b.n	8009aea <__sflush_r+0x1a>
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b8c:	81a3      	strh	r3, [r4, #12]
 8009b8e:	e7ad      	b.n	8009aec <__sflush_r+0x1c>
 8009b90:	690f      	ldr	r7, [r1, #16]
 8009b92:	2f00      	cmp	r7, #0
 8009b94:	d0a9      	beq.n	8009aea <__sflush_r+0x1a>
 8009b96:	0793      	lsls	r3, r2, #30
 8009b98:	bf18      	it	ne
 8009b9a:	2300      	movne	r3, #0
 8009b9c:	680e      	ldr	r6, [r1, #0]
 8009b9e:	bf08      	it	eq
 8009ba0:	694b      	ldreq	r3, [r1, #20]
 8009ba2:	eba6 0807 	sub.w	r8, r6, r7
 8009ba6:	600f      	str	r7, [r1, #0]
 8009ba8:	608b      	str	r3, [r1, #8]
 8009baa:	f1b8 0f00 	cmp.w	r8, #0
 8009bae:	dd9c      	ble.n	8009aea <__sflush_r+0x1a>
 8009bb0:	4643      	mov	r3, r8
 8009bb2:	463a      	mov	r2, r7
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	6a21      	ldr	r1, [r4, #32]
 8009bb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bba:	47b0      	blx	r6
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	dc06      	bgt.n	8009bce <__sflush_r+0xfe>
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	e78e      	b.n	8009aec <__sflush_r+0x1c>
 8009bce:	4407      	add	r7, r0
 8009bd0:	eba8 0800 	sub.w	r8, r8, r0
 8009bd4:	e7e9      	b.n	8009baa <__sflush_r+0xda>
 8009bd6:	bf00      	nop
 8009bd8:	20400001 	.word	0x20400001

08009bdc <_fflush_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	690b      	ldr	r3, [r1, #16]
 8009be0:	4605      	mov	r5, r0
 8009be2:	460c      	mov	r4, r1
 8009be4:	b913      	cbnz	r3, 8009bec <_fflush_r+0x10>
 8009be6:	2500      	movs	r5, #0
 8009be8:	4628      	mov	r0, r5
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	b118      	cbz	r0, 8009bf6 <_fflush_r+0x1a>
 8009bee:	6983      	ldr	r3, [r0, #24]
 8009bf0:	b90b      	cbnz	r3, 8009bf6 <_fflush_r+0x1a>
 8009bf2:	f000 f887 	bl	8009d04 <__sinit>
 8009bf6:	4b14      	ldr	r3, [pc, #80]	; (8009c48 <_fflush_r+0x6c>)
 8009bf8:	429c      	cmp	r4, r3
 8009bfa:	d11b      	bne.n	8009c34 <_fflush_r+0x58>
 8009bfc:	686c      	ldr	r4, [r5, #4]
 8009bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d0ef      	beq.n	8009be6 <_fflush_r+0xa>
 8009c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c08:	07d0      	lsls	r0, r2, #31
 8009c0a:	d404      	bmi.n	8009c16 <_fflush_r+0x3a>
 8009c0c:	0599      	lsls	r1, r3, #22
 8009c0e:	d402      	bmi.n	8009c16 <_fflush_r+0x3a>
 8009c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c12:	f000 f915 	bl	8009e40 <__retarget_lock_acquire_recursive>
 8009c16:	4628      	mov	r0, r5
 8009c18:	4621      	mov	r1, r4
 8009c1a:	f7ff ff59 	bl	8009ad0 <__sflush_r>
 8009c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c20:	4605      	mov	r5, r0
 8009c22:	07da      	lsls	r2, r3, #31
 8009c24:	d4e0      	bmi.n	8009be8 <_fflush_r+0xc>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	059b      	lsls	r3, r3, #22
 8009c2a:	d4dd      	bmi.n	8009be8 <_fflush_r+0xc>
 8009c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c2e:	f000 f908 	bl	8009e42 <__retarget_lock_release_recursive>
 8009c32:	e7d9      	b.n	8009be8 <_fflush_r+0xc>
 8009c34:	4b05      	ldr	r3, [pc, #20]	; (8009c4c <_fflush_r+0x70>)
 8009c36:	429c      	cmp	r4, r3
 8009c38:	d101      	bne.n	8009c3e <_fflush_r+0x62>
 8009c3a:	68ac      	ldr	r4, [r5, #8]
 8009c3c:	e7df      	b.n	8009bfe <_fflush_r+0x22>
 8009c3e:	4b04      	ldr	r3, [pc, #16]	; (8009c50 <_fflush_r+0x74>)
 8009c40:	429c      	cmp	r4, r3
 8009c42:	bf08      	it	eq
 8009c44:	68ec      	ldreq	r4, [r5, #12]
 8009c46:	e7da      	b.n	8009bfe <_fflush_r+0x22>
 8009c48:	0800b7cc 	.word	0x0800b7cc
 8009c4c:	0800b7ec 	.word	0x0800b7ec
 8009c50:	0800b7ac 	.word	0x0800b7ac

08009c54 <std>:
 8009c54:	2300      	movs	r3, #0
 8009c56:	b510      	push	{r4, lr}
 8009c58:	4604      	mov	r4, r0
 8009c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c62:	6083      	str	r3, [r0, #8]
 8009c64:	8181      	strh	r1, [r0, #12]
 8009c66:	6643      	str	r3, [r0, #100]	; 0x64
 8009c68:	81c2      	strh	r2, [r0, #14]
 8009c6a:	6183      	str	r3, [r0, #24]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	2208      	movs	r2, #8
 8009c70:	305c      	adds	r0, #92	; 0x5c
 8009c72:	f7ff fd13 	bl	800969c <memset>
 8009c76:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <std+0x38>)
 8009c78:	6224      	str	r4, [r4, #32]
 8009c7a:	6263      	str	r3, [r4, #36]	; 0x24
 8009c7c:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <std+0x3c>)
 8009c7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c80:	4b04      	ldr	r3, [pc, #16]	; (8009c94 <std+0x40>)
 8009c82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c84:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <std+0x44>)
 8009c86:	6323      	str	r3, [r4, #48]	; 0x30
 8009c88:	bd10      	pop	{r4, pc}
 8009c8a:	bf00      	nop
 8009c8c:	0800a665 	.word	0x0800a665
 8009c90:	0800a687 	.word	0x0800a687
 8009c94:	0800a6bf 	.word	0x0800a6bf
 8009c98:	0800a6e3 	.word	0x0800a6e3

08009c9c <_cleanup_r>:
 8009c9c:	4901      	ldr	r1, [pc, #4]	; (8009ca4 <_cleanup_r+0x8>)
 8009c9e:	f000 b8af 	b.w	8009e00 <_fwalk_reent>
 8009ca2:	bf00      	nop
 8009ca4:	08009bdd 	.word	0x08009bdd

08009ca8 <__sfmoreglue>:
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	2568      	movs	r5, #104	; 0x68
 8009cac:	1e4a      	subs	r2, r1, #1
 8009cae:	4355      	muls	r5, r2
 8009cb0:	460e      	mov	r6, r1
 8009cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cb6:	f000 f97d 	bl	8009fb4 <_malloc_r>
 8009cba:	4604      	mov	r4, r0
 8009cbc:	b140      	cbz	r0, 8009cd0 <__sfmoreglue+0x28>
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	e9c0 1600 	strd	r1, r6, [r0]
 8009cc4:	300c      	adds	r0, #12
 8009cc6:	60a0      	str	r0, [r4, #8]
 8009cc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ccc:	f7ff fce6 	bl	800969c <memset>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}

08009cd4 <__sfp_lock_acquire>:
 8009cd4:	4801      	ldr	r0, [pc, #4]	; (8009cdc <__sfp_lock_acquire+0x8>)
 8009cd6:	f000 b8b3 	b.w	8009e40 <__retarget_lock_acquire_recursive>
 8009cda:	bf00      	nop
 8009cdc:	20003b44 	.word	0x20003b44

08009ce0 <__sfp_lock_release>:
 8009ce0:	4801      	ldr	r0, [pc, #4]	; (8009ce8 <__sfp_lock_release+0x8>)
 8009ce2:	f000 b8ae 	b.w	8009e42 <__retarget_lock_release_recursive>
 8009ce6:	bf00      	nop
 8009ce8:	20003b44 	.word	0x20003b44

08009cec <__sinit_lock_acquire>:
 8009cec:	4801      	ldr	r0, [pc, #4]	; (8009cf4 <__sinit_lock_acquire+0x8>)
 8009cee:	f000 b8a7 	b.w	8009e40 <__retarget_lock_acquire_recursive>
 8009cf2:	bf00      	nop
 8009cf4:	20003b3f 	.word	0x20003b3f

08009cf8 <__sinit_lock_release>:
 8009cf8:	4801      	ldr	r0, [pc, #4]	; (8009d00 <__sinit_lock_release+0x8>)
 8009cfa:	f000 b8a2 	b.w	8009e42 <__retarget_lock_release_recursive>
 8009cfe:	bf00      	nop
 8009d00:	20003b3f 	.word	0x20003b3f

08009d04 <__sinit>:
 8009d04:	b510      	push	{r4, lr}
 8009d06:	4604      	mov	r4, r0
 8009d08:	f7ff fff0 	bl	8009cec <__sinit_lock_acquire>
 8009d0c:	69a3      	ldr	r3, [r4, #24]
 8009d0e:	b11b      	cbz	r3, 8009d18 <__sinit+0x14>
 8009d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d14:	f7ff bff0 	b.w	8009cf8 <__sinit_lock_release>
 8009d18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d1c:	6523      	str	r3, [r4, #80]	; 0x50
 8009d1e:	4b13      	ldr	r3, [pc, #76]	; (8009d6c <__sinit+0x68>)
 8009d20:	4a13      	ldr	r2, [pc, #76]	; (8009d70 <__sinit+0x6c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d26:	42a3      	cmp	r3, r4
 8009d28:	bf08      	it	eq
 8009d2a:	2301      	moveq	r3, #1
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	bf08      	it	eq
 8009d30:	61a3      	streq	r3, [r4, #24]
 8009d32:	f000 f81f 	bl	8009d74 <__sfp>
 8009d36:	6060      	str	r0, [r4, #4]
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f000 f81b 	bl	8009d74 <__sfp>
 8009d3e:	60a0      	str	r0, [r4, #8]
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 f817 	bl	8009d74 <__sfp>
 8009d46:	2200      	movs	r2, #0
 8009d48:	2104      	movs	r1, #4
 8009d4a:	60e0      	str	r0, [r4, #12]
 8009d4c:	6860      	ldr	r0, [r4, #4]
 8009d4e:	f7ff ff81 	bl	8009c54 <std>
 8009d52:	2201      	movs	r2, #1
 8009d54:	2109      	movs	r1, #9
 8009d56:	68a0      	ldr	r0, [r4, #8]
 8009d58:	f7ff ff7c 	bl	8009c54 <std>
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	2112      	movs	r1, #18
 8009d60:	68e0      	ldr	r0, [r4, #12]
 8009d62:	f7ff ff77 	bl	8009c54 <std>
 8009d66:	2301      	movs	r3, #1
 8009d68:	61a3      	str	r3, [r4, #24]
 8009d6a:	e7d1      	b.n	8009d10 <__sinit+0xc>
 8009d6c:	0800b7a8 	.word	0x0800b7a8
 8009d70:	08009c9d 	.word	0x08009c9d

08009d74 <__sfp>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	4607      	mov	r7, r0
 8009d78:	f7ff ffac 	bl	8009cd4 <__sfp_lock_acquire>
 8009d7c:	4b1e      	ldr	r3, [pc, #120]	; (8009df8 <__sfp+0x84>)
 8009d7e:	681e      	ldr	r6, [r3, #0]
 8009d80:	69b3      	ldr	r3, [r6, #24]
 8009d82:	b913      	cbnz	r3, 8009d8a <__sfp+0x16>
 8009d84:	4630      	mov	r0, r6
 8009d86:	f7ff ffbd 	bl	8009d04 <__sinit>
 8009d8a:	3648      	adds	r6, #72	; 0x48
 8009d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	d503      	bpl.n	8009d9c <__sfp+0x28>
 8009d94:	6833      	ldr	r3, [r6, #0]
 8009d96:	b30b      	cbz	r3, 8009ddc <__sfp+0x68>
 8009d98:	6836      	ldr	r6, [r6, #0]
 8009d9a:	e7f7      	b.n	8009d8c <__sfp+0x18>
 8009d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009da0:	b9d5      	cbnz	r5, 8009dd8 <__sfp+0x64>
 8009da2:	4b16      	ldr	r3, [pc, #88]	; (8009dfc <__sfp+0x88>)
 8009da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009da8:	60e3      	str	r3, [r4, #12]
 8009daa:	6665      	str	r5, [r4, #100]	; 0x64
 8009dac:	f000 f847 	bl	8009e3e <__retarget_lock_init_recursive>
 8009db0:	f7ff ff96 	bl	8009ce0 <__sfp_lock_release>
 8009db4:	2208      	movs	r2, #8
 8009db6:	4629      	mov	r1, r5
 8009db8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009dbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009dc0:	6025      	str	r5, [r4, #0]
 8009dc2:	61a5      	str	r5, [r4, #24]
 8009dc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009dc8:	f7ff fc68 	bl	800969c <memset>
 8009dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dd8:	3468      	adds	r4, #104	; 0x68
 8009dda:	e7d9      	b.n	8009d90 <__sfp+0x1c>
 8009ddc:	2104      	movs	r1, #4
 8009dde:	4638      	mov	r0, r7
 8009de0:	f7ff ff62 	bl	8009ca8 <__sfmoreglue>
 8009de4:	4604      	mov	r4, r0
 8009de6:	6030      	str	r0, [r6, #0]
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d1d5      	bne.n	8009d98 <__sfp+0x24>
 8009dec:	f7ff ff78 	bl	8009ce0 <__sfp_lock_release>
 8009df0:	230c      	movs	r3, #12
 8009df2:	603b      	str	r3, [r7, #0]
 8009df4:	e7ee      	b.n	8009dd4 <__sfp+0x60>
 8009df6:	bf00      	nop
 8009df8:	0800b7a8 	.word	0x0800b7a8
 8009dfc:	ffff0001 	.word	0xffff0001

08009e00 <_fwalk_reent>:
 8009e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e04:	4606      	mov	r6, r0
 8009e06:	4688      	mov	r8, r1
 8009e08:	2700      	movs	r7, #0
 8009e0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e12:	f1b9 0901 	subs.w	r9, r9, #1
 8009e16:	d505      	bpl.n	8009e24 <_fwalk_reent+0x24>
 8009e18:	6824      	ldr	r4, [r4, #0]
 8009e1a:	2c00      	cmp	r4, #0
 8009e1c:	d1f7      	bne.n	8009e0e <_fwalk_reent+0xe>
 8009e1e:	4638      	mov	r0, r7
 8009e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e24:	89ab      	ldrh	r3, [r5, #12]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d907      	bls.n	8009e3a <_fwalk_reent+0x3a>
 8009e2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	d003      	beq.n	8009e3a <_fwalk_reent+0x3a>
 8009e32:	4629      	mov	r1, r5
 8009e34:	4630      	mov	r0, r6
 8009e36:	47c0      	blx	r8
 8009e38:	4307      	orrs	r7, r0
 8009e3a:	3568      	adds	r5, #104	; 0x68
 8009e3c:	e7e9      	b.n	8009e12 <_fwalk_reent+0x12>

08009e3e <__retarget_lock_init_recursive>:
 8009e3e:	4770      	bx	lr

08009e40 <__retarget_lock_acquire_recursive>:
 8009e40:	4770      	bx	lr

08009e42 <__retarget_lock_release_recursive>:
 8009e42:	4770      	bx	lr

08009e44 <__swhatbuf_r>:
 8009e44:	b570      	push	{r4, r5, r6, lr}
 8009e46:	460e      	mov	r6, r1
 8009e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4c:	4614      	mov	r4, r2
 8009e4e:	2900      	cmp	r1, #0
 8009e50:	461d      	mov	r5, r3
 8009e52:	b096      	sub	sp, #88	; 0x58
 8009e54:	da07      	bge.n	8009e66 <__swhatbuf_r+0x22>
 8009e56:	2300      	movs	r3, #0
 8009e58:	602b      	str	r3, [r5, #0]
 8009e5a:	89b3      	ldrh	r3, [r6, #12]
 8009e5c:	061a      	lsls	r2, r3, #24
 8009e5e:	d410      	bmi.n	8009e82 <__swhatbuf_r+0x3e>
 8009e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e64:	e00e      	b.n	8009e84 <__swhatbuf_r+0x40>
 8009e66:	466a      	mov	r2, sp
 8009e68:	f000 fc62 	bl	800a730 <_fstat_r>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	dbf2      	blt.n	8009e56 <__swhatbuf_r+0x12>
 8009e70:	9a01      	ldr	r2, [sp, #4]
 8009e72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e7a:	425a      	negs	r2, r3
 8009e7c:	415a      	adcs	r2, r3
 8009e7e:	602a      	str	r2, [r5, #0]
 8009e80:	e7ee      	b.n	8009e60 <__swhatbuf_r+0x1c>
 8009e82:	2340      	movs	r3, #64	; 0x40
 8009e84:	2000      	movs	r0, #0
 8009e86:	6023      	str	r3, [r4, #0]
 8009e88:	b016      	add	sp, #88	; 0x58
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}

08009e8c <__smakebuf_r>:
 8009e8c:	898b      	ldrh	r3, [r1, #12]
 8009e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e90:	079d      	lsls	r5, r3, #30
 8009e92:	4606      	mov	r6, r0
 8009e94:	460c      	mov	r4, r1
 8009e96:	d507      	bpl.n	8009ea8 <__smakebuf_r+0x1c>
 8009e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	6123      	str	r3, [r4, #16]
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	6163      	str	r3, [r4, #20]
 8009ea4:	b002      	add	sp, #8
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	466a      	mov	r2, sp
 8009eaa:	ab01      	add	r3, sp, #4
 8009eac:	f7ff ffca 	bl	8009e44 <__swhatbuf_r>
 8009eb0:	9900      	ldr	r1, [sp, #0]
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	f000 f87d 	bl	8009fb4 <_malloc_r>
 8009eba:	b948      	cbnz	r0, 8009ed0 <__smakebuf_r+0x44>
 8009ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec0:	059a      	lsls	r2, r3, #22
 8009ec2:	d4ef      	bmi.n	8009ea4 <__smakebuf_r+0x18>
 8009ec4:	f023 0303 	bic.w	r3, r3, #3
 8009ec8:	f043 0302 	orr.w	r3, r3, #2
 8009ecc:	81a3      	strh	r3, [r4, #12]
 8009ece:	e7e3      	b.n	8009e98 <__smakebuf_r+0xc>
 8009ed0:	4b0d      	ldr	r3, [pc, #52]	; (8009f08 <__smakebuf_r+0x7c>)
 8009ed2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	6020      	str	r0, [r4, #0]
 8009ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009edc:	81a3      	strh	r3, [r4, #12]
 8009ede:	9b00      	ldr	r3, [sp, #0]
 8009ee0:	6120      	str	r0, [r4, #16]
 8009ee2:	6163      	str	r3, [r4, #20]
 8009ee4:	9b01      	ldr	r3, [sp, #4]
 8009ee6:	b15b      	cbz	r3, 8009f00 <__smakebuf_r+0x74>
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eee:	f000 fc31 	bl	800a754 <_isatty_r>
 8009ef2:	b128      	cbz	r0, 8009f00 <__smakebuf_r+0x74>
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	f023 0303 	bic.w	r3, r3, #3
 8009efa:	f043 0301 	orr.w	r3, r3, #1
 8009efe:	81a3      	strh	r3, [r4, #12]
 8009f00:	89a0      	ldrh	r0, [r4, #12]
 8009f02:	4305      	orrs	r5, r0
 8009f04:	81a5      	strh	r5, [r4, #12]
 8009f06:	e7cd      	b.n	8009ea4 <__smakebuf_r+0x18>
 8009f08:	08009c9d 	.word	0x08009c9d

08009f0c <malloc>:
 8009f0c:	4b02      	ldr	r3, [pc, #8]	; (8009f18 <malloc+0xc>)
 8009f0e:	4601      	mov	r1, r0
 8009f10:	6818      	ldr	r0, [r3, #0]
 8009f12:	f000 b84f 	b.w	8009fb4 <_malloc_r>
 8009f16:	bf00      	nop
 8009f18:	20000018 	.word	0x20000018

08009f1c <_free_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4605      	mov	r5, r0
 8009f20:	2900      	cmp	r1, #0
 8009f22:	d043      	beq.n	8009fac <_free_r+0x90>
 8009f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f28:	1f0c      	subs	r4, r1, #4
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	bfb8      	it	lt
 8009f2e:	18e4      	addlt	r4, r4, r3
 8009f30:	f000 fc40 	bl	800a7b4 <__malloc_lock>
 8009f34:	4a1e      	ldr	r2, [pc, #120]	; (8009fb0 <_free_r+0x94>)
 8009f36:	6813      	ldr	r3, [r2, #0]
 8009f38:	4610      	mov	r0, r2
 8009f3a:	b933      	cbnz	r3, 8009f4a <_free_r+0x2e>
 8009f3c:	6063      	str	r3, [r4, #4]
 8009f3e:	6014      	str	r4, [r2, #0]
 8009f40:	4628      	mov	r0, r5
 8009f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f46:	f000 bc3b 	b.w	800a7c0 <__malloc_unlock>
 8009f4a:	42a3      	cmp	r3, r4
 8009f4c:	d90a      	bls.n	8009f64 <_free_r+0x48>
 8009f4e:	6821      	ldr	r1, [r4, #0]
 8009f50:	1862      	adds	r2, r4, r1
 8009f52:	4293      	cmp	r3, r2
 8009f54:	bf01      	itttt	eq
 8009f56:	681a      	ldreq	r2, [r3, #0]
 8009f58:	685b      	ldreq	r3, [r3, #4]
 8009f5a:	1852      	addeq	r2, r2, r1
 8009f5c:	6022      	streq	r2, [r4, #0]
 8009f5e:	6063      	str	r3, [r4, #4]
 8009f60:	6004      	str	r4, [r0, #0]
 8009f62:	e7ed      	b.n	8009f40 <_free_r+0x24>
 8009f64:	461a      	mov	r2, r3
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	b10b      	cbz	r3, 8009f6e <_free_r+0x52>
 8009f6a:	42a3      	cmp	r3, r4
 8009f6c:	d9fa      	bls.n	8009f64 <_free_r+0x48>
 8009f6e:	6811      	ldr	r1, [r2, #0]
 8009f70:	1850      	adds	r0, r2, r1
 8009f72:	42a0      	cmp	r0, r4
 8009f74:	d10b      	bne.n	8009f8e <_free_r+0x72>
 8009f76:	6820      	ldr	r0, [r4, #0]
 8009f78:	4401      	add	r1, r0
 8009f7a:	1850      	adds	r0, r2, r1
 8009f7c:	4283      	cmp	r3, r0
 8009f7e:	6011      	str	r1, [r2, #0]
 8009f80:	d1de      	bne.n	8009f40 <_free_r+0x24>
 8009f82:	6818      	ldr	r0, [r3, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	4401      	add	r1, r0
 8009f88:	6011      	str	r1, [r2, #0]
 8009f8a:	6053      	str	r3, [r2, #4]
 8009f8c:	e7d8      	b.n	8009f40 <_free_r+0x24>
 8009f8e:	d902      	bls.n	8009f96 <_free_r+0x7a>
 8009f90:	230c      	movs	r3, #12
 8009f92:	602b      	str	r3, [r5, #0]
 8009f94:	e7d4      	b.n	8009f40 <_free_r+0x24>
 8009f96:	6820      	ldr	r0, [r4, #0]
 8009f98:	1821      	adds	r1, r4, r0
 8009f9a:	428b      	cmp	r3, r1
 8009f9c:	bf01      	itttt	eq
 8009f9e:	6819      	ldreq	r1, [r3, #0]
 8009fa0:	685b      	ldreq	r3, [r3, #4]
 8009fa2:	1809      	addeq	r1, r1, r0
 8009fa4:	6021      	streq	r1, [r4, #0]
 8009fa6:	6063      	str	r3, [r4, #4]
 8009fa8:	6054      	str	r4, [r2, #4]
 8009faa:	e7c9      	b.n	8009f40 <_free_r+0x24>
 8009fac:	bd38      	pop	{r3, r4, r5, pc}
 8009fae:	bf00      	nop
 8009fb0:	200039c0 	.word	0x200039c0

08009fb4 <_malloc_r>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	1ccd      	adds	r5, r1, #3
 8009fb8:	f025 0503 	bic.w	r5, r5, #3
 8009fbc:	3508      	adds	r5, #8
 8009fbe:	2d0c      	cmp	r5, #12
 8009fc0:	bf38      	it	cc
 8009fc2:	250c      	movcc	r5, #12
 8009fc4:	2d00      	cmp	r5, #0
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	db01      	blt.n	8009fce <_malloc_r+0x1a>
 8009fca:	42a9      	cmp	r1, r5
 8009fcc:	d903      	bls.n	8009fd6 <_malloc_r+0x22>
 8009fce:	230c      	movs	r3, #12
 8009fd0:	6033      	str	r3, [r6, #0]
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd6:	f000 fbed 	bl	800a7b4 <__malloc_lock>
 8009fda:	4921      	ldr	r1, [pc, #132]	; (800a060 <_malloc_r+0xac>)
 8009fdc:	680a      	ldr	r2, [r1, #0]
 8009fde:	4614      	mov	r4, r2
 8009fe0:	b99c      	cbnz	r4, 800a00a <_malloc_r+0x56>
 8009fe2:	4f20      	ldr	r7, [pc, #128]	; (800a064 <_malloc_r+0xb0>)
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	b923      	cbnz	r3, 8009ff2 <_malloc_r+0x3e>
 8009fe8:	4621      	mov	r1, r4
 8009fea:	4630      	mov	r0, r6
 8009fec:	f000 fb2a 	bl	800a644 <_sbrk_r>
 8009ff0:	6038      	str	r0, [r7, #0]
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f000 fb25 	bl	800a644 <_sbrk_r>
 8009ffa:	1c43      	adds	r3, r0, #1
 8009ffc:	d123      	bne.n	800a046 <_malloc_r+0x92>
 8009ffe:	230c      	movs	r3, #12
 800a000:	4630      	mov	r0, r6
 800a002:	6033      	str	r3, [r6, #0]
 800a004:	f000 fbdc 	bl	800a7c0 <__malloc_unlock>
 800a008:	e7e3      	b.n	8009fd2 <_malloc_r+0x1e>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	1b5b      	subs	r3, r3, r5
 800a00e:	d417      	bmi.n	800a040 <_malloc_r+0x8c>
 800a010:	2b0b      	cmp	r3, #11
 800a012:	d903      	bls.n	800a01c <_malloc_r+0x68>
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	441c      	add	r4, r3
 800a018:	6025      	str	r5, [r4, #0]
 800a01a:	e004      	b.n	800a026 <_malloc_r+0x72>
 800a01c:	6863      	ldr	r3, [r4, #4]
 800a01e:	42a2      	cmp	r2, r4
 800a020:	bf0c      	ite	eq
 800a022:	600b      	streq	r3, [r1, #0]
 800a024:	6053      	strne	r3, [r2, #4]
 800a026:	4630      	mov	r0, r6
 800a028:	f000 fbca 	bl	800a7c0 <__malloc_unlock>
 800a02c:	f104 000b 	add.w	r0, r4, #11
 800a030:	1d23      	adds	r3, r4, #4
 800a032:	f020 0007 	bic.w	r0, r0, #7
 800a036:	1ac2      	subs	r2, r0, r3
 800a038:	d0cc      	beq.n	8009fd4 <_malloc_r+0x20>
 800a03a:	1a1b      	subs	r3, r3, r0
 800a03c:	50a3      	str	r3, [r4, r2]
 800a03e:	e7c9      	b.n	8009fd4 <_malloc_r+0x20>
 800a040:	4622      	mov	r2, r4
 800a042:	6864      	ldr	r4, [r4, #4]
 800a044:	e7cc      	b.n	8009fe0 <_malloc_r+0x2c>
 800a046:	1cc4      	adds	r4, r0, #3
 800a048:	f024 0403 	bic.w	r4, r4, #3
 800a04c:	42a0      	cmp	r0, r4
 800a04e:	d0e3      	beq.n	800a018 <_malloc_r+0x64>
 800a050:	1a21      	subs	r1, r4, r0
 800a052:	4630      	mov	r0, r6
 800a054:	f000 faf6 	bl	800a644 <_sbrk_r>
 800a058:	3001      	adds	r0, #1
 800a05a:	d1dd      	bne.n	800a018 <_malloc_r+0x64>
 800a05c:	e7cf      	b.n	8009ffe <_malloc_r+0x4a>
 800a05e:	bf00      	nop
 800a060:	200039c0 	.word	0x200039c0
 800a064:	200039c4 	.word	0x200039c4

0800a068 <__sfputc_r>:
 800a068:	6893      	ldr	r3, [r2, #8]
 800a06a:	b410      	push	{r4}
 800a06c:	3b01      	subs	r3, #1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	6093      	str	r3, [r2, #8]
 800a072:	da07      	bge.n	800a084 <__sfputc_r+0x1c>
 800a074:	6994      	ldr	r4, [r2, #24]
 800a076:	42a3      	cmp	r3, r4
 800a078:	db01      	blt.n	800a07e <__sfputc_r+0x16>
 800a07a:	290a      	cmp	r1, #10
 800a07c:	d102      	bne.n	800a084 <__sfputc_r+0x1c>
 800a07e:	bc10      	pop	{r4}
 800a080:	f7ff bc66 	b.w	8009950 <__swbuf_r>
 800a084:	6813      	ldr	r3, [r2, #0]
 800a086:	1c58      	adds	r0, r3, #1
 800a088:	6010      	str	r0, [r2, #0]
 800a08a:	7019      	strb	r1, [r3, #0]
 800a08c:	4608      	mov	r0, r1
 800a08e:	bc10      	pop	{r4}
 800a090:	4770      	bx	lr

0800a092 <__sfputs_r>:
 800a092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a094:	4606      	mov	r6, r0
 800a096:	460f      	mov	r7, r1
 800a098:	4614      	mov	r4, r2
 800a09a:	18d5      	adds	r5, r2, r3
 800a09c:	42ac      	cmp	r4, r5
 800a09e:	d101      	bne.n	800a0a4 <__sfputs_r+0x12>
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	e007      	b.n	800a0b4 <__sfputs_r+0x22>
 800a0a4:	463a      	mov	r2, r7
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ac:	f7ff ffdc 	bl	800a068 <__sfputc_r>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d1f3      	bne.n	800a09c <__sfputs_r+0xa>
 800a0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0b8 <_vfiprintf_r>:
 800a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	460d      	mov	r5, r1
 800a0be:	4614      	mov	r4, r2
 800a0c0:	4698      	mov	r8, r3
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	b09d      	sub	sp, #116	; 0x74
 800a0c6:	b118      	cbz	r0, 800a0d0 <_vfiprintf_r+0x18>
 800a0c8:	6983      	ldr	r3, [r0, #24]
 800a0ca:	b90b      	cbnz	r3, 800a0d0 <_vfiprintf_r+0x18>
 800a0cc:	f7ff fe1a 	bl	8009d04 <__sinit>
 800a0d0:	4b89      	ldr	r3, [pc, #548]	; (800a2f8 <_vfiprintf_r+0x240>)
 800a0d2:	429d      	cmp	r5, r3
 800a0d4:	d11b      	bne.n	800a10e <_vfiprintf_r+0x56>
 800a0d6:	6875      	ldr	r5, [r6, #4]
 800a0d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0da:	07d9      	lsls	r1, r3, #31
 800a0dc:	d405      	bmi.n	800a0ea <_vfiprintf_r+0x32>
 800a0de:	89ab      	ldrh	r3, [r5, #12]
 800a0e0:	059a      	lsls	r2, r3, #22
 800a0e2:	d402      	bmi.n	800a0ea <_vfiprintf_r+0x32>
 800a0e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0e6:	f7ff feab 	bl	8009e40 <__retarget_lock_acquire_recursive>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	071b      	lsls	r3, r3, #28
 800a0ee:	d501      	bpl.n	800a0f4 <_vfiprintf_r+0x3c>
 800a0f0:	692b      	ldr	r3, [r5, #16]
 800a0f2:	b9eb      	cbnz	r3, 800a130 <_vfiprintf_r+0x78>
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	f7ff fc7c 	bl	80099f4 <__swsetup_r>
 800a0fc:	b1c0      	cbz	r0, 800a130 <_vfiprintf_r+0x78>
 800a0fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a100:	07dc      	lsls	r4, r3, #31
 800a102:	d50e      	bpl.n	800a122 <_vfiprintf_r+0x6a>
 800a104:	f04f 30ff 	mov.w	r0, #4294967295
 800a108:	b01d      	add	sp, #116	; 0x74
 800a10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10e:	4b7b      	ldr	r3, [pc, #492]	; (800a2fc <_vfiprintf_r+0x244>)
 800a110:	429d      	cmp	r5, r3
 800a112:	d101      	bne.n	800a118 <_vfiprintf_r+0x60>
 800a114:	68b5      	ldr	r5, [r6, #8]
 800a116:	e7df      	b.n	800a0d8 <_vfiprintf_r+0x20>
 800a118:	4b79      	ldr	r3, [pc, #484]	; (800a300 <_vfiprintf_r+0x248>)
 800a11a:	429d      	cmp	r5, r3
 800a11c:	bf08      	it	eq
 800a11e:	68f5      	ldreq	r5, [r6, #12]
 800a120:	e7da      	b.n	800a0d8 <_vfiprintf_r+0x20>
 800a122:	89ab      	ldrh	r3, [r5, #12]
 800a124:	0598      	lsls	r0, r3, #22
 800a126:	d4ed      	bmi.n	800a104 <_vfiprintf_r+0x4c>
 800a128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a12a:	f7ff fe8a 	bl	8009e42 <__retarget_lock_release_recursive>
 800a12e:	e7e9      	b.n	800a104 <_vfiprintf_r+0x4c>
 800a130:	2300      	movs	r3, #0
 800a132:	9309      	str	r3, [sp, #36]	; 0x24
 800a134:	2320      	movs	r3, #32
 800a136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a13a:	2330      	movs	r3, #48	; 0x30
 800a13c:	f04f 0901 	mov.w	r9, #1
 800a140:	f8cd 800c 	str.w	r8, [sp, #12]
 800a144:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a304 <_vfiprintf_r+0x24c>
 800a148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a14c:	4623      	mov	r3, r4
 800a14e:	469a      	mov	sl, r3
 800a150:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a154:	b10a      	cbz	r2, 800a15a <_vfiprintf_r+0xa2>
 800a156:	2a25      	cmp	r2, #37	; 0x25
 800a158:	d1f9      	bne.n	800a14e <_vfiprintf_r+0x96>
 800a15a:	ebba 0b04 	subs.w	fp, sl, r4
 800a15e:	d00b      	beq.n	800a178 <_vfiprintf_r+0xc0>
 800a160:	465b      	mov	r3, fp
 800a162:	4622      	mov	r2, r4
 800a164:	4629      	mov	r1, r5
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff ff93 	bl	800a092 <__sfputs_r>
 800a16c:	3001      	adds	r0, #1
 800a16e:	f000 80aa 	beq.w	800a2c6 <_vfiprintf_r+0x20e>
 800a172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a174:	445a      	add	r2, fp
 800a176:	9209      	str	r2, [sp, #36]	; 0x24
 800a178:	f89a 3000 	ldrb.w	r3, [sl]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 80a2 	beq.w	800a2c6 <_vfiprintf_r+0x20e>
 800a182:	2300      	movs	r3, #0
 800a184:	f04f 32ff 	mov.w	r2, #4294967295
 800a188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a18c:	f10a 0a01 	add.w	sl, sl, #1
 800a190:	9304      	str	r3, [sp, #16]
 800a192:	9307      	str	r3, [sp, #28]
 800a194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a198:	931a      	str	r3, [sp, #104]	; 0x68
 800a19a:	4654      	mov	r4, sl
 800a19c:	2205      	movs	r2, #5
 800a19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a2:	4858      	ldr	r0, [pc, #352]	; (800a304 <_vfiprintf_r+0x24c>)
 800a1a4:	f000 faf8 	bl	800a798 <memchr>
 800a1a8:	9a04      	ldr	r2, [sp, #16]
 800a1aa:	b9d8      	cbnz	r0, 800a1e4 <_vfiprintf_r+0x12c>
 800a1ac:	06d1      	lsls	r1, r2, #27
 800a1ae:	bf44      	itt	mi
 800a1b0:	2320      	movmi	r3, #32
 800a1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1b6:	0713      	lsls	r3, r2, #28
 800a1b8:	bf44      	itt	mi
 800a1ba:	232b      	movmi	r3, #43	; 0x2b
 800a1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a1c6:	d015      	beq.n	800a1f4 <_vfiprintf_r+0x13c>
 800a1c8:	4654      	mov	r4, sl
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	f04f 0c0a 	mov.w	ip, #10
 800a1d0:	9a07      	ldr	r2, [sp, #28]
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1d8:	3b30      	subs	r3, #48	; 0x30
 800a1da:	2b09      	cmp	r3, #9
 800a1dc:	d94e      	bls.n	800a27c <_vfiprintf_r+0x1c4>
 800a1de:	b1b0      	cbz	r0, 800a20e <_vfiprintf_r+0x156>
 800a1e0:	9207      	str	r2, [sp, #28]
 800a1e2:	e014      	b.n	800a20e <_vfiprintf_r+0x156>
 800a1e4:	eba0 0308 	sub.w	r3, r0, r8
 800a1e8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	46a2      	mov	sl, r4
 800a1f0:	9304      	str	r3, [sp, #16]
 800a1f2:	e7d2      	b.n	800a19a <_vfiprintf_r+0xe2>
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	1d19      	adds	r1, r3, #4
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	9103      	str	r1, [sp, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	bfbb      	ittet	lt
 800a200:	425b      	neglt	r3, r3
 800a202:	f042 0202 	orrlt.w	r2, r2, #2
 800a206:	9307      	strge	r3, [sp, #28]
 800a208:	9307      	strlt	r3, [sp, #28]
 800a20a:	bfb8      	it	lt
 800a20c:	9204      	strlt	r2, [sp, #16]
 800a20e:	7823      	ldrb	r3, [r4, #0]
 800a210:	2b2e      	cmp	r3, #46	; 0x2e
 800a212:	d10c      	bne.n	800a22e <_vfiprintf_r+0x176>
 800a214:	7863      	ldrb	r3, [r4, #1]
 800a216:	2b2a      	cmp	r3, #42	; 0x2a
 800a218:	d135      	bne.n	800a286 <_vfiprintf_r+0x1ce>
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	3402      	adds	r4, #2
 800a21e:	1d1a      	adds	r2, r3, #4
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	9203      	str	r2, [sp, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	bfb8      	it	lt
 800a228:	f04f 33ff 	movlt.w	r3, #4294967295
 800a22c:	9305      	str	r3, [sp, #20]
 800a22e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a314 <_vfiprintf_r+0x25c>
 800a232:	2203      	movs	r2, #3
 800a234:	4650      	mov	r0, sl
 800a236:	7821      	ldrb	r1, [r4, #0]
 800a238:	f000 faae 	bl	800a798 <memchr>
 800a23c:	b140      	cbz	r0, 800a250 <_vfiprintf_r+0x198>
 800a23e:	2340      	movs	r3, #64	; 0x40
 800a240:	eba0 000a 	sub.w	r0, r0, sl
 800a244:	fa03 f000 	lsl.w	r0, r3, r0
 800a248:	9b04      	ldr	r3, [sp, #16]
 800a24a:	3401      	adds	r4, #1
 800a24c:	4303      	orrs	r3, r0
 800a24e:	9304      	str	r3, [sp, #16]
 800a250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a254:	2206      	movs	r2, #6
 800a256:	482c      	ldr	r0, [pc, #176]	; (800a308 <_vfiprintf_r+0x250>)
 800a258:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a25c:	f000 fa9c 	bl	800a798 <memchr>
 800a260:	2800      	cmp	r0, #0
 800a262:	d03f      	beq.n	800a2e4 <_vfiprintf_r+0x22c>
 800a264:	4b29      	ldr	r3, [pc, #164]	; (800a30c <_vfiprintf_r+0x254>)
 800a266:	bb1b      	cbnz	r3, 800a2b0 <_vfiprintf_r+0x1f8>
 800a268:	9b03      	ldr	r3, [sp, #12]
 800a26a:	3307      	adds	r3, #7
 800a26c:	f023 0307 	bic.w	r3, r3, #7
 800a270:	3308      	adds	r3, #8
 800a272:	9303      	str	r3, [sp, #12]
 800a274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a276:	443b      	add	r3, r7
 800a278:	9309      	str	r3, [sp, #36]	; 0x24
 800a27a:	e767      	b.n	800a14c <_vfiprintf_r+0x94>
 800a27c:	460c      	mov	r4, r1
 800a27e:	2001      	movs	r0, #1
 800a280:	fb0c 3202 	mla	r2, ip, r2, r3
 800a284:	e7a5      	b.n	800a1d2 <_vfiprintf_r+0x11a>
 800a286:	2300      	movs	r3, #0
 800a288:	f04f 0c0a 	mov.w	ip, #10
 800a28c:	4619      	mov	r1, r3
 800a28e:	3401      	adds	r4, #1
 800a290:	9305      	str	r3, [sp, #20]
 800a292:	4620      	mov	r0, r4
 800a294:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a298:	3a30      	subs	r2, #48	; 0x30
 800a29a:	2a09      	cmp	r2, #9
 800a29c:	d903      	bls.n	800a2a6 <_vfiprintf_r+0x1ee>
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0c5      	beq.n	800a22e <_vfiprintf_r+0x176>
 800a2a2:	9105      	str	r1, [sp, #20]
 800a2a4:	e7c3      	b.n	800a22e <_vfiprintf_r+0x176>
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ae:	e7f0      	b.n	800a292 <_vfiprintf_r+0x1da>
 800a2b0:	ab03      	add	r3, sp, #12
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	462a      	mov	r2, r5
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	4b15      	ldr	r3, [pc, #84]	; (800a310 <_vfiprintf_r+0x258>)
 800a2ba:	a904      	add	r1, sp, #16
 800a2bc:	f3af 8000 	nop.w
 800a2c0:	4607      	mov	r7, r0
 800a2c2:	1c78      	adds	r0, r7, #1
 800a2c4:	d1d6      	bne.n	800a274 <_vfiprintf_r+0x1bc>
 800a2c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2c8:	07d9      	lsls	r1, r3, #31
 800a2ca:	d405      	bmi.n	800a2d8 <_vfiprintf_r+0x220>
 800a2cc:	89ab      	ldrh	r3, [r5, #12]
 800a2ce:	059a      	lsls	r2, r3, #22
 800a2d0:	d402      	bmi.n	800a2d8 <_vfiprintf_r+0x220>
 800a2d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2d4:	f7ff fdb5 	bl	8009e42 <__retarget_lock_release_recursive>
 800a2d8:	89ab      	ldrh	r3, [r5, #12]
 800a2da:	065b      	lsls	r3, r3, #25
 800a2dc:	f53f af12 	bmi.w	800a104 <_vfiprintf_r+0x4c>
 800a2e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2e2:	e711      	b.n	800a108 <_vfiprintf_r+0x50>
 800a2e4:	ab03      	add	r3, sp, #12
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	462a      	mov	r2, r5
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	4b08      	ldr	r3, [pc, #32]	; (800a310 <_vfiprintf_r+0x258>)
 800a2ee:	a904      	add	r1, sp, #16
 800a2f0:	f000 f882 	bl	800a3f8 <_printf_i>
 800a2f4:	e7e4      	b.n	800a2c0 <_vfiprintf_r+0x208>
 800a2f6:	bf00      	nop
 800a2f8:	0800b7cc 	.word	0x0800b7cc
 800a2fc:	0800b7ec 	.word	0x0800b7ec
 800a300:	0800b7ac 	.word	0x0800b7ac
 800a304:	0800b80c 	.word	0x0800b80c
 800a308:	0800b816 	.word	0x0800b816
 800a30c:	00000000 	.word	0x00000000
 800a310:	0800a093 	.word	0x0800a093
 800a314:	0800b812 	.word	0x0800b812

0800a318 <_printf_common>:
 800a318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a31c:	4616      	mov	r6, r2
 800a31e:	4699      	mov	r9, r3
 800a320:	688a      	ldr	r2, [r1, #8]
 800a322:	690b      	ldr	r3, [r1, #16]
 800a324:	4607      	mov	r7, r0
 800a326:	4293      	cmp	r3, r2
 800a328:	bfb8      	it	lt
 800a32a:	4613      	movlt	r3, r2
 800a32c:	6033      	str	r3, [r6, #0]
 800a32e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a332:	460c      	mov	r4, r1
 800a334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a338:	b10a      	cbz	r2, 800a33e <_printf_common+0x26>
 800a33a:	3301      	adds	r3, #1
 800a33c:	6033      	str	r3, [r6, #0]
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	0699      	lsls	r1, r3, #26
 800a342:	bf42      	ittt	mi
 800a344:	6833      	ldrmi	r3, [r6, #0]
 800a346:	3302      	addmi	r3, #2
 800a348:	6033      	strmi	r3, [r6, #0]
 800a34a:	6825      	ldr	r5, [r4, #0]
 800a34c:	f015 0506 	ands.w	r5, r5, #6
 800a350:	d106      	bne.n	800a360 <_printf_common+0x48>
 800a352:	f104 0a19 	add.w	sl, r4, #25
 800a356:	68e3      	ldr	r3, [r4, #12]
 800a358:	6832      	ldr	r2, [r6, #0]
 800a35a:	1a9b      	subs	r3, r3, r2
 800a35c:	42ab      	cmp	r3, r5
 800a35e:	dc28      	bgt.n	800a3b2 <_printf_common+0x9a>
 800a360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a364:	1e13      	subs	r3, r2, #0
 800a366:	6822      	ldr	r2, [r4, #0]
 800a368:	bf18      	it	ne
 800a36a:	2301      	movne	r3, #1
 800a36c:	0692      	lsls	r2, r2, #26
 800a36e:	d42d      	bmi.n	800a3cc <_printf_common+0xb4>
 800a370:	4649      	mov	r1, r9
 800a372:	4638      	mov	r0, r7
 800a374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a378:	47c0      	blx	r8
 800a37a:	3001      	adds	r0, #1
 800a37c:	d020      	beq.n	800a3c0 <_printf_common+0xa8>
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	68e5      	ldr	r5, [r4, #12]
 800a382:	f003 0306 	and.w	r3, r3, #6
 800a386:	2b04      	cmp	r3, #4
 800a388:	bf18      	it	ne
 800a38a:	2500      	movne	r5, #0
 800a38c:	6832      	ldr	r2, [r6, #0]
 800a38e:	f04f 0600 	mov.w	r6, #0
 800a392:	68a3      	ldr	r3, [r4, #8]
 800a394:	bf08      	it	eq
 800a396:	1aad      	subeq	r5, r5, r2
 800a398:	6922      	ldr	r2, [r4, #16]
 800a39a:	bf08      	it	eq
 800a39c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	bfc4      	itt	gt
 800a3a4:	1a9b      	subgt	r3, r3, r2
 800a3a6:	18ed      	addgt	r5, r5, r3
 800a3a8:	341a      	adds	r4, #26
 800a3aa:	42b5      	cmp	r5, r6
 800a3ac:	d11a      	bne.n	800a3e4 <_printf_common+0xcc>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	e008      	b.n	800a3c4 <_printf_common+0xac>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	4652      	mov	r2, sl
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	47c0      	blx	r8
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d103      	bne.n	800a3c8 <_printf_common+0xb0>
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c8:	3501      	adds	r5, #1
 800a3ca:	e7c4      	b.n	800a356 <_printf_common+0x3e>
 800a3cc:	2030      	movs	r0, #48	; 0x30
 800a3ce:	18e1      	adds	r1, r4, r3
 800a3d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3da:	4422      	add	r2, r4
 800a3dc:	3302      	adds	r3, #2
 800a3de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3e2:	e7c5      	b.n	800a370 <_printf_common+0x58>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	47c0      	blx	r8
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d0e6      	beq.n	800a3c0 <_printf_common+0xa8>
 800a3f2:	3601      	adds	r6, #1
 800a3f4:	e7d9      	b.n	800a3aa <_printf_common+0x92>
	...

0800a3f8 <_printf_i>:
 800a3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	7e27      	ldrb	r7, [r4, #24]
 800a400:	4691      	mov	r9, r2
 800a402:	2f78      	cmp	r7, #120	; 0x78
 800a404:	4680      	mov	r8, r0
 800a406:	469a      	mov	sl, r3
 800a408:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a40a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a40e:	d807      	bhi.n	800a420 <_printf_i+0x28>
 800a410:	2f62      	cmp	r7, #98	; 0x62
 800a412:	d80a      	bhi.n	800a42a <_printf_i+0x32>
 800a414:	2f00      	cmp	r7, #0
 800a416:	f000 80d9 	beq.w	800a5cc <_printf_i+0x1d4>
 800a41a:	2f58      	cmp	r7, #88	; 0x58
 800a41c:	f000 80a4 	beq.w	800a568 <_printf_i+0x170>
 800a420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a428:	e03a      	b.n	800a4a0 <_printf_i+0xa8>
 800a42a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a42e:	2b15      	cmp	r3, #21
 800a430:	d8f6      	bhi.n	800a420 <_printf_i+0x28>
 800a432:	a001      	add	r0, pc, #4	; (adr r0, 800a438 <_printf_i+0x40>)
 800a434:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a438:	0800a491 	.word	0x0800a491
 800a43c:	0800a4a5 	.word	0x0800a4a5
 800a440:	0800a421 	.word	0x0800a421
 800a444:	0800a421 	.word	0x0800a421
 800a448:	0800a421 	.word	0x0800a421
 800a44c:	0800a421 	.word	0x0800a421
 800a450:	0800a4a5 	.word	0x0800a4a5
 800a454:	0800a421 	.word	0x0800a421
 800a458:	0800a421 	.word	0x0800a421
 800a45c:	0800a421 	.word	0x0800a421
 800a460:	0800a421 	.word	0x0800a421
 800a464:	0800a5b3 	.word	0x0800a5b3
 800a468:	0800a4d5 	.word	0x0800a4d5
 800a46c:	0800a595 	.word	0x0800a595
 800a470:	0800a421 	.word	0x0800a421
 800a474:	0800a421 	.word	0x0800a421
 800a478:	0800a5d5 	.word	0x0800a5d5
 800a47c:	0800a421 	.word	0x0800a421
 800a480:	0800a4d5 	.word	0x0800a4d5
 800a484:	0800a421 	.word	0x0800a421
 800a488:	0800a421 	.word	0x0800a421
 800a48c:	0800a59d 	.word	0x0800a59d
 800a490:	680b      	ldr	r3, [r1, #0]
 800a492:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a496:	1d1a      	adds	r2, r3, #4
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	600a      	str	r2, [r1, #0]
 800a49c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e0a4      	b.n	800a5ee <_printf_i+0x1f6>
 800a4a4:	6825      	ldr	r5, [r4, #0]
 800a4a6:	6808      	ldr	r0, [r1, #0]
 800a4a8:	062e      	lsls	r6, r5, #24
 800a4aa:	f100 0304 	add.w	r3, r0, #4
 800a4ae:	d50a      	bpl.n	800a4c6 <_printf_i+0xce>
 800a4b0:	6805      	ldr	r5, [r0, #0]
 800a4b2:	600b      	str	r3, [r1, #0]
 800a4b4:	2d00      	cmp	r5, #0
 800a4b6:	da03      	bge.n	800a4c0 <_printf_i+0xc8>
 800a4b8:	232d      	movs	r3, #45	; 0x2d
 800a4ba:	426d      	negs	r5, r5
 800a4bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4c0:	230a      	movs	r3, #10
 800a4c2:	485e      	ldr	r0, [pc, #376]	; (800a63c <_printf_i+0x244>)
 800a4c4:	e019      	b.n	800a4fa <_printf_i+0x102>
 800a4c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a4ca:	6805      	ldr	r5, [r0, #0]
 800a4cc:	600b      	str	r3, [r1, #0]
 800a4ce:	bf18      	it	ne
 800a4d0:	b22d      	sxthne	r5, r5
 800a4d2:	e7ef      	b.n	800a4b4 <_printf_i+0xbc>
 800a4d4:	680b      	ldr	r3, [r1, #0]
 800a4d6:	6825      	ldr	r5, [r4, #0]
 800a4d8:	1d18      	adds	r0, r3, #4
 800a4da:	6008      	str	r0, [r1, #0]
 800a4dc:	0628      	lsls	r0, r5, #24
 800a4de:	d501      	bpl.n	800a4e4 <_printf_i+0xec>
 800a4e0:	681d      	ldr	r5, [r3, #0]
 800a4e2:	e002      	b.n	800a4ea <_printf_i+0xf2>
 800a4e4:	0669      	lsls	r1, r5, #25
 800a4e6:	d5fb      	bpl.n	800a4e0 <_printf_i+0xe8>
 800a4e8:	881d      	ldrh	r5, [r3, #0]
 800a4ea:	2f6f      	cmp	r7, #111	; 0x6f
 800a4ec:	bf0c      	ite	eq
 800a4ee:	2308      	moveq	r3, #8
 800a4f0:	230a      	movne	r3, #10
 800a4f2:	4852      	ldr	r0, [pc, #328]	; (800a63c <_printf_i+0x244>)
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4fa:	6866      	ldr	r6, [r4, #4]
 800a4fc:	2e00      	cmp	r6, #0
 800a4fe:	bfa8      	it	ge
 800a500:	6821      	ldrge	r1, [r4, #0]
 800a502:	60a6      	str	r6, [r4, #8]
 800a504:	bfa4      	itt	ge
 800a506:	f021 0104 	bicge.w	r1, r1, #4
 800a50a:	6021      	strge	r1, [r4, #0]
 800a50c:	b90d      	cbnz	r5, 800a512 <_printf_i+0x11a>
 800a50e:	2e00      	cmp	r6, #0
 800a510:	d04d      	beq.n	800a5ae <_printf_i+0x1b6>
 800a512:	4616      	mov	r6, r2
 800a514:	fbb5 f1f3 	udiv	r1, r5, r3
 800a518:	fb03 5711 	mls	r7, r3, r1, r5
 800a51c:	5dc7      	ldrb	r7, [r0, r7]
 800a51e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a522:	462f      	mov	r7, r5
 800a524:	42bb      	cmp	r3, r7
 800a526:	460d      	mov	r5, r1
 800a528:	d9f4      	bls.n	800a514 <_printf_i+0x11c>
 800a52a:	2b08      	cmp	r3, #8
 800a52c:	d10b      	bne.n	800a546 <_printf_i+0x14e>
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	07df      	lsls	r7, r3, #31
 800a532:	d508      	bpl.n	800a546 <_printf_i+0x14e>
 800a534:	6923      	ldr	r3, [r4, #16]
 800a536:	6861      	ldr	r1, [r4, #4]
 800a538:	4299      	cmp	r1, r3
 800a53a:	bfde      	ittt	le
 800a53c:	2330      	movle	r3, #48	; 0x30
 800a53e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a542:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a546:	1b92      	subs	r2, r2, r6
 800a548:	6122      	str	r2, [r4, #16]
 800a54a:	464b      	mov	r3, r9
 800a54c:	4621      	mov	r1, r4
 800a54e:	4640      	mov	r0, r8
 800a550:	f8cd a000 	str.w	sl, [sp]
 800a554:	aa03      	add	r2, sp, #12
 800a556:	f7ff fedf 	bl	800a318 <_printf_common>
 800a55a:	3001      	adds	r0, #1
 800a55c:	d14c      	bne.n	800a5f8 <_printf_i+0x200>
 800a55e:	f04f 30ff 	mov.w	r0, #4294967295
 800a562:	b004      	add	sp, #16
 800a564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a568:	4834      	ldr	r0, [pc, #208]	; (800a63c <_printf_i+0x244>)
 800a56a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a56e:	680e      	ldr	r6, [r1, #0]
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	f856 5b04 	ldr.w	r5, [r6], #4
 800a576:	061f      	lsls	r7, r3, #24
 800a578:	600e      	str	r6, [r1, #0]
 800a57a:	d514      	bpl.n	800a5a6 <_printf_i+0x1ae>
 800a57c:	07d9      	lsls	r1, r3, #31
 800a57e:	bf44      	itt	mi
 800a580:	f043 0320 	orrmi.w	r3, r3, #32
 800a584:	6023      	strmi	r3, [r4, #0]
 800a586:	b91d      	cbnz	r5, 800a590 <_printf_i+0x198>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	f023 0320 	bic.w	r3, r3, #32
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	2310      	movs	r3, #16
 800a592:	e7af      	b.n	800a4f4 <_printf_i+0xfc>
 800a594:	6823      	ldr	r3, [r4, #0]
 800a596:	f043 0320 	orr.w	r3, r3, #32
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	2378      	movs	r3, #120	; 0x78
 800a59e:	4828      	ldr	r0, [pc, #160]	; (800a640 <_printf_i+0x248>)
 800a5a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5a4:	e7e3      	b.n	800a56e <_printf_i+0x176>
 800a5a6:	065e      	lsls	r6, r3, #25
 800a5a8:	bf48      	it	mi
 800a5aa:	b2ad      	uxthmi	r5, r5
 800a5ac:	e7e6      	b.n	800a57c <_printf_i+0x184>
 800a5ae:	4616      	mov	r6, r2
 800a5b0:	e7bb      	b.n	800a52a <_printf_i+0x132>
 800a5b2:	680b      	ldr	r3, [r1, #0]
 800a5b4:	6826      	ldr	r6, [r4, #0]
 800a5b6:	1d1d      	adds	r5, r3, #4
 800a5b8:	6960      	ldr	r0, [r4, #20]
 800a5ba:	600d      	str	r5, [r1, #0]
 800a5bc:	0635      	lsls	r5, r6, #24
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	d501      	bpl.n	800a5c6 <_printf_i+0x1ce>
 800a5c2:	6018      	str	r0, [r3, #0]
 800a5c4:	e002      	b.n	800a5cc <_printf_i+0x1d4>
 800a5c6:	0671      	lsls	r1, r6, #25
 800a5c8:	d5fb      	bpl.n	800a5c2 <_printf_i+0x1ca>
 800a5ca:	8018      	strh	r0, [r3, #0]
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4616      	mov	r6, r2
 800a5d0:	6123      	str	r3, [r4, #16]
 800a5d2:	e7ba      	b.n	800a54a <_printf_i+0x152>
 800a5d4:	680b      	ldr	r3, [r1, #0]
 800a5d6:	1d1a      	adds	r2, r3, #4
 800a5d8:	600a      	str	r2, [r1, #0]
 800a5da:	681e      	ldr	r6, [r3, #0]
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4630      	mov	r0, r6
 800a5e0:	6862      	ldr	r2, [r4, #4]
 800a5e2:	f000 f8d9 	bl	800a798 <memchr>
 800a5e6:	b108      	cbz	r0, 800a5ec <_printf_i+0x1f4>
 800a5e8:	1b80      	subs	r0, r0, r6
 800a5ea:	6060      	str	r0, [r4, #4]
 800a5ec:	6863      	ldr	r3, [r4, #4]
 800a5ee:	6123      	str	r3, [r4, #16]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5f6:	e7a8      	b.n	800a54a <_printf_i+0x152>
 800a5f8:	4632      	mov	r2, r6
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	6923      	ldr	r3, [r4, #16]
 800a600:	47d0      	blx	sl
 800a602:	3001      	adds	r0, #1
 800a604:	d0ab      	beq.n	800a55e <_printf_i+0x166>
 800a606:	6823      	ldr	r3, [r4, #0]
 800a608:	079b      	lsls	r3, r3, #30
 800a60a:	d413      	bmi.n	800a634 <_printf_i+0x23c>
 800a60c:	68e0      	ldr	r0, [r4, #12]
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	4298      	cmp	r0, r3
 800a612:	bfb8      	it	lt
 800a614:	4618      	movlt	r0, r3
 800a616:	e7a4      	b.n	800a562 <_printf_i+0x16a>
 800a618:	2301      	movs	r3, #1
 800a61a:	4632      	mov	r2, r6
 800a61c:	4649      	mov	r1, r9
 800a61e:	4640      	mov	r0, r8
 800a620:	47d0      	blx	sl
 800a622:	3001      	adds	r0, #1
 800a624:	d09b      	beq.n	800a55e <_printf_i+0x166>
 800a626:	3501      	adds	r5, #1
 800a628:	68e3      	ldr	r3, [r4, #12]
 800a62a:	9903      	ldr	r1, [sp, #12]
 800a62c:	1a5b      	subs	r3, r3, r1
 800a62e:	42ab      	cmp	r3, r5
 800a630:	dcf2      	bgt.n	800a618 <_printf_i+0x220>
 800a632:	e7eb      	b.n	800a60c <_printf_i+0x214>
 800a634:	2500      	movs	r5, #0
 800a636:	f104 0619 	add.w	r6, r4, #25
 800a63a:	e7f5      	b.n	800a628 <_printf_i+0x230>
 800a63c:	0800b81d 	.word	0x0800b81d
 800a640:	0800b82e 	.word	0x0800b82e

0800a644 <_sbrk_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	2300      	movs	r3, #0
 800a648:	4d05      	ldr	r5, [pc, #20]	; (800a660 <_sbrk_r+0x1c>)
 800a64a:	4604      	mov	r4, r0
 800a64c:	4608      	mov	r0, r1
 800a64e:	602b      	str	r3, [r5, #0]
 800a650:	f7f7 fc4c 	bl	8001eec <_sbrk>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d102      	bne.n	800a65e <_sbrk_r+0x1a>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	b103      	cbz	r3, 800a65e <_sbrk_r+0x1a>
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	20003b48 	.word	0x20003b48

0800a664 <__sread>:
 800a664:	b510      	push	{r4, lr}
 800a666:	460c      	mov	r4, r1
 800a668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a66c:	f000 f8ae 	bl	800a7cc <_read_r>
 800a670:	2800      	cmp	r0, #0
 800a672:	bfab      	itete	ge
 800a674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a676:	89a3      	ldrhlt	r3, [r4, #12]
 800a678:	181b      	addge	r3, r3, r0
 800a67a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a67e:	bfac      	ite	ge
 800a680:	6563      	strge	r3, [r4, #84]	; 0x54
 800a682:	81a3      	strhlt	r3, [r4, #12]
 800a684:	bd10      	pop	{r4, pc}

0800a686 <__swrite>:
 800a686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a68a:	461f      	mov	r7, r3
 800a68c:	898b      	ldrh	r3, [r1, #12]
 800a68e:	4605      	mov	r5, r0
 800a690:	05db      	lsls	r3, r3, #23
 800a692:	460c      	mov	r4, r1
 800a694:	4616      	mov	r6, r2
 800a696:	d505      	bpl.n	800a6a4 <__swrite+0x1e>
 800a698:	2302      	movs	r3, #2
 800a69a:	2200      	movs	r2, #0
 800a69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a0:	f000 f868 	bl	800a774 <_lseek_r>
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	4632      	mov	r2, r6
 800a6a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6ac:	81a3      	strh	r3, [r4, #12]
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	463b      	mov	r3, r7
 800a6b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ba:	f000 b817 	b.w	800a6ec <_write_r>

0800a6be <__sseek>:
 800a6be:	b510      	push	{r4, lr}
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c6:	f000 f855 	bl	800a774 <_lseek_r>
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	bf15      	itete	ne
 800a6d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6da:	81a3      	strheq	r3, [r4, #12]
 800a6dc:	bf18      	it	ne
 800a6de:	81a3      	strhne	r3, [r4, #12]
 800a6e0:	bd10      	pop	{r4, pc}

0800a6e2 <__sclose>:
 800a6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e6:	f000 b813 	b.w	800a710 <_close_r>
	...

0800a6ec <_write_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	4d05      	ldr	r5, [pc, #20]	; (800a70c <_write_r+0x20>)
 800a6f8:	602a      	str	r2, [r5, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f7f7 f9aa 	bl	8001a54 <_write>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_write_r+0x1e>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	b103      	cbz	r3, 800a70a <_write_r+0x1e>
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	20003b48 	.word	0x20003b48

0800a710 <_close_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	2300      	movs	r3, #0
 800a714:	4d05      	ldr	r5, [pc, #20]	; (800a72c <_close_r+0x1c>)
 800a716:	4604      	mov	r4, r0
 800a718:	4608      	mov	r0, r1
 800a71a:	602b      	str	r3, [r5, #0]
 800a71c:	f7f7 f9c6 	bl	8001aac <_close>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d102      	bne.n	800a72a <_close_r+0x1a>
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	b103      	cbz	r3, 800a72a <_close_r+0x1a>
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
 800a72c:	20003b48 	.word	0x20003b48

0800a730 <_fstat_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	2300      	movs	r3, #0
 800a734:	4d06      	ldr	r5, [pc, #24]	; (800a750 <_fstat_r+0x20>)
 800a736:	4604      	mov	r4, r0
 800a738:	4608      	mov	r0, r1
 800a73a:	4611      	mov	r1, r2
 800a73c:	602b      	str	r3, [r5, #0]
 800a73e:	f7f7 fa05 	bl	8001b4c <_fstat>
 800a742:	1c43      	adds	r3, r0, #1
 800a744:	d102      	bne.n	800a74c <_fstat_r+0x1c>
 800a746:	682b      	ldr	r3, [r5, #0]
 800a748:	b103      	cbz	r3, 800a74c <_fstat_r+0x1c>
 800a74a:	6023      	str	r3, [r4, #0]
 800a74c:	bd38      	pop	{r3, r4, r5, pc}
 800a74e:	bf00      	nop
 800a750:	20003b48 	.word	0x20003b48

0800a754 <_isatty_r>:
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	2300      	movs	r3, #0
 800a758:	4d05      	ldr	r5, [pc, #20]	; (800a770 <_isatty_r+0x1c>)
 800a75a:	4604      	mov	r4, r0
 800a75c:	4608      	mov	r0, r1
 800a75e:	602b      	str	r3, [r5, #0]
 800a760:	f7f7 f962 	bl	8001a28 <_isatty>
 800a764:	1c43      	adds	r3, r0, #1
 800a766:	d102      	bne.n	800a76e <_isatty_r+0x1a>
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	b103      	cbz	r3, 800a76e <_isatty_r+0x1a>
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	bd38      	pop	{r3, r4, r5, pc}
 800a770:	20003b48 	.word	0x20003b48

0800a774 <_lseek_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4604      	mov	r4, r0
 800a778:	4608      	mov	r0, r1
 800a77a:	4611      	mov	r1, r2
 800a77c:	2200      	movs	r2, #0
 800a77e:	4d05      	ldr	r5, [pc, #20]	; (800a794 <_lseek_r+0x20>)
 800a780:	602a      	str	r2, [r5, #0]
 800a782:	461a      	mov	r2, r3
 800a784:	f7f7 f9a9 	bl	8001ada <_lseek>
 800a788:	1c43      	adds	r3, r0, #1
 800a78a:	d102      	bne.n	800a792 <_lseek_r+0x1e>
 800a78c:	682b      	ldr	r3, [r5, #0]
 800a78e:	b103      	cbz	r3, 800a792 <_lseek_r+0x1e>
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	bd38      	pop	{r3, r4, r5, pc}
 800a794:	20003b48 	.word	0x20003b48

0800a798 <memchr>:
 800a798:	4603      	mov	r3, r0
 800a79a:	b510      	push	{r4, lr}
 800a79c:	b2c9      	uxtb	r1, r1
 800a79e:	4402      	add	r2, r0
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	d101      	bne.n	800a7aa <memchr+0x12>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e003      	b.n	800a7b2 <memchr+0x1a>
 800a7aa:	7804      	ldrb	r4, [r0, #0]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	428c      	cmp	r4, r1
 800a7b0:	d1f6      	bne.n	800a7a0 <memchr+0x8>
 800a7b2:	bd10      	pop	{r4, pc}

0800a7b4 <__malloc_lock>:
 800a7b4:	4801      	ldr	r0, [pc, #4]	; (800a7bc <__malloc_lock+0x8>)
 800a7b6:	f7ff bb43 	b.w	8009e40 <__retarget_lock_acquire_recursive>
 800a7ba:	bf00      	nop
 800a7bc:	20003b40 	.word	0x20003b40

0800a7c0 <__malloc_unlock>:
 800a7c0:	4801      	ldr	r0, [pc, #4]	; (800a7c8 <__malloc_unlock+0x8>)
 800a7c2:	f7ff bb3e 	b.w	8009e42 <__retarget_lock_release_recursive>
 800a7c6:	bf00      	nop
 800a7c8:	20003b40 	.word	0x20003b40

0800a7cc <_read_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	4608      	mov	r0, r1
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	4d05      	ldr	r5, [pc, #20]	; (800a7ec <_read_r+0x20>)
 800a7d8:	602a      	str	r2, [r5, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f7f7 f98e 	bl	8001afc <_read>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	d102      	bne.n	800a7ea <_read_r+0x1e>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	b103      	cbz	r3, 800a7ea <_read_r+0x1e>
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	20003b48 	.word	0x20003b48

0800a7f0 <_init>:
 800a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f2:	bf00      	nop
 800a7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7f6:	bc08      	pop	{r3}
 800a7f8:	469e      	mov	lr, r3
 800a7fa:	4770      	bx	lr

0800a7fc <_fini>:
 800a7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fe:	bf00      	nop
 800a800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a802:	bc08      	pop	{r3}
 800a804:	469e      	mov	lr, r3
 800a806:	4770      	bx	lr
