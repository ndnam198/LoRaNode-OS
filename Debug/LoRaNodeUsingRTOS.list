
LoRaNodeUsingRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc18  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001600  0800bd28  0800bd28  0001bd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d328  0800d328  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800d328  0800d328  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d328  0800d328  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d328  0800d328  0001d328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d32c  0800d32c  0001d32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800d330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b00  20000078  0800d3a8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003b78  0800d3a8  00023b78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002732d  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054f5  00000000  00000000  000473ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  0004c8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019c0  00000000  00000000  0004e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f283  00000000  00000000  0004fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028b9a  00000000  00000000  0006f123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a15c4  00000000  00000000  00097cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139281  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bcc  00000000  00000000  001392d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bd10 	.word	0x0800bd10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800bd10 	.word	0x0800bd10

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2iz>:
 800060c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30f      	bcc.n	8000636 <__aeabi_f2iz+0x2a>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d90d      	bls.n	800063c <__aeabi_f2iz+0x30>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800062c:	fa23 f002 	lsr.w	r0, r3, r2
 8000630:	bf18      	it	ne
 8000632:	4240      	negne	r0, r0
 8000634:	4770      	bx	lr
 8000636:	f04f 0000 	mov.w	r0, #0
 800063a:	4770      	bx	lr
 800063c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000640:	d101      	bne.n	8000646 <__aeabi_f2iz+0x3a>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	d105      	bne.n	8000652 <__aeabi_f2iz+0x46>
 8000646:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800064a:	bf08      	it	eq
 800064c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_ADC1_Init+0x74>)
 800066a:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <MX_ADC1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_ADC1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_ADC1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_ADC1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_ADC1_Init+0x74>)
 8000682:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_ADC1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_ADC1_Init+0x74>)
 8000690:	2201      	movs	r2, #1
 8000692:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_ADC1_Init+0x74>)
 8000696:	f002 fc8f 	bl	8002fb8 <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80006a0:	f001 ffec 	bl	800267c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80006ac:	2307      	movs	r3, #7
 80006ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_ADC1_Init+0x74>)
 80006b6:	f002 ffcd 	bl	8003654 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006c0:	f001 ffdc 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200039c8 	.word	0x200039c8
 80006d0:	40012400 	.word	0x40012400

080006d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <HAL_ADC_MspInit+0x7c>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d129      	bne.n	8000748 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <HAL_ADC_MspInit+0x80>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a16      	ldr	r2, [pc, #88]	; (8000754 <HAL_ADC_MspInit+0x80>)
 80006fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <HAL_ADC_MspInit+0x80>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_ADC_MspInit+0x80>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a10      	ldr	r2, [pc, #64]	; (8000754 <HAL_ADC_MspInit+0x80>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_ADC_MspInit+0x80>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LIGHT_SENSOR_OUTPUT_Pin;
 8000724:	2301      	movs	r3, #1
 8000726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000728:	2303      	movs	r3, #3
 800072a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LIGHT_SENSOR_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4619      	mov	r1, r3
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <HAL_ADC_MspInit+0x84>)
 8000734:	f003 fdce 	bl	80042d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2105      	movs	r1, #5
 800073c:	2012      	movs	r0, #18
 800073e:	f003 faad 	bl	8003c9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000742:	2012      	movs	r0, #18
 8000744:	f003 fad6 	bl	8003cf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012400 	.word	0x40012400
 8000754:	40021000 	.word	0x40021000
 8000758:	40010800 	.word	0x40010800

0800075c <Flash_WriteWord>:
#include "flash.h"
#include "stm_log.h"

HAL_StatusTypeDef Flash_WriteWord(uint32_t start_address, uint32_t data)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af06      	add	r7, sp, #24
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
    if (Flash_ReadAddress(start_address) != -1)
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 f850 	bl	800080c <Flash_ReadAddress>
 800076c:	4603      	mov	r3, r0
 800076e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000772:	d001      	beq.n	8000778 <Flash_WriteWord+0x1c>
        return HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	e03d      	b.n	80007f4 <Flash_WriteWord+0x98>
    // /* Erase Flash based on initialize struct */
    // HAL_StatusTypeDef err = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
    // if (err != HAL_OK) {
    //     return flash_status;
    // }
    STM_LOGV("Flash", "write data to 0x%x: 0x%x - dec: %d", start_address, data, data);
 8000778:	f002 fbf0 	bl	8002f5c <HAL_GetTick>
 800077c:	4602      	mov	r2, r0
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	9305      	str	r3, [sp, #20]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	9304      	str	r3, [sp, #16]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	9303      	str	r3, [sp, #12]
 800078a:	2315      	movs	r3, #21
 800078c:	9302      	str	r3, [sp, #8]
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <Flash_WriteWord+0xa0>)
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <Flash_WriteWord+0xa4>)
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	4613      	mov	r3, r2
 8000798:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <Flash_WriteWord+0xa8>)
 800079a:	4919      	ldr	r1, [pc, #100]	; (8000800 <Flash_WriteWord+0xa4>)
 800079c:	2005      	movs	r0, #5
 800079e:	f002 fac5 	bl	8002d2c <stm_log_write>
    HAL_FLASH_Unlock();
 80007a2:	f003 fb6f 	bl	8003e84 <HAL_FLASH_Unlock>
    HAL_StatusTypeDef err = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_address, data);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	2002      	movs	r0, #2
 80007b2:	f003 fab7 	bl	8003d24 <HAL_FLASH_Program>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73fb      	strb	r3, [r7, #15]
    HAL_FLASH_Lock();
 80007ba:	f003 fb89 	bl	8003ed0 <HAL_FLASH_Lock>
    FLASH_READ(start_address);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f824 	bl	800080c <Flash_ReadAddress>
 80007c4:	4603      	mov	r3, r0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	f002 fbc8 	bl	8002f5c <HAL_GetTick>
 80007cc:	4602      	mov	r2, r0
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	9305      	str	r3, [sp, #20]
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	9304      	str	r3, [sp, #16]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	9303      	str	r3, [sp, #12]
 80007da:	2319      	movs	r3, #25
 80007dc:	9302      	str	r3, [sp, #8]
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <Flash_WriteWord+0xa0>)
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <Flash_WriteWord+0xa4>)
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	4613      	mov	r3, r2
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <Flash_WriteWord+0xac>)
 80007ea:	4905      	ldr	r1, [pc, #20]	; (8000800 <Flash_WriteWord+0xa4>)
 80007ec:	2005      	movs	r0, #5
 80007ee:	f002 fa9d 	bl	8002d2c <stm_log_write>
    return err;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	0800d084 	.word	0x0800d084
 8000800:	0800bd68 	.word	0x0800bd68
 8000804:	0800bd28 	.word	0x0800bd28
 8000808:	0800bd70 	.word	0x0800bd70

0800080c <Flash_ReadAddress>:

int Flash_ReadAddress(uint32_t flash_address)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    return *(volatile int*)(flash_address);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
	...

08000824 <Flash_ErasePage>:
        return -1;
    }
}

HAL_StatusTypeDef Flash_ErasePage(uint32_t start_address, uint32_t nb_of_delete_pages)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af04      	add	r7, sp, #16
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef EraseInitStruct = { 0 };
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
    uint32_t PageError = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]

    HAL_FLASH_Unlock();
 8000840:	f003 fb20 	bl	8003e84 <HAL_FLASH_Unlock>

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.PageAddress = start_address;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbPages = nb_of_delete_pages;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	61bb      	str	r3, [r7, #24]

    HAL_StatusTypeDef err = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000850:	f107 0208 	add.w	r2, r7, #8
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fbfa 	bl	8004054 <HAL_FLASHEx_Erase>
 8000860:	4603      	mov	r3, r0
 8000862:	77fb      	strb	r3, [r7, #31]
    if (PageError != 0xFFFFFFFF) {
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800086a:	d010      	beq.n	800088e <Flash_ErasePage+0x6a>
        STM_LOGE("Flash", "PageError != 0xFFFFFFFF, %d", PageError);
 800086c:	f002 fb76 	bl	8002f5c <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	9303      	str	r3, [sp, #12]
 8000876:	233a      	movs	r3, #58	; 0x3a
 8000878:	9302      	str	r3, [sp, #8]
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <Flash_ErasePage+0x78>)
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <Flash_ErasePage+0x7c>)
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	4613      	mov	r3, r2
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <Flash_ErasePage+0x80>)
 8000886:	4906      	ldr	r1, [pc, #24]	; (80008a0 <Flash_ErasePage+0x7c>)
 8000888:	2001      	movs	r0, #1
 800088a:	f002 fa4f 	bl	8002d2c <stm_log_write>
    }

    HAL_FLASH_Lock();
 800088e:	f003 fb1f 	bl	8003ed0 <HAL_FLASH_Lock>
    return err;
 8000892:	7ffb      	ldrb	r3, [r7, #31]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	0800d094 	.word	0x0800d094
 80008a0:	0800bd68 	.word	0x0800bd68
 80008a4:	0800bdac 	.word	0x0800bdac

080008a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008ac:	f3bf 8f4f 	dsb	sy
}
 80008b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <__NVIC_SystemReset+0x24>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008ba:	4904      	ldr	r1, [pc, #16]	; (80008cc <__NVIC_SystemReset+0x24>)
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_SystemReset+0x28>)
 80008be:	4313      	orrs	r3, r2
 80008c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008c2:	f3bf 8f4f 	dsb	sy
}
 80008c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <__NVIC_SystemReset+0x20>
 80008cc:	e000ed00 	.word	0xe000ed00
 80008d0:	05fa0004 	.word	0x05fa0004

080008d4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return 0;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
	...

080008f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af04      	add	r7, sp, #16

  /* USER CODE END Init */

  /* Create the recursive mutex(es) */
  /* creation of nodedataMutex */
  nodedataMutexHandle = osMutexNew(&nodedataMutex_attributes);
 80008f6:	484c      	ldr	r0, [pc, #304]	; (8000a28 <MX_FREERTOS_Init+0x138>)
 80008f8:	f006 fcbc 	bl	8007274 <osMutexNew>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a4b      	ldr	r2, [pc, #300]	; (8000a2c <MX_FREERTOS_Init+0x13c>)
 8000900:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of rxDoneSemaphore */
  rxDoneSemaphoreHandle = osSemaphoreNew(5, 0, &rxDoneSemaphore_attributes);
 8000902:	4a4b      	ldr	r2, [pc, #300]	; (8000a30 <MX_FREERTOS_Init+0x140>)
 8000904:	2100      	movs	r1, #0
 8000906:	2005      	movs	r0, #5
 8000908:	f006 fd4e 	bl	80073a8 <osSemaphoreNew>
 800090c:	4603      	mov	r3, r0
 800090e:	4a49      	ldr	r2, [pc, #292]	; (8000a34 <MX_FREERTOS_Init+0x144>)
 8000910:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  if (rxDoneSemaphoreHandle == NULL)
 8000912:	4b48      	ldr	r3, [pc, #288]	; (8000a34 <MX_FREERTOS_Init+0x144>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10d      	bne.n	8000936 <MX_FREERTOS_Init+0x46>
    STM_LOGE("ERROR", "create rxDoneSemaphoreHandle failed");
 800091a:	f002 fb1f 	bl	8002f5c <HAL_GetTick>
 800091e:	4603      	mov	r3, r0
 8000920:	2299      	movs	r2, #153	; 0x99
 8000922:	9202      	str	r2, [sp, #8]
 8000924:	4a44      	ldr	r2, [pc, #272]	; (8000a38 <MX_FREERTOS_Init+0x148>)
 8000926:	9201      	str	r2, [sp, #4]
 8000928:	4a44      	ldr	r2, [pc, #272]	; (8000a3c <MX_FREERTOS_Init+0x14c>)
 800092a:	9200      	str	r2, [sp, #0]
 800092c:	4a44      	ldr	r2, [pc, #272]	; (8000a40 <MX_FREERTOS_Init+0x150>)
 800092e:	4943      	ldr	r1, [pc, #268]	; (8000a3c <MX_FREERTOS_Init+0x14c>)
 8000930:	2001      	movs	r0, #1
 8000932:	f002 f9fb 	bl	8002d2c <stm_log_write>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew(10, sizeof(uint8_t) * 10, &myQueue01_attributes);
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <MX_FREERTOS_Init+0x154>)
 8000938:	210a      	movs	r1, #10
 800093a:	200a      	movs	r0, #10
 800093c:	f006 fe8e 	bl	800765c <osMessageQueueNew>
 8000940:	4603      	mov	r3, r0
 8000942:	4a41      	ldr	r2, [pc, #260]	; (8000a48 <MX_FREERTOS_Init+0x158>)
 8000944:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  if (myQueue01Handle == NULL)
 8000946:	4b40      	ldr	r3, [pc, #256]	; (8000a48 <MX_FREERTOS_Init+0x158>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d10d      	bne.n	800096a <MX_FREERTOS_Init+0x7a>
    STM_LOGE("ERROR", "create myQueue01Handle failed");
 800094e:	f002 fb05 	bl	8002f5c <HAL_GetTick>
 8000952:	4603      	mov	r3, r0
 8000954:	22a5      	movs	r2, #165	; 0xa5
 8000956:	9202      	str	r2, [sp, #8]
 8000958:	4a37      	ldr	r2, [pc, #220]	; (8000a38 <MX_FREERTOS_Init+0x148>)
 800095a:	9201      	str	r2, [sp, #4]
 800095c:	4a37      	ldr	r2, [pc, #220]	; (8000a3c <MX_FREERTOS_Init+0x14c>)
 800095e:	9200      	str	r2, [sp, #0]
 8000960:	4a3a      	ldr	r2, [pc, #232]	; (8000a4c <MX_FREERTOS_Init+0x15c>)
 8000962:	4936      	ldr	r1, [pc, #216]	; (8000a3c <MX_FREERTOS_Init+0x14c>)
 8000964:	2001      	movs	r0, #1
 8000966:	f002 f9e1 	bl	8002d2c <stm_log_write>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */

  /* creation of taskProducer */
  taskProducerHandle = osThreadNew(entryProducer, NULL, &taskProducer_attributes);
 800096a:	4a39      	ldr	r2, [pc, #228]	; (8000a50 <MX_FREERTOS_Init+0x160>)
 800096c:	2100      	movs	r1, #0
 800096e:	4839      	ldr	r0, [pc, #228]	; (8000a54 <MX_FREERTOS_Init+0x164>)
 8000970:	f006 fba8 	bl	80070c4 <osThreadNew>
 8000974:	4603      	mov	r3, r0
 8000976:	4a38      	ldr	r2, [pc, #224]	; (8000a58 <MX_FREERTOS_Init+0x168>)
 8000978:	6013      	str	r3, [r2, #0]

  /* creation of taskConsumer */
  taskConsumerHandle = osThreadNew(entryConsumer, NULL, &taskConsumer_attributes);
 800097a:	4a38      	ldr	r2, [pc, #224]	; (8000a5c <MX_FREERTOS_Init+0x16c>)
 800097c:	2100      	movs	r1, #0
 800097e:	4838      	ldr	r0, [pc, #224]	; (8000a60 <MX_FREERTOS_Init+0x170>)
 8000980:	f006 fba0 	bl	80070c4 <osThreadNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a37      	ldr	r2, [pc, #220]	; (8000a64 <MX_FREERTOS_Init+0x174>)
 8000988:	6013      	str	r3, [r2, #0]

  /* creation of taskPeriodic */
  taskPeriodicHandle = osThreadNew(entryPeriodic, NULL, &taskPeriodic_attributes);
 800098a:	4a37      	ldr	r2, [pc, #220]	; (8000a68 <MX_FREERTOS_Init+0x178>)
 800098c:	2100      	movs	r1, #0
 800098e:	4837      	ldr	r0, [pc, #220]	; (8000a6c <MX_FREERTOS_Init+0x17c>)
 8000990:	f006 fb98 	bl	80070c4 <osThreadNew>
 8000994:	4603      	mov	r3, r0
 8000996:	4a36      	ldr	r2, [pc, #216]	; (8000a70 <MX_FREERTOS_Init+0x180>)
 8000998:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  if (taskProducerHandle == NULL)
 800099a:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <MX_FREERTOS_Init+0x168>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10d      	bne.n	80009be <MX_FREERTOS_Init+0xce>
    STM_LOGE("ERROR", "create taskProducerHandle failed");
 80009a2:	f002 fadb 	bl	8002f5c <HAL_GetTick>
 80009a6:	4603      	mov	r3, r0
 80009a8:	22b6      	movs	r2, #182	; 0xb6
 80009aa:	9202      	str	r2, [sp, #8]
 80009ac:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <MX_FREERTOS_Init+0x148>)
 80009ae:	9201      	str	r2, [sp, #4]
 80009b0:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <MX_FREERTOS_Init+0x14c>)
 80009b2:	9200      	str	r2, [sp, #0]
 80009b4:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <MX_FREERTOS_Init+0x184>)
 80009b6:	4921      	ldr	r1, [pc, #132]	; (8000a3c <MX_FREERTOS_Init+0x14c>)
 80009b8:	2001      	movs	r0, #1
 80009ba:	f002 f9b7 	bl	8002d2c <stm_log_write>
  if (taskConsumerHandle == NULL)
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_FREERTOS_Init+0x174>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10d      	bne.n	80009e2 <MX_FREERTOS_Init+0xf2>
    STM_LOGE("ERROR", "create taskConsumerHandle failed");
 80009c6:	f002 fac9 	bl	8002f5c <HAL_GetTick>
 80009ca:	4603      	mov	r3, r0
 80009cc:	22b8      	movs	r2, #184	; 0xb8
 80009ce:	9202      	str	r2, [sp, #8]
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <MX_FREERTOS_Init+0x148>)
 80009d2:	9201      	str	r2, [sp, #4]
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <MX_FREERTOS_Init+0x14c>)
 80009d6:	9200      	str	r2, [sp, #0]
 80009d8:	4a27      	ldr	r2, [pc, #156]	; (8000a78 <MX_FREERTOS_Init+0x188>)
 80009da:	4918      	ldr	r1, [pc, #96]	; (8000a3c <MX_FREERTOS_Init+0x14c>)
 80009dc:	2001      	movs	r0, #1
 80009de:	f002 f9a5 	bl	8002d2c <stm_log_write>
  if (taskPeriodicHandle == NULL)
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <MX_FREERTOS_Init+0x180>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10d      	bne.n	8000a06 <MX_FREERTOS_Init+0x116>
    STM_LOGE("ERROR", "create taskPeriodicHandle failed");
 80009ea:	f002 fab7 	bl	8002f5c <HAL_GetTick>
 80009ee:	4603      	mov	r3, r0
 80009f0:	22ba      	movs	r2, #186	; 0xba
 80009f2:	9202      	str	r2, [sp, #8]
 80009f4:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <MX_FREERTOS_Init+0x148>)
 80009f6:	9201      	str	r2, [sp, #4]
 80009f8:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <MX_FREERTOS_Init+0x14c>)
 80009fa:	9200      	str	r2, [sp, #0]
 80009fc:	4a1f      	ldr	r2, [pc, #124]	; (8000a7c <MX_FREERTOS_Init+0x18c>)
 80009fe:	490f      	ldr	r1, [pc, #60]	; (8000a3c <MX_FREERTOS_Init+0x14c>)
 8000a00:	2001      	movs	r0, #1
 8000a02:	f002 f993 	bl	8002d2c <stm_log_write>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  STM_LOGV("MileStone", "Kernel starts");
 8000a06:	f002 faa9 	bl	8002f5c <HAL_GetTick>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	22be      	movs	r2, #190	; 0xbe
 8000a0e:	9202      	str	r2, [sp, #8]
 8000a10:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <MX_FREERTOS_Init+0x148>)
 8000a12:	9201      	str	r2, [sp, #4]
 8000a14:	4a1a      	ldr	r2, [pc, #104]	; (8000a80 <MX_FREERTOS_Init+0x190>)
 8000a16:	9200      	str	r2, [sp, #0]
 8000a18:	4a1a      	ldr	r2, [pc, #104]	; (8000a84 <MX_FREERTOS_Init+0x194>)
 8000a1a:	4919      	ldr	r1, [pc, #100]	; (8000a80 <MX_FREERTOS_Init+0x190>)
 8000a1c:	2005      	movs	r0, #5
 8000a1e:	f002 f985 	bl	8002d2c <stm_log_write>
  /* USER CODE END RTOS_EVENTS */

}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	0800d128 	.word	0x0800d128
 8000a2c:	20003a04 	.word	0x20003a04
 8000a30:	0800d138 	.word	0x0800d138
 8000a34:	200039f8 	.word	0x200039f8
 8000a38:	0800d148 	.word	0x0800d148
 8000a3c:	0800be90 	.word	0x0800be90
 8000a40:	0800be48 	.word	0x0800be48
 8000a44:	0800d110 	.word	0x0800d110
 8000a48:	20003a08 	.word	0x20003a08
 8000a4c:	0800be98 	.word	0x0800be98
 8000a50:	0800d0a4 	.word	0x0800d0a4
 8000a54:	08000a89 	.word	0x08000a89
 8000a58:	20003a00 	.word	0x20003a00
 8000a5c:	0800d0c8 	.word	0x0800d0c8
 8000a60:	08000c49 	.word	0x08000c49
 8000a64:	200039fc 	.word	0x200039fc
 8000a68:	0800d0ec 	.word	0x0800d0ec
 8000a6c:	08000d65 	.word	0x08000d65
 8000a70:	20003a0c 	.word	0x20003a0c
 8000a74:	0800bedc 	.word	0x0800bedc
 8000a78:	0800bf20 	.word	0x0800bf20
 8000a7c:	0800bf64 	.word	0x0800bf64
 8000a80:	0800bfd4 	.word	0x0800bfd4
 8000a84:	0800bfa8 	.word	0x0800bfa8

08000a88 <entryProducer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryProducer */
void entryProducer(void* argument)
{
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	b08e      	sub	sp, #56	; 0x38
 8000a8c:	af06      	add	r7, sp, #24
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryProducer */
  osStatus_t err;
  uint8_t receivedMsg[10];
  uint32_t tickToWait = pdMS_TO_TICKS(5000);
 8000a90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a94:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for (;;)
  {
    err = osSemaphoreAcquire(rxDoneSemaphoreHandle, portMAX_DELAY);
 8000a96:	4b60      	ldr	r3, [pc, #384]	; (8000c18 <entryProducer+0x190>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f006 fd1e 	bl	80074e0 <osSemaphoreAcquire>
 8000aa4:	6178      	str	r0, [r7, #20]
    if (!err) {
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1f4      	bne.n	8000a96 <entryProducer+0xe>

      STM_LOGV("Producer", "Get semaphore ok");
 8000aac:	f002 fa56 	bl	8002f5c <HAL_GetTick>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	22d6      	movs	r2, #214	; 0xd6
 8000ab4:	9202      	str	r2, [sp, #8]
 8000ab6:	4a59      	ldr	r2, [pc, #356]	; (8000c1c <entryProducer+0x194>)
 8000ab8:	9201      	str	r2, [sp, #4]
 8000aba:	4a59      	ldr	r2, [pc, #356]	; (8000c20 <entryProducer+0x198>)
 8000abc:	9200      	str	r2, [sp, #0]
 8000abe:	4a59      	ldr	r2, [pc, #356]	; (8000c24 <entryProducer+0x19c>)
 8000ac0:	4957      	ldr	r1, [pc, #348]	; (8000c20 <entryProducer+0x198>)
 8000ac2:	2005      	movs	r0, #5
 8000ac4:	f002 f932 	bl	8002d2c <stm_log_write>

      if (LoRaGetITFlag(PAYLOAD_CRC_ERROR_MskPos) == 1)
 8000ac8:	2005      	movs	r0, #5
 8000aca:	f001 fa83 	bl	8001fd4 <LoRaGetITFlag>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d10e      	bne.n	8000af2 <entryProducer+0x6a>
      {
        STM_LOGE("Producer", "Payload CRC failed");
 8000ad4:	f002 fa42 	bl	8002f5c <HAL_GetTick>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	22da      	movs	r2, #218	; 0xda
 8000adc:	9202      	str	r2, [sp, #8]
 8000ade:	4a4f      	ldr	r2, [pc, #316]	; (8000c1c <entryProducer+0x194>)
 8000ae0:	9201      	str	r2, [sp, #4]
 8000ae2:	4a4f      	ldr	r2, [pc, #316]	; (8000c20 <entryProducer+0x198>)
 8000ae4:	9200      	str	r2, [sp, #0]
 8000ae6:	4a50      	ldr	r2, [pc, #320]	; (8000c28 <entryProducer+0x1a0>)
 8000ae8:	494d      	ldr	r1, [pc, #308]	; (8000c20 <entryProducer+0x198>)
 8000aea:	2001      	movs	r0, #1
 8000aec:	f002 f91e 	bl	8002d2c <stm_log_write>
 8000af0:	e08e      	b.n	8000c10 <entryProducer+0x188>
      }
      else
      {
        LORA_SET_FIFO_CURRENT_MSG();
 8000af2:	2010      	movs	r0, #16
 8000af4:	f000 fd02 	bl	80014fc <ucSpi1Read>
 8000af8:	4603      	mov	r3, r0
 8000afa:	4619      	mov	r1, r3
 8000afc:	200d      	movs	r0, #13
 8000afe:	f000 fc95 	bl	800142c <vSpi1Write>
        for (uint8_t i = 0; i < PAYLOAD_LENGTH; i++) {
 8000b02:	2300      	movs	r3, #0
 8000b04:	77fb      	strb	r3, [r7, #31]
 8000b06:	e00d      	b.n	8000b24 <entryProducer+0x9c>
          receivedMsg[i] = ucSpi1Read(RegFifo);
 8000b08:	7ffc      	ldrb	r4, [r7, #31]
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f000 fcf6 	bl	80014fc <ucSpi1Read>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	f107 0320 	add.w	r3, r7, #32
 8000b18:	4423      	add	r3, r4
 8000b1a:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (uint8_t i = 0; i < PAYLOAD_LENGTH; i++) {
 8000b1e:	7ffb      	ldrb	r3, [r7, #31]
 8000b20:	3301      	adds	r3, #1
 8000b22:	77fb      	strb	r3, [r7, #31]
 8000b24:	7ffb      	ldrb	r3, [r7, #31]
 8000b26:	2b09      	cmp	r3, #9
 8000b28:	d9ee      	bls.n	8000b08 <entryProducer+0x80>
          // STM_LOGI("Producer", "receivedData[%d]: %x", i, receivedMsg[i]);
        }

        STM_LOGI("Producer", "msg dest ID: %x - thisNodeID: %x", receivedMsg[INDEX_DEST_ID], thisNode.nodeID);
 8000b2a:	f002 fa17 	bl	8002f5c <HAL_GetTick>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	7a7a      	ldrb	r2, [r7, #9]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4a3d      	ldr	r2, [pc, #244]	; (8000c2c <entryProducer+0x1a4>)
 8000b36:	7812      	ldrb	r2, [r2, #0]
 8000b38:	9204      	str	r2, [sp, #16]
 8000b3a:	9103      	str	r1, [sp, #12]
 8000b3c:	22e4      	movs	r2, #228	; 0xe4
 8000b3e:	9202      	str	r2, [sp, #8]
 8000b40:	4a36      	ldr	r2, [pc, #216]	; (8000c1c <entryProducer+0x194>)
 8000b42:	9201      	str	r2, [sp, #4]
 8000b44:	4a36      	ldr	r2, [pc, #216]	; (8000c20 <entryProducer+0x198>)
 8000b46:	9200      	str	r2, [sp, #0]
 8000b48:	4a39      	ldr	r2, [pc, #228]	; (8000c30 <entryProducer+0x1a8>)
 8000b4a:	4935      	ldr	r1, [pc, #212]	; (8000c20 <entryProducer+0x198>)
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f002 f8ed 	bl	8002d2c <stm_log_write>
        if (receivedMsg[INDEX_DEST_ID] == thisNode.nodeID &&
 8000b52:	7a7a      	ldrb	r2, [r7, #9]
 8000b54:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <entryProducer+0x1a4>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d14b      	bne.n	8000bf4 <entryProducer+0x16c>
          receivedMsg[INDEX_MSG_TYPE] == MSG_TYPE_REQUEST)
 8000b5c:	7abb      	ldrb	r3, [r7, #10]
        if (receivedMsg[INDEX_DEST_ID] == thisNode.nodeID &&
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d148      	bne.n	8000bf4 <entryProducer+0x16c>
        {

          STM_LOGV("Producer", "put queue");
 8000b62:	f002 f9fb 	bl	8002f5c <HAL_GetTick>
 8000b66:	4603      	mov	r3, r0
 8000b68:	22e9      	movs	r2, #233	; 0xe9
 8000b6a:	9202      	str	r2, [sp, #8]
 8000b6c:	4a2b      	ldr	r2, [pc, #172]	; (8000c1c <entryProducer+0x194>)
 8000b6e:	9201      	str	r2, [sp, #4]
 8000b70:	4a2b      	ldr	r2, [pc, #172]	; (8000c20 <entryProducer+0x198>)
 8000b72:	9200      	str	r2, [sp, #0]
 8000b74:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <entryProducer+0x1ac>)
 8000b76:	492a      	ldr	r1, [pc, #168]	; (8000c20 <entryProducer+0x198>)
 8000b78:	2005      	movs	r0, #5
 8000b7a:	f002 f8d7 	bl	8002d2c <stm_log_write>
          err = osMessageQueuePut(myQueue01Handle, receivedMsg, 0, tickToWait);
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <entryProducer+0x1b0>)
 8000b80:	6818      	ldr	r0, [r3, #0]
 8000b82:	f107 0108 	add.w	r1, r7, #8
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f006 fded 	bl	8007768 <osMessageQueuePut>
 8000b8e:	6178      	str	r0, [r7, #20]
          if (!err)
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10e      	bne.n	8000bb4 <entryProducer+0x12c>
          {
            STM_LOGV("Producer", "put queue ok");
 8000b96:	f002 f9e1 	bl	8002f5c <HAL_GetTick>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	22ed      	movs	r2, #237	; 0xed
 8000b9e:	9202      	str	r2, [sp, #8]
 8000ba0:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <entryProducer+0x194>)
 8000ba2:	9201      	str	r2, [sp, #4]
 8000ba4:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <entryProducer+0x198>)
 8000ba6:	9200      	str	r2, [sp, #0]
 8000ba8:	4a24      	ldr	r2, [pc, #144]	; (8000c3c <entryProducer+0x1b4>)
 8000baa:	491d      	ldr	r1, [pc, #116]	; (8000c20 <entryProducer+0x198>)
 8000bac:	2005      	movs	r0, #5
 8000bae:	f002 f8bd 	bl	8002d2c <stm_log_write>
          if (!err)
 8000bb2:	e02d      	b.n	8000c10 <entryProducer+0x188>
          }
          else
          {
            STM_LOGE("Producer", "put queue failed, err %d\n\r NbOfMsg in queue : % d\n\ravailable size : % d", \
 8000bb4:	f002 f9d2 	bl	8002f5c <HAL_GetTick>
 8000bb8:	4605      	mov	r5, r0
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <entryProducer+0x1b0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f006 feb8 	bl	8007934 <osMessageQueueGetCount>
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <entryProducer+0x1b0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f006 fee4 	bl	8007998 <osMessageQueueGetSpace>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	9305      	str	r3, [sp, #20]
 8000bd4:	9404      	str	r4, [sp, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	9303      	str	r3, [sp, #12]
 8000bda:	23f1      	movs	r3, #241	; 0xf1
 8000bdc:	9302      	str	r3, [sp, #8]
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <entryProducer+0x194>)
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <entryProducer+0x198>)
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	462b      	mov	r3, r5
 8000be8:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <entryProducer+0x1b8>)
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <entryProducer+0x198>)
 8000bec:	2001      	movs	r0, #1
 8000bee:	f002 f89d 	bl	8002d2c <stm_log_write>
          if (!err)
 8000bf2:	e00d      	b.n	8000c10 <entryProducer+0x188>
              osMessageQueueGetSpace(myQueue01Handle));
          }
        }
        else
        {
          STM_LOGV("Producer", "msg not matched --> dicarded");
 8000bf4:	f002 f9b2 	bl	8002f5c <HAL_GetTick>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	22f9      	movs	r2, #249	; 0xf9
 8000bfc:	9202      	str	r2, [sp, #8]
 8000bfe:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <entryProducer+0x194>)
 8000c00:	9201      	str	r2, [sp, #4]
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <entryProducer+0x198>)
 8000c04:	9200      	str	r2, [sp, #0]
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <entryProducer+0x1bc>)
 8000c08:	4905      	ldr	r1, [pc, #20]	; (8000c20 <entryProducer+0x198>)
 8000c0a:	2005      	movs	r0, #5
 8000c0c:	f002 f88e 	bl	8002d2c <stm_log_write>
        }
      }
      LoRaClearITFlag(RX_DONE_Msk | PAYLOAD_CRC_ERROR_Msk);
 8000c10:	2060      	movs	r0, #96	; 0x60
 8000c12:	f001 fa29 	bl	8002068 <LoRaClearITFlag>
    err = osSemaphoreAcquire(rxDoneSemaphoreHandle, portMAX_DELAY);
 8000c16:	e73e      	b.n	8000a96 <entryProducer+0xe>
 8000c18:	200039f8 	.word	0x200039f8
 8000c1c:	0800d15c 	.word	0x0800d15c
 8000c20:	0800c010 	.word	0x0800c010
 8000c24:	0800bfe0 	.word	0x0800bfe0
 8000c28:	0800c01c 	.word	0x0800c01c
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	0800c054 	.word	0x0800c054
 8000c34:	0800c098 	.word	0x0800c098
 8000c38:	20003a08 	.word	0x20003a08
 8000c3c:	0800c0c0 	.word	0x0800c0c0
 8000c40:	0800c0ec 	.word	0x0800c0ec
 8000c44:	0800c158 	.word	0x0800c158

08000c48 <entryConsumer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryConsumer */
void entryConsumer(void* argument)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	6078      	str	r0, [r7, #4]
  static uint8_t receivedMsgFromQueue[PAYLOAD_LENGTH];
  osStatus_t err;
  /* Infinite loop */
  for (;;)
  {
    err = osMessageQueueGet(myQueue01Handle, receivedMsgFromQueue, 0, portMAX_DELAY);
 8000c50:	4b3c      	ldr	r3, [pc, #240]	; (8000d44 <entryConsumer+0xfc>)
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	2200      	movs	r2, #0
 8000c5a:	493b      	ldr	r1, [pc, #236]	; (8000d48 <entryConsumer+0x100>)
 8000c5c:	f006 fdf8 	bl	8007850 <osMessageQueueGet>
 8000c60:	60f8      	str	r0, [r7, #12]
    if (!err)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f3      	bne.n	8000c50 <entryConsumer+0x8>
    {
      printf("\r\n");
 8000c68:	4838      	ldr	r0, [pc, #224]	; (8000d4c <entryConsumer+0x104>)
 8000c6a:	f00a f81d 	bl	800aca8 <puts>
      STM_LOGV("Consumer", "Get queue ok");
 8000c6e:	f002 f975 	bl	8002f5c <HAL_GetTick>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f240 1215 	movw	r2, #277	; 0x115
 8000c78:	9202      	str	r2, [sp, #8]
 8000c7a:	4a35      	ldr	r2, [pc, #212]	; (8000d50 <entryConsumer+0x108>)
 8000c7c:	9201      	str	r2, [sp, #4]
 8000c7e:	4a35      	ldr	r2, [pc, #212]	; (8000d54 <entryConsumer+0x10c>)
 8000c80:	9200      	str	r2, [sp, #0]
 8000c82:	4a35      	ldr	r2, [pc, #212]	; (8000d58 <entryConsumer+0x110>)
 8000c84:	4933      	ldr	r1, [pc, #204]	; (8000d54 <entryConsumer+0x10c>)
 8000c86:	2005      	movs	r0, #5
 8000c88:	f002 f850 	bl	8002d2c <stm_log_write>
      STM_LOGI("Consumer", "-----> OPCODE: %d", receivedMsgFromQueue[INDEX_COMMAND_OPCODE]);
 8000c8c:	f002 f966 	bl	8002f5c <HAL_GetTick>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a2d      	ldr	r2, [pc, #180]	; (8000d48 <entryConsumer+0x100>)
 8000c94:	7a12      	ldrb	r2, [r2, #8]
 8000c96:	9203      	str	r2, [sp, #12]
 8000c98:	f44f 728b 	mov.w	r2, #278	; 0x116
 8000c9c:	9202      	str	r2, [sp, #8]
 8000c9e:	4a2c      	ldr	r2, [pc, #176]	; (8000d50 <entryConsumer+0x108>)
 8000ca0:	9201      	str	r2, [sp, #4]
 8000ca2:	4a2c      	ldr	r2, [pc, #176]	; (8000d54 <entryConsumer+0x10c>)
 8000ca4:	9200      	str	r2, [sp, #0]
 8000ca6:	4a2d      	ldr	r2, [pc, #180]	; (8000d5c <entryConsumer+0x114>)
 8000ca8:	492a      	ldr	r1, [pc, #168]	; (8000d54 <entryConsumer+0x10c>)
 8000caa:	2003      	movs	r0, #3
 8000cac:	f002 f83e 	bl	8002d2c <stm_log_write>
      vModeInit(STDBY_MODE);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 fd2f 	bl	8001714 <vModeInit>
      switch (receivedMsgFromQueue[INDEX_COMMAND_OPCODE])
 8000cb6:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <entryConsumer+0x100>)
 8000cb8:	7a1b      	ldrb	r3, [r3, #8]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d828      	bhi.n	8000d12 <entryConsumer+0xca>
 8000cc0:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <entryConsumer+0x80>)
 8000cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc6:	bf00      	nop
 8000cc8:	08000cd9 	.word	0x08000cd9
 8000ccc:	08000ce5 	.word	0x08000ce5
 8000cd0:	08000cf7 	.word	0x08000cf7
 8000cd4:	08000d01 	.word	0x08000d01
      {
      case OPCODE_REQUEST_STATE:
        opcodeInquiry(receivedMsgFromQueue[INDEX_SEQUENCE_ID]);
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <entryConsumer+0x100>)
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f867 	bl	8000db0 <opcodeInquiry>
        break;
 8000ce2:	e029      	b.n	8000d38 <entryConsumer+0xf0>
      case OPCODE_REQUEST_RELAY_CONTROL:
        opcodeRelayControl(receivedMsgFromQueue[INDEX_DATA_RELAY_STATE], receivedMsgFromQueue[INDEX_SEQUENCE_ID]);
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <entryConsumer+0x100>)
 8000ce6:	799b      	ldrb	r3, [r3, #6]
 8000ce8:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <entryConsumer+0x100>)
 8000cea:	7912      	ldrb	r2, [r2, #4]
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f88a 	bl	8000e08 <opcodeRelayControl>
        break;
 8000cf4:	e020      	b.n	8000d38 <entryConsumer+0xf0>
      case OPCODE_REQUEST_MCU_RESET:
        opcodeMcuReset();
 8000cf6:	f000 fa51 	bl	800119c <opcodeMcuReset>
        updateDataToFlash();
 8000cfa:	f001 fbc1 	bl	8002480 <updateDataToFlash>
        break;
 8000cfe:	e01b      	b.n	8000d38 <entryConsumer+0xf0>
      case OPCODE_REQUEST_LOCATION_UPDATE:
        opcodeLocationUpdate(receivedMsgFromQueue[INDEX_DATA_LOCATION], receivedMsgFromQueue[INDEX_SEQUENCE_ID]);
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <entryConsumer+0x100>)
 8000d02:	795b      	ldrb	r3, [r3, #5]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <entryConsumer+0x100>)
 8000d06:	7912      	ldrb	r2, [r2, #4]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fa60 	bl	80011d0 <opcodeLocationUpdate>
        break;
 8000d10:	e012      	b.n	8000d38 <entryConsumer+0xf0>
      default:
        STM_LOGE("Consumer", "No service for opcode %d", receivedMsgFromQueue[INDEX_COMMAND_OPCODE]);
 8000d12:	f002 f923 	bl	8002f5c <HAL_GetTick>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <entryConsumer+0x100>)
 8000d1a:	7a12      	ldrb	r2, [r2, #8]
 8000d1c:	9203      	str	r2, [sp, #12]
 8000d1e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8000d22:	9202      	str	r2, [sp, #8]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <entryConsumer+0x108>)
 8000d26:	9201      	str	r2, [sp, #4]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <entryConsumer+0x10c>)
 8000d2a:	9200      	str	r2, [sp, #0]
 8000d2c:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <entryConsumer+0x118>)
 8000d2e:	4909      	ldr	r1, [pc, #36]	; (8000d54 <entryConsumer+0x10c>)
 8000d30:	2001      	movs	r0, #1
 8000d32:	f001 fffb 	bl	8002d2c <stm_log_write>
        break;
 8000d36:	bf00      	nop
      }

      vModeInit(RXCONTINUOUS_MODE);
 8000d38:	2005      	movs	r0, #5
 8000d3a:	f000 fceb 	bl	8001714 <vModeInit>
      updateDataToFlash();
 8000d3e:	f001 fb9f 	bl	8002480 <updateDataToFlash>
    err = osMessageQueueGet(myQueue01Handle, receivedMsgFromQueue, 0, portMAX_DELAY);
 8000d42:	e785      	b.n	8000c50 <entryConsumer+0x8>
 8000d44:	20003a08 	.word	0x20003a08
 8000d48:	20000094 	.word	0x20000094
 8000d4c:	0800c194 	.word	0x0800c194
 8000d50:	0800d16c 	.word	0x0800d16c
 8000d54:	0800c1c4 	.word	0x0800c1c4
 8000d58:	0800c198 	.word	0x0800c198
 8000d5c:	0800c1d0 	.word	0x0800c1d0
 8000d60:	0800c208 	.word	0x0800c208

08000d64 <entryPeriodic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPeriodic */
void entryPeriodic(void* argument)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  static const uint32_t tickToWait = pdMS_TO_TICKS(1000);
  static int count;
  /* Infinite loop */
  for (;;)
  {
    TOGGLE_LED();
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	480c      	ldr	r0, [pc, #48]	; (8000da0 <entryPeriodic+0x3c>)
 8000d70:	f003 fd52 	bl	8004818 <HAL_GPIO_TogglePin>
    if (++count >= 10) {
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <entryPeriodic+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <entryPeriodic+0x40>)
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <entryPeriodic+0x40>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b09      	cmp	r3, #9
 8000d84:	dd02      	ble.n	8000d8c <entryPeriodic+0x28>
      count = 0;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <entryPeriodic+0x40>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
      // STM_LOGI("Periodic", "relay: %s", WHICH_RELAY(thisNode.relayState));
    }
    HAL_IWDG_Refresh(&hiwdg);
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <entryPeriodic+0x44>)
 8000d8e:	f003 fdf3 	bl	8004978 <HAL_IWDG_Refresh>
    osDelay(tickToWait);
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <entryPeriodic+0x48>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f006 fa3e 	bl	8007218 <osDelay>
    TOGGLE_LED();
 8000d9c:	e7e6      	b.n	8000d6c <entryPeriodic+0x8>
 8000d9e:	bf00      	nop
 8000da0:	40010c00 	.word	0x40010c00
 8000da4:	200000a0 	.word	0x200000a0
 8000da8:	20003a10 	.word	0x20003a10
 8000dac:	0800d17c 	.word	0x0800d17c

08000db0 <opcodeInquiry>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void opcodeInquiry(uint8_t seqID)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  uint8_t msg[10];
  PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_OK, seqID, OPCODE_RESPOSNE_STATE);
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <opcodeInquiry+0x54>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	733b      	strb	r3, [r7, #12]
 8000dc0:	23ff      	movs	r3, #255	; 0xff
 8000dc2:	737b      	strb	r3, [r7, #13]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73bb      	strb	r3, [r7, #14]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	743b      	strb	r3, [r7, #16]
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <opcodeInquiry+0x54>)
 8000dd2:	785b      	ldrb	r3, [r3, #1]
 8000dd4:	747b      	strb	r3, [r7, #17]
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <opcodeInquiry+0x54>)
 8000dd8:	789b      	ldrb	r3, [r3, #2]
 8000dda:	74bb      	strb	r3, [r7, #18]
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <opcodeInquiry+0x54>)
 8000dde:	78db      	ldrb	r3, [r3, #3]
 8000de0:	74fb      	strb	r3, [r7, #19]
 8000de2:	2365      	movs	r3, #101	; 0x65
 8000de4:	753b      	strb	r3, [r7, #20]
 8000de6:	2300      	movs	r3, #0
 8000de8:	757b      	strb	r3, [r7, #21]
  LoRaTransmit(msg, PAYLOAD_LENGTH, LORA_DELAY);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000df2:	210a      	movs	r1, #10
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 ff8f 	bl	8001d18 <LoRaTransmit>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000000 	.word	0x20000000

08000e08 <opcodeRelayControl>:

static void opcodeRelayControl(uint8_t newState, uint8_t seqID)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b08d      	sub	sp, #52	; 0x34
 8000e0c:	af06      	add	r7, sp, #24
 8000e0e:	4603      	mov	r3, r0
 8000e10:	460a      	mov	r2, r1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	4613      	mov	r3, r2
 8000e16:	71bb      	strb	r3, [r7, #6]
  uint8_t msg[10];
  uint8_t countCheck = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	75fb      	strb	r3, [r7, #23]
  bool isAck = false;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	75bb      	strb	r3, [r7, #22]
  bool isChecking = true;
 8000e20:	2301      	movs	r3, #1
 8000e22:	757b      	strb	r3, [r7, #21]
  if (thisNode.relayState != newState)
 8000e24:	4b9c      	ldr	r3, [pc, #624]	; (8001098 <opcodeRelayControl+0x290>)
 8000e26:	789b      	ldrb	r3, [r3, #2]
 8000e28:	79fa      	ldrb	r2, [r7, #7]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	f000 811f 	beq.w	800106e <opcodeRelayControl+0x266>
  {
    STM_LOGI("Consumer", "State changes: {%s} to {%s}", WHICH_RELAY(thisNode.relayState), WHICH_RELAY(newState));
 8000e30:	f002 f894 	bl	8002f5c <HAL_GetTick>
 8000e34:	4601      	mov	r1, r0
 8000e36:	4b98      	ldr	r3, [pc, #608]	; (8001098 <opcodeRelayControl+0x290>)
 8000e38:	789b      	ldrb	r3, [r3, #2]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d007      	beq.n	8000e4e <opcodeRelayControl+0x46>
 8000e3e:	4b96      	ldr	r3, [pc, #600]	; (8001098 <opcodeRelayControl+0x290>)
 8000e40:	789b      	ldrb	r3, [r3, #2]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d101      	bne.n	8000e4a <opcodeRelayControl+0x42>
 8000e46:	4b95      	ldr	r3, [pc, #596]	; (800109c <opcodeRelayControl+0x294>)
 8000e48:	e002      	b.n	8000e50 <opcodeRelayControl+0x48>
 8000e4a:	4b95      	ldr	r3, [pc, #596]	; (80010a0 <opcodeRelayControl+0x298>)
 8000e4c:	e000      	b.n	8000e50 <opcodeRelayControl+0x48>
 8000e4e:	4b95      	ldr	r3, [pc, #596]	; (80010a4 <opcodeRelayControl+0x29c>)
 8000e50:	79fa      	ldrb	r2, [r7, #7]
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	d006      	beq.n	8000e64 <opcodeRelayControl+0x5c>
 8000e56:	79fa      	ldrb	r2, [r7, #7]
 8000e58:	2a01      	cmp	r2, #1
 8000e5a:	d101      	bne.n	8000e60 <opcodeRelayControl+0x58>
 8000e5c:	4a8f      	ldr	r2, [pc, #572]	; (800109c <opcodeRelayControl+0x294>)
 8000e5e:	e002      	b.n	8000e66 <opcodeRelayControl+0x5e>
 8000e60:	4a8f      	ldr	r2, [pc, #572]	; (80010a0 <opcodeRelayControl+0x298>)
 8000e62:	e000      	b.n	8000e66 <opcodeRelayControl+0x5e>
 8000e64:	4a8f      	ldr	r2, [pc, #572]	; (80010a4 <opcodeRelayControl+0x29c>)
 8000e66:	9204      	str	r2, [sp, #16]
 8000e68:	9303      	str	r3, [sp, #12]
 8000e6a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	4b8d      	ldr	r3, [pc, #564]	; (80010a8 <opcodeRelayControl+0x2a0>)
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	4b8d      	ldr	r3, [pc, #564]	; (80010ac <opcodeRelayControl+0x2a4>)
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4a8d      	ldr	r2, [pc, #564]	; (80010b0 <opcodeRelayControl+0x2a8>)
 8000e7c:	498b      	ldr	r1, [pc, #556]	; (80010ac <opcodeRelayControl+0x2a4>)
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f001 ff54 	bl	8002d2c <stm_log_write>
    thisNode.relayState = newState;
 8000e84:	4a84      	ldr	r2, [pc, #528]	; (8001098 <opcodeRelayControl+0x290>)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	7093      	strb	r3, [r2, #2]
    RELAY_CONTROL(thisNode.relayState);
 8000e8a:	4b83      	ldr	r3, [pc, #524]	; (8001098 <opcodeRelayControl+0x290>)
 8000e8c:	789b      	ldrb	r3, [r3, #2]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2102      	movs	r1, #2
 8000e92:	4888      	ldr	r0, [pc, #544]	; (80010b4 <opcodeRelayControl+0x2ac>)
 8000e94:	f003 fc8e 	bl	80047b4 <HAL_GPIO_WritePin>
    STM_LOGV("Consumer", "Checking relay ...");
 8000e98:	f002 f860 	bl	8002f5c <HAL_GetTick>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f240 1261 	movw	r2, #353	; 0x161
 8000ea2:	9202      	str	r2, [sp, #8]
 8000ea4:	4a80      	ldr	r2, [pc, #512]	; (80010a8 <opcodeRelayControl+0x2a0>)
 8000ea6:	9201      	str	r2, [sp, #4]
 8000ea8:	4a80      	ldr	r2, [pc, #512]	; (80010ac <opcodeRelayControl+0x2a4>)
 8000eaa:	9200      	str	r2, [sp, #0]
 8000eac:	4a82      	ldr	r2, [pc, #520]	; (80010b8 <opcodeRelayControl+0x2b0>)
 8000eae:	497f      	ldr	r1, [pc, #508]	; (80010ac <opcodeRelayControl+0x2a4>)
 8000eb0:	2005      	movs	r0, #5
 8000eb2:	f001 ff3b 	bl	8002d2c <stm_log_write>
    ADC_READ_LIGHTSENSOR();
 8000eb6:	4881      	ldr	r0, [pc, #516]	; (80010bc <opcodeRelayControl+0x2b4>)
 8000eb8:	f002 f9e8 	bl	800328c <HAL_ADC_Start_IT>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 80ca 	beq.w	8001058 <opcodeRelayControl+0x250>
 8000ec4:	f002 f84a 	bl	8002f5c <HAL_GetTick>
 8000ec8:	4604      	mov	r4, r0
 8000eca:	487c      	ldr	r0, [pc, #496]	; (80010bc <opcodeRelayControl+0x2b4>)
 8000ecc:	f002 f9de 	bl	800328c <HAL_ADC_Start_IT>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d009      	beq.n	8000eea <opcodeRelayControl+0xe2>
 8000ed6:	4879      	ldr	r0, [pc, #484]	; (80010bc <opcodeRelayControl+0x2b4>)
 8000ed8:	f002 f9d8 	bl	800328c <HAL_ADC_Start_IT>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d101      	bne.n	8000ee6 <opcodeRelayControl+0xde>
 8000ee2:	4b77      	ldr	r3, [pc, #476]	; (80010c0 <opcodeRelayControl+0x2b8>)
 8000ee4:	e002      	b.n	8000eec <opcodeRelayControl+0xe4>
 8000ee6:	4b77      	ldr	r3, [pc, #476]	; (80010c4 <opcodeRelayControl+0x2bc>)
 8000ee8:	e000      	b.n	8000eec <opcodeRelayControl+0xe4>
 8000eea:	4b77      	ldr	r3, [pc, #476]	; (80010c8 <opcodeRelayControl+0x2c0>)
 8000eec:	9303      	str	r3, [sp, #12]
 8000eee:	f44f 73b1 	mov.w	r3, #354	; 0x162
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	4b6c      	ldr	r3, [pc, #432]	; (80010a8 <opcodeRelayControl+0x2a0>)
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	4b74      	ldr	r3, [pc, #464]	; (80010cc <opcodeRelayControl+0x2c4>)
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	4623      	mov	r3, r4
 8000efe:	4a74      	ldr	r2, [pc, #464]	; (80010d0 <opcodeRelayControl+0x2c8>)
 8000f00:	4972      	ldr	r1, [pc, #456]	; (80010cc <opcodeRelayControl+0x2c4>)
 8000f02:	2001      	movs	r0, #1
 8000f04:	f001 ff12 	bl	8002d2c <stm_log_write>
    while (isChecking && ++countCheck <= 70) {
 8000f08:	e0a6      	b.n	8001058 <opcodeRelayControl+0x250>
      STM_LOGD("Consumer", "adcLightSensor: %d - count: %d", adcLightSensor, countCheck);
 8000f0a:	f002 f827 	bl	8002f5c <HAL_GetTick>
 8000f0e:	4601      	mov	r1, r0
 8000f10:	4b70      	ldr	r3, [pc, #448]	; (80010d4 <opcodeRelayControl+0x2cc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	7dfa      	ldrb	r2, [r7, #23]
 8000f16:	9204      	str	r2, [sp, #16]
 8000f18:	9303      	str	r3, [sp, #12]
 8000f1a:	f44f 73b2 	mov.w	r3, #356	; 0x164
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	4b61      	ldr	r3, [pc, #388]	; (80010a8 <opcodeRelayControl+0x2a0>)
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	4b61      	ldr	r3, [pc, #388]	; (80010ac <opcodeRelayControl+0x2a4>)
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4a6b      	ldr	r2, [pc, #428]	; (80010d8 <opcodeRelayControl+0x2d0>)
 8000f2c:	495f      	ldr	r1, [pc, #380]	; (80010ac <opcodeRelayControl+0x2a4>)
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f001 fefc 	bl	8002d2c <stm_log_write>

      if (((adcLightSensor < LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_ON)) ||
 8000f34:	4b67      	ldr	r3, [pc, #412]	; (80010d4 <opcodeRelayControl+0x2cc>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f3c:	d203      	bcs.n	8000f46 <opcodeRelayControl+0x13e>
 8000f3e:	4b56      	ldr	r3, [pc, #344]	; (8001098 <opcodeRelayControl+0x290>)
 8000f40:	789b      	ldrb	r3, [r3, #2]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d008      	beq.n	8000f58 <opcodeRelayControl+0x150>
        ((adcLightSensor >= LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_OFF)))
 8000f46:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <opcodeRelayControl+0x2cc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
      if (((adcLightSensor < LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_ON)) ||
 8000f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f4e:	d31a      	bcc.n	8000f86 <opcodeRelayControl+0x17e>
        ((adcLightSensor >= LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_OFF)))
 8000f50:	4b51      	ldr	r3, [pc, #324]	; (8001098 <opcodeRelayControl+0x290>)
 8000f52:	789b      	ldrb	r3, [r3, #2]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d116      	bne.n	8000f86 <opcodeRelayControl+0x17e>
      {
        isChecking = false;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	757b      	strb	r3, [r7, #21]
        isAck = true;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	75bb      	strb	r3, [r7, #22]
        thisNode.errCode = ERR_CODE_NONE;
 8000f60:	4b4d      	ldr	r3, [pc, #308]	; (8001098 <opcodeRelayControl+0x290>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	70da      	strb	r2, [r3, #3]
        STM_LOGD("Consumer", "----> check ok ");
 8000f66:	f001 fff9 	bl	8002f5c <HAL_GetTick>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8000f70:	9202      	str	r2, [sp, #8]
 8000f72:	4a4d      	ldr	r2, [pc, #308]	; (80010a8 <opcodeRelayControl+0x2a0>)
 8000f74:	9201      	str	r2, [sp, #4]
 8000f76:	4a4d      	ldr	r2, [pc, #308]	; (80010ac <opcodeRelayControl+0x2a4>)
 8000f78:	9200      	str	r2, [sp, #0]
 8000f7a:	4a58      	ldr	r2, [pc, #352]	; (80010dc <opcodeRelayControl+0x2d4>)
 8000f7c:	494b      	ldr	r1, [pc, #300]	; (80010ac <opcodeRelayControl+0x2a4>)
 8000f7e:	2004      	movs	r0, #4
 8000f80:	f001 fed4 	bl	8002d2c <stm_log_write>
 8000f84:	e068      	b.n	8001058 <opcodeRelayControl+0x250>
      }
      else if (countCheck == 70) {
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	2b46      	cmp	r3, #70	; 0x46
 8000f8a:	d12b      	bne.n	8000fe4 <opcodeRelayControl+0x1dc>
        STM_LOGE("Consumer", "----> check failed");
 8000f8c:	f001 ffe6 	bl	8002f5c <HAL_GetTick>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f240 126f 	movw	r2, #367	; 0x16f
 8000f96:	9202      	str	r2, [sp, #8]
 8000f98:	4a43      	ldr	r2, [pc, #268]	; (80010a8 <opcodeRelayControl+0x2a0>)
 8000f9a:	9201      	str	r2, [sp, #4]
 8000f9c:	4a43      	ldr	r2, [pc, #268]	; (80010ac <opcodeRelayControl+0x2a4>)
 8000f9e:	9200      	str	r2, [sp, #0]
 8000fa0:	4a4f      	ldr	r2, [pc, #316]	; (80010e0 <opcodeRelayControl+0x2d8>)
 8000fa2:	4942      	ldr	r1, [pc, #264]	; (80010ac <opcodeRelayControl+0x2a4>)
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f001 fec1 	bl	8002d2c <stm_log_write>
        isAck = false;
 8000faa:	2300      	movs	r3, #0
 8000fac:	75bb      	strb	r3, [r7, #22]
        thisNode.errCode = (thisNode.relayState == RELAY_STATE_ON) ? ERR_CODE_LIGHT_ON_FAILED : ERR_CODE_LIGHT_OFF_FAILED;
 8000fae:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <opcodeRelayControl+0x290>)
 8000fb0:	789b      	ldrb	r3, [r3, #2]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d101      	bne.n	8000fba <opcodeRelayControl+0x1b2>
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	e000      	b.n	8000fbc <opcodeRelayControl+0x1b4>
 8000fba:	2202      	movs	r2, #2
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <opcodeRelayControl+0x290>)
 8000fbe:	70da      	strb	r2, [r3, #3]
        thisNode.relayState = !thisNode.relayState;
 8000fc0:	4b35      	ldr	r3, [pc, #212]	; (8001098 <opcodeRelayControl+0x290>)
 8000fc2:	789b      	ldrb	r3, [r3, #2]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bf0c      	ite	eq
 8000fc8:	2301      	moveq	r3, #1
 8000fca:	2300      	movne	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b31      	ldr	r3, [pc, #196]	; (8001098 <opcodeRelayControl+0x290>)
 8000fd2:	709a      	strb	r2, [r3, #2]
        RELAY_CONTROL(thisNode.relayState);
 8000fd4:	4b30      	ldr	r3, [pc, #192]	; (8001098 <opcodeRelayControl+0x290>)
 8000fd6:	789b      	ldrb	r3, [r3, #2]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2102      	movs	r1, #2
 8000fdc:	4835      	ldr	r0, [pc, #212]	; (80010b4 <opcodeRelayControl+0x2ac>)
 8000fde:	f003 fbe9 	bl	80047b4 <HAL_GPIO_WritePin>
 8000fe2:	e039      	b.n	8001058 <opcodeRelayControl+0x250>
      }
      else {
        ADC_READ_LIGHTSENSOR();
 8000fe4:	4835      	ldr	r0, [pc, #212]	; (80010bc <opcodeRelayControl+0x2b4>)
 8000fe6:	f002 f951 	bl	800328c <HAL_ADC_Start_IT>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d021      	beq.n	8001034 <opcodeRelayControl+0x22c>
 8000ff0:	f001 ffb4 	bl	8002f5c <HAL_GetTick>
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	4831      	ldr	r0, [pc, #196]	; (80010bc <opcodeRelayControl+0x2b4>)
 8000ff8:	f002 f948 	bl	800328c <HAL_ADC_Start_IT>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d009      	beq.n	8001016 <opcodeRelayControl+0x20e>
 8001002:	482e      	ldr	r0, [pc, #184]	; (80010bc <opcodeRelayControl+0x2b4>)
 8001004:	f002 f942 	bl	800328c <HAL_ADC_Start_IT>
 8001008:	4603      	mov	r3, r0
 800100a:	2b02      	cmp	r3, #2
 800100c:	d101      	bne.n	8001012 <opcodeRelayControl+0x20a>
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <opcodeRelayControl+0x2b8>)
 8001010:	e002      	b.n	8001018 <opcodeRelayControl+0x210>
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <opcodeRelayControl+0x2bc>)
 8001014:	e000      	b.n	8001018 <opcodeRelayControl+0x210>
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <opcodeRelayControl+0x2c0>)
 8001018:	9303      	str	r3, [sp, #12]
 800101a:	f44f 73bb 	mov.w	r3, #374	; 0x176
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <opcodeRelayControl+0x2a0>)
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <opcodeRelayControl+0x2c4>)
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	4623      	mov	r3, r4
 800102a:	4a29      	ldr	r2, [pc, #164]	; (80010d0 <opcodeRelayControl+0x2c8>)
 800102c:	4927      	ldr	r1, [pc, #156]	; (80010cc <opcodeRelayControl+0x2c4>)
 800102e:	2001      	movs	r0, #1
 8001030:	f001 fe7c 	bl	8002d2c <stm_log_write>
        osDelay(10);
 8001034:	200a      	movs	r0, #10
 8001036:	f006 f8ef 	bl	8007218 <osDelay>
        STM_LOGD("Consumer", "----> check again");
 800103a:	f001 ff8f 	bl	8002f5c <HAL_GetTick>
 800103e:	4603      	mov	r3, r0
 8001040:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001044:	9202      	str	r2, [sp, #8]
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <opcodeRelayControl+0x2a0>)
 8001048:	9201      	str	r2, [sp, #4]
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <opcodeRelayControl+0x2a4>)
 800104c:	9200      	str	r2, [sp, #0]
 800104e:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <opcodeRelayControl+0x2dc>)
 8001050:	4916      	ldr	r1, [pc, #88]	; (80010ac <opcodeRelayControl+0x2a4>)
 8001052:	2004      	movs	r0, #4
 8001054:	f001 fe6a 	bl	8002d2c <stm_log_write>
    while (isChecking && ++countCheck <= 70) {
 8001058:	7d7b      	ldrb	r3, [r7, #21]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d053      	beq.n	8001106 <opcodeRelayControl+0x2fe>
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	3301      	adds	r3, #1
 8001062:	75fb      	strb	r3, [r7, #23]
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	2b46      	cmp	r3, #70	; 0x46
 8001068:	f67f af4f 	bls.w	8000f0a <opcodeRelayControl+0x102>
 800106c:	e04b      	b.n	8001106 <opcodeRelayControl+0x2fe>
      }
    }
  }
  else
  {
    isAck = true;
 800106e:	2301      	movs	r3, #1
 8001070:	75bb      	strb	r3, [r7, #22]
    thisNode.errCode = ERR_CODE_NONE;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <opcodeRelayControl+0x290>)
 8001074:	2200      	movs	r2, #0
 8001076:	70da      	strb	r2, [r3, #3]
    STM_LOGV("Consumer", "----> already %s", WHICH_RELAY(thisNode.relayState));
 8001078:	f001 ff70 	bl	8002f5c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <opcodeRelayControl+0x290>)
 8001080:	789b      	ldrb	r3, [r3, #2]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d030      	beq.n	80010e8 <opcodeRelayControl+0x2e0>
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <opcodeRelayControl+0x290>)
 8001088:	789b      	ldrb	r3, [r3, #2]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <opcodeRelayControl+0x28a>
 800108e:	4b03      	ldr	r3, [pc, #12]	; (800109c <opcodeRelayControl+0x294>)
 8001090:	e02b      	b.n	80010ea <opcodeRelayControl+0x2e2>
 8001092:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <opcodeRelayControl+0x298>)
 8001094:	e029      	b.n	80010ea <opcodeRelayControl+0x2e2>
 8001096:	bf00      	nop
 8001098:	20000000 	.word	0x20000000
 800109c:	0800c244 	.word	0x0800c244
 80010a0:	0800c250 	.word	0x0800c250
 80010a4:	0800c260 	.word	0x0800c260
 80010a8:	0800d180 	.word	0x0800d180
 80010ac:	0800c1c4 	.word	0x0800c1c4
 80010b0:	0800c26c 	.word	0x0800c26c
 80010b4:	40010800 	.word	0x40010800
 80010b8:	0800c2ac 	.word	0x0800c2ac
 80010bc:	200039c8 	.word	0x200039c8
 80010c0:	0800c2dc 	.word	0x0800c2dc
 80010c4:	0800c2e8 	.word	0x0800c2e8
 80010c8:	0800c2f4 	.word	0x0800c2f4
 80010cc:	0800c330 	.word	0x0800c330
 80010d0:	0800c300 	.word	0x0800c300
 80010d4:	20003ac0 	.word	0x20003ac0
 80010d8:	0800c340 	.word	0x0800c340
 80010dc:	0800c384 	.word	0x0800c384
 80010e0:	0800c3b8 	.word	0x0800c3b8
 80010e4:	0800c3f0 	.word	0x0800c3f0
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <opcodeRelayControl+0x380>)
 80010ea:	9303      	str	r3, [sp, #12]
 80010ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <opcodeRelayControl+0x384>)
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <opcodeRelayControl+0x388>)
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	4613      	mov	r3, r2
 80010fc:	4a25      	ldr	r2, [pc, #148]	; (8001194 <opcodeRelayControl+0x38c>)
 80010fe:	4924      	ldr	r1, [pc, #144]	; (8001190 <opcodeRelayControl+0x388>)
 8001100:	2005      	movs	r0, #5
 8001102:	f001 fe13 	bl	8002d2c <stm_log_write>
  }

  if (isAck) {
 8001106:	7dbb      	ldrb	r3, [r7, #22]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d018      	beq.n	800113e <opcodeRelayControl+0x336>
    PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_OK, seqID, OPCODE_RESPOSNE_RELAY_CONTROL);
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <opcodeRelayControl+0x390>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	723b      	strb	r3, [r7, #8]
 8001112:	23ff      	movs	r3, #255	; 0xff
 8001114:	727b      	strb	r3, [r7, #9]
 8001116:	2301      	movs	r3, #1
 8001118:	72bb      	strb	r3, [r7, #10]
 800111a:	2301      	movs	r3, #1
 800111c:	72fb      	strb	r3, [r7, #11]
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	733b      	strb	r3, [r7, #12]
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <opcodeRelayControl+0x390>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	737b      	strb	r3, [r7, #13]
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <opcodeRelayControl+0x390>)
 800112a:	789b      	ldrb	r3, [r3, #2]
 800112c:	73bb      	strb	r3, [r7, #14]
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <opcodeRelayControl+0x390>)
 8001130:	78db      	ldrb	r3, [r3, #3]
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	2366      	movs	r3, #102	; 0x66
 8001136:	743b      	strb	r3, [r7, #16]
 8001138:	2300      	movs	r3, #0
 800113a:	747b      	strb	r3, [r7, #17]
 800113c:	e017      	b.n	800116e <opcodeRelayControl+0x366>
  }
  else {
    PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_FAILED, seqID, OPCODE_RESPOSNE_RELAY_CONTROL);
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <opcodeRelayControl+0x390>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	723b      	strb	r3, [r7, #8]
 8001144:	23ff      	movs	r3, #255	; 0xff
 8001146:	727b      	strb	r3, [r7, #9]
 8001148:	2301      	movs	r3, #1
 800114a:	72bb      	strb	r3, [r7, #10]
 800114c:	2302      	movs	r3, #2
 800114e:	72fb      	strb	r3, [r7, #11]
 8001150:	79bb      	ldrb	r3, [r7, #6]
 8001152:	733b      	strb	r3, [r7, #12]
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <opcodeRelayControl+0x390>)
 8001156:	785b      	ldrb	r3, [r3, #1]
 8001158:	737b      	strb	r3, [r7, #13]
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <opcodeRelayControl+0x390>)
 800115c:	789b      	ldrb	r3, [r3, #2]
 800115e:	73bb      	strb	r3, [r7, #14]
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <opcodeRelayControl+0x390>)
 8001162:	78db      	ldrb	r3, [r3, #3]
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	2366      	movs	r3, #102	; 0x66
 8001168:	743b      	strb	r3, [r7, #16]
 800116a:	2300      	movs	r3, #0
 800116c:	747b      	strb	r3, [r7, #17]
  }
  LoRaTransmit(msg, PAYLOAD_LENGTH, LORA_DELAY);
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001176:	210a      	movs	r1, #10
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fdcd 	bl	8001d18 <LoRaTransmit>
}
 800117e:	bf00      	nop
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}
 8001186:	bf00      	nop
 8001188:	0800c260 	.word	0x0800c260
 800118c:	0800d180 	.word	0x0800d180
 8001190:	0800c1c4 	.word	0x0800c1c4
 8001194:	0800c428 	.word	0x0800c428
 8001198:	20000000 	.word	0x20000000

0800119c <opcodeMcuReset>:

static void opcodeMcuReset(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af04      	add	r7, sp, #16
  STM_LOGV("Consumer", "Perform self reset");
 80011a2:	f001 fedb 	bl	8002f5c <HAL_GetTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80011ac:	9202      	str	r2, [sp, #8]
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <opcodeMcuReset+0x28>)
 80011b0:	9201      	str	r2, [sp, #4]
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <opcodeMcuReset+0x2c>)
 80011b4:	9200      	str	r2, [sp, #0]
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <opcodeMcuReset+0x30>)
 80011b8:	4903      	ldr	r1, [pc, #12]	; (80011c8 <opcodeMcuReset+0x2c>)
 80011ba:	2005      	movs	r0, #5
 80011bc:	f001 fdb6 	bl	8002d2c <stm_log_write>
  NVIC_SystemReset();
 80011c0:	f7ff fb72 	bl	80008a8 <__NVIC_SystemReset>
 80011c4:	0800d194 	.word	0x0800d194
 80011c8:	0800c1c4 	.word	0x0800c1c4
 80011cc:	0800c458 	.word	0x0800c458

080011d0 <opcodeLocationUpdate>:
}

static void opcodeLocationUpdate(uint8_t newLocation, uint8_t seqID)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af04      	add	r7, sp, #16
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
  uint8_t msg[10];
  if (newLocation != LOCATION_NONE)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d02d      	beq.n	8001242 <opcodeLocationUpdate+0x72>
  {
    thisNode.location = newLocation;
 80011e6:	4a32      	ldr	r2, [pc, #200]	; (80012b0 <opcodeLocationUpdate+0xe0>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	7053      	strb	r3, [r2, #1]
    STM_LOGV("Consumer", "----> Update location %d", newLocation);
 80011ec:	f001 feb6 	bl	8002f5c <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	9303      	str	r3, [sp, #12]
 80011f6:	f44f 73cc 	mov.w	r3, #408	; 0x198
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <opcodeLocationUpdate+0xe4>)
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <opcodeLocationUpdate+0xe8>)
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	4613      	mov	r3, r2
 8001206:	4a2d      	ldr	r2, [pc, #180]	; (80012bc <opcodeLocationUpdate+0xec>)
 8001208:	492b      	ldr	r1, [pc, #172]	; (80012b8 <opcodeLocationUpdate+0xe8>)
 800120a:	2005      	movs	r0, #5
 800120c:	f001 fd8e 	bl	8002d2c <stm_log_write>
    PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_OK, seqID, OPCODE_RESPOSNE_LOCATION_UPDATE);
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <opcodeLocationUpdate+0xe0>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	733b      	strb	r3, [r7, #12]
 8001216:	23ff      	movs	r3, #255	; 0xff
 8001218:	737b      	strb	r3, [r7, #13]
 800121a:	2301      	movs	r3, #1
 800121c:	73bb      	strb	r3, [r7, #14]
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	743b      	strb	r3, [r7, #16]
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <opcodeLocationUpdate+0xe0>)
 8001228:	785b      	ldrb	r3, [r3, #1]
 800122a:	747b      	strb	r3, [r7, #17]
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <opcodeLocationUpdate+0xe0>)
 800122e:	789b      	ldrb	r3, [r3, #2]
 8001230:	74bb      	strb	r3, [r7, #18]
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <opcodeLocationUpdate+0xe0>)
 8001234:	78db      	ldrb	r3, [r3, #3]
 8001236:	74fb      	strb	r3, [r7, #19]
 8001238:	2368      	movs	r3, #104	; 0x68
 800123a:	753b      	strb	r3, [r7, #20]
 800123c:	2300      	movs	r3, #0
 800123e:	757b      	strb	r3, [r7, #21]
 8001240:	e029      	b.n	8001296 <opcodeLocationUpdate+0xc6>
  }
  else
  {
    STM_LOGV("Consumer", "Invalid data %d", newLocation);
 8001242:	f001 fe8b 	bl	8002f5c <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	9303      	str	r3, [sp, #12]
 800124c:	f240 139d 	movw	r3, #413	; 0x19d
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <opcodeLocationUpdate+0xe4>)
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <opcodeLocationUpdate+0xe8>)
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4613      	mov	r3, r2
 800125c:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <opcodeLocationUpdate+0xf0>)
 800125e:	4916      	ldr	r1, [pc, #88]	; (80012b8 <opcodeLocationUpdate+0xe8>)
 8001260:	2005      	movs	r0, #5
 8001262:	f001 fd63 	bl	8002d2c <stm_log_write>
    PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_FAILED, seqID, OPCODE_RESPOSNE_LOCATION_UPDATE);
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <opcodeLocationUpdate+0xe0>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	733b      	strb	r3, [r7, #12]
 800126c:	23ff      	movs	r3, #255	; 0xff
 800126e:	737b      	strb	r3, [r7, #13]
 8001270:	2301      	movs	r3, #1
 8001272:	73bb      	strb	r3, [r7, #14]
 8001274:	2302      	movs	r3, #2
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	743b      	strb	r3, [r7, #16]
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <opcodeLocationUpdate+0xe0>)
 800127e:	785b      	ldrb	r3, [r3, #1]
 8001280:	747b      	strb	r3, [r7, #17]
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <opcodeLocationUpdate+0xe0>)
 8001284:	789b      	ldrb	r3, [r3, #2]
 8001286:	74bb      	strb	r3, [r7, #18]
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <opcodeLocationUpdate+0xe0>)
 800128a:	78db      	ldrb	r3, [r3, #3]
 800128c:	74fb      	strb	r3, [r7, #19]
 800128e:	2368      	movs	r3, #104	; 0x68
 8001290:	753b      	strb	r3, [r7, #20]
 8001292:	2300      	movs	r3, #0
 8001294:	757b      	strb	r3, [r7, #21]
  }
  LoRaTransmit(msg, PAYLOAD_LENGTH, LORA_DELAY);
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800129e:	210a      	movs	r1, #10
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fd39 	bl	8001d18 <LoRaTransmit>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000000 	.word	0x20000000
 80012b4:	0800d1a4 	.word	0x0800d1a4
 80012b8:	0800c1c4 	.word	0x0800c1c4
 80012bc:	0800c488 	.word	0x0800c488
 80012c0:	0800c4c0 	.word	0x0800c4c0

080012c4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d8:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <MX_GPIO_Init+0x154>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a4e      	ldr	r2, [pc, #312]	; (8001418 <MX_GPIO_Init+0x154>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <MX_GPIO_Init+0x154>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f0:	4b49      	ldr	r3, [pc, #292]	; (8001418 <MX_GPIO_Init+0x154>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a48      	ldr	r2, [pc, #288]	; (8001418 <MX_GPIO_Init+0x154>)
 80012f6:	f043 0320 	orr.w	r3, r3, #32
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b46      	ldr	r3, [pc, #280]	; (8001418 <MX_GPIO_Init+0x154>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0320 	and.w	r3, r3, #32
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	4b43      	ldr	r3, [pc, #268]	; (8001418 <MX_GPIO_Init+0x154>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a42      	ldr	r2, [pc, #264]	; (8001418 <MX_GPIO_Init+0x154>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b40      	ldr	r3, [pc, #256]	; (8001418 <MX_GPIO_Init+0x154>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <MX_GPIO_Init+0x154>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a3c      	ldr	r2, [pc, #240]	; (8001418 <MX_GPIO_Init+0x154>)
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <MX_GPIO_Init+0x154>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_OUTPUT_GPIO_Port, RELAY_OUTPUT_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2102      	movs	r1, #2
 800133c:	4837      	ldr	r0, [pc, #220]	; (800141c <MX_GPIO_Init+0x158>)
 800133e:	f003 fa39 	bl	80047b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	2110      	movs	r1, #16
 8001346:	4835      	ldr	r0, [pc, #212]	; (800141c <MX_GPIO_Init+0x158>)
 8001348:	f003 fa34 	bl	80047b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2101      	movs	r1, #1
 8001350:	4833      	ldr	r0, [pc, #204]	; (8001420 <MX_GPIO_Init+0x15c>)
 8001352:	f003 fa2f 	bl	80047b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001356:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800135a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135c:	2303      	movs	r3, #3
 800135e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	482f      	ldr	r0, [pc, #188]	; (8001424 <MX_GPIO_Init+0x160>)
 8001368:	f002 ffb4 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RELAY_OUTPUT_Pin|SPI1_NSS_Pin;
 800136c:	2312      	movs	r3, #18
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	4826      	ldr	r0, [pc, #152]	; (800141c <MX_GPIO_Init+0x158>)
 8001384:	f002 ffa6 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8001388:	2304      	movs	r3, #4
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	4820      	ldr	r0, [pc, #128]	; (800141c <MX_GPIO_Init+0x158>)
 800139c:	f002 ff9a 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTERRUPT_LORA_Pin;
 80013a0:	2308      	movs	r3, #8
 80013a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <MX_GPIO_Init+0x164>)
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERRUPT_LORA_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	481a      	ldr	r0, [pc, #104]	; (800141c <MX_GPIO_Init+0x158>)
 80013b4:	f002 ff8e 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OUTPUT_Pin;
 80013b8:	2301      	movs	r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2302      	movs	r3, #2
 80013c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4619      	mov	r1, r3
 80013ce:	4814      	ldr	r0, [pc, #80]	; (8001420 <MX_GPIO_Init+0x15c>)
 80013d0:	f002 ff80 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80013d4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80013d8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013da:	2303      	movs	r3, #3
 80013dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	4619      	mov	r1, r3
 80013e4:	480e      	ldr	r0, [pc, #56]	; (8001420 <MX_GPIO_Init+0x15c>)
 80013e6:	f002 ff75 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80013ea:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 80013ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f0:	2303      	movs	r3, #3
 80013f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4619      	mov	r1, r3
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <MX_GPIO_Init+0x158>)
 80013fc:	f002 ff6a 	bl	80042d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2105      	movs	r1, #5
 8001404:	2009      	movs	r0, #9
 8001406:	f002 fc49 	bl	8003c9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800140a:	2009      	movs	r0, #9
 800140c:	f002 fc72 	bl	8003cf4 <HAL_NVIC_EnableIRQ>

}
 8001410:	bf00      	nop
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000
 800141c:	40010800 	.word	0x40010800
 8001420:	40010c00 	.word	0x40010c00
 8001424:	40011000 	.word	0x40011000
 8001428:	10110000 	.word	0x10110000

0800142c <vSpi1Write>:
  * @param ucData: Data need write into registers or fifo of Lora
  * @retval None
  */

void vSpi1Write(uint8_t ucAddress, uint8_t ucData)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af04      	add	r7, sp, #16
 8001432:	4603      	mov	r3, r0
 8001434:	460a      	mov	r2, r1
 8001436:	71fb      	strb	r3, [r7, #7]
 8001438:	4613      	mov	r3, r2
 800143a:	71bb      	strb	r3, [r7, #6]
  uint8_t ucDataMatrix[2];
  ucAddress |= SPI1_WRITE; /* A wnr bit, which is 1 for write access and 0 for read access */
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001442:	71fb      	strb	r3, [r7, #7]
  ucDataMatrix[0] = ucAddress;
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	733b      	strb	r3, [r7, #12]
  ucDataMatrix[1] = ucData;
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2110      	movs	r1, #16
 8001450:	4822      	ldr	r0, [pc, #136]	; (80014dc <vSpi1Write+0xb0>)
 8001452:	f003 f9af 	bl	80047b4 <HAL_GPIO_WritePin>
  HAL_Delay(DELAY_SPI);
 8001456:	2003      	movs	r0, #3
 8001458:	f001 fd8a 	bl	8002f70 <HAL_Delay>
  ERROR_CHECK(HAL_SPI_Transmit(&hspi1, (uint8_t*)ucDataMatrix, sizeof(ucDataMatrix), 100));
 800145c:	f107 010c 	add.w	r1, r7, #12
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	2202      	movs	r2, #2
 8001464:	481e      	ldr	r0, [pc, #120]	; (80014e0 <vSpi1Write+0xb4>)
 8001466:	f004 fb11 	bl	8005a8c <HAL_SPI_Transmit>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d028      	beq.n	80014c2 <vSpi1Write+0x96>
 8001470:	f001 fd74 	bl	8002f5c <HAL_GetTick>
 8001474:	4604      	mov	r4, r0
 8001476:	f107 010c 	add.w	r1, r7, #12
 800147a:	2364      	movs	r3, #100	; 0x64
 800147c:	2202      	movs	r2, #2
 800147e:	4818      	ldr	r0, [pc, #96]	; (80014e0 <vSpi1Write+0xb4>)
 8001480:	f004 fb04 	bl	8005a8c <HAL_SPI_Transmit>
 8001484:	4603      	mov	r3, r0
 8001486:	2b01      	cmp	r3, #1
 8001488:	d00d      	beq.n	80014a6 <vSpi1Write+0x7a>
 800148a:	f107 010c 	add.w	r1, r7, #12
 800148e:	2364      	movs	r3, #100	; 0x64
 8001490:	2202      	movs	r2, #2
 8001492:	4813      	ldr	r0, [pc, #76]	; (80014e0 <vSpi1Write+0xb4>)
 8001494:	f004 fafa 	bl	8005a8c <HAL_SPI_Transmit>
 8001498:	4603      	mov	r3, r0
 800149a:	2b02      	cmp	r3, #2
 800149c:	d101      	bne.n	80014a2 <vSpi1Write+0x76>
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <vSpi1Write+0xb8>)
 80014a0:	e002      	b.n	80014a8 <vSpi1Write+0x7c>
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <vSpi1Write+0xbc>)
 80014a4:	e000      	b.n	80014a8 <vSpi1Write+0x7c>
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <vSpi1Write+0xc0>)
 80014a8:	9303      	str	r3, [sp, #12]
 80014aa:	231f      	movs	r3, #31
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <vSpi1Write+0xc4>)
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <vSpi1Write+0xc8>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	4623      	mov	r3, r4
 80014b8:	4a0f      	ldr	r2, [pc, #60]	; (80014f8 <vSpi1Write+0xcc>)
 80014ba:	490e      	ldr	r1, [pc, #56]	; (80014f4 <vSpi1Write+0xc8>)
 80014bc:	2001      	movs	r0, #1
 80014be:	f001 fc35 	bl	8002d2c <stm_log_write>
  HAL_Delay(DELAY_SPI);
 80014c2:	2003      	movs	r0, #3
 80014c4:	f001 fd54 	bl	8002f70 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2110      	movs	r1, #16
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <vSpi1Write+0xb0>)
 80014ce:	f003 f971 	bl	80047b4 <HAL_GPIO_WritePin>
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd90      	pop	{r4, r7, pc}
 80014da:	bf00      	nop
 80014dc:	40010800 	.word	0x40010800
 80014e0:	20003a20 	.word	0x20003a20
 80014e4:	0800c4ec 	.word	0x0800c4ec
 80014e8:	0800c4f8 	.word	0x0800c4f8
 80014ec:	0800c504 	.word	0x0800c504
 80014f0:	0800d1bc 	.word	0x0800d1bc
 80014f4:	0800c540 	.word	0x0800c540
 80014f8:	0800c510 	.word	0x0800c510

080014fc <ucSpi1Read>:
  * @brief Read Data Function from Lora Module
  * @param ucAddress: Address registers or fifo of Lora Module
  * @retval ucData: Data contained in registers or fifo of Lora Module
  */
uint8_t ucSpi1Read(uint8_t ucAddress)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af04      	add	r7, sp, #16
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
  ucAddress &= SPI1_READ; /* A wnr bit, which is 1 for write access and 0 for read access */
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001510:	b2db      	uxtb	r3, r3
 8001512:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2110      	movs	r1, #16
 8001518:	483a      	ldr	r0, [pc, #232]	; (8001604 <ucSpi1Read+0x108>)
 800151a:	f003 f94b 	bl	80047b4 <HAL_GPIO_WritePin>
  HAL_Delay(DELAY_SPI);
 800151e:	2003      	movs	r0, #3
 8001520:	f001 fd26 	bl	8002f70 <HAL_Delay>
  ERROR_CHECK(HAL_SPI_Transmit(&hspi1, (uint8_t*)&ucAddress, sizeof(ucAddress), 100));
 8001524:	1df9      	adds	r1, r7, #7
 8001526:	2364      	movs	r3, #100	; 0x64
 8001528:	2201      	movs	r2, #1
 800152a:	4837      	ldr	r0, [pc, #220]	; (8001608 <ucSpi1Read+0x10c>)
 800152c:	f004 faae 	bl	8005a8c <HAL_SPI_Transmit>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d026      	beq.n	8001584 <ucSpi1Read+0x88>
 8001536:	f001 fd11 	bl	8002f5c <HAL_GetTick>
 800153a:	4604      	mov	r4, r0
 800153c:	1df9      	adds	r1, r7, #7
 800153e:	2364      	movs	r3, #100	; 0x64
 8001540:	2201      	movs	r2, #1
 8001542:	4831      	ldr	r0, [pc, #196]	; (8001608 <ucSpi1Read+0x10c>)
 8001544:	f004 faa2 	bl	8005a8c <HAL_SPI_Transmit>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d00c      	beq.n	8001568 <ucSpi1Read+0x6c>
 800154e:	1df9      	adds	r1, r7, #7
 8001550:	2364      	movs	r3, #100	; 0x64
 8001552:	2201      	movs	r2, #1
 8001554:	482c      	ldr	r0, [pc, #176]	; (8001608 <ucSpi1Read+0x10c>)
 8001556:	f004 fa99 	bl	8005a8c <HAL_SPI_Transmit>
 800155a:	4603      	mov	r3, r0
 800155c:	2b02      	cmp	r3, #2
 800155e:	d101      	bne.n	8001564 <ucSpi1Read+0x68>
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <ucSpi1Read+0x110>)
 8001562:	e002      	b.n	800156a <ucSpi1Read+0x6e>
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <ucSpi1Read+0x114>)
 8001566:	e000      	b.n	800156a <ucSpi1Read+0x6e>
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <ucSpi1Read+0x118>)
 800156a:	9303      	str	r3, [sp, #12]
 800156c:	232f      	movs	r3, #47	; 0x2f
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <ucSpi1Read+0x11c>)
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	4b29      	ldr	r3, [pc, #164]	; (800161c <ucSpi1Read+0x120>)
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	4623      	mov	r3, r4
 800157a:	4a29      	ldr	r2, [pc, #164]	; (8001620 <ucSpi1Read+0x124>)
 800157c:	4927      	ldr	r1, [pc, #156]	; (800161c <ucSpi1Read+0x120>)
 800157e:	2001      	movs	r0, #1
 8001580:	f001 fbd4 	bl	8002d2c <stm_log_write>
  ERROR_CHECK(HAL_SPI_Receive(&hspi1, (uint8_t*)&ucData, sizeof(ucData), 100));
 8001584:	f107 010f 	add.w	r1, r7, #15
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	2201      	movs	r2, #1
 800158c:	481e      	ldr	r0, [pc, #120]	; (8001608 <ucSpi1Read+0x10c>)
 800158e:	f004 fbc9 	bl	8005d24 <HAL_SPI_Receive>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d028      	beq.n	80015ea <ucSpi1Read+0xee>
 8001598:	f001 fce0 	bl	8002f5c <HAL_GetTick>
 800159c:	4604      	mov	r4, r0
 800159e:	f107 010f 	add.w	r1, r7, #15
 80015a2:	2364      	movs	r3, #100	; 0x64
 80015a4:	2201      	movs	r2, #1
 80015a6:	4818      	ldr	r0, [pc, #96]	; (8001608 <ucSpi1Read+0x10c>)
 80015a8:	f004 fbbc 	bl	8005d24 <HAL_SPI_Receive>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d00d      	beq.n	80015ce <ucSpi1Read+0xd2>
 80015b2:	f107 010f 	add.w	r1, r7, #15
 80015b6:	2364      	movs	r3, #100	; 0x64
 80015b8:	2201      	movs	r2, #1
 80015ba:	4813      	ldr	r0, [pc, #76]	; (8001608 <ucSpi1Read+0x10c>)
 80015bc:	f004 fbb2 	bl	8005d24 <HAL_SPI_Receive>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d101      	bne.n	80015ca <ucSpi1Read+0xce>
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <ucSpi1Read+0x110>)
 80015c8:	e002      	b.n	80015d0 <ucSpi1Read+0xd4>
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <ucSpi1Read+0x114>)
 80015cc:	e000      	b.n	80015d0 <ucSpi1Read+0xd4>
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <ucSpi1Read+0x118>)
 80015d0:	9303      	str	r3, [sp, #12]
 80015d2:	2330      	movs	r3, #48	; 0x30
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <ucSpi1Read+0x11c>)
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <ucSpi1Read+0x120>)
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	4623      	mov	r3, r4
 80015e0:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <ucSpi1Read+0x124>)
 80015e2:	490e      	ldr	r1, [pc, #56]	; (800161c <ucSpi1Read+0x120>)
 80015e4:	2001      	movs	r0, #1
 80015e6:	f001 fba1 	bl	8002d2c <stm_log_write>
  HAL_Delay(DELAY_SPI);
 80015ea:	2003      	movs	r0, #3
 80015ec:	f001 fcc0 	bl	8002f70 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2110      	movs	r1, #16
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <ucSpi1Read+0x108>)
 80015f6:	f003 f8dd 	bl	80047b4 <HAL_GPIO_WritePin>
  return ucData;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	40010800 	.word	0x40010800
 8001608:	20003a20 	.word	0x20003a20
 800160c:	0800c4ec 	.word	0x0800c4ec
 8001610:	0800c4f8 	.word	0x0800c4f8
 8001614:	0800c504 	.word	0x0800c504
 8001618:	0800d1c8 	.word	0x0800d1c8
 800161c:	0800c540 	.word	0x0800c540
 8001620:	0800c510 	.word	0x0800c510

08001624 <vLongRangeModeInit>:
  * @brief Mode Initialization LoraTM or FSK/OOK
  * @param ucMode: Value of mode: LoraTM if 1, FSK/OOK if 0
  * @retval None
  */
void vLongRangeModeInit(uint8_t ucLongRangeMode)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  vModeInit(SLEEP_MODE);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 f870 	bl	8001714 <vModeInit>
  uint8_t ucData = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff ff5f 	bl	80014fc <ucSpi1Read>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x7F;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001648:	73fb      	strb	r3, [r7, #15]
  if (ucLongRangeMode == 0u || ucLongRangeMode == 1u)
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <vLongRangeModeInit+0x32>
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d10c      	bne.n	8001670 <vLongRangeModeInit+0x4c>
  {
    ucData |= (ucLongRangeMode << 7);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	01db      	lsls	r3, r3, #7
 800165a:	b25a      	sxtb	r2, r3
 800165c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001660:	4313      	orrs	r3, r2
 8001662:	b25b      	sxtb	r3, r3
 8001664:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	4619      	mov	r1, r3
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff fede 	bl	800142c <vSpi1Write>
  }
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <vAccessSharedRegInit>:
  * @brief Access Low Frequency Mode Initialization
  * @param ucAccessSharedReg: Value of mode
  * @retval None
  */
void vAccessSharedRegInit(uint8_t ucAccessSharedReg)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8001686:	2001      	movs	r0, #1
 8001688:	f7ff ff38 	bl	80014fc <ucSpi1Read>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xBF;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001696:	73fb      	strb	r3, [r7, #15]
  if (ucAccessSharedReg == 0u || ucAccessSharedReg == 1u)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <vAccessSharedRegInit+0x2c>
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d10c      	bne.n	80016be <vAccessSharedRegInit+0x46>
  {
    ucData |= (ucAccessSharedReg << 6);
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	019b      	lsls	r3, r3, #6
 80016a8:	b25a      	sxtb	r2, r3
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	4619      	mov	r1, r3
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff feb7 	bl	800142c <vSpi1Write>
  }
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <vLowFrequencyModeOnInit>:
  * @brief Access Low Frequency Mode Initialization
  * @param ucLowFrequencyModeOn: Value of mode
  * @retval None
  */
void vLowFrequencyModeOnInit(uint8_t ucLowFrequencyModeOn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 80016d4:	2001      	movs	r0, #1
 80016d6:	f7ff ff11 	bl	80014fc <ucSpi1Read>
 80016da:	4603      	mov	r3, r0
 80016dc:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF7;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	f023 0308 	bic.w	r3, r3, #8
 80016e4:	73fb      	strb	r3, [r7, #15]
  if (ucLowFrequencyModeOn == 0u || ucLowFrequencyModeOn == 1u)
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <vLowFrequencyModeOnInit+0x2c>
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d10c      	bne.n	800170c <vLowFrequencyModeOnInit+0x46>
  {
    ucData |= (ucLowFrequencyModeOn << 3);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	b25a      	sxtb	r2, r3
 80016f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	4619      	mov	r1, r3
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fe90 	bl	800142c <vSpi1Write>
  }
}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <vModeInit>:
  * @brief Device Modes Initialization
  * @param ucDeviceMode: Value of mode
  * @retval None
  */
void vModeInit(uint8_t ucMode)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af04      	add	r7, sp, #16
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  STM_LOGD("LoRa", "LoRa -> %s", WHICH_MODE(ucMode));
 800171e:	f001 fc1d 	bl	8002f5c <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d010      	beq.n	800174c <vModeInit+0x38>
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d00b      	beq.n	8001748 <vModeInit+0x34>
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d006      	beq.n	8001744 <vModeInit+0x30>
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b05      	cmp	r3, #5
 800173a:	d101      	bne.n	8001740 <vModeInit+0x2c>
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <vModeInit+0x8c>)
 800173e:	e006      	b.n	800174e <vModeInit+0x3a>
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <vModeInit+0x90>)
 8001742:	e004      	b.n	800174e <vModeInit+0x3a>
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <vModeInit+0x94>)
 8001746:	e002      	b.n	800174e <vModeInit+0x3a>
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <vModeInit+0x98>)
 800174a:	e000      	b.n	800174e <vModeInit+0x3a>
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <vModeInit+0x9c>)
 800174e:	9303      	str	r3, [sp, #12]
 8001750:	2371      	movs	r3, #113	; 0x71
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <vModeInit+0xa0>)
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <vModeInit+0xa4>)
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	4a17      	ldr	r2, [pc, #92]	; (80017bc <vModeInit+0xa8>)
 8001760:	4915      	ldr	r1, [pc, #84]	; (80017b8 <vModeInit+0xa4>)
 8001762:	2004      	movs	r0, #4
 8001764:	f001 fae2 	bl	8002d2c <stm_log_write>
  uint8_t ucData = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 800176c:	2001      	movs	r0, #1
 800176e:	f7ff fec5 	bl	80014fc <ucSpi1Read>
 8001772:	4603      	mov	r3, r0
 8001774:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	f023 0307 	bic.w	r3, r3, #7
 800177c:	73fb      	strb	r3, [r7, #15]
  if (ucMode >= 0u && ucMode <= 7u)
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b07      	cmp	r3, #7
 8001782:	d808      	bhi.n	8001796 <vModeInit+0x82>
  {
    ucData |= ucMode;
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4313      	orrs	r3, r2
 800178a:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	4619      	mov	r1, r3
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff fe4b 	bl	800142c <vSpi1Write>
  }
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	0800c550 	.word	0x0800c550
 80017a4:	0800c558 	.word	0x0800c558
 80017a8:	0800c560 	.word	0x0800c560
 80017ac:	0800c564 	.word	0x0800c564
 80017b0:	0800c56c 	.word	0x0800c56c
 80017b4:	0800d1d4 	.word	0x0800d1d4
 80017b8:	0800c5a4 	.word	0x0800c5a4
 80017bc:	0800c574 	.word	0x0800c574

080017c0 <vFrfInit>:
  * @brief RF carrier frequency Initialization
  * @param uiFrf: Value of RF carrier frequency
  * @retval None
  */
void vFrfInit(unsigned int uiFrf)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  vSpi1Write(RegFrfMsb, (uint8_t)(uiFrf >> 16));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4619      	mov	r1, r3
 80017d0:	2006      	movs	r0, #6
 80017d2:	f7ff fe2b 	bl	800142c <vSpi1Write>
  vSpi1Write(RegFrfMid, (uint8_t)(uiFrf >> 8));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4619      	mov	r1, r3
 80017de:	2007      	movs	r0, #7
 80017e0:	f7ff fe24 	bl	800142c <vSpi1Write>
  vSpi1Write(RegFrfLsb, (uint8_t)uiFrf);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4619      	mov	r1, r3
 80017ea:	2008      	movs	r0, #8
 80017ec:	f7ff fe1e 	bl	800142c <vSpi1Write>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <vPaSelectInit>:
  * @brief Power Amplifier Initialization
  * @param ucPaSelect: Power Amplifier Value
  * @retval None
  */
void vPaSelectInit(uint8_t ucPaSelect)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaConfig);
 8001806:	2009      	movs	r0, #9
 8001808:	f7ff fe78 	bl	80014fc <ucSpi1Read>
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x7F;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001816:	73fb      	strb	r3, [r7, #15]
  if (ucPaSelect == 0u || ucPaSelect == 1u)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <vPaSelectInit+0x2c>
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d10c      	bne.n	800183e <vPaSelectInit+0x46>
  {
    ucData |= (ucPaSelect << 7);
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	01db      	lsls	r3, r3, #7
 8001828:	b25a      	sxtb	r2, r3
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4313      	orrs	r3, r2
 8001830:	b25b      	sxtb	r3, r3
 8001832:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaConfig, ucData);
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	4619      	mov	r1, r3
 8001838:	2009      	movs	r0, #9
 800183a:	f7ff fdf7 	bl	800142c <vSpi1Write>
  }
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <vOutputPowerInit>:
  * @brief Output Power Initialization
  * @param ucOutputPower: Output Power Value
  * @retval None
  */
void vOutputPowerInit(uint8_t ucOutputPower)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaConfig);
 8001854:	2009      	movs	r0, #9
 8001856:	f7ff fe51 	bl	80014fc <ucSpi1Read>
 800185a:	4603      	mov	r3, r0
 800185c:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF0;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	f023 030f 	bic.w	r3, r3, #15
 8001864:	73fb      	strb	r3, [r7, #15]
  if (ucOutputPower >= 0u && ucOutputPower <= 15u)
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d808      	bhi.n	800187e <vOutputPowerInit+0x38>
  {
    ucData |= ucOutputPower;
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	4313      	orrs	r3, r2
 8001872:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaConfig, ucData);
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	4619      	mov	r1, r3
 8001878:	2009      	movs	r0, #9
 800187a:	f7ff fdd7 	bl	800142c <vSpi1Write>
  }
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <vOcpTrimInit>:
  * @brief  Overload Current Protection Initialization
  * @param ucOcpTrim: OcpTrim Value
  * @retval None
  */
void vOcpTrimInit(uint8_t ucOcpTrim)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOcp);
 8001894:	200b      	movs	r0, #11
 8001896:	f7ff fe31 	bl	80014fc <ucSpi1Read>
 800189a:	4603      	mov	r3, r0
 800189c:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xE0;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	f023 031f 	bic.w	r3, r3, #31
 80018a4:	73fb      	strb	r3, [r7, #15]
  if (ucOcpTrim >= 0u && ucOcpTrim <= 31u)
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	2b1f      	cmp	r3, #31
 80018aa:	d808      	bhi.n	80018be <vOcpTrimInit+0x38>
  {
    ucData |= ucOcpTrim;
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOcp, ucData);
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	4619      	mov	r1, r3
 80018b8:	200b      	movs	r0, #11
 80018ba:	f7ff fdb7 	bl	800142c <vSpi1Write>
  }
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <vFifoTxBaseAddrInit>:
  * @brief Base address in FIFO data buffer for TX modulator Initialization
  * @param ucFifoTxBaseAddr: Base Address Value for Tx
  * @retval None
  */
void vFifoTxBaseAddrInit(uint8_t ucFifoTxBaseAddr)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegFifoTxBaseAddr, ucFifoTxBaseAddr);
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	4619      	mov	r1, r3
 80018d4:	200e      	movs	r0, #14
 80018d6:	f7ff fda9 	bl	800142c <vSpi1Write>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <vFifoRxBaseAddrInit>:
  * @brief Base address in FIFO data buffer for RX modulator Initialization
  * @param ucFifoRxBaseAddr: Base Address Value for Rx
  * @retval None
  */
void vFifoRxBaseAddrInit(uint8_t ucFifoRxBaseAddr)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegFifoRxBaseAddr, ucFifoRxBaseAddr);
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4619      	mov	r1, r3
 80018f0:	200f      	movs	r0, #15
 80018f2:	f7ff fd9b 	bl	800142c <vSpi1Write>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <vCodingRateInit>:
  * @brief Error coding rate Initialization
  * @param ucCodingRate: Error coding rate Value
  * @retval None
  */
void vCodingRateInit(uint8_t ucCodingRate)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig1);
 800190c:	201d      	movs	r0, #29
 800190e:	f7ff fdf5 	bl	80014fc <ucSpi1Read>
 8001912:	4603      	mov	r3, r0
 8001914:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF1;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	f023 030e 	bic.w	r3, r3, #14
 800191c:	73fb      	strb	r3, [r7, #15]
  if (ucCodingRate >= 1u && ucCodingRate <= 4u)
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00f      	beq.n	8001944 <vCodingRateInit+0x46>
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	2b04      	cmp	r3, #4
 8001928:	d80c      	bhi.n	8001944 <vCodingRateInit+0x46>
  {
    ucData |= (ucCodingRate << 1);
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	b25a      	sxtb	r2, r3
 8001930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001934:	4313      	orrs	r3, r2
 8001936:	b25b      	sxtb	r3, r3
 8001938:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig1, ucData);
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	4619      	mov	r1, r3
 800193e:	201d      	movs	r0, #29
 8001940:	f7ff fd74 	bl	800142c <vSpi1Write>
  }
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <vImplicitHeaderModeOnInit>:
  * @brief Explicit or Implicit Header mode Initialization
  * @param ucHeaderMode: Error coding rate Value
  * @retval None
  */
void vImplicitHeaderModeOnInit(uint8_t ucHeaderMode)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig1);
 800195a:	201d      	movs	r0, #29
 800195c:	f7ff fdce 	bl	80014fc <ucSpi1Read>
 8001960:	4603      	mov	r3, r0
 8001962:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xFE;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
  if (ucHeaderMode == 0u || ucHeaderMode == 1u)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <vImplicitHeaderModeOnInit+0x2c>
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d108      	bne.n	800198a <vImplicitHeaderModeOnInit+0x3e>
  {
    ucData |= ucHeaderMode;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4313      	orrs	r3, r2
 800197e:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig1, ucData);
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	4619      	mov	r1, r3
 8001984:	201d      	movs	r0, #29
 8001986:	f7ff fd51 	bl	800142c <vSpi1Write>
  }
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <vSpreadingFactorInit>:
  * @brief Spreading Factor rate Initialization
  * @param ucSpreadingFactor: Spreading Factor Value
  * @retval None
  */
void vSpreadingFactorInit(uint8_t ucSpreadingFactor)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig2);
 80019a0:	201e      	movs	r0, #30
 80019a2:	f7ff fdab 	bl	80014fc <ucSpi1Read>
 80019a6:	4603      	mov	r3, r0
 80019a8:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x0F;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	73fb      	strb	r3, [r7, #15]
  if (ucSpreadingFactor >= 6u && ucSpreadingFactor <= 12u)
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d90f      	bls.n	80019d8 <vSpreadingFactorInit+0x46>
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	d80c      	bhi.n	80019d8 <vSpreadingFactorInit+0x46>
  {
    ucData |= (ucSpreadingFactor << 4);
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	b25a      	sxtb	r2, r3
 80019c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b25b      	sxtb	r3, r3
 80019cc:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig2, ucData);
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	4619      	mov	r1, r3
 80019d2:	201e      	movs	r0, #30
 80019d4:	f7ff fd2a 	bl	800142c <vSpi1Write>
  }
}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <vRxPayloadCrcOnInit>:
  * @brief CRC generation and check on payload Initialization
  * @param ucRxPayloadCrcOn: CRCON Value
  * @retval None
  */
void vRxPayloadCrcOnInit(uint8_t ucRxPayloadCrcOn)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig2);
 80019ee:	201e      	movs	r0, #30
 80019f0:	f7ff fd84 	bl	80014fc <ucSpi1Read>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xFB;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	f023 0304 	bic.w	r3, r3, #4
 80019fe:	73fb      	strb	r3, [r7, #15]
  if (ucRxPayloadCrcOn == 0u || ucRxPayloadCrcOn == 1u)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <vRxPayloadCrcOnInit+0x2c>
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d10c      	bne.n	8001a26 <vRxPayloadCrcOnInit+0x46>
  {
    ucData |= (ucRxPayloadCrcOn << 2);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	b25a      	sxtb	r2, r3
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig2, ucData);
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	201e      	movs	r0, #30
 8001a22:	f7ff fd03 	bl	800142c <vSpi1Write>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <vPreambleLengthInit>:
  * @brief Preamble Length Initialization
  * @param ucPreambleLength: Preamble Length Value
  * @retval None
  */
void vPreambleLengthInit(uint16_t ucPreambleLength)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	80fb      	strh	r3, [r7, #6]
  vSpi1Write(RegPreambleMsb, (uint8_t)(ucPreambleLength >> 8));
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4619      	mov	r1, r3
 8001a42:	2020      	movs	r0, #32
 8001a44:	f7ff fcf2 	bl	800142c <vSpi1Write>
  vSpi1Write(RegPreambleLsb, (uint8_t)(ucPreambleLength));
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	2021      	movs	r0, #33	; 0x21
 8001a50:	f7ff fcec 	bl	800142c <vSpi1Write>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <vPayloadLengthInit>:
  * @brief Payload Length Initialization
  * @param ucPayloadLength: Payload Length Value
  * @retval None
  */
void vPayloadLengthInit(uint8_t ucPayloadLength)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegPayloadLength, ucPayloadLength);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	2022      	movs	r0, #34	; 0x22
 8001a6c:	f7ff fcde 	bl	800142c <vSpi1Write>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <vDetectionOptimizeInit>:
  * @brief  LoRa Detection Optimize Initialization
  * @param ucDetectionOptimize: Detection Optimize Value
  * @retval None
  */
void vDetectionOptimizeInit(uint8_t ucDetectionOptimize)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegDetectOptimize);
 8001a86:	2031      	movs	r0, #49	; 0x31
 8001a88:	f7ff fd38 	bl	80014fc <ucSpi1Read>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	f023 0307 	bic.w	r3, r3, #7
 8001a96:	73fb      	strb	r3, [r7, #15]
  if (ucDetectionOptimize == 3u || ucDetectionOptimize == 5u)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d002      	beq.n	8001aa4 <vDetectionOptimizeInit+0x2c>
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d108      	bne.n	8001ab6 <vDetectionOptimizeInit+0x3e>
  {
    ucData |= ucDetectionOptimize;
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegDetectOptimize, ucData);
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	2031      	movs	r0, #49	; 0x31
 8001ab2:	f7ff fcbb 	bl	800142c <vSpi1Write>
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <vDetectionThresholdInit>:
  * @brief LoRa detection threshold Initialization
  * @param ucDetectionThreshold: LoRa detection threshold Value
  * @retval None
  */
void vDetectionThresholdInit(uint8_t ucDetectionThreshold)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	71fb      	strb	r3, [r7, #7]
  if (ucDetectionThreshold == 0x0A || ucDetectionThreshold == 0x0C)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	2b0a      	cmp	r3, #10
 8001acc:	d002      	beq.n	8001ad4 <vDetectionThresholdInit+0x16>
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b0c      	cmp	r3, #12
 8001ad2:	d104      	bne.n	8001ade <vDetectionThresholdInit+0x20>
  {
    vSpi1Write(RegDetectionThreshold, ucDetectionThreshold);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	2037      	movs	r0, #55	; 0x37
 8001ada:	f7ff fca7 	bl	800142c <vSpi1Write>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <vTcxoInputOnInit>:
  * @brief Controls the crystal oscillator Initialization
  * @param ucTcxoInputOn: Tcxo Input On Value
  * @retval None
  */
void vTcxoInputOnInit(uint8_t ucTcxoInputOn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegTcxo);
 8001af4:	204b      	movs	r0, #75	; 0x4b
 8001af6:	f7ff fd01 	bl	80014fc <ucSpi1Read>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xEF;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	f023 0310 	bic.w	r3, r3, #16
 8001b04:	73fb      	strb	r3, [r7, #15]
  if (ucTcxoInputOn == 0u || ucTcxoInputOn == 1u)
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <vTcxoInputOnInit+0x2c>
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d10c      	bne.n	8001b2c <vTcxoInputOnInit+0x46>
  {
    ucData |= (ucTcxoInputOn << 4);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	b25a      	sxtb	r2, r3
 8001b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegTcxo, ucData);
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	4619      	mov	r1, r3
 8001b26:	204b      	movs	r0, #75	; 0x4b
 8001b28:	f7ff fc80 	bl	800142c <vSpi1Write>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <vPaDacInit>:
  * @brief Enables the +20dBm option on PA_BOOST pin Initialization
  * @param ucPaDac: Pa Dac Value
  * @retval None
  */
void vPaDacInit(uint8_t ucPaDac)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaDac);
 8001b42:	204d      	movs	r0, #77	; 0x4d
 8001b44:	f7ff fcda 	bl	80014fc <ucSpi1Read>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	f023 0307 	bic.w	r3, r3, #7
 8001b52:	73fb      	strb	r3, [r7, #15]
  if (ucPaDac == 4u || ucPaDac == 7u)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d002      	beq.n	8001b60 <vPaDacInit+0x2c>
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b07      	cmp	r3, #7
 8001b5e:	d108      	bne.n	8001b72 <vPaDacInit+0x3e>
  {
    ucData |= ucPaDac;
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaDac, ucData);
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	204d      	movs	r0, #77	; 0x4d
 8001b6e:	f7ff fc5d 	bl	800142c <vSpi1Write>
  }
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <vLoraInit>:
  * @brief Lora Module Initialization
  * @param: None
  * @retval: None
  */
void vLoraInit(void)
{
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7e:	b093      	sub	sp, #76	; 0x4c
 8001b80:	af0e      	add	r7, sp, #56	; 0x38

  STM_LOGD("LoRa", "LoRa init");
 8001b82:	f001 f9eb 	bl	8002f5c <HAL_GetTick>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f240 423c 	movw	r2, #1084	; 0x43c
 8001b8c:	9202      	str	r2, [sp, #8]
 8001b8e:	4a5c      	ldr	r2, [pc, #368]	; (8001d00 <vLoraInit+0x184>)
 8001b90:	9201      	str	r2, [sp, #4]
 8001b92:	4a5c      	ldr	r2, [pc, #368]	; (8001d04 <vLoraInit+0x188>)
 8001b94:	9200      	str	r2, [sp, #0]
 8001b96:	4a5c      	ldr	r2, [pc, #368]	; (8001d08 <vLoraInit+0x18c>)
 8001b98:	495a      	ldr	r1, [pc, #360]	; (8001d04 <vLoraInit+0x188>)
 8001b9a:	2004      	movs	r0, #4
 8001b9c:	f001 f8c6 	bl	8002d2c <stm_log_write>

  vLongRangeModeInit(LORA_MODE); /*  Init Module Lora into Lora TM Mode */
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff fd3f 	bl	8001624 <vLongRangeModeInit>
  // LORA_GET_REGISTER(RegOpMode);

  vModeInit(STDBY_MODE);                              /* Init Module Lora into Standby Mode */
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f7ff fdb4 	bl	8001714 <vModeInit>
  vAccessSharedRegInit(ACCESS_LORA_REGISTERS);        /* Access LoRa registers page 0x0D: 0x3F */
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff fd63 	bl	8001678 <vAccessSharedRegInit>
  vLowFrequencyModeOnInit(ACCESS_LOW_FREQUENCY_MODE); /* Access Low Frequency Mode registers */
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f7ff fd87 	bl	80016c6 <vLowFrequencyModeOnInit>
  // LORA_GET_REGISTER(RegOpMode);

  vFrfInit(RF_FREQUENCY); /*  Init RF carrier frequency */
 8001bb8:	f44f 00d9 	mov.w	r0, #7110656	; 0x6c8000
 8001bbc:	f7ff fe00 	bl	80017c0 <vFrfInit>
  // LORA_GET_REGISTER(RegFrfMsb);
  // LORA_GET_REGISTER(RegFrfMid);
  // LORA_GET_REGISTER(RegFrfLsb);

  vPaSelectInit(PA_BOOST); /* Output power is limited to +20 dBm */
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7ff fe19 	bl	80017f8 <vPaSelectInit>
  // vMaxPowerInit(MAX_POWER);
  vOutputPowerInit(OUTPUT_POWER); /* Pout=17-(15-OutputPower) */
 8001bc6:	200f      	movs	r0, #15
 8001bc8:	f7ff fe3d 	bl	8001846 <vOutputPowerInit>

  // vPaRampInit(PA_RAMP);
  // LORA_GET_REGISTER(RegPaRamp);

  // vOcpOnInit(OCP_ON); /* OCP enabled */
  vOcpTrimInit(OCP_TRIM); /* Trimming of OCP current: Imax = 240mA */
 8001bcc:	201b      	movs	r0, #27
 8001bce:	f7ff fe5a 	bl	8001886 <vOcpTrimInit>
  // vLnaGainInit(G1); /* LNA gain setting: G1 = maximum gain */
  // vLnaBoostLfInit(LNA_BOOST_LF); /* Low Frequency (RFI_LF) LNA current adjustment Default LNA current */
  // vLnaBoostHfInit(LNA_BOOST_HF); /* High Frequency (RFI_HF) LNA current adjustment Boost on, 150% LNA current */
  // LORA_GET_REGISTER(RegLna);

  vFifoTxBaseAddrInit(FIFO_TX_BASE_ADDR); /* Write base address in FIFO data buffer for TX modulator */
 8001bd2:	2080      	movs	r0, #128	; 0x80
 8001bd4:	f7ff fe77 	bl	80018c6 <vFifoTxBaseAddrInit>
  // LORA_GET_REGISTER(RegFifoTxBaseAddr);

  vFifoRxBaseAddrInit(FIFO_RX_BASE_ADDR); /* Read base address in FIFO data buffer for RX demodulator */
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff fe82 	bl	80018e2 <vFifoRxBaseAddrInit>

  // vIrqFlagsMaskInit(IRQ_FLAGS_MASK); /* Disable all interrupts mask */
  // LORA_GET_REGISTER(RegIrqFlagsMask);

  // vBandWidthInit(BANDWIDTH_125K); /*  Signal bandwidth: BANDWIDTH_125K */
  vCodingRateInit(CODING_RATE_4_5); /* ANCHOR Error coding rate 4/5 */
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff fe8d 	bl	80018fe <vCodingRateInit>

  // vBandWidthInit(BANDWIDTH_125K);
  // vCodingRateInit(CODING_RATE_4_5);
  vImplicitHeaderModeOnInit(IMPLICIT_HEADER); /* ANCHOR Init Implicit Header mode */
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff feb1 	bl	800194c <vImplicitHeaderModeOnInit>
  // LORA_GET_REGISTER(RegModemConfig1);

  vSpreadingFactorInit(SPREADING_FACTOR_6_64); /* ANCHOR SF rate 64 chips / symbol */
 8001bea:	2006      	movs	r0, #6
 8001bec:	f7ff fed1 	bl	8001992 <vSpreadingFactorInit>
  // vTxContinuousModeInit(TX_SINGLE); /* ANCHOR Normal mode, a single packet is sent */
  vRxPayloadCrcOnInit(CRC_ENABLE); /* ANCHOR Enable CRC generation and check on payload */
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff fef5 	bl	80019e0 <vRxPayloadCrcOnInit>

  // vSymbTimeoutInit(RX_TIMEOUT); /* ANCHOR RX operation time-out */
  // // LORA_GET_REGISTER(RegModemConfig2);
  // // LORA_GET_REGISTER(RegSymbTimeoutLsb);

  vPreambleLengthInit(PREAMBLE_LENGTH); /* ANCHOR Preamble length = PreambleLength + 4.25 Symbols */
 8001bf6:	2008      	movs	r0, #8
 8001bf8:	f7ff ff19 	bl	8001a2e <vPreambleLengthInit>
  // // LORA_GET_REGISTER(RegPreambleMsb);
  // // LORA_GET_REGISTER(RegPreambleLsb);

  vPayloadLengthInit(PAYLOAD_LENGTH); /*  Init Payload length */
 8001bfc:	200a      	movs	r0, #10
 8001bfe:	f7ff ff2d 	bl	8001a5c <vPayloadLengthInit>

  // vLowDataRateOptimizeInit(LOW_DATA_RATE_OPTIMIZE); /*  Enabled; mandated for when the symbol length exceeds16ms */
  // vAgcAutoOnInit(AGC_AUTO); /* 0 -> LNA gain set by register LnaGain 1 -> LNA gain set by the internal AGC loop*/
  // // LORA_GET_REGISTER(RegModemConfig3);

  vDetectionOptimizeInit(LORA_DETECTION_OPTIMIZE); /* LoRa Detection Optimize 0x03 -> SF7 to SF12; 0x05 -> SF6 */
 8001c02:	2005      	movs	r0, #5
 8001c04:	f7ff ff38 	bl	8001a78 <vDetectionOptimizeInit>
  // LORA_GET_REGISTER(RegDetectOptimize);

  // vInvertIQInit(INVERT_IQ); /* ANCHOR Invert the LoRa I and Q signals */
  // // LORA_GET_REGISTER(RegInvertIQ);

  vDetectionThresholdInit(LORA_DETECTION_THRESHOLD); /* ANCHOR LoRa detection threshold 0x0A -> SF7 to SF12; 0x0C -> SF6 */
 8001c08:	200c      	movs	r0, #12
 8001c0a:	f7ff ff58 	bl	8001abe <vDetectionThresholdInit>

  // vMapPreambleDetect(PREAMBBLE_DETECT_INTERRUPT);
  // // LORA_GET_REGISTER(RegTcxo);
  // printf("RegTcxo = 0x%x\r\n", ucData);

  vTcxoInputOnInit(XTAL_INPUT); /* ANCHOR Controls the crystal oscillator */
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff ff69 	bl	8001ae6 <vTcxoInputOnInit>
  // LORA_GET_REGISTER(RegTcxo);

  vPaDacInit(PA_DAC); /* Enables the +20dBm option on PA_BOOST pin */
 8001c14:	2007      	movs	r0, #7
 8001c16:	f7ff ff8d 	bl	8001b34 <vPaDacInit>
  // LORA_GET_REGISTER(RegPaDac);
  // LORA_GET_REGISTER(RegLna);
  // LORA_GET_REGISTER(RegVersion);
  // LORA_GET_REGISTER(RegOpMode);
  LORA_GET_REGISTER(RegVersion);
 8001c1a:	2042      	movs	r0, #66	; 0x42
 8001c1c:	f7ff fc6e 	bl	80014fc <ucSpi1Read>
 8001c20:	4603      	mov	r3, r0
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	f001 f99a 	bl	8002f5c <HAL_GetTick>
 8001c28:	4686      	mov	lr, r0
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	da01      	bge.n	8001c3a <vLoraInit+0xbe>
 8001c36:	2231      	movs	r2, #49	; 0x31
 8001c38:	e000      	b.n	8001c3c <vLoraInit+0xc0>
 8001c3a:	2230      	movs	r2, #48	; 0x30
 8001c3c:	7bf9      	ldrb	r1, [r7, #15]
 8001c3e:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8001c42:	2900      	cmp	r1, #0
 8001c44:	d001      	beq.n	8001c4a <vLoraInit+0xce>
 8001c46:	2131      	movs	r1, #49	; 0x31
 8001c48:	e000      	b.n	8001c4c <vLoraInit+0xd0>
 8001c4a:	2130      	movs	r1, #48	; 0x30
 8001c4c:	7bf8      	ldrb	r0, [r7, #15]
 8001c4e:	f000 0020 	and.w	r0, r0, #32
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d001      	beq.n	8001c5a <vLoraInit+0xde>
 8001c56:	2031      	movs	r0, #49	; 0x31
 8001c58:	e000      	b.n	8001c5c <vLoraInit+0xe0>
 8001c5a:	2030      	movs	r0, #48	; 0x30
 8001c5c:	7bfc      	ldrb	r4, [r7, #15]
 8001c5e:	f004 0410 	and.w	r4, r4, #16
 8001c62:	2c00      	cmp	r4, #0
 8001c64:	d001      	beq.n	8001c6a <vLoraInit+0xee>
 8001c66:	2431      	movs	r4, #49	; 0x31
 8001c68:	e000      	b.n	8001c6c <vLoraInit+0xf0>
 8001c6a:	2430      	movs	r4, #48	; 0x30
 8001c6c:	7bfd      	ldrb	r5, [r7, #15]
 8001c6e:	f005 0508 	and.w	r5, r5, #8
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d001      	beq.n	8001c7a <vLoraInit+0xfe>
 8001c76:	2531      	movs	r5, #49	; 0x31
 8001c78:	e000      	b.n	8001c7c <vLoraInit+0x100>
 8001c7a:	2530      	movs	r5, #48	; 0x30
 8001c7c:	7bfe      	ldrb	r6, [r7, #15]
 8001c7e:	f006 0604 	and.w	r6, r6, #4
 8001c82:	2e00      	cmp	r6, #0
 8001c84:	d001      	beq.n	8001c8a <vLoraInit+0x10e>
 8001c86:	2631      	movs	r6, #49	; 0x31
 8001c88:	e000      	b.n	8001c8c <vLoraInit+0x110>
 8001c8a:	2630      	movs	r6, #48	; 0x30
 8001c8c:	f897 c00f 	ldrb.w	ip, [r7, #15]
 8001c90:	f00c 0c02 	and.w	ip, ip, #2
 8001c94:	f1bc 0f00 	cmp.w	ip, #0
 8001c98:	d002      	beq.n	8001ca0 <vLoraInit+0x124>
 8001c9a:	2331      	movs	r3, #49	; 0x31
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	e001      	b.n	8001ca4 <vLoraInit+0x128>
 8001ca0:	2330      	movs	r3, #48	; 0x30
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	f897 c00f 	ldrb.w	ip, [r7, #15]
 8001ca8:	f00c 0c01 	and.w	ip, ip, #1
 8001cac:	f1bc 0f00 	cmp.w	ip, #0
 8001cb0:	d001      	beq.n	8001cb6 <vLoraInit+0x13a>
 8001cb2:	2331      	movs	r3, #49	; 0x31
 8001cb4:	e000      	b.n	8001cb8 <vLoraInit+0x13c>
 8001cb6:	2330      	movs	r3, #48	; 0x30
 8001cb8:	930c      	str	r3, [sp, #48]	; 0x30
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8001cbe:	960a      	str	r6, [sp, #40]	; 0x28
 8001cc0:	9509      	str	r5, [sp, #36]	; 0x24
 8001cc2:	9408      	str	r4, [sp, #32]
 8001cc4:	9007      	str	r0, [sp, #28]
 8001cc6:	9106      	str	r1, [sp, #24]
 8001cc8:	9205      	str	r2, [sp, #20]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	9304      	str	r3, [sp, #16]
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <vLoraInit+0x190>)
 8001cd0:	9303      	str	r3, [sp, #12]
 8001cd2:	f240 43b7 	movw	r3, #1207	; 0x4b7
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <vLoraInit+0x184>)
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <vLoraInit+0x194>)
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	4673      	mov	r3, lr
 8001ce2:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <vLoraInit+0x198>)
 8001ce4:	490a      	ldr	r1, [pc, #40]	; (8001d10 <vLoraInit+0x194>)
 8001ce6:	2005      	movs	r0, #5
 8001ce8:	f001 f820 	bl	8002d2c <stm_log_write>

  /* Reset Rx Pointer */
  vModeInit(STDBY_MODE);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff fd11 	bl	8001714 <vModeInit>
  vModeInit(RXCONTINUOUS_MODE);
 8001cf2:	2005      	movs	r0, #5
 8001cf4:	f7ff fd0e 	bl	8001714 <vModeInit>
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d00:	0800d1e0 	.word	0x0800d1e0
 8001d04:	0800c5a4 	.word	0x0800c5a4
 8001d08:	0800c5ac 	.word	0x0800c5ac
 8001d0c:	0800c620 	.word	0x0800c620
 8001d10:	0800c618 	.word	0x0800c618
 8001d14:	0800c5dc 	.word	0x0800c5dc

08001d18 <LoRaTransmit>:
{
  return (ucSpi1Read(RegModemConfig2) & SPREADING_FACTOR_Msk) >> SPREADING_FACTOR_MskPos;
}

void LoRaTransmit(uint8_t* data, uint8_t size, uint32_t timeoutMs)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08e      	sub	sp, #56	; 0x38
 8001d1c:	af06      	add	r7, sp, #24
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	460b      	mov	r3, r1
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	72fb      	strb	r3, [r7, #11]
  bool isTransmitOk = true;
 8001d26:	2301      	movs	r3, #1
 8001d28:	77fb      	strb	r3, [r7, #31]
  vModeInit(STDBY_MODE);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f7ff fcf2 	bl	8001714 <vModeInit>

  /* STANDBY MODE */
  vSpi1Write(RegFifoAddrPtr, FIFO_TX_BASE_ADDR); /* Set FifoPtrAddr to FifoTxPtrBase */
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	200d      	movs	r0, #13
 8001d34:	f7ff fb7a 	bl	800142c <vSpi1Write>
  /* WRITE DATA FIFO */
  for (size_t i = 0u; i < size; i++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	e0ca      	b.n	8001ed4 <LoRaTransmit+0x1bc>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	3b02      	subs	r3, #2
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	f200 80a4 	bhi.w	8001e90 <LoRaTransmit+0x178>
 8001d48:	a201      	add	r2, pc, #4	; (adr r2, 8001d50 <LoRaTransmit+0x38>)
 8001d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4e:	bf00      	nop
 8001d50:	08001d69 	.word	0x08001d69
 8001d54:	08001db3 	.word	0x08001db3
 8001d58:	08001e91 	.word	0x08001e91
 8001d5c:	08001e91 	.word	0x08001e91
 8001d60:	08001dfd 	.word	0x08001dfd
 8001d64:	08001e47 	.word	0x08001e47
  {
    switch (i) {
    case INDEX_MSG_TYPE:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_MSG_TYPE(*(data + i)));
 8001d68:	f001 f8f8 	bl	8002f5c <HAL_GetTick>
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	4413      	add	r3, r2
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <LoRaTransmit+0x76>
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	4413      	add	r3, r2
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <LoRaTransmit+0x72>
 8001d86:	4b80      	ldr	r3, [pc, #512]	; (8001f88 <LoRaTransmit+0x270>)
 8001d88:	e002      	b.n	8001d90 <LoRaTransmit+0x78>
 8001d8a:	4b80      	ldr	r3, [pc, #512]	; (8001f8c <LoRaTransmit+0x274>)
 8001d8c:	e000      	b.n	8001d90 <LoRaTransmit+0x78>
 8001d8e:	4b80      	ldr	r3, [pc, #512]	; (8001f90 <LoRaTransmit+0x278>)
 8001d90:	9304      	str	r3, [sp, #16]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	9303      	str	r3, [sp, #12]
 8001d96:	f240 43e5 	movw	r3, #1253	; 0x4e5
 8001d9a:	9302      	str	r3, [sp, #8]
 8001d9c:	4b7d      	ldr	r3, [pc, #500]	; (8001f94 <LoRaTransmit+0x27c>)
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	4b7d      	ldr	r3, [pc, #500]	; (8001f98 <LoRaTransmit+0x280>)
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	460b      	mov	r3, r1
 8001da6:	4a7d      	ldr	r2, [pc, #500]	; (8001f9c <LoRaTransmit+0x284>)
 8001da8:	497b      	ldr	r1, [pc, #492]	; (8001f98 <LoRaTransmit+0x280>)
 8001daa:	2005      	movs	r0, #5
 8001dac:	f000 ffbe 	bl	8002d2c <stm_log_write>
      break;
 8001db0:	e085      	b.n	8001ebe <LoRaTransmit+0x1a6>
    case INDEX_MSG_STATUS:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_MSG_STS(*(data + i)));
 8001db2:	f001 f8d3 	bl	8002f5c <HAL_GetTick>
 8001db6:	4601      	mov	r1, r0
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d009      	beq.n	8001dd8 <LoRaTransmit+0xc0>
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4413      	add	r3, r2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <LoRaTransmit+0xbc>
 8001dd0:	4b73      	ldr	r3, [pc, #460]	; (8001fa0 <LoRaTransmit+0x288>)
 8001dd2:	e002      	b.n	8001dda <LoRaTransmit+0xc2>
 8001dd4:	4b73      	ldr	r3, [pc, #460]	; (8001fa4 <LoRaTransmit+0x28c>)
 8001dd6:	e000      	b.n	8001dda <LoRaTransmit+0xc2>
 8001dd8:	4b73      	ldr	r3, [pc, #460]	; (8001fa8 <LoRaTransmit+0x290>)
 8001dda:	9304      	str	r3, [sp, #16]
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	9303      	str	r3, [sp, #12]
 8001de0:	f44f 639d 	mov.w	r3, #1256	; 0x4e8
 8001de4:	9302      	str	r3, [sp, #8]
 8001de6:	4b6b      	ldr	r3, [pc, #428]	; (8001f94 <LoRaTransmit+0x27c>)
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	4b6b      	ldr	r3, [pc, #428]	; (8001f98 <LoRaTransmit+0x280>)
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	460b      	mov	r3, r1
 8001df0:	4a6a      	ldr	r2, [pc, #424]	; (8001f9c <LoRaTransmit+0x284>)
 8001df2:	4969      	ldr	r1, [pc, #420]	; (8001f98 <LoRaTransmit+0x280>)
 8001df4:	2005      	movs	r0, #5
 8001df6:	f000 ff99 	bl	8002d2c <stm_log_write>
      break;
 8001dfa:	e060      	b.n	8001ebe <LoRaTransmit+0x1a6>
    case INDEX_DATA_RELAY_STATE:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_RELAY(*(data + i)));
 8001dfc:	f001 f8ae 	bl	8002f5c <HAL_GetTick>
 8001e00:	4601      	mov	r1, r0
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	4413      	add	r3, r2
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <LoRaTransmit+0x10a>
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <LoRaTransmit+0x106>
 8001e1a:	4b64      	ldr	r3, [pc, #400]	; (8001fac <LoRaTransmit+0x294>)
 8001e1c:	e002      	b.n	8001e24 <LoRaTransmit+0x10c>
 8001e1e:	4b64      	ldr	r3, [pc, #400]	; (8001fb0 <LoRaTransmit+0x298>)
 8001e20:	e000      	b.n	8001e24 <LoRaTransmit+0x10c>
 8001e22:	4b64      	ldr	r3, [pc, #400]	; (8001fb4 <LoRaTransmit+0x29c>)
 8001e24:	9304      	str	r3, [sp, #16]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	9303      	str	r3, [sp, #12]
 8001e2a:	f240 43eb 	movw	r3, #1259	; 0x4eb
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <LoRaTransmit+0x27c>)
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	4b58      	ldr	r3, [pc, #352]	; (8001f98 <LoRaTransmit+0x280>)
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <LoRaTransmit+0x284>)
 8001e3c:	4956      	ldr	r1, [pc, #344]	; (8001f98 <LoRaTransmit+0x280>)
 8001e3e:	2005      	movs	r0, #5
 8001e40:	f000 ff74 	bl	8002d2c <stm_log_write>
      break;
 8001e44:	e03b      	b.n	8001ebe <LoRaTransmit+0x1a6>
    case INDEX_DATA_ERR_CODE:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_RELAY_ERR(*(data + i)));
 8001e46:	f001 f889 	bl	8002f5c <HAL_GetTick>
 8001e4a:	4601      	mov	r1, r0
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4413      	add	r3, r2
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d009      	beq.n	8001e6c <LoRaTransmit+0x154>
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <LoRaTransmit+0x150>
 8001e64:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <LoRaTransmit+0x2a0>)
 8001e66:	e002      	b.n	8001e6e <LoRaTransmit+0x156>
 8001e68:	4b54      	ldr	r3, [pc, #336]	; (8001fbc <LoRaTransmit+0x2a4>)
 8001e6a:	e000      	b.n	8001e6e <LoRaTransmit+0x156>
 8001e6c:	4b54      	ldr	r3, [pc, #336]	; (8001fc0 <LoRaTransmit+0x2a8>)
 8001e6e:	9304      	str	r3, [sp, #16]
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	9303      	str	r3, [sp, #12]
 8001e74:	f240 43ee 	movw	r3, #1262	; 0x4ee
 8001e78:	9302      	str	r3, [sp, #8]
 8001e7a:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <LoRaTransmit+0x27c>)
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <LoRaTransmit+0x280>)
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	460b      	mov	r3, r1
 8001e84:	4a45      	ldr	r2, [pc, #276]	; (8001f9c <LoRaTransmit+0x284>)
 8001e86:	4944      	ldr	r1, [pc, #272]	; (8001f98 <LoRaTransmit+0x280>)
 8001e88:	2005      	movs	r0, #5
 8001e8a:	f000 ff4f 	bl	8002d2c <stm_log_write>
      break;
 8001e8e:	e016      	b.n	8001ebe <LoRaTransmit+0x1a6>
    default:
      STM_LOGV("LoRaTX", "data transmit[%d]: %d", i, *(data + i));
 8001e90:	f001 f864 	bl	8002f5c <HAL_GetTick>
 8001e94:	4601      	mov	r1, r0
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	9304      	str	r3, [sp, #16]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	9303      	str	r3, [sp, #12]
 8001ea4:	f240 43f1 	movw	r3, #1265	; 0x4f1
 8001ea8:	9302      	str	r3, [sp, #8]
 8001eaa:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <LoRaTransmit+0x27c>)
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	4b3a      	ldr	r3, [pc, #232]	; (8001f98 <LoRaTransmit+0x280>)
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4a43      	ldr	r2, [pc, #268]	; (8001fc4 <LoRaTransmit+0x2ac>)
 8001eb6:	4938      	ldr	r1, [pc, #224]	; (8001f98 <LoRaTransmit+0x280>)
 8001eb8:	2005      	movs	r0, #5
 8001eba:	f000 ff37 	bl	8002d2c <stm_log_write>
    }

    vSpi1Write(RegFifo, *(data + i));
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff faaf 	bl	800142c <vSpi1Write>
  for (size_t i = 0u; i < size; i++)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f4ff af30 	bcc.w	8001d3e <LoRaTransmit+0x26>
  }
  /* MODE REQUEST TX */
  vModeInit(TX_MODE);
 8001ede:	2003      	movs	r0, #3
 8001ee0:	f7ff fc18 	bl	8001714 <vModeInit>
  uint32_t startTick = HAL_GetTick();
 8001ee4:	f001 f83a 	bl	8002f5c <HAL_GetTick>
 8001ee8:	6178      	str	r0, [r7, #20]
  STM_LOGV("LoRaTX", "Wait for TX_DONE ...\r\n");
 8001eea:	f001 f837 	bl	8002f5c <HAL_GetTick>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f240 42f9 	movw	r2, #1273	; 0x4f9
 8001ef4:	9202      	str	r2, [sp, #8]
 8001ef6:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <LoRaTransmit+0x27c>)
 8001ef8:	9201      	str	r2, [sp, #4]
 8001efa:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <LoRaTransmit+0x280>)
 8001efc:	9200      	str	r2, [sp, #0]
 8001efe:	4a32      	ldr	r2, [pc, #200]	; (8001fc8 <LoRaTransmit+0x2b0>)
 8001f00:	4925      	ldr	r1, [pc, #148]	; (8001f98 <LoRaTransmit+0x280>)
 8001f02:	2005      	movs	r0, #5
 8001f04:	f000 ff12 	bl	8002d2c <stm_log_write>
  while ((ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos == 0u)
 8001f08:	e019      	b.n	8001f3e <LoRaTransmit+0x226>
  {
    if (HAL_GetTick() - startTick >= timeoutMs)
 8001f0a:	f001 f827 	bl	8002f5c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d811      	bhi.n	8001f3e <LoRaTransmit+0x226>
    {
      STM_LOGE("LoRaTX", "TX_TIMEOUT");
 8001f1a:	f001 f81f 	bl	8002f5c <HAL_GetTick>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f240 42fe 	movw	r2, #1278	; 0x4fe
 8001f24:	9202      	str	r2, [sp, #8]
 8001f26:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <LoRaTransmit+0x27c>)
 8001f28:	9201      	str	r2, [sp, #4]
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <LoRaTransmit+0x280>)
 8001f2c:	9200      	str	r2, [sp, #0]
 8001f2e:	4a27      	ldr	r2, [pc, #156]	; (8001fcc <LoRaTransmit+0x2b4>)
 8001f30:	4919      	ldr	r1, [pc, #100]	; (8001f98 <LoRaTransmit+0x280>)
 8001f32:	2001      	movs	r0, #1
 8001f34:	f000 fefa 	bl	8002d2c <stm_log_write>
      isTransmitOk = false;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	77fb      	strb	r3, [r7, #31]
      break;
 8001f3c:	e008      	b.n	8001f50 <LoRaTransmit+0x238>
  while ((ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos == 0u)
 8001f3e:	2012      	movs	r0, #18
 8001f40:	f7ff fadc 	bl	80014fc <ucSpi1Read>
 8001f44:	4603      	mov	r3, r0
 8001f46:	10db      	asrs	r3, r3, #3
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0dc      	beq.n	8001f0a <LoRaTransmit+0x1f2>
    }
  }
  if (isTransmitOk)
 8001f50:	7ffb      	ldrb	r3, [r7, #31]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00e      	beq.n	8001f74 <LoRaTransmit+0x25c>
    STM_LOGD("LoRaTX", "Send msg to GW success");
 8001f56:	f001 f801 	bl	8002f5c <HAL_GetTick>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f240 5204 	movw	r2, #1284	; 0x504
 8001f60:	9202      	str	r2, [sp, #8]
 8001f62:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <LoRaTransmit+0x27c>)
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <LoRaTransmit+0x280>)
 8001f68:	9200      	str	r2, [sp, #0]
 8001f6a:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <LoRaTransmit+0x2b8>)
 8001f6c:	490a      	ldr	r1, [pc, #40]	; (8001f98 <LoRaTransmit+0x280>)
 8001f6e:	2004      	movs	r0, #4
 8001f70:	f000 fedc 	bl	8002d2c <stm_log_write>
  /* Clear TxDone Flag */
  LoRaClearITFlag(TX_DONE_Msk);
 8001f74:	2008      	movs	r0, #8
 8001f76:	f000 f877 	bl	8002068 <LoRaClearITFlag>
  vModeInit(RXCONTINUOUS_MODE);
 8001f7a:	2005      	movs	r0, #5
 8001f7c:	f7ff fbca 	bl	8001714 <vModeInit>
}
 8001f80:	bf00      	nop
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	0800c62c 	.word	0x0800c62c
 8001f8c:	0800c638 	.word	0x0800c638
 8001f90:	0800c640 	.word	0x0800c640
 8001f94:	0800d1ec 	.word	0x0800d1ec
 8001f98:	0800c67c 	.word	0x0800c67c
 8001f9c:	0800c648 	.word	0x0800c648
 8001fa0:	0800c684 	.word	0x0800c684
 8001fa4:	0800c694 	.word	0x0800c694
 8001fa8:	0800c6a4 	.word	0x0800c6a4
 8001fac:	0800c6b0 	.word	0x0800c6b0
 8001fb0:	0800c6bc 	.word	0x0800c6bc
 8001fb4:	0800c6cc 	.word	0x0800c6cc
 8001fb8:	0800c6d8 	.word	0x0800c6d8
 8001fbc:	0800c6e4 	.word	0x0800c6e4
 8001fc0:	0800c6f0 	.word	0x0800c6f0
 8001fc4:	0800c6fc 	.word	0x0800c6fc
 8001fc8:	0800c730 	.word	0x0800c730
 8001fcc:	0800c764 	.word	0x0800c764
 8001fd0:	0800c794 	.word	0x0800c794

08001fd4 <LoRaGetITFlag>:
  vSpi1Write(RegIrqFlags, RX_DONE_Msk | PAYLOAD_CRC_ERROR_Msk);
  // LORA_GET_REGISTER(RegIrqFlags);
}

uint8_t LoRaGetITFlag(uint8_t irqFlag)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  if (irqFlag < 0 || irqFlag > 7)
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	2b07      	cmp	r3, #7
 8001fe2:	d901      	bls.n	8001fe8 <LoRaGetITFlag+0x14>
    return -1;
 8001fe4:	23ff      	movs	r3, #255	; 0xff
 8001fe6:	e03a      	b.n	800205e <LoRaGetITFlag+0x8a>

  switch (irqFlag)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	3b03      	subs	r3, #3
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d835      	bhi.n	800205c <LoRaGetITFlag+0x88>
 8001ff0:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <LoRaGetITFlag+0x24>)
 8001ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff6:	bf00      	nop
 8001ff8:	08002049 	.word	0x08002049
 8001ffc:	0800205d 	.word	0x0800205d
 8002000:	08002021 	.word	0x08002021
 8002004:	0800200d 	.word	0x0800200d
 8002008:	08002035 	.word	0x08002035
  {
  case RX_DONE_MskPos:
    return (ucSpi1Read(RegIrqFlags) & RX_DONE_Msk) >> RX_DONE_MskPos;
 800200c:	2012      	movs	r0, #18
 800200e:	f7ff fa75 	bl	80014fc <ucSpi1Read>
 8002012:	4603      	mov	r3, r0
 8002014:	119b      	asrs	r3, r3, #6
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	e01e      	b.n	800205e <LoRaGetITFlag+0x8a>
  case PAYLOAD_CRC_ERROR_MskPos:
    return (ucSpi1Read(RegIrqFlags) & PAYLOAD_CRC_ERROR_Msk) >> PAYLOAD_CRC_ERROR_MskPos;
 8002020:	2012      	movs	r0, #18
 8002022:	f7ff fa6b 	bl	80014fc <ucSpi1Read>
 8002026:	4603      	mov	r3, r0
 8002028:	115b      	asrs	r3, r3, #5
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	e014      	b.n	800205e <LoRaGetITFlag+0x8a>
  case RX_TIMEOUT_MskPos:
    return (ucSpi1Read(RegIrqFlags) & RX_TIMEOUT_Msk) >> RX_TIMEOUT_MskPos;
 8002034:	2012      	movs	r0, #18
 8002036:	f7ff fa61 	bl	80014fc <ucSpi1Read>
 800203a:	4603      	mov	r3, r0
 800203c:	11db      	asrs	r3, r3, #7
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e00a      	b.n	800205e <LoRaGetITFlag+0x8a>
  case TX_DONE_MskPos:
    return (ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos;
 8002048:	2012      	movs	r0, #18
 800204a:	f7ff fa57 	bl	80014fc <ucSpi1Read>
 800204e:	4603      	mov	r3, r0
 8002050:	10db      	asrs	r3, r3, #3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	e000      	b.n	800205e <LoRaGetITFlag+0x8a>
    // case FHSS_CHANGE_CHANNEL_MskPos:
    //   return (ucSpi1Read(RegIrqFlags) & FHSS_CHANGE_CHANNEL_Msk) >> FHSS_CHANGE_CHANNEL_MskPos;
    // case CAD_DONE_MskPos:
    //   return (ucSpi1Read(RegIrqFlags) & CAD_DONE_Msk) >> CAD_DONE_MskPos;
  default:
    return -1;
 800205c:	23ff      	movs	r3, #255	; 0xff
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop

08002068 <LoRaClearITFlag>:

void LoRaClearITFlag(uint8_t flag)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af04      	add	r7, sp, #16
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegIrqFlags, flag);
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	4619      	mov	r1, r3
 8002076:	2012      	movs	r0, #18
 8002078:	f7ff f9d8 	bl	800142c <vSpi1Write>
  if (flag & RX_DONE_Msk) {
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00e      	beq.n	80020a4 <LoRaClearITFlag+0x3c>
    STM_LOGV("LoRa", "Clear RX_DONE_IT_FLAG");
 8002086:	f000 ff69 	bl	8002f5c <HAL_GetTick>
 800208a:	4603      	mov	r3, r0
 800208c:	f240 526b 	movw	r2, #1387	; 0x56b
 8002090:	9202      	str	r2, [sp, #8]
 8002092:	4a24      	ldr	r2, [pc, #144]	; (8002124 <LoRaClearITFlag+0xbc>)
 8002094:	9201      	str	r2, [sp, #4]
 8002096:	4a24      	ldr	r2, [pc, #144]	; (8002128 <LoRaClearITFlag+0xc0>)
 8002098:	9200      	str	r2, [sp, #0]
 800209a:	4a24      	ldr	r2, [pc, #144]	; (800212c <LoRaClearITFlag+0xc4>)
 800209c:	4922      	ldr	r1, [pc, #136]	; (8002128 <LoRaClearITFlag+0xc0>)
 800209e:	2005      	movs	r0, #5
 80020a0:	f000 fe44 	bl	8002d2c <stm_log_write>
  }
  if (flag & PAYLOAD_CRC_ERROR_Msk) {
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00e      	beq.n	80020cc <LoRaClearITFlag+0x64>
    STM_LOGV("LoRa", "Clear PAYLOAD_CRC_ERROR_IT_FLAG");
 80020ae:	f000 ff55 	bl	8002f5c <HAL_GetTick>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f240 526e 	movw	r2, #1390	; 0x56e
 80020b8:	9202      	str	r2, [sp, #8]
 80020ba:	4a1a      	ldr	r2, [pc, #104]	; (8002124 <LoRaClearITFlag+0xbc>)
 80020bc:	9201      	str	r2, [sp, #4]
 80020be:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <LoRaClearITFlag+0xc0>)
 80020c0:	9200      	str	r2, [sp, #0]
 80020c2:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <LoRaClearITFlag+0xc8>)
 80020c4:	4918      	ldr	r1, [pc, #96]	; (8002128 <LoRaClearITFlag+0xc0>)
 80020c6:	2005      	movs	r0, #5
 80020c8:	f000 fe30 	bl	8002d2c <stm_log_write>
  }
  if (flag & RX_TIMEOUT_Msk) {
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	da0e      	bge.n	80020f2 <LoRaClearITFlag+0x8a>
    STM_LOGV("LoRa", "Clear RX_TIMEOUT_IT_FLAG");
 80020d4:	f000 ff42 	bl	8002f5c <HAL_GetTick>
 80020d8:	4603      	mov	r3, r0
 80020da:	f240 5271 	movw	r2, #1393	; 0x571
 80020de:	9202      	str	r2, [sp, #8]
 80020e0:	4a10      	ldr	r2, [pc, #64]	; (8002124 <LoRaClearITFlag+0xbc>)
 80020e2:	9201      	str	r2, [sp, #4]
 80020e4:	4a10      	ldr	r2, [pc, #64]	; (8002128 <LoRaClearITFlag+0xc0>)
 80020e6:	9200      	str	r2, [sp, #0]
 80020e8:	4a12      	ldr	r2, [pc, #72]	; (8002134 <LoRaClearITFlag+0xcc>)
 80020ea:	490f      	ldr	r1, [pc, #60]	; (8002128 <LoRaClearITFlag+0xc0>)
 80020ec:	2005      	movs	r0, #5
 80020ee:	f000 fe1d 	bl	8002d2c <stm_log_write>
  }
  if (flag & TX_DONE_Msk) {
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00e      	beq.n	800211a <LoRaClearITFlag+0xb2>
    STM_LOGV("LoRa", "Clear TX_DONE_IT_FLAG");
 80020fc:	f000 ff2e 	bl	8002f5c <HAL_GetTick>
 8002100:	4603      	mov	r3, r0
 8002102:	f240 5274 	movw	r2, #1396	; 0x574
 8002106:	9202      	str	r2, [sp, #8]
 8002108:	4a06      	ldr	r2, [pc, #24]	; (8002124 <LoRaClearITFlag+0xbc>)
 800210a:	9201      	str	r2, [sp, #4]
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <LoRaClearITFlag+0xc0>)
 800210e:	9200      	str	r2, [sp, #0]
 8002110:	4a09      	ldr	r2, [pc, #36]	; (8002138 <LoRaClearITFlag+0xd0>)
 8002112:	4905      	ldr	r1, [pc, #20]	; (8002128 <LoRaClearITFlag+0xc0>)
 8002114:	2005      	movs	r0, #5
 8002116:	f000 fe09 	bl	8002d2c <stm_log_write>
  //   STM_LOGV("LoRa", "Clear FHSS_CHANGE_CHANNEL_IT_FLAG");
  // }
  // if (flag & CAD_DONE_Msk) {
  //   STM_LOGV("LoRa", "Clear CAD_DONE_IT_FLAG");
  // }
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	0800d1fc 	.word	0x0800d1fc
 8002128:	0800c5a4 	.word	0x0800c5a4
 800212c:	0800c890 	.word	0x0800c890
 8002130:	0800c8c4 	.word	0x0800c8c4
 8002134:	0800c900 	.word	0x0800c900
 8002138:	0800c938 	.word	0x0800c938

0800213c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b087      	sub	sp, #28
 8002140:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002142:	f000 fee3 	bl	8002f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002146:	f000 f8c1 	bl	80022cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800214a:	f7ff f8bb 	bl	80012c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800214e:	f7fe fa83 	bl	8000658 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002152:	f000 fc4d 	bl	80029f0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002156:	f000 fe3b 	bl	8002dd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  vLoraInit();
 800215a:	f7ff fd0f 	bl	8001b7c <vLoraInit>
  reset_cause_t resetCause = resetCauseGet();
 800215e:	f000 fa9d 	bl	800269c <resetCauseGet>
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  STM_LOGI("Main", "Reset cause:  {%s}", resetCauseGetName(resetCause));
 8002166:	f000 fef9 	bl	8002f5c <HAL_GetTick>
 800216a:	4604      	mov	r4, r0
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fada 	bl	8002728 <resetCauseGetName>
 8002174:	4603      	mov	r3, r0
 8002176:	9303      	str	r3, [sp, #12]
 8002178:	236f      	movs	r3, #111	; 0x6f
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	4b43      	ldr	r3, [pc, #268]	; (800228c <main+0x150>)
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	4b43      	ldr	r3, [pc, #268]	; (8002290 <main+0x154>)
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4623      	mov	r3, r4
 8002186:	4a43      	ldr	r2, [pc, #268]	; (8002294 <main+0x158>)
 8002188:	4941      	ldr	r1, [pc, #260]	; (8002290 <main+0x154>)
 800218a:	2003      	movs	r0, #3
 800218c:	f000 fdce 	bl	8002d2c <stm_log_write>
  STM_LOGI("Main", "Watchdog Init {%ums}", iwdgInit(&hiwdg, WATCHDOG_TIME));
 8002190:	f000 fee4 	bl	8002f5c <HAL_GetTick>
 8002194:	4604      	mov	r4, r0
 8002196:	f643 2198 	movw	r1, #15000	; 0x3a98
 800219a:	483f      	ldr	r0, [pc, #252]	; (8002298 <main+0x15c>)
 800219c:	f000 fb12 	bl	80027c4 <iwdgInit>
 80021a0:	4603      	mov	r3, r0
 80021a2:	9303      	str	r3, [sp, #12]
 80021a4:	2370      	movs	r3, #112	; 0x70
 80021a6:	9302      	str	r3, [sp, #8]
 80021a8:	4b38      	ldr	r3, [pc, #224]	; (800228c <main+0x150>)
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	4b38      	ldr	r3, [pc, #224]	; (8002290 <main+0x154>)
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	4623      	mov	r3, r4
 80021b2:	4a3a      	ldr	r2, [pc, #232]	; (800229c <main+0x160>)
 80021b4:	4936      	ldr	r1, [pc, #216]	; (8002290 <main+0x154>)
 80021b6:	2003      	movs	r0, #3
 80021b8:	f000 fdb8 	bl	8002d2c <stm_log_write>

  /* Retrieve old state from FLASH */
  thisNodeInit(resetCause);
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f8e0 	bl	8002384 <thisNodeInit>
  STM_LOGV("Main", "NodeID:   {%d}", thisNode.nodeID);
 80021c4:	f000 feca 	bl	8002f5c <HAL_GetTick>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4a35      	ldr	r2, [pc, #212]	; (80022a0 <main+0x164>)
 80021cc:	7812      	ldrb	r2, [r2, #0]
 80021ce:	9203      	str	r2, [sp, #12]
 80021d0:	2274      	movs	r2, #116	; 0x74
 80021d2:	9202      	str	r2, [sp, #8]
 80021d4:	4a2d      	ldr	r2, [pc, #180]	; (800228c <main+0x150>)
 80021d6:	9201      	str	r2, [sp, #4]
 80021d8:	4a2d      	ldr	r2, [pc, #180]	; (8002290 <main+0x154>)
 80021da:	9200      	str	r2, [sp, #0]
 80021dc:	4a31      	ldr	r2, [pc, #196]	; (80022a4 <main+0x168>)
 80021de:	492c      	ldr	r1, [pc, #176]	; (8002290 <main+0x154>)
 80021e0:	2005      	movs	r0, #5
 80021e2:	f000 fda3 	bl	8002d2c <stm_log_write>
  STM_LOGV("Main", "Relay:    {%s}", WHICH_RELAY(thisNode.relayState));
 80021e6:	f000 feb9 	bl	8002f5c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <main+0x164>)
 80021ee:	789b      	ldrb	r3, [r3, #2]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <main+0xc8>
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <main+0x164>)
 80021f6:	789b      	ldrb	r3, [r3, #2]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <main+0xc4>
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <main+0x16c>)
 80021fe:	e002      	b.n	8002206 <main+0xca>
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <main+0x170>)
 8002202:	e000      	b.n	8002206 <main+0xca>
 8002204:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <main+0x174>)
 8002206:	9303      	str	r3, [sp, #12]
 8002208:	2375      	movs	r3, #117	; 0x75
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <main+0x150>)
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <main+0x154>)
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	4a27      	ldr	r2, [pc, #156]	; (80022b4 <main+0x178>)
 8002218:	491d      	ldr	r1, [pc, #116]	; (8002290 <main+0x154>)
 800221a:	2005      	movs	r0, #5
 800221c:	f000 fd86 	bl	8002d2c <stm_log_write>
  STM_LOGV("Main", "Location: {%d}", thisNode.location);
 8002220:	f000 fe9c 	bl	8002f5c <HAL_GetTick>
 8002224:	4603      	mov	r3, r0
 8002226:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <main+0x164>)
 8002228:	7852      	ldrb	r2, [r2, #1]
 800222a:	9203      	str	r2, [sp, #12]
 800222c:	2276      	movs	r2, #118	; 0x76
 800222e:	9202      	str	r2, [sp, #8]
 8002230:	4a16      	ldr	r2, [pc, #88]	; (800228c <main+0x150>)
 8002232:	9201      	str	r2, [sp, #4]
 8002234:	4a16      	ldr	r2, [pc, #88]	; (8002290 <main+0x154>)
 8002236:	9200      	str	r2, [sp, #0]
 8002238:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <main+0x17c>)
 800223a:	4915      	ldr	r1, [pc, #84]	; (8002290 <main+0x154>)
 800223c:	2005      	movs	r0, #5
 800223e:	f000 fd75 	bl	8002d2c <stm_log_write>
  STM_LOGV("Main", "Error:    {%s}", WHICH_RELAY_ERR(thisNode.errCode));
 8002242:	f000 fe8b 	bl	8002f5c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <main+0x164>)
 800224a:	78db      	ldrb	r3, [r3, #3]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <main+0x124>
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <main+0x164>)
 8002252:	78db      	ldrb	r3, [r3, #3]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <main+0x120>
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <main+0x180>)
 800225a:	e002      	b.n	8002262 <main+0x126>
 800225c:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <main+0x184>)
 800225e:	e000      	b.n	8002262 <main+0x126>
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <main+0x188>)
 8002262:	9303      	str	r3, [sp, #12]
 8002264:	2377      	movs	r3, #119	; 0x77
 8002266:	9302      	str	r3, [sp, #8]
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <main+0x150>)
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <main+0x154>)
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <main+0x18c>)
 8002274:	4906      	ldr	r1, [pc, #24]	; (8002290 <main+0x154>)
 8002276:	2005      	movs	r0, #5
 8002278:	f000 fd58 	bl	8002d2c <stm_log_write>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800227c:	f004 febc 	bl	8006ff8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002280:	f7fe fb36 	bl	80008f0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002284:	f004 feea 	bl	800705c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002288:	e7fe      	b.n	8002288 <main+0x14c>
 800228a:	bf00      	nop
 800228c:	0800d20c 	.word	0x0800d20c
 8002290:	0800c9a4 	.word	0x0800c9a4
 8002294:	0800c96c 	.word	0x0800c96c
 8002298:	20003a10 	.word	0x20003a10
 800229c:	0800c9ac 	.word	0x0800c9ac
 80022a0:	20000000 	.word	0x20000000
 80022a4:	0800c9e4 	.word	0x0800c9e4
 80022a8:	0800ca10 	.word	0x0800ca10
 80022ac:	0800ca1c 	.word	0x0800ca1c
 80022b0:	0800ca2c 	.word	0x0800ca2c
 80022b4:	0800ca38 	.word	0x0800ca38
 80022b8:	0800ca64 	.word	0x0800ca64
 80022bc:	0800ca90 	.word	0x0800ca90
 80022c0:	0800ca9c 	.word	0x0800ca9c
 80022c4:	0800caa8 	.word	0x0800caa8
 80022c8:	0800cab4 	.word	0x0800cab4

080022cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b094      	sub	sp, #80	; 0x50
 80022d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80022d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d6:	2228      	movs	r2, #40	; 0x28
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f008 fc6e 	bl	800abbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80022fc:	2309      	movs	r3, #9
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002306:	2300      	movs	r3, #0
 8002308:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800230a:	2301      	movs	r3, #1
 800230c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800230e:	2301      	movs	r3, #1
 8002310:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002312:	2302      	movs	r3, #2
 8002314:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800231a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800231c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002320:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002326:	4618      	mov	r0, r3
 8002328:	f002 fb36 	bl	8004998 <HAL_RCC_OscConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002332:	f000 f9a3 	bl	800267c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002336:	230f      	movs	r3, #15
 8002338:	617b      	str	r3, [r7, #20]
    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800233a:	2302      	movs	r3, #2
 800233c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	2102      	movs	r1, #2
 8002350:	4618      	mov	r0, r3
 8002352:	f002 fe91 	bl	8005078 <HAL_RCC_ClockConfig>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800235c:	f000 f98e 	bl	800267c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002360:	2302      	movs	r3, #2
 8002362:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8002364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002368:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	4618      	mov	r0, r3
 800236e:	f003 f905 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002378:	f000 f980 	bl	800267c <Error_Handler>
  }
}
 800237c:	bf00      	nop
 800237e:	3750      	adds	r7, #80	; 0x50
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <thisNodeInit>:

/* USER CODE BEGIN 4 */
static void thisNodeInit(reset_cause_t resetCause) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af04      	add	r7, sp, #16
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  if (Flash_ReadAddress(ADDR_RELAY_STATE) == FLASH_EMPTY)
 800238e:	4833      	ldr	r0, [pc, #204]	; (800245c <thisNodeInit+0xd8>)
 8002390:	f7fe fa3c 	bl	800080c <Flash_ReadAddress>
 8002394:	4603      	mov	r3, r0
 8002396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239a:	d110      	bne.n	80023be <thisNodeInit+0x3a>
  {
    STM_LOGV("Main", "data not found, write relay data to flash");
 800239c:	f000 fdde 	bl	8002f5c <HAL_GetTick>
 80023a0:	4603      	mov	r3, r0
 80023a2:	22bf      	movs	r2, #191	; 0xbf
 80023a4:	9202      	str	r2, [sp, #8]
 80023a6:	4a2e      	ldr	r2, [pc, #184]	; (8002460 <thisNodeInit+0xdc>)
 80023a8:	9201      	str	r2, [sp, #4]
 80023aa:	4a2e      	ldr	r2, [pc, #184]	; (8002464 <thisNodeInit+0xe0>)
 80023ac:	9200      	str	r2, [sp, #0]
 80023ae:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <thisNodeInit+0xe4>)
 80023b0:	492c      	ldr	r1, [pc, #176]	; (8002464 <thisNodeInit+0xe0>)
 80023b2:	2005      	movs	r0, #5
 80023b4:	f000 fcba 	bl	8002d2c <stm_log_write>
    updateDataToFlash();
 80023b8:	f000 f862 	bl	8002480 <updateDataToFlash>
 80023bc:	e029      	b.n	8002412 <thisNodeInit+0x8e>
  }
  else
  {
    STM_LOGV("Main", "detect flash data, restore old state ...");
 80023be:	f000 fdcd 	bl	8002f5c <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	22c4      	movs	r2, #196	; 0xc4
 80023c6:	9202      	str	r2, [sp, #8]
 80023c8:	4a25      	ldr	r2, [pc, #148]	; (8002460 <thisNodeInit+0xdc>)
 80023ca:	9201      	str	r2, [sp, #4]
 80023cc:	4a25      	ldr	r2, [pc, #148]	; (8002464 <thisNodeInit+0xe0>)
 80023ce:	9200      	str	r2, [sp, #0]
 80023d0:	4a26      	ldr	r2, [pc, #152]	; (800246c <thisNodeInit+0xe8>)
 80023d2:	4924      	ldr	r1, [pc, #144]	; (8002464 <thisNodeInit+0xe0>)
 80023d4:	2005      	movs	r0, #5
 80023d6:	f000 fca9 	bl	8002d2c <stm_log_write>
    thisNode.relayState = Flash_ReadAddress(ADDR_RELAY_STATE);
 80023da:	4820      	ldr	r0, [pc, #128]	; (800245c <thisNodeInit+0xd8>)
 80023dc:	f7fe fa16 	bl	800080c <Flash_ReadAddress>
 80023e0:	4603      	mov	r3, r0
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <thisNodeInit+0xec>)
 80023e6:	709a      	strb	r2, [r3, #2]
    thisNode.location = Flash_ReadAddress(ADDR_LOCATION);
 80023e8:	4822      	ldr	r0, [pc, #136]	; (8002474 <thisNodeInit+0xf0>)
 80023ea:	f7fe fa0f 	bl	800080c <Flash_ReadAddress>
 80023ee:	4603      	mov	r3, r0
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <thisNodeInit+0xec>)
 80023f4:	705a      	strb	r2, [r3, #1]
    thisNode.errCode = Flash_ReadAddress(ADDR_ERROR_CODE);
 80023f6:	4820      	ldr	r0, [pc, #128]	; (8002478 <thisNodeInit+0xf4>)
 80023f8:	f7fe fa08 	bl	800080c <Flash_ReadAddress>
 80023fc:	4603      	mov	r3, r0
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <thisNodeInit+0xec>)
 8002402:	70da      	strb	r2, [r3, #3]
    RELAY_CONTROL(thisNode.relayState);
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <thisNodeInit+0xec>)
 8002406:	789b      	ldrb	r3, [r3, #2]
 8002408:	461a      	mov	r2, r3
 800240a:	2102      	movs	r1, #2
 800240c:	481b      	ldr	r0, [pc, #108]	; (800247c <thisNodeInit+0xf8>)
 800240e:	f002 f9d1 	bl	80047b4 <HAL_GPIO_WritePin>
  }

  /* Send notif gw after power on */
  uint8_t notifData[PAYLOAD_LENGTH];
  PACK_NOTIF_MSG(notifData, thisNode, resetCause);
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <thisNodeInit+0xec>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	733b      	strb	r3, [r7, #12]
 8002418:	23ff      	movs	r3, #255	; 0xff
 800241a:	737b      	strb	r3, [r7, #13]
 800241c:	2302      	movs	r3, #2
 800241e:	73bb      	strb	r3, [r7, #14]
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	23ff      	movs	r3, #255	; 0xff
 8002426:	743b      	strb	r3, [r7, #16]
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <thisNodeInit+0xec>)
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	747b      	strb	r3, [r7, #17]
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <thisNodeInit+0xec>)
 8002430:	789b      	ldrb	r3, [r3, #2]
 8002432:	74bb      	strb	r3, [r7, #18]
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <thisNodeInit+0xec>)
 8002436:	78db      	ldrb	r3, [r3, #3]
 8002438:	74fb      	strb	r3, [r7, #19]
 800243a:	2300      	movs	r3, #0
 800243c:	753b      	strb	r3, [r7, #20]
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	757b      	strb	r3, [r7, #21]
  LoRaTransmit(notifData, PAYLOAD_LENGTH, LORA_DELAY);
 8002442:	f107 030c 	add.w	r3, r7, #12
 8002446:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800244a:	210a      	movs	r1, #10
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fc63 	bl	8001d18 <LoRaTransmit>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	0800dc00 	.word	0x0800dc00
 8002460:	0800d214 	.word	0x0800d214
 8002464:	0800c9a4 	.word	0x0800c9a4
 8002468:	0800cae0 	.word	0x0800cae0
 800246c:	0800cb28 	.word	0x0800cb28
 8002470:	20000000 	.word	0x20000000
 8002474:	0800dc04 	.word	0x0800dc04
 8002478:	0800dc08 	.word	0x0800dc08
 800247c:	40010800 	.word	0x40010800

08002480 <updateDataToFlash>:

void updateDataToFlash(void)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b085      	sub	sp, #20
 8002484:	af04      	add	r7, sp, #16
  taskENTER_CRITICAL();
 8002486:	f008 f889 	bl	800a59c <vPortEnterCritical>
  ERROR_CHECK(Flash_ErasePage(ADDR_RELAY_STATE, 1));
 800248a:	2101      	movs	r1, #1
 800248c:	4866      	ldr	r0, [pc, #408]	; (8002628 <updateDataToFlash+0x1a8>)
 800248e:	f7fe f9c9 	bl	8000824 <Flash_ErasePage>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d022      	beq.n	80024de <updateDataToFlash+0x5e>
 8002498:	f000 fd60 	bl	8002f5c <HAL_GetTick>
 800249c:	4604      	mov	r4, r0
 800249e:	2101      	movs	r1, #1
 80024a0:	4861      	ldr	r0, [pc, #388]	; (8002628 <updateDataToFlash+0x1a8>)
 80024a2:	f7fe f9bf 	bl	8000824 <Flash_ErasePage>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d00a      	beq.n	80024c2 <updateDataToFlash+0x42>
 80024ac:	2101      	movs	r1, #1
 80024ae:	485e      	ldr	r0, [pc, #376]	; (8002628 <updateDataToFlash+0x1a8>)
 80024b0:	f7fe f9b8 	bl	8000824 <Flash_ErasePage>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d101      	bne.n	80024be <updateDataToFlash+0x3e>
 80024ba:	4b5c      	ldr	r3, [pc, #368]	; (800262c <updateDataToFlash+0x1ac>)
 80024bc:	e002      	b.n	80024c4 <updateDataToFlash+0x44>
 80024be:	4b5c      	ldr	r3, [pc, #368]	; (8002630 <updateDataToFlash+0x1b0>)
 80024c0:	e000      	b.n	80024c4 <updateDataToFlash+0x44>
 80024c2:	4b5c      	ldr	r3, [pc, #368]	; (8002634 <updateDataToFlash+0x1b4>)
 80024c4:	9303      	str	r3, [sp, #12]
 80024c6:	23d4      	movs	r3, #212	; 0xd4
 80024c8:	9302      	str	r3, [sp, #8]
 80024ca:	4b5b      	ldr	r3, [pc, #364]	; (8002638 <updateDataToFlash+0x1b8>)
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	4b5b      	ldr	r3, [pc, #364]	; (800263c <updateDataToFlash+0x1bc>)
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	4623      	mov	r3, r4
 80024d4:	4a5a      	ldr	r2, [pc, #360]	; (8002640 <updateDataToFlash+0x1c0>)
 80024d6:	4959      	ldr	r1, [pc, #356]	; (800263c <updateDataToFlash+0x1bc>)
 80024d8:	2001      	movs	r0, #1
 80024da:	f000 fc27 	bl	8002d2c <stm_log_write>
  ERROR_CHECK(Flash_WriteWord(ADDR_RELAY_STATE, (uint32_t)thisNode.relayState));
 80024de:	4b59      	ldr	r3, [pc, #356]	; (8002644 <updateDataToFlash+0x1c4>)
 80024e0:	789b      	ldrb	r3, [r3, #2]
 80024e2:	4619      	mov	r1, r3
 80024e4:	4850      	ldr	r0, [pc, #320]	; (8002628 <updateDataToFlash+0x1a8>)
 80024e6:	f7fe f939 	bl	800075c <Flash_WriteWord>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d026      	beq.n	800253e <updateDataToFlash+0xbe>
 80024f0:	f000 fd34 	bl	8002f5c <HAL_GetTick>
 80024f4:	4604      	mov	r4, r0
 80024f6:	4b53      	ldr	r3, [pc, #332]	; (8002644 <updateDataToFlash+0x1c4>)
 80024f8:	789b      	ldrb	r3, [r3, #2]
 80024fa:	4619      	mov	r1, r3
 80024fc:	484a      	ldr	r0, [pc, #296]	; (8002628 <updateDataToFlash+0x1a8>)
 80024fe:	f7fe f92d 	bl	800075c <Flash_WriteWord>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d00c      	beq.n	8002522 <updateDataToFlash+0xa2>
 8002508:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <updateDataToFlash+0x1c4>)
 800250a:	789b      	ldrb	r3, [r3, #2]
 800250c:	4619      	mov	r1, r3
 800250e:	4846      	ldr	r0, [pc, #280]	; (8002628 <updateDataToFlash+0x1a8>)
 8002510:	f7fe f924 	bl	800075c <Flash_WriteWord>
 8002514:	4603      	mov	r3, r0
 8002516:	2b02      	cmp	r3, #2
 8002518:	d101      	bne.n	800251e <updateDataToFlash+0x9e>
 800251a:	4b44      	ldr	r3, [pc, #272]	; (800262c <updateDataToFlash+0x1ac>)
 800251c:	e002      	b.n	8002524 <updateDataToFlash+0xa4>
 800251e:	4b44      	ldr	r3, [pc, #272]	; (8002630 <updateDataToFlash+0x1b0>)
 8002520:	e000      	b.n	8002524 <updateDataToFlash+0xa4>
 8002522:	4b44      	ldr	r3, [pc, #272]	; (8002634 <updateDataToFlash+0x1b4>)
 8002524:	9303      	str	r3, [sp, #12]
 8002526:	23d5      	movs	r3, #213	; 0xd5
 8002528:	9302      	str	r3, [sp, #8]
 800252a:	4b43      	ldr	r3, [pc, #268]	; (8002638 <updateDataToFlash+0x1b8>)
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	4b43      	ldr	r3, [pc, #268]	; (800263c <updateDataToFlash+0x1bc>)
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	4623      	mov	r3, r4
 8002534:	4a42      	ldr	r2, [pc, #264]	; (8002640 <updateDataToFlash+0x1c0>)
 8002536:	4941      	ldr	r1, [pc, #260]	; (800263c <updateDataToFlash+0x1bc>)
 8002538:	2001      	movs	r0, #1
 800253a:	f000 fbf7 	bl	8002d2c <stm_log_write>
  ERROR_CHECK(Flash_WriteWord(ADDR_LOCATION, (uint32_t)thisNode.location));
 800253e:	4b41      	ldr	r3, [pc, #260]	; (8002644 <updateDataToFlash+0x1c4>)
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	4619      	mov	r1, r3
 8002544:	4840      	ldr	r0, [pc, #256]	; (8002648 <updateDataToFlash+0x1c8>)
 8002546:	f7fe f909 	bl	800075c <Flash_WriteWord>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d026      	beq.n	800259e <updateDataToFlash+0x11e>
 8002550:	f000 fd04 	bl	8002f5c <HAL_GetTick>
 8002554:	4604      	mov	r4, r0
 8002556:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <updateDataToFlash+0x1c4>)
 8002558:	785b      	ldrb	r3, [r3, #1]
 800255a:	4619      	mov	r1, r3
 800255c:	483a      	ldr	r0, [pc, #232]	; (8002648 <updateDataToFlash+0x1c8>)
 800255e:	f7fe f8fd 	bl	800075c <Flash_WriteWord>
 8002562:	4603      	mov	r3, r0
 8002564:	2b01      	cmp	r3, #1
 8002566:	d00c      	beq.n	8002582 <updateDataToFlash+0x102>
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <updateDataToFlash+0x1c4>)
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	4619      	mov	r1, r3
 800256e:	4836      	ldr	r0, [pc, #216]	; (8002648 <updateDataToFlash+0x1c8>)
 8002570:	f7fe f8f4 	bl	800075c <Flash_WriteWord>
 8002574:	4603      	mov	r3, r0
 8002576:	2b02      	cmp	r3, #2
 8002578:	d101      	bne.n	800257e <updateDataToFlash+0xfe>
 800257a:	4b2c      	ldr	r3, [pc, #176]	; (800262c <updateDataToFlash+0x1ac>)
 800257c:	e002      	b.n	8002584 <updateDataToFlash+0x104>
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <updateDataToFlash+0x1b0>)
 8002580:	e000      	b.n	8002584 <updateDataToFlash+0x104>
 8002582:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <updateDataToFlash+0x1b4>)
 8002584:	9303      	str	r3, [sp, #12]
 8002586:	23d6      	movs	r3, #214	; 0xd6
 8002588:	9302      	str	r3, [sp, #8]
 800258a:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <updateDataToFlash+0x1b8>)
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	4b2b      	ldr	r3, [pc, #172]	; (800263c <updateDataToFlash+0x1bc>)
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	4623      	mov	r3, r4
 8002594:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <updateDataToFlash+0x1c0>)
 8002596:	4929      	ldr	r1, [pc, #164]	; (800263c <updateDataToFlash+0x1bc>)
 8002598:	2001      	movs	r0, #1
 800259a:	f000 fbc7 	bl	8002d2c <stm_log_write>
  ERROR_CHECK(Flash_WriteWord(ADDR_ERROR_CODE, (uint32_t)thisNode.errCode));
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <updateDataToFlash+0x1c4>)
 80025a0:	78db      	ldrb	r3, [r3, #3]
 80025a2:	4619      	mov	r1, r3
 80025a4:	4829      	ldr	r0, [pc, #164]	; (800264c <updateDataToFlash+0x1cc>)
 80025a6:	f7fe f8d9 	bl	800075c <Flash_WriteWord>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d026      	beq.n	80025fe <updateDataToFlash+0x17e>
 80025b0:	f000 fcd4 	bl	8002f5c <HAL_GetTick>
 80025b4:	4604      	mov	r4, r0
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <updateDataToFlash+0x1c4>)
 80025b8:	78db      	ldrb	r3, [r3, #3]
 80025ba:	4619      	mov	r1, r3
 80025bc:	4823      	ldr	r0, [pc, #140]	; (800264c <updateDataToFlash+0x1cc>)
 80025be:	f7fe f8cd 	bl	800075c <Flash_WriteWord>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d00c      	beq.n	80025e2 <updateDataToFlash+0x162>
 80025c8:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <updateDataToFlash+0x1c4>)
 80025ca:	78db      	ldrb	r3, [r3, #3]
 80025cc:	4619      	mov	r1, r3
 80025ce:	481f      	ldr	r0, [pc, #124]	; (800264c <updateDataToFlash+0x1cc>)
 80025d0:	f7fe f8c4 	bl	800075c <Flash_WriteWord>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d101      	bne.n	80025de <updateDataToFlash+0x15e>
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <updateDataToFlash+0x1ac>)
 80025dc:	e002      	b.n	80025e4 <updateDataToFlash+0x164>
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <updateDataToFlash+0x1b0>)
 80025e0:	e000      	b.n	80025e4 <updateDataToFlash+0x164>
 80025e2:	4b14      	ldr	r3, [pc, #80]	; (8002634 <updateDataToFlash+0x1b4>)
 80025e4:	9303      	str	r3, [sp, #12]
 80025e6:	23d7      	movs	r3, #215	; 0xd7
 80025e8:	9302      	str	r3, [sp, #8]
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <updateDataToFlash+0x1b8>)
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <updateDataToFlash+0x1bc>)
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	4623      	mov	r3, r4
 80025f4:	4a12      	ldr	r2, [pc, #72]	; (8002640 <updateDataToFlash+0x1c0>)
 80025f6:	4911      	ldr	r1, [pc, #68]	; (800263c <updateDataToFlash+0x1bc>)
 80025f8:	2001      	movs	r0, #1
 80025fa:	f000 fb97 	bl	8002d2c <stm_log_write>
  taskEXIT_CRITICAL();
 80025fe:	f007 fffd 	bl	800a5fc <vPortExitCritical>
  STM_LOGD("Main", "update data to flash");
 8002602:	f000 fcab 	bl	8002f5c <HAL_GetTick>
 8002606:	4603      	mov	r3, r0
 8002608:	22d9      	movs	r2, #217	; 0xd9
 800260a:	9202      	str	r2, [sp, #8]
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <updateDataToFlash+0x1b8>)
 800260e:	9201      	str	r2, [sp, #4]
 8002610:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <updateDataToFlash+0x1d0>)
 8002612:	9200      	str	r2, [sp, #0]
 8002614:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <updateDataToFlash+0x1d4>)
 8002616:	490e      	ldr	r1, [pc, #56]	; (8002650 <updateDataToFlash+0x1d0>)
 8002618:	2004      	movs	r0, #4
 800261a:	f000 fb87 	bl	8002d2c <stm_log_write>
}
 800261e:	bf00      	nop
 8002620:	3704      	adds	r7, #4
 8002622:	46bd      	mov	sp, r7
 8002624:	bd90      	pop	{r4, r7, pc}
 8002626:	bf00      	nop
 8002628:	0800dc00 	.word	0x0800dc00
 800262c:	0800cb70 	.word	0x0800cb70
 8002630:	0800cb7c 	.word	0x0800cb7c
 8002634:	0800cb88 	.word	0x0800cb88
 8002638:	0800d224 	.word	0x0800d224
 800263c:	0800cbc4 	.word	0x0800cbc4
 8002640:	0800cb94 	.word	0x0800cb94
 8002644:	20000000 	.word	0x20000000
 8002648:	0800dc04 	.word	0x0800dc04
 800264c:	0800dc08 	.word	0x0800dc08
 8002650:	0800c9a4 	.word	0x0800c9a4
 8002654:	0800cbd4 	.word	0x0800cbd4

08002658 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800266a:	f000 fc65 	bl	8002f38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40000800 	.word	0x40000800

0800267c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002680:	b672      	cpsid	i
}
 8002682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002684:	e7fe      	b.n	8002684 <Error_Handler+0x8>

08002686 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
     /* USER CODE END 6 */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
	...

0800269c <resetCauseGet>:
#include "misc.h"
#include "stm_log.h"

reset_cause_t resetCauseGet(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
		RCC_FLAG_WWDGRST: Window watchdog reset flag
		RCC_FLAG_LPWRRST: Low power reset flag 
	*/
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 80026a2:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <resetCauseGet+0x84>)
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	da02      	bge.n	80026b0 <resetCauseGet+0x14>
    {
        reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 80026aa:	2301      	movs	r3, #1
 80026ac:	71fb      	strb	r3, [r7, #7]
 80026ae:	e02e      	b.n	800270e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <resetCauseGet+0x84>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <resetCauseGet+0x26>
    {
        reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 80026bc:	2302      	movs	r3, #2
 80026be:	71fb      	strb	r3, [r7, #7]
 80026c0:	e025      	b.n	800270e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <resetCauseGet+0x84>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <resetCauseGet+0x38>
    {
        reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 80026ce:	2303      	movs	r3, #3
 80026d0:	71fb      	strb	r3, [r7, #7]
 80026d2:	e01c      	b.n	800270e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <resetCauseGet+0x84>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <resetCauseGet+0x4a>
    {
        reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 80026e0:	2304      	movs	r3, #4
 80026e2:	71fb      	strb	r3, [r7, #7]
 80026e4:	e013      	b.n	800270e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <resetCauseGet+0x84>)
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <resetCauseGet+0x5c>
    {
        reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 80026f2:	2305      	movs	r3, #5
 80026f4:	71fb      	strb	r3, [r7, #7]
 80026f6:	e00a      	b.n	800270e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <resetCauseGet+0x84>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <resetCauseGet+0x6e>
    {
        reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8002704:	2306      	movs	r3, #6
 8002706:	71fb      	strb	r3, [r7, #7]
 8002708:	e001      	b.n	800270e <resetCauseGet+0x72>
    }
    else
    {
        reset_cause = eRESET_CAUSE_UNKNOWN;
 800270a:	2300      	movs	r3, #0
 800270c:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_RCC_CLEAR_RESET_FLAGS();
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <resetCauseGet+0x88>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]

    return reset_cause;
 8002714:	79fb      	ldrb	r3, [r7, #7]
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	40021000 	.word	0x40021000
 8002724:	424204e0 	.word	0x424204e0

08002728 <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
    const char *reset_cause_name = "";
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <resetCauseGetName+0x78>)
 8002734:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	2b07      	cmp	r3, #7
 800273a:	d82b      	bhi.n	8002794 <resetCauseGetName+0x6c>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <resetCauseGetName+0x1c>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002765 	.word	0x08002765
 8002748:	0800276b 	.word	0x0800276b
 800274c:	08002771 	.word	0x08002771
 8002750:	08002777 	.word	0x08002777
 8002754:	0800277d 	.word	0x0800277d
 8002758:	08002783 	.word	0x08002783
 800275c:	08002789 	.word	0x08002789
 8002760:	0800278f 	.word	0x0800278f
    {
    case eRESET_CAUSE_UNKNOWN:
        reset_cause_name = "UNKNOWN";
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <resetCauseGetName+0x7c>)
 8002766:	60fb      	str	r3, [r7, #12]
        break;
 8002768:	e014      	b.n	8002794 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_LOW_POWER_RESET:
        reset_cause_name = "LOW_POWER_RESET";
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <resetCauseGetName+0x80>)
 800276c:	60fb      	str	r3, [r7, #12]
        break;
 800276e:	e011      	b.n	8002794 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
        reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8002770:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <resetCauseGetName+0x84>)
 8002772:	60fb      	str	r3, [r7, #12]
        break;
 8002774:	e00e      	b.n	8002794 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
        reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <resetCauseGetName+0x88>)
 8002778:	60fb      	str	r3, [r7, #12]
        break;
 800277a:	e00b      	b.n	8002794 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_SOFTWARE_RESET:
        reset_cause_name = "SOFTWARE_RESET";
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <resetCauseGetName+0x8c>)
 800277e:	60fb      	str	r3, [r7, #12]
        break;
 8002780:	e008      	b.n	8002794 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
        reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <resetCauseGetName+0x90>)
 8002784:	60fb      	str	r3, [r7, #12]
        break;
 8002786:	e005      	b.n	8002794 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
        reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <resetCauseGetName+0x94>)
 800278a:	60fb      	str	r3, [r7, #12]
        break;
 800278c:	e002      	b.n	8002794 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_BROWNOUT_RESET:
        reset_cause_name = "BROWNOUT_RESET (BOR)";
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <resetCauseGetName+0x98>)
 8002790:	60fb      	str	r3, [r7, #12]
        break;
 8002792:	bf00      	nop
    }
    return reset_cause_name;
 8002794:	68fb      	ldr	r3, [r7, #12]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	0800cc0c 	.word	0x0800cc0c
 80027a4:	0800cc10 	.word	0x0800cc10
 80027a8:	0800cc18 	.word	0x0800cc18
 80027ac:	0800cc28 	.word	0x0800cc28
 80027b0:	0800cc40 	.word	0x0800cc40
 80027b4:	0800cc5c 	.word	0x0800cc5c
 80027b8:	0800cc6c 	.word	0x0800cc6c
 80027bc:	0800cc9c 	.word	0x0800cc9c
 80027c0:	0800ccb8 	.word	0x0800ccb8

080027c4 <iwdgInit>:

uint32_t iwdgInit(IWDG_HandleTypeDef *hiwdg, uint32_t millis)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af04      	add	r7, sp, #16
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
    uint32_t configTime = millis;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
    if (configTime > PRESCALER_256_UPPER_LIMIT)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f246 6266 	movw	r2, #26214	; 0x6666
 80027d8:	4293      	cmp	r3, r2
 80027da:	d902      	bls.n	80027e2 <iwdgInit+0x1e>
    {
        configTime = PRESCALER_256_UPPER_LIMIT;
 80027dc:	f246 6366 	movw	r3, #26214	; 0x6666
 80027e0:	60fb      	str	r3, [r7, #12]
    }
    /* Select INDEPENDENT_WATCHDOG */
    hiwdg->Instance = IWDG;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a19      	ldr	r2, [pc, #100]	; (800284c <iwdgInit+0x88>)
 80027e6:	601a      	str	r2, [r3, #0]
    /* Use prescaler LSI/128 */
    hiwdg->Init.Prescaler = IWDG_PRESCALER_128;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2205      	movs	r2, #5
 80027ec:	605a      	str	r2, [r3, #4]
    hiwdg->Init.Reload = (int)(IWDG_RESOLUTION * ((float)configTime / PRESCALER_128_UPPER_LIMIT));
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7fd fd64 	bl	80002bc <__aeabi_ui2f>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4916      	ldr	r1, [pc, #88]	; (8002850 <iwdgInit+0x8c>)
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fd fe6b 	bl	80004d4 <__aeabi_fdiv>
 80027fe:	4603      	mov	r3, r0
 8002800:	4914      	ldr	r1, [pc, #80]	; (8002854 <iwdgInit+0x90>)
 8002802:	4618      	mov	r0, r3
 8002804:	f7fd fdb2 	bl	800036c <__aeabi_fmul>
 8002808:	4603      	mov	r3, r0
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fefe 	bl	800060c <__aeabi_f2iz>
 8002810:	4603      	mov	r3, r0
 8002812:	461a      	mov	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]
    if (HAL_IWDG_Init(hiwdg) != HAL_OK)
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f002 f83d 	bl	8004898 <HAL_IWDG_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <iwdgInit+0x7c>
    {
        STM_LOGE("IWDG", "Watchdog init failed");
 8002824:	f000 fb9a 	bl	8002f5c <HAL_GetTick>
 8002828:	4603      	mov	r3, r0
 800282a:	2263      	movs	r2, #99	; 0x63
 800282c:	9202      	str	r2, [sp, #8]
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <iwdgInit+0x94>)
 8002830:	9201      	str	r2, [sp, #4]
 8002832:	4a0a      	ldr	r2, [pc, #40]	; (800285c <iwdgInit+0x98>)
 8002834:	9200      	str	r2, [sp, #0]
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <iwdgInit+0x9c>)
 8002838:	4908      	ldr	r1, [pc, #32]	; (800285c <iwdgInit+0x98>)
 800283a:	2001      	movs	r0, #1
 800283c:	f000 fa76 	bl	8002d2c <stm_log_write>
    }
    return configTime;
 8002840:	68fb      	ldr	r3, [r7, #12]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40003000 	.word	0x40003000
 8002850:	464ccc00 	.word	0x464ccc00
 8002854:	457ff000 	.word	0x457ff000
 8002858:	0800d238 	.word	0x0800d238
 800285c:	0800cd08 	.word	0x0800cd08
 8002860:	0800ccd0 	.word	0x0800ccd0

08002864 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800286c:	4a07      	ldr	r2, [pc, #28]	; (800288c <RetargetInit+0x28>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <RetargetInit+0x2c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6898      	ldr	r0, [r3, #8]
 8002878:	2300      	movs	r3, #0
 800287a:	2202      	movs	r2, #2
 800287c:	2100      	movs	r1, #0
 800287e:	f008 fa1b 	bl	800acb8 <setvbuf>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20003a1c 	.word	0x20003a1c
 8002890:	20000014 	.word	0x20000014

08002894 <_isatty>:

int _isatty(int fd) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	db04      	blt.n	80028ac <_isatty+0x18>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	dc01      	bgt.n	80028ac <_isatty+0x18>
    return 1;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e005      	b.n	80028b8 <_isatty+0x24>

  errno = EBADF;
 80028ac:	f008 f94e 	bl	800ab4c <__errno>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2209      	movs	r2, #9
 80028b4:	601a      	str	r2, [r3, #0]
  return 0;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_write>:

int _write(int fd, char* ptr, int len) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d002      	beq.n	80028d8 <_write+0x18>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d111      	bne.n	80028fc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <_write+0x54>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	b29a      	uxth	r2, r3
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	f004 f93d 	bl	8006b64 <HAL_UART_Transmit>
 80028ea:	4603      	mov	r3, r0
 80028ec:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <_write+0x38>
      return len;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	e008      	b.n	800290a <_write+0x4a>
    else
      return EIO;
 80028f8:	2305      	movs	r3, #5
 80028fa:	e006      	b.n	800290a <_write+0x4a>
  }
  errno = EBADF;
 80028fc:	f008 f926 	bl	800ab4c <__errno>
 8002900:	4603      	mov	r3, r0
 8002902:	2209      	movs	r2, #9
 8002904:	601a      	str	r2, [r3, #0]
  return -1;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20003a1c 	.word	0x20003a1c

08002918 <_close>:

int _close(int fd) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db04      	blt.n	8002930 <_close+0x18>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b02      	cmp	r3, #2
 800292a:	dc01      	bgt.n	8002930 <_close+0x18>
    return 0;
 800292c:	2300      	movs	r3, #0
 800292e:	e006      	b.n	800293e <_close+0x26>

  errno = EBADF;
 8002930:	f008 f90c 	bl	800ab4c <__errno>
 8002934:	4603      	mov	r3, r0
 8002936:	2209      	movs	r2, #9
 8002938:	601a      	str	r2, [r3, #0]
  return -1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002952:	f008 f8fb 	bl	800ab4c <__errno>
 8002956:	4603      	mov	r3, r0
 8002958:	2209      	movs	r2, #9
 800295a:	601a      	str	r2, [r3, #0]
  return -1;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <_read>:

int _read(int fd, char* ptr, int len) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d110      	bne.n	800299c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <_read+0x4c>)
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	f04f 33ff 	mov.w	r3, #4294967295
 8002982:	2201      	movs	r2, #1
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	f004 f97f 	bl	8006c88 <HAL_UART_Receive>
 800298a:	4603      	mov	r3, r0
 800298c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <_read+0x30>
      return 1;
 8002994:	2301      	movs	r3, #1
 8002996:	e008      	b.n	80029aa <_read+0x42>
    else
      return EIO;
 8002998:	2305      	movs	r3, #5
 800299a:	e006      	b.n	80029aa <_read+0x42>
  }
  errno = EBADF;
 800299c:	f008 f8d6 	bl	800ab4c <__errno>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2209      	movs	r2, #9
 80029a4:	601a      	str	r2, [r3, #0]
  return -1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20003a1c 	.word	0x20003a1c

080029b8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db08      	blt.n	80029da <_fstat+0x22>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	dc05      	bgt.n	80029da <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029d4:	605a      	str	r2, [r3, #4]
    return 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e005      	b.n	80029e6 <_fstat+0x2e>
  }

  errno = EBADF;
 80029da:	f008 f8b7 	bl	800ab4c <__errno>
 80029de:	4603      	mov	r3, r0
 80029e0:	2209      	movs	r2, #9
 80029e2:	601a      	str	r2, [r3, #0]
  return 0;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <MX_SPI1_Init+0x64>)
 80029f6:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <MX_SPI1_Init+0x68>)
 80029f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <MX_SPI1_Init+0x64>)
 80029fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a02:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <MX_SPI1_Init+0x64>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <MX_SPI1_Init+0x64>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <MX_SPI1_Init+0x64>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <MX_SPI1_Init+0x64>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <MX_SPI1_Init+0x64>)
 8002a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <MX_SPI1_Init+0x64>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <MX_SPI1_Init+0x64>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <MX_SPI1_Init+0x64>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <MX_SPI1_Init+0x64>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <MX_SPI1_Init+0x64>)
 8002a3c:	220a      	movs	r2, #10
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a40:	4804      	ldr	r0, [pc, #16]	; (8002a54 <MX_SPI1_Init+0x64>)
 8002a42:	f002 fea5 	bl	8005790 <HAL_SPI_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a4c:	f7ff fe16 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20003a20 	.word	0x20003a20
 8002a58:	40013000 	.word	0x40013000

08002a5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_SPI_MspInit+0x88>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d12f      	bne.n	8002adc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <HAL_SPI_MspInit+0x8c>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_SPI_MspInit+0x8c>)
 8002a82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a86:	6193      	str	r3, [r2, #24]
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <HAL_SPI_MspInit+0x8c>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_SPI_MspInit+0x8c>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4a13      	ldr	r2, [pc, #76]	; (8002ae8 <HAL_SPI_MspInit+0x8c>)
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	6193      	str	r3, [r2, #24]
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_SPI_MspInit+0x8c>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002aac:	23a0      	movs	r3, #160	; 0xa0
 8002aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 0310 	add.w	r3, r7, #16
 8002abc:	4619      	mov	r1, r3
 8002abe:	480b      	ldr	r0, [pc, #44]	; (8002aec <HAL_SPI_MspInit+0x90>)
 8002ac0:	f001 fc08 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ac4:	2340      	movs	r3, #64	; 0x40
 8002ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4805      	ldr	r0, [pc, #20]	; (8002aec <HAL_SPI_MspInit+0x90>)
 8002ad8:	f001 fbfc 	bl	80042d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002adc:	bf00      	nop
 8002ade:	3720      	adds	r7, #32
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40013000 	.word	0x40013000
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40010800 	.word	0x40010800

08002af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <HAL_MspInit+0x68>)
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <HAL_MspInit+0x68>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6193      	str	r3, [r2, #24]
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_MspInit+0x68>)
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_MspInit+0x68>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <HAL_MspInit+0x68>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b18:	61d3      	str	r3, [r2, #28]
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_MspInit+0x68>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	210f      	movs	r1, #15
 8002b2a:	f06f 0001 	mvn.w	r0, #1
 8002b2e:	f001 f8b5 	bl	8003c9c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_MspInit+0x6c>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <HAL_MspInit+0x6c>)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40010000 	.word	0x40010000

08002b60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	201e      	movs	r0, #30
 8002b76:	f001 f891 	bl	8003c9c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b7a:	201e      	movs	r0, #30
 8002b7c:	f001 f8ba 	bl	8003cf4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002b80:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <HAL_InitTick+0x9c>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <HAL_InitTick+0x9c>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	61d3      	str	r3, [r2, #28]
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_InitTick+0x9c>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b98:	f107 0210 	add.w	r2, r7, #16
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f002 fc8a 	bl	80054bc <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ba8:	f002 fc60 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8002bac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_InitTick+0xa0>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0c9b      	lsrs	r3, r3, #18
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <HAL_InitTick+0xa8>)
 8002bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bc8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002bca:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002bdc:	4809      	ldr	r0, [pc, #36]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bde:	f003 fc59 	bl	8006494 <HAL_TIM_Base_Init>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002be8:	4806      	ldr	r0, [pc, #24]	; (8002c04 <HAL_InitTick+0xa4>)
 8002bea:	f003 fd07 	bl	80065fc <HAL_TIM_Base_Start_IT>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	e000      	b.n	8002bf4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3730      	adds	r7, #48	; 0x30
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	431bde83 	.word	0x431bde83
 8002c04:	20003a78 	.word	0x20003a78
 8002c08:	40000800 	.word	0x40000800

08002c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <NMI_Handler+0x4>

08002c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c16:	e7fe      	b.n	8002c16 <HardFault_Handler+0x4>

08002c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <MemManage_Handler+0x4>

08002c1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <BusFault_Handler+0x4>

08002c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <UsageFault_Handler+0x4>

08002c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002c3a:	2008      	movs	r0, #8
 8002c3c:	f001 fe14 	bl	8004868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <ADC1_2_IRQHandler+0x10>)
 8002c4a:	f000 fc07 	bl	800345c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200039c8 	.word	0x200039c8

08002c58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <TIM4_IRQHandler+0x10>)
 8002c5e:	f003 fd39 	bl	80066d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20003a78 	.word	0x20003a78

08002c6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af04      	add	r7, sp, #16
 8002c72:	4603      	mov	r3, r0
 8002c74:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == INTERRUPT_LORA_Pin)
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d119      	bne.n	8002cb0 <HAL_GPIO_EXTI_Callback+0x44>
  {
    osStatus_t err = osSemaphoreRelease(rxDoneSemaphoreHandle);
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f004 fc93 	bl	80075ac <osSemaphoreRelease>
 8002c86:	60f8      	str	r0, [r7, #12]
    if (!err) {
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d110      	bne.n	8002cb0 <HAL_GPIO_EXTI_Callback+0x44>
      printf("\r\n");
 8002c8e:	480b      	ldr	r0, [pc, #44]	; (8002cbc <HAL_GPIO_EXTI_Callback+0x50>)
 8002c90:	f008 f80a 	bl	800aca8 <puts>
      STM_LOGD("EXTI_ISR", "release rxDoneSemaphore ok");
 8002c94:	f000 f962 	bl	8002f5c <HAL_GetTick>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	22de      	movs	r2, #222	; 0xde
 8002c9c:	9202      	str	r2, [sp, #8]
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_GPIO_EXTI_Callback+0x54>)
 8002ca0:	9201      	str	r2, [sp, #4]
 8002ca2:	4a08      	ldr	r2, [pc, #32]	; (8002cc4 <HAL_GPIO_EXTI_Callback+0x58>)
 8002ca4:	9200      	str	r2, [sp, #0]
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002ca8:	4906      	ldr	r1, [pc, #24]	; (8002cc4 <HAL_GPIO_EXTI_Callback+0x58>)
 8002caa:	2004      	movs	r0, #4
 8002cac:	f000 f83e 	bl	8002d2c <stm_log_write>
    }
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	200039f8 	.word	0x200039f8
 8002cbc:	0800cd10 	.word	0x0800cd10
 8002cc0:	0800d244 	.word	0x0800d244
 8002cc4:	0800cd54 	.word	0x0800cd54
 8002cc8:	0800cd14 	.word	0x0800cd14

08002ccc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af04      	add	r7, sp, #16
 8002cd2:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == hadc1.Instance)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d117      	bne.n	8002d10 <HAL_ADC_ConvCpltCallback+0x44>
  {
    adcLightSensor = HAL_ADC_GetValue(hadc);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fb9b 	bl	800341c <HAL_ADC_GetValue>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <HAL_ADC_ConvCpltCallback+0x50>)
 8002cea:	6013      	str	r3, [r2, #0]
    STM_LOGI("ADC_ISR", "lightSensor: %d", adcLightSensor);
 8002cec:	f000 f936 	bl	8002f5c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_ADC_ConvCpltCallback+0x50>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	9303      	str	r3, [sp, #12]
 8002cf8:	23e8      	movs	r3, #232	; 0xe8
 8002cfa:	9302      	str	r3, [sp, #8]
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_ADC_ConvCpltCallback+0x54>)
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_ADC_ConvCpltCallback+0x58>)
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	4613      	mov	r3, r2
 8002d06:	4a08      	ldr	r2, [pc, #32]	; (8002d28 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002d08:	4906      	ldr	r1, [pc, #24]	; (8002d24 <HAL_ADC_ConvCpltCallback+0x58>)
 8002d0a:	2003      	movs	r0, #3
 8002d0c:	f000 f80e 	bl	8002d2c <stm_log_write>
  }
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200039c8 	.word	0x200039c8
 8002d1c:	20003ac0 	.word	0x20003ac0
 8002d20:	0800d25c 	.word	0x0800d25c
 8002d24:	0800cd94 	.word	0x0800cd94
 8002d28:	0800cd60 	.word	0x0800cd60

08002d2c <stm_log_write>:
#include <stdarg.h>

void stm_log_write(stm_log_level_t level,
                   const char *tag,
                   const char *format, ...)
{
 8002d2c:	b40c      	push	{r2, r3}
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	6039      	str	r1, [r7, #0]
 8002d38:	71fb      	strb	r3, [r7, #7]
    va_list arg;
    va_start(arg, format);
 8002d3a:	f107 031c 	add.w	r3, r7, #28
 8002d3e:	60fb      	str	r3, [r7, #12]
    vprintf(format, arg);
 8002d40:	68f9      	ldr	r1, [r7, #12]
 8002d42:	69b8      	ldr	r0, [r7, #24]
 8002d44:	f008 f87e 	bl	800ae44 <viprintf>
    va_end(arg);
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d52:	b002      	add	sp, #8
 8002d54:	4770      	bx	lr
	...

08002d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d60:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <_sbrk+0x5c>)
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <_sbrk+0x60>)
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <_sbrk+0x64>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <_sbrk+0x64>)
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <_sbrk+0x68>)
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <_sbrk+0x64>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d207      	bcs.n	8002d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d88:	f007 fee0 	bl	800ab4c <__errno>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	220c      	movs	r2, #12
 8002d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295
 8002d96:	e009      	b.n	8002dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <_sbrk+0x64>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	4a05      	ldr	r2, [pc, #20]	; (8002dbc <_sbrk+0x64>)
 8002da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20005000 	.word	0x20005000
 8002db8:	00000400 	.word	0x00000400
 8002dbc:	200000a4 	.word	0x200000a4
 8002dc0:	20003b78 	.word	0x20003b78

08002dc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <MX_USART1_UART_Init+0x50>)
 8002dd6:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <MX_USART1_UART_Init+0x54>)
 8002dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <MX_USART1_UART_Init+0x50>)
 8002ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <MX_USART1_UART_Init+0x50>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <MX_USART1_UART_Init+0x50>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <MX_USART1_UART_Init+0x50>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <MX_USART1_UART_Init+0x50>)
 8002df6:	220c      	movs	r2, #12
 8002df8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <MX_USART1_UART_Init+0x50>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <MX_USART1_UART_Init+0x50>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e06:	4806      	ldr	r0, [pc, #24]	; (8002e20 <MX_USART1_UART_Init+0x50>)
 8002e08:	f003 fe04 	bl	8006a14 <HAL_UART_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e12:	f7ff fc33 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  RetargetInit(&huart1);
 8002e16:	4802      	ldr	r0, [pc, #8]	; (8002e20 <MX_USART1_UART_Init+0x50>)
 8002e18:	f7ff fd24 	bl	8002864 <RetargetInit>
  /* USER CODE END USART1_Init 2 */

}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20003ac4 	.word	0x20003ac4
 8002e24:	40013800 	.word	0x40013800

08002e28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 0310 	add.w	r3, r7, #16
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <HAL_UART_MspInit+0x8c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d131      	bne.n	8002eac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_UART_MspInit+0x90>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	4a1a      	ldr	r2, [pc, #104]	; (8002eb8 <HAL_UART_MspInit+0x90>)
 8002e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e52:	6193      	str	r3, [r2, #24]
 8002e54:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <HAL_UART_MspInit+0x90>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e60:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_UART_MspInit+0x90>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <HAL_UART_MspInit+0x90>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	6193      	str	r3, [r2, #24]
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_UART_MspInit+0x90>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e82:	2303      	movs	r3, #3
 8002e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 0310 	add.w	r3, r7, #16
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	480b      	ldr	r0, [pc, #44]	; (8002ebc <HAL_UART_MspInit+0x94>)
 8002e8e:	f001 fa21 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea0:	f107 0310 	add.w	r3, r7, #16
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4805      	ldr	r0, [pc, #20]	; (8002ebc <HAL_UART_MspInit+0x94>)
 8002ea8:	f001 fa14 	bl	80042d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002eac:	bf00      	nop
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40013800 	.word	0x40013800
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40010800 	.word	0x40010800

08002ec0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ec0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ec2:	e003      	b.n	8002ecc <LoopCopyDataInit>

08002ec4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ec6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ec8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002eca:	3104      	adds	r1, #4

08002ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ecc:	480a      	ldr	r0, [pc, #40]	; (8002ef8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ed0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ed2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ed4:	d3f6      	bcc.n	8002ec4 <CopyDataInit>
  ldr r2, =_sbss
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ed8:	e002      	b.n	8002ee0 <LoopFillZerobss>

08002eda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002eda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002edc:	f842 3b04 	str.w	r3, [r2], #4

08002ee0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ee2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ee4:	d3f9      	bcc.n	8002eda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ee6:	f7ff ff6d 	bl	8002dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eea:	f007 fe35 	bl	800ab58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eee:	f7ff f925 	bl	800213c <main>
  bx lr
 8002ef2:	4770      	bx	lr
  ldr r3, =_sidata
 8002ef4:	0800d330 	.word	0x0800d330
  ldr r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002efc:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8002f00:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8002f04:	20003b78 	.word	0x20003b78

08002f08 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f08:	e7fe      	b.n	8002f08 <CAN1_RX1_IRQHandler>
	...

08002f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <HAL_Init+0x28>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <HAL_Init+0x28>)
 8002f16:	f043 0310 	orr.w	r3, r3, #16
 8002f1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1c:	2003      	movs	r0, #3
 8002f1e:	f000 fe9d 	bl	8003c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7ff fe1c 	bl	8002b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f28:	f7ff fde2 	bl	8002af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40022000 	.word	0x40022000

08002f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_IncTick+0x1c>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_IncTick+0x20>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	4a03      	ldr	r2, [pc, #12]	; (8002f58 <HAL_IncTick+0x20>)
 8002f4a:	6013      	str	r3, [r2, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	2000000c 	.word	0x2000000c
 8002f58:	20003b04 	.word	0x20003b04

08002f5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f60:	4b02      	ldr	r3, [pc, #8]	; (8002f6c <HAL_GetTick+0x10>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	20003b04 	.word	0x20003b04

08002f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7ff fff0 	bl	8002f5c <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d005      	beq.n	8002f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_Delay+0x44>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f96:	bf00      	nop
 8002f98:	f7ff ffe0 	bl	8002f5c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d8f7      	bhi.n	8002f98 <HAL_Delay+0x28>
  {
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000000c 	.word	0x2000000c

08002fb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e153      	b.n	8003282 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a9f      	ldr	r2, [pc, #636]	; (800325c <HAL_ADC_Init+0x2a4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_ADC_Init+0x40>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a9d      	ldr	r2, [pc, #628]	; (8003260 <HAL_ADC_Init+0x2a8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_ADC_Init+0x40>
 8002fee:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002ff2:	489c      	ldr	r0, [pc, #624]	; (8003264 <HAL_ADC_Init+0x2ac>)
 8002ff4:	f7ff fb47 	bl	8002686 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_ADC_Init+0x5c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003008:	d004      	beq.n	8003014 <HAL_ADC_Init+0x5c>
 800300a:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800300e:	4895      	ldr	r0, [pc, #596]	; (8003264 <HAL_ADC_Init+0x2ac>)
 8003010:	f7ff fb39 	bl	8002686 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <HAL_ADC_Init+0x78>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003024:	d004      	beq.n	8003030 <HAL_ADC_Init+0x78>
 8003026:	f240 11b5 	movw	r1, #437	; 0x1b5
 800302a:	488e      	ldr	r0, [pc, #568]	; (8003264 <HAL_ADC_Init+0x2ac>)
 800302c:	f7ff fb2b 	bl	8002686 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7b1b      	ldrb	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_ADC_Init+0x92>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7b1b      	ldrb	r3, [r3, #12]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d004      	beq.n	800304a <HAL_ADC_Init+0x92>
 8003040:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8003044:	4887      	ldr	r0, [pc, #540]	; (8003264 <HAL_ADC_Init+0x2ac>)
 8003046:	f7ff fb1e 	bl	8002686 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d022      	beq.n	8003098 <HAL_ADC_Init+0xe0>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800305a:	d01d      	beq.n	8003098 <HAL_ADC_Init+0xe0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003064:	d018      	beq.n	8003098 <HAL_ADC_Init+0xe0>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800306e:	d013      	beq.n	8003098 <HAL_ADC_Init+0xe0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8003078:	d00e      	beq.n	8003098 <HAL_ADC_Init+0xe0>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003082:	d009      	beq.n	8003098 <HAL_ADC_Init+0xe0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800308c:	d004      	beq.n	8003098 <HAL_ADC_Init+0xe0>
 800308e:	f240 11b7 	movw	r1, #439	; 0x1b7
 8003092:	4874      	ldr	r0, [pc, #464]	; (8003264 <HAL_ADC_Init+0x2ac>)
 8003094:	f7ff faf7 	bl	8002686 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d02a      	beq.n	80030f6 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_ADC_Init+0xf8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d904      	bls.n	80030ba <HAL_ADC_Init+0x102>
 80030b0:	f240 11bb 	movw	r1, #443	; 0x1bb
 80030b4:	486b      	ldr	r0, [pc, #428]	; (8003264 <HAL_ADC_Init+0x2ac>)
 80030b6:	f7ff fae6 	bl	8002686 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7d1b      	ldrb	r3, [r3, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_ADC_Init+0x11c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7d1b      	ldrb	r3, [r3, #20]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d004      	beq.n	80030d4 <HAL_ADC_Init+0x11c>
 80030ca:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80030ce:	4865      	ldr	r0, [pc, #404]	; (8003264 <HAL_ADC_Init+0x2ac>)
 80030d0:	f7ff fad9 	bl	8002686 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7d1b      	ldrb	r3, [r3, #20]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00c      	beq.n	80030f6 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_ADC_Init+0x134>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d904      	bls.n	80030f6 <HAL_ADC_Init+0x13e>
 80030ec:	f240 11bf 	movw	r1, #447	; 0x1bf
 80030f0:	485c      	ldr	r0, [pc, #368]	; (8003264 <HAL_ADC_Init+0x2ac>)
 80030f2:	f7ff fac8 	bl	8002686 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fd fae1 	bl	80006d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fcb4 	bl	8003a80 <ADC_ConversionStop_Disable>
 8003118:	4603      	mov	r3, r0
 800311a:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 80a3 	bne.w	8003270 <HAL_ADC_Init+0x2b8>
 800312a:	7dfb      	ldrb	r3, [r7, #23]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f040 809f 	bne.w	8003270 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800313a:	f023 0302 	bic.w	r3, r3, #2
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800314e:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	7b1b      	ldrb	r3, [r3, #12]
 8003154:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003156:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	4313      	orrs	r3, r2
 800315c:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003166:	d003      	beq.n	8003170 <HAL_ADC_Init+0x1b8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d102      	bne.n	8003176 <HAL_ADC_Init+0x1be>
 8003170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003174:	e000      	b.n	8003178 <HAL_ADC_Init+0x1c0>
 8003176:	2300      	movs	r3, #0
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7d1b      	ldrb	r3, [r3, #20]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d119      	bne.n	80031ba <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	7b1b      	ldrb	r3, [r3, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	3b01      	subs	r3, #1
 8003194:	035a      	lsls	r2, r3, #13
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e00b      	b.n	80031ba <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	f043 0220 	orr.w	r2, r3, #32
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	f043 0201 	orr.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	4b24      	ldr	r3, [pc, #144]	; (8003268 <HAL_ADC_Init+0x2b0>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	430b      	orrs	r3, r1
 80031e0:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ea:	d003      	beq.n	80031f4 <HAL_ADC_Init+0x23c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d104      	bne.n	80031fe <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	051b      	lsls	r3, r3, #20
 80031fc:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	430a      	orrs	r2, r1
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <HAL_ADC_Init+0x2b4>)
 800321a:	4013      	ands	r3, r2
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	429a      	cmp	r2, r3
 8003220:	d10b      	bne.n	800323a <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	f023 0303 	bic.w	r3, r3, #3
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003238:	e022      	b.n	8003280 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	f023 0312 	bic.w	r3, r3, #18
 8003242:	f043 0210 	orr.w	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800325a:	e011      	b.n	8003280 <HAL_ADC_Init+0x2c8>
 800325c:	40012400 	.word	0x40012400
 8003260:	40012800 	.word	0x40012800
 8003264:	0800cd9c 	.word	0x0800cd9c
 8003268:	ffe1f7fd 	.word	0xffe1f7fd
 800326c:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	f043 0210 	orr.w	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop

0800328c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a5c      	ldr	r2, [pc, #368]	; (8003410 <HAL_ADC_Start_IT+0x184>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_ADC_Start_IT+0x2a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a5b      	ldr	r2, [pc, #364]	; (8003414 <HAL_ADC_Start_IT+0x188>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_ADC_Start_IT+0x2a>
 80032ac:	f240 516c 	movw	r1, #1388	; 0x56c
 80032b0:	4859      	ldr	r0, [pc, #356]	; (8003418 <HAL_ADC_Start_IT+0x18c>)
 80032b2:	f7ff f9e8 	bl	8002686 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_ADC_Start_IT+0x38>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e0a0      	b.n	8003406 <HAL_ADC_Start_IT+0x17a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fb85 	bl	80039dc <ADC_Enable>
 80032d2:	4603      	mov	r3, r0
 80032d4:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f040 808f 	bne.w	80033fc <HAL_ADC_Start_IT+0x170>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a47      	ldr	r2, [pc, #284]	; (8003414 <HAL_ADC_Start_IT+0x188>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d105      	bne.n	8003308 <HAL_ADC_Start_IT+0x7c>
 80032fc:	4b44      	ldr	r3, [pc, #272]	; (8003410 <HAL_ADC_Start_IT+0x184>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d115      	bne.n	8003334 <HAL_ADC_Start_IT+0xa8>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331e:	2b00      	cmp	r3, #0
 8003320:	d026      	beq.n	8003370 <HAL_ADC_Start_IT+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800332a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003332:	e01d      	b.n	8003370 <HAL_ADC_Start_IT+0xe4>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a32      	ldr	r2, [pc, #200]	; (8003410 <HAL_ADC_Start_IT+0x184>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_ADC_Start_IT+0xc8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a31      	ldr	r2, [pc, #196]	; (8003414 <HAL_ADC_Start_IT+0x188>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d10d      	bne.n	8003370 <HAL_ADC_Start_IT+0xe4>
 8003354:	4b2e      	ldr	r3, [pc, #184]	; (8003410 <HAL_ADC_Start_IT+0x184>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_ADC_Start_IT+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003368:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d006      	beq.n	800338a <HAL_ADC_Start_IT+0xfe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	f023 0206 	bic.w	r2, r3, #6
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c
 8003388:	e002      	b.n	8003390 <HAL_ADC_Start_IT+0x104>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0202 	mvn.w	r2, #2
 80033a0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0220 	orr.w	r2, r2, #32
 80033b0:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033c0:	d113      	bne.n	80033ea <HAL_ADC_Start_IT+0x15e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033c6:	4a13      	ldr	r2, [pc, #76]	; (8003414 <HAL_ADC_Start_IT+0x188>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d105      	bne.n	80033d8 <HAL_ADC_Start_IT+0x14c>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_ADC_Start_IT+0x184>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d108      	bne.n	80033ea <HAL_ADC_Start_IT+0x15e>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	e00c      	b.n	8003404 <HAL_ADC_Start_IT+0x178>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	e003      	b.n	8003404 <HAL_ADC_Start_IT+0x178>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003404:	7bfb      	ldrb	r3, [r7, #15]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40012400 	.word	0x40012400
 8003414:	40012800 	.word	0x40012800
 8003418:	0800cd9c 	.word	0x0800cd9c

0800341c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a09      	ldr	r2, [pc, #36]	; (8003450 <HAL_ADC_GetValue+0x34>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d009      	beq.n	8003442 <HAL_ADC_GetValue+0x26>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <HAL_ADC_GetValue+0x38>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_ADC_GetValue+0x26>
 8003438:	f240 61e3 	movw	r1, #1763	; 0x6e3
 800343c:	4806      	ldr	r0, [pc, #24]	; (8003458 <HAL_ADC_GetValue+0x3c>)
 800343e:	f7ff f922 	bl	8002686 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40012400 	.word	0x40012400
 8003454:	40012800 	.word	0x40012800
 8003458:	0800cd9c 	.word	0x0800cd9c

0800345c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a72      	ldr	r2, [pc, #456]	; (8003634 <HAL_ADC_IRQHandler+0x1d8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_ADC_IRQHandler+0x26>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a71      	ldr	r2, [pc, #452]	; (8003638 <HAL_ADC_IRQHandler+0x1dc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_ADC_IRQHandler+0x26>
 8003478:	f240 61f4 	movw	r1, #1780	; 0x6f4
 800347c:	486f      	ldr	r0, [pc, #444]	; (800363c <HAL_ADC_IRQHandler+0x1e0>)
 800347e:	f7ff f902 	bl	8002686 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	7b1b      	ldrb	r3, [r3, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_ADC_IRQHandler+0x40>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7b1b      	ldrb	r3, [r3, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d004      	beq.n	800349c <HAL_ADC_IRQHandler+0x40>
 8003492:	f240 61f5 	movw	r1, #1781	; 0x6f5
 8003496:	4869      	ldr	r0, [pc, #420]	; (800363c <HAL_ADC_IRQHandler+0x1e0>)
 8003498:	f7ff f8f5 	bl	8002686 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_ADC_IRQHandler+0x50>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d904      	bls.n	80034b6 <HAL_ADC_IRQHandler+0x5a>
 80034ac:	f240 61f6 	movw	r1, #1782	; 0x6f6
 80034b0:	4862      	ldr	r0, [pc, #392]	; (800363c <HAL_ADC_IRQHandler+0x1e0>)
 80034b2:	f7ff f8e8 	bl	8002686 <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d140      	bne.n	8003546 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d139      	bne.n	8003546 <HAL_ADC_IRQHandler+0xea>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d105      	bne.n	80034ea <HAL_ADC_IRQHandler+0x8e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034f4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034f8:	d11d      	bne.n	8003536 <HAL_ADC_IRQHandler+0xda>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d119      	bne.n	8003536 <HAL_ADC_IRQHandler+0xda>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0220 	bic.w	r2, r2, #32
 8003510:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <HAL_ADC_IRQHandler+0xda>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff fbc8 	bl	8002ccc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0212 	mvn.w	r2, #18
 8003544:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d14f      	bne.n	80035f4 <HAL_ADC_IRQHandler+0x198>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b04      	cmp	r3, #4
 8003560:	d148      	bne.n	80035f4 <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b00      	cmp	r3, #0
 800356c:	d105      	bne.n	800357a <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003584:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003588:	d012      	beq.n	80035b0 <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003594:	2b00      	cmp	r3, #0
 8003596:	d125      	bne.n	80035e4 <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80035a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80035a6:	d11d      	bne.n	80035e4 <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d119      	bne.n	80035e4 <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035be:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fa85 	bl	8003af4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f06f 020c 	mvn.w	r2, #12
 80035f2:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d114      	bne.n	800362c <HAL_ADC_IRQHandler+0x1d0>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10d      	bne.n	800362c <HAL_ADC_IRQHandler+0x1d0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f80f 	bl	8003640 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0201 	mvn.w	r2, #1
 800362a:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40012400 	.word	0x40012400
 8003638:	40012800 	.word	0x40012800
 800363c:	0800cd9c 	.word	0x0800cd9c

08003640 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
	...

08003654 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a88      	ldr	r2, [pc, #544]	; (800388c <HAL_ADC_ConfigChannel+0x238>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d009      	beq.n	8003684 <HAL_ADC_ConfigChannel+0x30>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a86      	ldr	r2, [pc, #536]	; (8003890 <HAL_ADC_ConfigChannel+0x23c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_ADC_ConfigChannel+0x30>
 800367a:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800367e:	4885      	ldr	r0, [pc, #532]	; (8003894 <HAL_ADC_ConfigChannel+0x240>)
 8003680:	f7ff f801 	bl	8002686 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d048      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d044      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d040      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d03c      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d038      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d034      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b06      	cmp	r3, #6
 80036ba:	d030      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b07      	cmp	r3, #7
 80036c2:	d02c      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d028      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b09      	cmp	r3, #9
 80036d2:	d024      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b0a      	cmp	r3, #10
 80036da:	d020      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b0b      	cmp	r3, #11
 80036e2:	d01c      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b0c      	cmp	r3, #12
 80036ea:	d018      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b0d      	cmp	r3, #13
 80036f2:	d014      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b0e      	cmp	r3, #14
 80036fa:	d010      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b0f      	cmp	r3, #15
 8003702:	d00c      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b10      	cmp	r3, #16
 800370a:	d008      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b11      	cmp	r3, #17
 8003712:	d004      	beq.n	800371e <HAL_ADC_ConfigChannel+0xca>
 8003714:	f240 71d2 	movw	r1, #2002	; 0x7d2
 8003718:	485e      	ldr	r0, [pc, #376]	; (8003894 <HAL_ADC_ConfigChannel+0x240>)
 800371a:	f7fe ffb4 	bl	8002686 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d040      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d03c      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d038      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b04      	cmp	r3, #4
 800373c:	d034      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b05      	cmp	r3, #5
 8003744:	d030      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b06      	cmp	r3, #6
 800374c:	d02c      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b07      	cmp	r3, #7
 8003754:	d028      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b08      	cmp	r3, #8
 800375c:	d024      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b09      	cmp	r3, #9
 8003764:	d020      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b0a      	cmp	r3, #10
 800376c:	d01c      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b0b      	cmp	r3, #11
 8003774:	d018      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d014      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b0d      	cmp	r3, #13
 8003784:	d010      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b0e      	cmp	r3, #14
 800378c:	d00c      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b0f      	cmp	r3, #15
 8003794:	d008      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b10      	cmp	r3, #16
 800379c:	d004      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x154>
 800379e:	f240 71d3 	movw	r1, #2003	; 0x7d3
 80037a2:	483c      	ldr	r0, [pc, #240]	; (8003894 <HAL_ADC_ConfigChannel+0x240>)
 80037a4:	f7fe ff6f 	bl	8002686 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x19e>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d01c      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x19e>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d018      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x19e>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d014      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x19e>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d010      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x19e>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d00c      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x19e>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b06      	cmp	r3, #6
 80037de:	d008      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x19e>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b07      	cmp	r3, #7
 80037e6:	d004      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x19e>
 80037e8:	f240 71d4 	movw	r1, #2004	; 0x7d4
 80037ec:	4829      	ldr	r0, [pc, #164]	; (8003894 <HAL_ADC_ConfigChannel+0x240>)
 80037ee:	f7fe ff4a 	bl	8002686 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x1ac>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e0e2      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x372>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b06      	cmp	r3, #6
 800380e:	d81c      	bhi.n	800384a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	3b05      	subs	r3, #5
 8003822:	221f      	movs	r2, #31
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	4019      	ands	r1, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	3b05      	subs	r3, #5
 800383c:	fa00 f203 	lsl.w	r2, r0, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	635a      	str	r2, [r3, #52]	; 0x34
 8003848:	e042      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b0c      	cmp	r3, #12
 8003850:	d822      	bhi.n	8003898 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	3b23      	subs	r3, #35	; 0x23
 8003864:	221f      	movs	r2, #31
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	4019      	ands	r1, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	3b23      	subs	r3, #35	; 0x23
 800387e:	fa00 f203 	lsl.w	r2, r0, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
 800388a:	e021      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x27c>
 800388c:	40012400 	.word	0x40012400
 8003890:	40012800 	.word	0x40012800
 8003894:	0800cd9c 	.word	0x0800cd9c
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	3b41      	subs	r3, #65	; 0x41
 80038aa:	221f      	movs	r2, #31
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	4019      	ands	r1, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	3b41      	subs	r3, #65	; 0x41
 80038c4:	fa00 f203 	lsl.w	r2, r0, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b09      	cmp	r3, #9
 80038d6:	d91c      	bls.n	8003912 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68d9      	ldr	r1, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	3b1e      	subs	r3, #30
 80038ea:	2207      	movs	r2, #7
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	4019      	ands	r1, r3
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6898      	ldr	r0, [r3, #8]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4413      	add	r3, r2
 8003902:	3b1e      	subs	r3, #30
 8003904:	fa00 f203 	lsl.w	r2, r0, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	e019      	b.n	8003946 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6919      	ldr	r1, [r3, #16]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	2207      	movs	r2, #7
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	4019      	ands	r1, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6898      	ldr	r0, [r3, #8]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	fa00 f203 	lsl.w	r2, r0, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b10      	cmp	r3, #16
 800394c:	d003      	beq.n	8003956 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003952:	2b11      	cmp	r3, #17
 8003954:	d132      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1d      	ldr	r2, [pc, #116]	; (80039d0 <HAL_ADC_ConfigChannel+0x37c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d125      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d126      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800397c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b10      	cmp	r3, #16
 8003984:	d11a      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_ADC_ConfigChannel+0x380>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <HAL_ADC_ConfigChannel+0x384>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	0c9a      	lsrs	r2, r3, #18
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800399c:	e002      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f9      	bne.n	800399e <HAL_ADC_ConfigChannel+0x34a>
 80039aa:	e007      	b.n	80039bc <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40012400 	.word	0x40012400
 80039d4:	20000004 	.word	0x20000004
 80039d8:	431bde83 	.word	0x431bde83

080039dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d039      	beq.n	8003a6e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <ADC_Enable+0x9c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1b      	ldr	r2, [pc, #108]	; (8003a7c <ADC_Enable+0xa0>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	0c9b      	lsrs	r3, r3, #18
 8003a16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a18:	e002      	b.n	8003a20 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f9      	bne.n	8003a1a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a26:	f7ff fa99 	bl	8002f5c <HAL_GetTick>
 8003a2a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a2c:	e018      	b.n	8003a60 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a2e:	f7ff fa95 	bl	8002f5c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d911      	bls.n	8003a60 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	f043 0210 	orr.w	r2, r3, #16
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	f043 0201 	orr.w	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e007      	b.n	8003a70 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d1df      	bne.n	8003a2e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000004 	.word	0x20000004
 8003a7c:	431bde83 	.word	0x431bde83

08003a80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d127      	bne.n	8003aea <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aaa:	f7ff fa57 	bl	8002f5c <HAL_GetTick>
 8003aae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ab0:	e014      	b.n	8003adc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ab2:	f7ff fa53 	bl	8002f5c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d90d      	bls.n	8003adc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	f043 0210 	orr.w	r2, r3, #16
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e007      	b.n	8003aec <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d0e3      	beq.n	8003ab2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
	...

08003b08 <__NVIC_SetPriorityGrouping>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b18:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <__NVIC_SetPriorityGrouping+0x44>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b24:	4013      	ands	r3, r2
 8003b26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b3a:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <__NVIC_SetPriorityGrouping+0x44>)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	60d3      	str	r3, [r2, #12]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <__NVIC_GetPriorityGrouping>:
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <__NVIC_GetPriorityGrouping+0x18>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	0a1b      	lsrs	r3, r3, #8
 8003b5a:	f003 0307 	and.w	r3, r3, #7
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <__NVIC_EnableIRQ>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	db0b      	blt.n	8003b96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	f003 021f 	and.w	r2, r3, #31
 8003b84:	4906      	ldr	r1, [pc, #24]	; (8003ba0 <__NVIC_EnableIRQ+0x34>)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	e000e100 	.word	0xe000e100

08003ba4 <__NVIC_SetPriority>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	db0a      	blt.n	8003bce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	490c      	ldr	r1, [pc, #48]	; (8003bf0 <__NVIC_SetPriority+0x4c>)
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	0112      	lsls	r2, r2, #4
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003bcc:	e00a      	b.n	8003be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	4908      	ldr	r1, [pc, #32]	; (8003bf4 <__NVIC_SetPriority+0x50>)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	3b04      	subs	r3, #4
 8003bdc:	0112      	lsls	r2, r2, #4
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	440b      	add	r3, r1
 8003be2:	761a      	strb	r2, [r3, #24]
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	e000e100 	.word	0xe000e100
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <NVIC_EncodePriority>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f1c3 0307 	rsb	r3, r3, #7
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	bf28      	it	cs
 8003c16:	2304      	movcs	r3, #4
 8003c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d902      	bls.n	8003c28 <NVIC_EncodePriority+0x30>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3b03      	subs	r3, #3
 8003c26:	e000      	b.n	8003c2a <NVIC_EncodePriority+0x32>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43da      	mvns	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	43d9      	mvns	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	4313      	orrs	r3, r2
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3724      	adds	r7, #36	; 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b07      	cmp	r3, #7
 8003c68:	d00f      	beq.n	8003c8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d00c      	beq.n	8003c8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d009      	beq.n	8003c8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d006      	beq.n	8003c8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d003      	beq.n	8003c8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c82:	2192      	movs	r1, #146	; 0x92
 8003c84:	4804      	ldr	r0, [pc, #16]	; (8003c98 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003c86:	f7fe fcfe 	bl	8002686 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ff3c 	bl	8003b08 <__NVIC_SetPriorityGrouping>
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	0800cdd4 	.word	0x0800cdd4

08003c9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0f      	cmp	r3, #15
 8003cb2:	d903      	bls.n	8003cbc <HAL_NVIC_SetPriority+0x20>
 8003cb4:	21aa      	movs	r1, #170	; 0xaa
 8003cb6:	480e      	ldr	r0, [pc, #56]	; (8003cf0 <HAL_NVIC_SetPriority+0x54>)
 8003cb8:	f7fe fce5 	bl	8002686 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b0f      	cmp	r3, #15
 8003cc0:	d903      	bls.n	8003cca <HAL_NVIC_SetPriority+0x2e>
 8003cc2:	21ab      	movs	r1, #171	; 0xab
 8003cc4:	480a      	ldr	r0, [pc, #40]	; (8003cf0 <HAL_NVIC_SetPriority+0x54>)
 8003cc6:	f7fe fcde 	bl	8002686 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cca:	f7ff ff41 	bl	8003b50 <__NVIC_GetPriorityGrouping>
 8003cce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	6978      	ldr	r0, [r7, #20]
 8003cd6:	f7ff ff8f 	bl	8003bf8 <NVIC_EncodePriority>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff ff5e 	bl	8003ba4 <__NVIC_SetPriority>
}
 8003ce8:	bf00      	nop
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	0800cdd4 	.word	0x0800cdd4

08003cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	da03      	bge.n	8003d0e <HAL_NVIC_EnableIRQ+0x1a>
 8003d06:	21be      	movs	r1, #190	; 0xbe
 8003d08:	4805      	ldr	r0, [pc, #20]	; (8003d20 <HAL_NVIC_EnableIRQ+0x2c>)
 8003d0a:	f7fe fcbc 	bl	8002686 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ff2a 	bl	8003b6c <__NVIC_EnableIRQ>
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	0800cdd4 	.word	0x0800cdd4

08003d24 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d3e:	4b49      	ldr	r3, [pc, #292]	; (8003e64 <HAL_FLASH_Program+0x140>)
 8003d40:	7e1b      	ldrb	r3, [r3, #24]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_FLASH_Program+0x26>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e088      	b.n	8003e5c <HAL_FLASH_Program+0x138>
 8003d4a:	4b46      	ldr	r3, [pc, #280]	; (8003e64 <HAL_FLASH_Program+0x140>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d009      	beq.n	8003d6a <HAL_FLASH_Program+0x46>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d006      	beq.n	8003d6a <HAL_FLASH_Program+0x46>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d003      	beq.n	8003d6a <HAL_FLASH_Program+0x46>
 8003d62:	21b2      	movs	r1, #178	; 0xb2
 8003d64:	4840      	ldr	r0, [pc, #256]	; (8003e68 <HAL_FLASH_Program+0x144>)
 8003d66:	f7fe fc8e 	bl	8002686 <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d70:	d31e      	bcc.n	8003db0 <HAL_FLASH_Program+0x8c>
 8003d72:	4b3e      	ldr	r3, [pc, #248]	; (8003e6c <HAL_FLASH_Program+0x148>)
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	2b80      	cmp	r3, #128	; 0x80
 8003d78:	d104      	bne.n	8003d84 <HAL_FLASH_Program+0x60>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4a3c      	ldr	r2, [pc, #240]	; (8003e70 <HAL_FLASH_Program+0x14c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d816      	bhi.n	8003db0 <HAL_FLASH_Program+0x8c>
 8003d82:	e019      	b.n	8003db8 <HAL_FLASH_Program+0x94>
 8003d84:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <HAL_FLASH_Program+0x148>)
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d104      	bne.n	8003d96 <HAL_FLASH_Program+0x72>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4a39      	ldr	r2, [pc, #228]	; (8003e74 <HAL_FLASH_Program+0x150>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d80d      	bhi.n	8003db0 <HAL_FLASH_Program+0x8c>
 8003d94:	e010      	b.n	8003db8 <HAL_FLASH_Program+0x94>
 8003d96:	4b35      	ldr	r3, [pc, #212]	; (8003e6c <HAL_FLASH_Program+0x148>)
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d104      	bne.n	8003da8 <HAL_FLASH_Program+0x84>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4a35      	ldr	r2, [pc, #212]	; (8003e78 <HAL_FLASH_Program+0x154>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d204      	bcs.n	8003db0 <HAL_FLASH_Program+0x8c>
 8003da6:	e007      	b.n	8003db8 <HAL_FLASH_Program+0x94>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4a34      	ldr	r2, [pc, #208]	; (8003e7c <HAL_FLASH_Program+0x158>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d303      	bcc.n	8003db8 <HAL_FLASH_Program+0x94>
 8003db0:	21b3      	movs	r1, #179	; 0xb3
 8003db2:	482d      	ldr	r0, [pc, #180]	; (8003e68 <HAL_FLASH_Program+0x144>)
 8003db4:	f7fe fc67 	bl	8002686 <assert_failed>
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003db8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dbc:	f000 f8b4 	bl	8003f28 <FLASH_WaitForLastOperation>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d144      	bne.n	8003e54 <HAL_FLASH_Program+0x130>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d102      	bne.n	8003dd6 <HAL_FLASH_Program+0xb2>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	757b      	strb	r3, [r7, #21]
 8003dd4:	e007      	b.n	8003de6 <HAL_FLASH_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d102      	bne.n	8003de2 <HAL_FLASH_Program+0xbe>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	757b      	strb	r3, [r7, #21]
 8003de0:	e001      	b.n	8003de6 <HAL_FLASH_Program+0xc2>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003de2:	2304      	movs	r3, #4
 8003de4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	75bb      	strb	r3, [r7, #22]
 8003dea:	e02d      	b.n	8003e48 <HAL_FLASH_Program+0x124>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003dec:	7dbb      	ldrb	r3, [r7, #22]
 8003dee:	005a      	lsls	r2, r3, #1
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	eb02 0c03 	add.w	ip, r2, r3
 8003df6:	7dbb      	ldrb	r3, [r7, #22]
 8003df8:	0119      	lsls	r1, r3, #4
 8003dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dfe:	f1c1 0620 	rsb	r6, r1, #32
 8003e02:	f1a1 0020 	sub.w	r0, r1, #32
 8003e06:	fa22 f401 	lsr.w	r4, r2, r1
 8003e0a:	fa03 f606 	lsl.w	r6, r3, r6
 8003e0e:	4334      	orrs	r4, r6
 8003e10:	fa23 f000 	lsr.w	r0, r3, r0
 8003e14:	4304      	orrs	r4, r0
 8003e16:	fa23 f501 	lsr.w	r5, r3, r1
 8003e1a:	b2a3      	uxth	r3, r4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4660      	mov	r0, ip
 8003e20:	f000 f866 	bl	8003ef0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e28:	f000 f87e 	bl	8003f28 <FLASH_WaitForLastOperation>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003e30:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <HAL_FLASH_Program+0x15c>)
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <HAL_FLASH_Program+0x15c>)
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d107      	bne.n	8003e52 <HAL_FLASH_Program+0x12e>
    for (index = 0U; index < nbiterations; index++)
 8003e42:	7dbb      	ldrb	r3, [r7, #22]
 8003e44:	3301      	adds	r3, #1
 8003e46:	75bb      	strb	r3, [r7, #22]
 8003e48:	7dba      	ldrb	r2, [r7, #22]
 8003e4a:	7d7b      	ldrb	r3, [r7, #21]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d3cd      	bcc.n	8003dec <HAL_FLASH_Program+0xc8>
 8003e50:	e000      	b.n	8003e54 <HAL_FLASH_Program+0x130>
      {
        break;
 8003e52:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_FLASH_Program+0x140>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	761a      	strb	r2, [r3, #24]

  return status;
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	371c      	adds	r7, #28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e64:	20003b08 	.word	0x20003b08
 8003e68:	0800ce10 	.word	0x0800ce10
 8003e6c:	1ffff7e0 	.word	0x1ffff7e0
 8003e70:	0801ffff 	.word	0x0801ffff
 8003e74:	0800ffff 	.word	0x0800ffff
 8003e78:	08008000 	.word	0x08008000
 8003e7c:	08004000 	.word	0x08004000
 8003e80:	40022000 	.word	0x40022000

08003e84 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <HAL_FLASH_Unlock+0x40>)
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <HAL_FLASH_Unlock+0x40>)
 8003e9c:	4a0a      	ldr	r2, [pc, #40]	; (8003ec8 <HAL_FLASH_Unlock+0x44>)
 8003e9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_FLASH_Unlock+0x40>)
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <HAL_FLASH_Unlock+0x48>)
 8003ea4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ea6:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <HAL_FLASH_Unlock+0x40>)
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40022000 	.word	0x40022000
 8003ec8:	45670123 	.word	0x45670123
 8003ecc:	cdef89ab 	.word	0xcdef89ab

08003ed0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_FLASH_Lock+0x1c>)
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	4a04      	ldr	r2, [pc, #16]	; (8003eec <HAL_FLASH_Lock+0x1c>)
 8003eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ede:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40022000 	.word	0x40022000

08003ef0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003efc:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <FLASH_Program_HalfWord+0x30>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <FLASH_Program_HalfWord+0x34>)
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	4a07      	ldr	r2, [pc, #28]	; (8003f24 <FLASH_Program_HalfWord+0x34>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	887a      	ldrh	r2, [r7, #2]
 8003f12:	801a      	strh	r2, [r3, #0]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20003b08 	.word	0x20003b08
 8003f24:	40022000 	.word	0x40022000

08003f28 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003f30:	f7ff f814 	bl	8002f5c <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f36:	e010      	b.n	8003f5a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3e:	d00c      	beq.n	8003f5a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <FLASH_WaitForLastOperation+0x2e>
 8003f46:	f7ff f809 	bl	8002f5c <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d201      	bcs.n	8003f5a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e025      	b.n	8003fa6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <FLASH_WaitForLastOperation+0x88>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e8      	bne.n	8003f38 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003f66:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <FLASH_WaitForLastOperation+0x88>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <FLASH_WaitForLastOperation+0x88>)
 8003f74:	2220      	movs	r2, #32
 8003f76:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <FLASH_WaitForLastOperation+0x88>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <FLASH_WaitForLastOperation+0x88>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003f90:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <FLASH_WaitForLastOperation+0x88>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003f9c:	f000 f80a 	bl	8003fb4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40022000 	.word	0x40022000

08003fb4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003fbe:	4b23      	ldr	r3, [pc, #140]	; (800404c <FLASH_SetErrorCode+0x98>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003fca:	4b21      	ldr	r3, [pc, #132]	; (8004050 <FLASH_SetErrorCode+0x9c>)
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f043 0302 	orr.w	r3, r3, #2
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <FLASH_SetErrorCode+0x9c>)
 8003fd4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f043 0310 	orr.w	r3, r3, #16
 8003fdc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003fde:	4b1b      	ldr	r3, [pc, #108]	; (800404c <FLASH_SetErrorCode+0x98>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003fea:	4b19      	ldr	r3, [pc, #100]	; (8004050 <FLASH_SetErrorCode+0x9c>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	4a17      	ldr	r2, [pc, #92]	; (8004050 <FLASH_SetErrorCode+0x9c>)
 8003ff4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f043 0304 	orr.w	r3, r3, #4
 8003ffc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <FLASH_SetErrorCode+0x98>)
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800400a:	4b11      	ldr	r3, [pc, #68]	; (8004050 <FLASH_SetErrorCode+0x9c>)
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f043 0304 	orr.w	r3, r3, #4
 8004012:	4a0f      	ldr	r2, [pc, #60]	; (8004050 <FLASH_SetErrorCode+0x9c>)
 8004014:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <FLASH_SetErrorCode+0x98>)
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	4a0c      	ldr	r2, [pc, #48]	; (800404c <FLASH_SetErrorCode+0x98>)
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f240 1201 	movw	r2, #257	; 0x101
 8004028:	4293      	cmp	r3, r2
 800402a:	d106      	bne.n	800403a <FLASH_SetErrorCode+0x86>
 800402c:	4b07      	ldr	r3, [pc, #28]	; (800404c <FLASH_SetErrorCode+0x98>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	4a06      	ldr	r2, [pc, #24]	; (800404c <FLASH_SetErrorCode+0x98>)
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	61d3      	str	r3, [r2, #28]
}  
 8004038:	e002      	b.n	8004040 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800403a:	4a04      	ldr	r2, [pc, #16]	; (800404c <FLASH_SetErrorCode+0x98>)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60d3      	str	r3, [r2, #12]
}  
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40022000 	.word	0x40022000
 8004050:	20003b08 	.word	0x20003b08

08004054 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004066:	4b70      	ldr	r3, [pc, #448]	; (8004228 <HAL_FLASHEx_Erase+0x1d4>)
 8004068:	7e1b      	ldrb	r3, [r3, #24]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_FLASHEx_Erase+0x1e>
 800406e:	2302      	movs	r3, #2
 8004070:	e0d5      	b.n	800421e <HAL_FLASHEx_Erase+0x1ca>
 8004072:	4b6d      	ldr	r3, [pc, #436]	; (8004228 <HAL_FLASHEx_Erase+0x1d4>)
 8004074:	2201      	movs	r2, #1
 8004076:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <HAL_FLASHEx_Erase+0x3c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d003      	beq.n	8004090 <HAL_FLASHEx_Erase+0x3c>
 8004088:	21a8      	movs	r1, #168	; 0xa8
 800408a:	4868      	ldr	r0, [pc, #416]	; (800422c <HAL_FLASHEx_Erase+0x1d8>)
 800408c:	f7fe fafb 	bl	8002686 <assert_failed>

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d117      	bne.n	80040c8 <HAL_FLASHEx_Erase+0x74>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004098:	f24c 3050 	movw	r0, #50000	; 0xc350
 800409c:	f7ff ff44 	bl	8003f28 <FLASH_WaitForLastOperation>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f040 80b7 	bne.w	8004216 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80040a8:	2001      	movs	r0, #1
 80040aa:	f000 f8cd 	bl	8004248 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040b2:	f7ff ff39 	bl	8003f28 <FLASH_WaitForLastOperation>
 80040b6:	4603      	mov	r3, r0
 80040b8:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80040ba:	4b5d      	ldr	r3, [pc, #372]	; (8004230 <HAL_FLASHEx_Erase+0x1dc>)
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	4a5c      	ldr	r2, [pc, #368]	; (8004230 <HAL_FLASHEx_Erase+0x1dc>)
 80040c0:	f023 0304 	bic.w	r3, r3, #4
 80040c4:	6113      	str	r3, [r2, #16]
 80040c6:	e0a6      	b.n	8004216 <HAL_FLASHEx_Erase+0x1c2>
  }
  else
  {
    /* Page Erase is requested */
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d0:	d322      	bcc.n	8004118 <HAL_FLASHEx_Erase+0xc4>
 80040d2:	4b58      	ldr	r3, [pc, #352]	; (8004234 <HAL_FLASHEx_Erase+0x1e0>)
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	2b80      	cmp	r3, #128	; 0x80
 80040d8:	d105      	bne.n	80040e6 <HAL_FLASHEx_Erase+0x92>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	4a56      	ldr	r2, [pc, #344]	; (8004238 <HAL_FLASHEx_Erase+0x1e4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d819      	bhi.n	8004118 <HAL_FLASHEx_Erase+0xc4>
 80040e4:	e01c      	b.n	8004120 <HAL_FLASHEx_Erase+0xcc>
 80040e6:	4b53      	ldr	r3, [pc, #332]	; (8004234 <HAL_FLASHEx_Erase+0x1e0>)
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	2b40      	cmp	r3, #64	; 0x40
 80040ec:	d105      	bne.n	80040fa <HAL_FLASHEx_Erase+0xa6>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	4a52      	ldr	r2, [pc, #328]	; (800423c <HAL_FLASHEx_Erase+0x1e8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d80f      	bhi.n	8004118 <HAL_FLASHEx_Erase+0xc4>
 80040f8:	e012      	b.n	8004120 <HAL_FLASHEx_Erase+0xcc>
 80040fa:	4b4e      	ldr	r3, [pc, #312]	; (8004234 <HAL_FLASHEx_Erase+0x1e0>)
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d105      	bne.n	800410e <HAL_FLASHEx_Erase+0xba>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	4a4e      	ldr	r2, [pc, #312]	; (8004240 <HAL_FLASHEx_Erase+0x1ec>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d205      	bcs.n	8004118 <HAL_FLASHEx_Erase+0xc4>
 800410c:	e008      	b.n	8004120 <HAL_FLASHEx_Erase+0xcc>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	4a4c      	ldr	r2, [pc, #304]	; (8004244 <HAL_FLASHEx_Erase+0x1f0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d303      	bcc.n	8004120 <HAL_FLASHEx_Erase+0xcc>
 8004118:	21e9      	movs	r1, #233	; 0xe9
 800411a:	4844      	ldr	r0, [pc, #272]	; (800422c <HAL_FLASHEx_Erase+0x1d8>)
 800411c:	f7fe fab3 	bl	8002686 <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 8004120:	4b44      	ldr	r3, [pc, #272]	; (8004234 <HAL_FLASHEx_Erase+0x1e0>)
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	2b80      	cmp	r3, #128	; 0x80
 8004126:	d10d      	bne.n	8004144 <HAL_FLASHEx_Erase+0xf0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	029b      	lsls	r3, r3, #10
 8004132:	4413      	add	r3, r2
 8004134:	3b01      	subs	r3, #1
 8004136:	4a40      	ldr	r2, [pc, #256]	; (8004238 <HAL_FLASHEx_Erase+0x1e4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	bf94      	ite	ls
 800413c:	2301      	movls	r3, #1
 800413e:	2300      	movhi	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e030      	b.n	80041a6 <HAL_FLASHEx_Erase+0x152>
 8004144:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_FLASHEx_Erase+0x1e0>)
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d10d      	bne.n	8004168 <HAL_FLASHEx_Erase+0x114>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	029b      	lsls	r3, r3, #10
 8004156:	4413      	add	r3, r2
 8004158:	3b01      	subs	r3, #1
 800415a:	4a38      	ldr	r2, [pc, #224]	; (800423c <HAL_FLASHEx_Erase+0x1e8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	bf94      	ite	ls
 8004160:	2301      	movls	r3, #1
 8004162:	2300      	movhi	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e01e      	b.n	80041a6 <HAL_FLASHEx_Erase+0x152>
 8004168:	4b32      	ldr	r3, [pc, #200]	; (8004234 <HAL_FLASHEx_Erase+0x1e0>)
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	2b20      	cmp	r3, #32
 800416e:	d10d      	bne.n	800418c <HAL_FLASHEx_Erase+0x138>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	029b      	lsls	r3, r3, #10
 800417a:	4413      	add	r3, r2
 800417c:	3b01      	subs	r3, #1
 800417e:	4a30      	ldr	r2, [pc, #192]	; (8004240 <HAL_FLASHEx_Erase+0x1ec>)
 8004180:	4293      	cmp	r3, r2
 8004182:	bf34      	ite	cc
 8004184:	2301      	movcc	r3, #1
 8004186:	2300      	movcs	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e00c      	b.n	80041a6 <HAL_FLASHEx_Erase+0x152>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	029b      	lsls	r3, r3, #10
 8004196:	4413      	add	r3, r2
 8004198:	3b01      	subs	r3, #1
 800419a:	4a2a      	ldr	r2, [pc, #168]	; (8004244 <HAL_FLASHEx_Erase+0x1f0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	bf34      	ite	cc
 80041a0:	2301      	movcc	r3, #1
 80041a2:	2300      	movcs	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <HAL_FLASHEx_Erase+0x15e>
 80041aa:	21ea      	movs	r1, #234	; 0xea
 80041ac:	481f      	ldr	r0, [pc, #124]	; (800422c <HAL_FLASHEx_Erase+0x1d8>)
 80041ae:	f7fe fa6a 	bl	8002686 <assert_failed>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80041b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041b6:	f7ff feb7 	bl	8003f28 <FLASH_WaitForLastOperation>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d12a      	bne.n	8004216 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f04f 32ff 	mov.w	r2, #4294967295
 80041c6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	e019      	b.n	8004204 <HAL_FLASHEx_Erase+0x1b0>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80041d0:	68b8      	ldr	r0, [r7, #8]
 80041d2:	f000 f85f 	bl	8004294 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041da:	f7ff fea5 	bl	8003f28 <FLASH_WaitForLastOperation>
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <HAL_FLASHEx_Erase+0x1dc>)
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	4a12      	ldr	r2, [pc, #72]	; (8004230 <HAL_FLASHEx_Erase+0x1dc>)
 80041e8:	f023 0302 	bic.w	r3, r3, #2
 80041ec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_FLASHEx_Erase+0x1a8>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	601a      	str	r2, [r3, #0]
            break;
 80041fa:	e00c      	b.n	8004216 <HAL_FLASHEx_Erase+0x1c2>
            address += FLASH_PAGE_SIZE)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004202:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	029a      	lsls	r2, r3, #10
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	d3dc      	bcc.n	80041d0 <HAL_FLASHEx_Erase+0x17c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004216:	4b04      	ldr	r3, [pc, #16]	; (8004228 <HAL_FLASHEx_Erase+0x1d4>)
 8004218:	2200      	movs	r2, #0
 800421a:	761a      	strb	r2, [r3, #24]

  return status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20003b08 	.word	0x20003b08
 800422c:	0800ce4c 	.word	0x0800ce4c
 8004230:	40022000 	.word	0x40022000
 8004234:	1ffff7e0 	.word	0x1ffff7e0
 8004238:	0801ffff 	.word	0x0801ffff
 800423c:	0800ffff 	.word	0x0800ffff
 8004240:	08008000 	.word	0x08008000
 8004244:	08004000 	.word	0x08004000

08004248 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d004      	beq.n	8004260 <FLASH_MassErase+0x18>
 8004256:	f240 2156 	movw	r1, #598	; 0x256
 800425a:	480b      	ldr	r0, [pc, #44]	; (8004288 <FLASH_MassErase+0x40>)
 800425c:	f7fe fa13 	bl	8002686 <assert_failed>

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <FLASH_MassErase+0x44>)
 8004262:	2200      	movs	r2, #0
 8004264:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <FLASH_MassErase+0x48>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <FLASH_MassErase+0x48>)
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <FLASH_MassErase+0x48>)
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	4a06      	ldr	r2, [pc, #24]	; (8004290 <FLASH_MassErase+0x48>)
 8004278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800427c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	0800ce4c 	.word	0x0800ce4c
 800428c:	20003b08 	.word	0x20003b08
 8004290:	40022000 	.word	0x40022000

08004294 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <FLASH_PageErase+0x38>)
 800429e:	2200      	movs	r2, #0
 80042a0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <FLASH_PageErase+0x3c>)
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <FLASH_PageErase+0x3c>)
 80042a8:	f043 0302 	orr.w	r3, r3, #2
 80042ac:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80042ae:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <FLASH_PageErase+0x3c>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <FLASH_PageErase+0x3c>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	4a05      	ldr	r2, [pc, #20]	; (80042d0 <FLASH_PageErase+0x3c>)
 80042ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042be:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20003b08 	.word	0x20003b08
 80042d0:	40022000 	.word	0x40022000

080042d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042de:	2300      	movs	r3, #0
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042e2:	2300      	movs	r3, #0
 80042e4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4aa1      	ldr	r2, [pc, #644]	; (8004570 <HAL_GPIO_Init+0x29c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <HAL_GPIO_Init+0x42>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4aa0      	ldr	r2, [pc, #640]	; (8004574 <HAL_GPIO_Init+0x2a0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00f      	beq.n	8004316 <HAL_GPIO_Init+0x42>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a9f      	ldr	r2, [pc, #636]	; (8004578 <HAL_GPIO_Init+0x2a4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00b      	beq.n	8004316 <HAL_GPIO_Init+0x42>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a9e      	ldr	r2, [pc, #632]	; (800457c <HAL_GPIO_Init+0x2a8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <HAL_GPIO_Init+0x42>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a9d      	ldr	r2, [pc, #628]	; (8004580 <HAL_GPIO_Init+0x2ac>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x42>
 800430e:	21bd      	movs	r1, #189	; 0xbd
 8004310:	489c      	ldr	r0, [pc, #624]	; (8004584 <HAL_GPIO_Init+0x2b0>)
 8004312:	f7fe f9b8 	bl	8002686 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_GPIO_Init+0x58>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	041b      	lsls	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x60>
 800432c:	21be      	movs	r1, #190	; 0xbe
 800432e:	4895      	ldr	r0, [pc, #596]	; (8004584 <HAL_GPIO_Init+0x2b0>)
 8004330:	f7fe f9a9 	bl	8002686 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 821d 	beq.w	8004778 <HAL_GPIO_Init+0x4a4>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b01      	cmp	r3, #1
 8004344:	f000 8218 	beq.w	8004778 <HAL_GPIO_Init+0x4a4>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b11      	cmp	r3, #17
 800434e:	f000 8213 	beq.w	8004778 <HAL_GPIO_Init+0x4a4>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b02      	cmp	r3, #2
 8004358:	f000 820e 	beq.w	8004778 <HAL_GPIO_Init+0x4a4>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b12      	cmp	r3, #18
 8004362:	f000 8209 	beq.w	8004778 <HAL_GPIO_Init+0x4a4>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	4a87      	ldr	r2, [pc, #540]	; (8004588 <HAL_GPIO_Init+0x2b4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	f000 8203 	beq.w	8004778 <HAL_GPIO_Init+0x4a4>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4a85      	ldr	r2, [pc, #532]	; (800458c <HAL_GPIO_Init+0x2b8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	f000 81fd 	beq.w	8004778 <HAL_GPIO_Init+0x4a4>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4a83      	ldr	r2, [pc, #524]	; (8004590 <HAL_GPIO_Init+0x2bc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	f000 81f7 	beq.w	8004778 <HAL_GPIO_Init+0x4a4>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4a81      	ldr	r2, [pc, #516]	; (8004594 <HAL_GPIO_Init+0x2c0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	f000 81f1 	beq.w	8004778 <HAL_GPIO_Init+0x4a4>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4a7f      	ldr	r2, [pc, #508]	; (8004598 <HAL_GPIO_Init+0x2c4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	f000 81eb 	beq.w	8004778 <HAL_GPIO_Init+0x4a4>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4a7d      	ldr	r2, [pc, #500]	; (800459c <HAL_GPIO_Init+0x2c8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	f000 81e5 	beq.w	8004778 <HAL_GPIO_Init+0x4a4>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	f000 81e0 	beq.w	8004778 <HAL_GPIO_Init+0x4a4>
 80043b8:	21bf      	movs	r1, #191	; 0xbf
 80043ba:	4872      	ldr	r0, [pc, #456]	; (8004584 <HAL_GPIO_Init+0x2b0>)
 80043bc:	f7fe f963 	bl	8002686 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043c0:	e1da      	b.n	8004778 <HAL_GPIO_Init+0x4a4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80043c2:	2201      	movs	r2, #1
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	429a      	cmp	r2, r3
 80043dc:	f040 81c9 	bne.w	8004772 <HAL_GPIO_Init+0x49e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a63      	ldr	r2, [pc, #396]	; (8004570 <HAL_GPIO_Init+0x29c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d013      	beq.n	8004410 <HAL_GPIO_Init+0x13c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a62      	ldr	r2, [pc, #392]	; (8004574 <HAL_GPIO_Init+0x2a0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00f      	beq.n	8004410 <HAL_GPIO_Init+0x13c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a61      	ldr	r2, [pc, #388]	; (8004578 <HAL_GPIO_Init+0x2a4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00b      	beq.n	8004410 <HAL_GPIO_Init+0x13c>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a60      	ldr	r2, [pc, #384]	; (800457c <HAL_GPIO_Init+0x2a8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d007      	beq.n	8004410 <HAL_GPIO_Init+0x13c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a5f      	ldr	r2, [pc, #380]	; (8004580 <HAL_GPIO_Init+0x2ac>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <HAL_GPIO_Init+0x13c>
 8004408:	21cd      	movs	r1, #205	; 0xcd
 800440a:	485e      	ldr	r0, [pc, #376]	; (8004584 <HAL_GPIO_Init+0x2b0>)
 800440c:	f7fe f93b 	bl	8002686 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4a61      	ldr	r2, [pc, #388]	; (800459c <HAL_GPIO_Init+0x2c8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	f000 80c2 	beq.w	80045a0 <HAL_GPIO_Init+0x2cc>
 800441c:	4a5f      	ldr	r2, [pc, #380]	; (800459c <HAL_GPIO_Init+0x2c8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	f200 80e8 	bhi.w	80045f4 <HAL_GPIO_Init+0x320>
 8004424:	4a5a      	ldr	r2, [pc, #360]	; (8004590 <HAL_GPIO_Init+0x2bc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	f000 80ba 	beq.w	80045a0 <HAL_GPIO_Init+0x2cc>
 800442c:	4a58      	ldr	r2, [pc, #352]	; (8004590 <HAL_GPIO_Init+0x2bc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	f200 80e0 	bhi.w	80045f4 <HAL_GPIO_Init+0x320>
 8004434:	4a58      	ldr	r2, [pc, #352]	; (8004598 <HAL_GPIO_Init+0x2c4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	f000 80b2 	beq.w	80045a0 <HAL_GPIO_Init+0x2cc>
 800443c:	4a56      	ldr	r2, [pc, #344]	; (8004598 <HAL_GPIO_Init+0x2c4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f200 80d8 	bhi.w	80045f4 <HAL_GPIO_Init+0x320>
 8004444:	4a51      	ldr	r2, [pc, #324]	; (800458c <HAL_GPIO_Init+0x2b8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	f000 80aa 	beq.w	80045a0 <HAL_GPIO_Init+0x2cc>
 800444c:	4a4f      	ldr	r2, [pc, #316]	; (800458c <HAL_GPIO_Init+0x2b8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	f200 80d0 	bhi.w	80045f4 <HAL_GPIO_Init+0x320>
 8004454:	4a4f      	ldr	r2, [pc, #316]	; (8004594 <HAL_GPIO_Init+0x2c0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	f000 80a2 	beq.w	80045a0 <HAL_GPIO_Init+0x2cc>
 800445c:	4a4d      	ldr	r2, [pc, #308]	; (8004594 <HAL_GPIO_Init+0x2c0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	f200 80c8 	bhi.w	80045f4 <HAL_GPIO_Init+0x320>
 8004464:	2b12      	cmp	r3, #18
 8004466:	d82b      	bhi.n	80044c0 <HAL_GPIO_Init+0x1ec>
 8004468:	2b12      	cmp	r3, #18
 800446a:	f200 80c3 	bhi.w	80045f4 <HAL_GPIO_Init+0x320>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <HAL_GPIO_Init+0x1a0>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	080045a1 	.word	0x080045a1
 8004478:	080044c9 	.word	0x080044c9
 800447c:	0800451b 	.word	0x0800451b
 8004480:	080045ef 	.word	0x080045ef
 8004484:	080045f5 	.word	0x080045f5
 8004488:	080045f5 	.word	0x080045f5
 800448c:	080045f5 	.word	0x080045f5
 8004490:	080045f5 	.word	0x080045f5
 8004494:	080045f5 	.word	0x080045f5
 8004498:	080045f5 	.word	0x080045f5
 800449c:	080045f5 	.word	0x080045f5
 80044a0:	080045f5 	.word	0x080045f5
 80044a4:	080045f5 	.word	0x080045f5
 80044a8:	080045f5 	.word	0x080045f5
 80044ac:	080045f5 	.word	0x080045f5
 80044b0:	080045f5 	.word	0x080045f5
 80044b4:	080045f5 	.word	0x080045f5
 80044b8:	080044f1 	.word	0x080044f1
 80044bc:	08004545 	.word	0x08004545
 80044c0:	4a31      	ldr	r2, [pc, #196]	; (8004588 <HAL_GPIO_Init+0x2b4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d06c      	beq.n	80045a0 <HAL_GPIO_Init+0x2cc>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044c6:	e095      	b.n	80045f4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d00b      	beq.n	80044e8 <HAL_GPIO_Init+0x214>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d007      	beq.n	80044e8 <HAL_GPIO_Init+0x214>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x214>
 80044e0:	21d5      	movs	r1, #213	; 0xd5
 80044e2:	4828      	ldr	r0, [pc, #160]	; (8004584 <HAL_GPIO_Init+0x2b0>)
 80044e4:	f7fe f8cf 	bl	8002686 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	623b      	str	r3, [r7, #32]
          break;
 80044ee:	e082      	b.n	80045f6 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d00b      	beq.n	8004510 <HAL_GPIO_Init+0x23c>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d007      	beq.n	8004510 <HAL_GPIO_Init+0x23c>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d003      	beq.n	8004510 <HAL_GPIO_Init+0x23c>
 8004508:	21dc      	movs	r1, #220	; 0xdc
 800450a:	481e      	ldr	r0, [pc, #120]	; (8004584 <HAL_GPIO_Init+0x2b0>)
 800450c:	f7fe f8bb 	bl	8002686 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	3304      	adds	r3, #4
 8004516:	623b      	str	r3, [r7, #32]
          break;
 8004518:	e06d      	b.n	80045f6 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d00b      	beq.n	800453a <HAL_GPIO_Init+0x266>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d007      	beq.n	800453a <HAL_GPIO_Init+0x266>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d003      	beq.n	800453a <HAL_GPIO_Init+0x266>
 8004532:	21e3      	movs	r1, #227	; 0xe3
 8004534:	4813      	ldr	r0, [pc, #76]	; (8004584 <HAL_GPIO_Init+0x2b0>)
 8004536:	f7fe f8a6 	bl	8002686 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	3308      	adds	r3, #8
 8004540:	623b      	str	r3, [r7, #32]
          break;
 8004542:	e058      	b.n	80045f6 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d00b      	beq.n	8004564 <HAL_GPIO_Init+0x290>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d007      	beq.n	8004564 <HAL_GPIO_Init+0x290>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d003      	beq.n	8004564 <HAL_GPIO_Init+0x290>
 800455c:	21ea      	movs	r1, #234	; 0xea
 800455e:	4809      	ldr	r0, [pc, #36]	; (8004584 <HAL_GPIO_Init+0x2b0>)
 8004560:	f7fe f891 	bl	8002686 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	330c      	adds	r3, #12
 800456a:	623b      	str	r3, [r7, #32]
          break;
 800456c:	e043      	b.n	80045f6 <HAL_GPIO_Init+0x322>
 800456e:	bf00      	nop
 8004570:	40010800 	.word	0x40010800
 8004574:	40010c00 	.word	0x40010c00
 8004578:	40011000 	.word	0x40011000
 800457c:	40011400 	.word	0x40011400
 8004580:	40011800 	.word	0x40011800
 8004584:	0800ce8c 	.word	0x0800ce8c
 8004588:	10110000 	.word	0x10110000
 800458c:	10210000 	.word	0x10210000
 8004590:	10310000 	.word	0x10310000
 8004594:	10120000 	.word	0x10120000
 8004598:	10220000 	.word	0x10220000
 800459c:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00b      	beq.n	80045c0 <HAL_GPIO_Init+0x2ec>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d007      	beq.n	80045c0 <HAL_GPIO_Init+0x2ec>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d003      	beq.n	80045c0 <HAL_GPIO_Init+0x2ec>
 80045b8:	21f7      	movs	r1, #247	; 0xf7
 80045ba:	4876      	ldr	r0, [pc, #472]	; (8004794 <HAL_GPIO_Init+0x4c0>)
 80045bc:	f7fe f863 	bl	8002686 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <HAL_GPIO_Init+0x2fa>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045c8:	2304      	movs	r3, #4
 80045ca:	623b      	str	r3, [r7, #32]
          break;
 80045cc:	e013      	b.n	80045f6 <HAL_GPIO_Init+0x322>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d105      	bne.n	80045e2 <HAL_GPIO_Init+0x30e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045d6:	2308      	movs	r3, #8
 80045d8:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	611a      	str	r2, [r3, #16]
          break;
 80045e0:	e009      	b.n	80045f6 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045e2:	2308      	movs	r3, #8
 80045e4:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	615a      	str	r2, [r3, #20]
          break;
 80045ec:	e003      	b.n	80045f6 <HAL_GPIO_Init+0x322>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
          break;
 80045f2:	e000      	b.n	80045f6 <HAL_GPIO_Init+0x322>
          break;
 80045f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2bff      	cmp	r3, #255	; 0xff
 80045fa:	d801      	bhi.n	8004600 <HAL_GPIO_Init+0x32c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	e001      	b.n	8004604 <HAL_GPIO_Init+0x330>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3304      	adds	r3, #4
 8004604:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2bff      	cmp	r3, #255	; 0xff
 800460a:	d802      	bhi.n	8004612 <HAL_GPIO_Init+0x33e>
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	e002      	b.n	8004618 <HAL_GPIO_Init+0x344>
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	3b08      	subs	r3, #8
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	210f      	movs	r1, #15
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	401a      	ands	r2, r3
 800462a:	6a39      	ldr	r1, [r7, #32]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	fa01 f303 	lsl.w	r3, r1, r3
 8004632:	431a      	orrs	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8096 	beq.w	8004772 <HAL_GPIO_Init+0x49e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004646:	4b54      	ldr	r3, [pc, #336]	; (8004798 <HAL_GPIO_Init+0x4c4>)
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	4a53      	ldr	r2, [pc, #332]	; (8004798 <HAL_GPIO_Init+0x4c4>)
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	6193      	str	r3, [r2, #24]
 8004652:	4b51      	ldr	r3, [pc, #324]	; (8004798 <HAL_GPIO_Init+0x4c4>)
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800465e:	4a4f      	ldr	r2, [pc, #316]	; (800479c <HAL_GPIO_Init+0x4c8>)
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	089b      	lsrs	r3, r3, #2
 8004664:	3302      	adds	r3, #2
 8004666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	220f      	movs	r2, #15
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4013      	ands	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a46      	ldr	r2, [pc, #280]	; (80047a0 <HAL_GPIO_Init+0x4cc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <HAL_GPIO_Init+0x3de>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a45      	ldr	r2, [pc, #276]	; (80047a4 <HAL_GPIO_Init+0x4d0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00d      	beq.n	80046ae <HAL_GPIO_Init+0x3da>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a44      	ldr	r2, [pc, #272]	; (80047a8 <HAL_GPIO_Init+0x4d4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d007      	beq.n	80046aa <HAL_GPIO_Init+0x3d6>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a43      	ldr	r2, [pc, #268]	; (80047ac <HAL_GPIO_Init+0x4d8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d101      	bne.n	80046a6 <HAL_GPIO_Init+0x3d2>
 80046a2:	2303      	movs	r3, #3
 80046a4:	e006      	b.n	80046b4 <HAL_GPIO_Init+0x3e0>
 80046a6:	2304      	movs	r3, #4
 80046a8:	e004      	b.n	80046b4 <HAL_GPIO_Init+0x3e0>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e002      	b.n	80046b4 <HAL_GPIO_Init+0x3e0>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_GPIO_Init+0x3e0>
 80046b2:	2300      	movs	r3, #0
 80046b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b6:	f002 0203 	and.w	r2, r2, #3
 80046ba:	0092      	lsls	r2, r2, #2
 80046bc:	4093      	lsls	r3, r2
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046c4:	4935      	ldr	r1, [pc, #212]	; (800479c <HAL_GPIO_Init+0x4c8>)
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	3302      	adds	r3, #2
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d006      	beq.n	80046ec <HAL_GPIO_Init+0x418>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046de:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4933      	ldr	r1, [pc, #204]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]
 80046ea:	e006      	b.n	80046fa <HAL_GPIO_Init+0x426>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046ec:	4b30      	ldr	r3, [pc, #192]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	43db      	mvns	r3, r3
 80046f4:	492e      	ldr	r1, [pc, #184]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d006      	beq.n	8004714 <HAL_GPIO_Init+0x440>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004706:	4b2a      	ldr	r3, [pc, #168]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	4929      	ldr	r1, [pc, #164]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	604b      	str	r3, [r1, #4]
 8004712:	e006      	b.n	8004722 <HAL_GPIO_Init+0x44e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004714:	4b26      	ldr	r3, [pc, #152]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	43db      	mvns	r3, r3
 800471c:	4924      	ldr	r1, [pc, #144]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 800471e:	4013      	ands	r3, r2
 8004720:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d006      	beq.n	800473c <HAL_GPIO_Init+0x468>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800472e:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	491f      	ldr	r1, [pc, #124]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
 800473a:	e006      	b.n	800474a <HAL_GPIO_Init+0x476>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800473c:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	43db      	mvns	r3, r3
 8004744:	491a      	ldr	r1, [pc, #104]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 8004746:	4013      	ands	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d006      	beq.n	8004764 <HAL_GPIO_Init+0x490>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004756:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	4915      	ldr	r1, [pc, #84]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	4313      	orrs	r3, r2
 8004760:	60cb      	str	r3, [r1, #12]
 8004762:	e006      	b.n	8004772 <HAL_GPIO_Init+0x49e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004764:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	43db      	mvns	r3, r3
 800476c:	4910      	ldr	r1, [pc, #64]	; (80047b0 <HAL_GPIO_Init+0x4dc>)
 800476e:	4013      	ands	r3, r2
 8004770:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	3301      	adds	r3, #1
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	fa22 f303 	lsr.w	r3, r2, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	f47f ae1d 	bne.w	80043c2 <HAL_GPIO_Init+0xee>
  }
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	3728      	adds	r7, #40	; 0x28
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	0800ce8c 	.word	0x0800ce8c
 8004798:	40021000 	.word	0x40021000
 800479c:	40010000 	.word	0x40010000
 80047a0:	40010800 	.word	0x40010800
 80047a4:	40010c00 	.word	0x40010c00
 80047a8:	40011000 	.word	0x40011000
 80047ac:	40011400 	.word	0x40011400
 80047b0:	40010400 	.word	0x40010400

080047b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	807b      	strh	r3, [r7, #2]
 80047c0:	4613      	mov	r3, r2
 80047c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80047c4:	887b      	ldrh	r3, [r7, #2]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <HAL_GPIO_WritePin+0x20>
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	0c1b      	lsrs	r3, r3, #16
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d004      	beq.n	80047de <HAL_GPIO_WritePin+0x2a>
 80047d4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80047d8:	480e      	ldr	r0, [pc, #56]	; (8004814 <HAL_GPIO_WritePin+0x60>)
 80047da:	f7fd ff54 	bl	8002686 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80047de:	787b      	ldrb	r3, [r7, #1]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_GPIO_WritePin+0x40>
 80047e4:	787b      	ldrb	r3, [r7, #1]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d004      	beq.n	80047f4 <HAL_GPIO_WritePin+0x40>
 80047ea:	f240 11d5 	movw	r1, #469	; 0x1d5
 80047ee:	4809      	ldr	r0, [pc, #36]	; (8004814 <HAL_GPIO_WritePin+0x60>)
 80047f0:	f7fd ff49 	bl	8002686 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80047f4:	787b      	ldrb	r3, [r7, #1]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047fa:	887a      	ldrh	r2, [r7, #2]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004800:	e003      	b.n	800480a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004802:	887b      	ldrh	r3, [r7, #2]
 8004804:	041a      	lsls	r2, r3, #16
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	611a      	str	r2, [r3, #16]
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	0800ce8c 	.word	0x0800ce8c

08004818 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004824:	887b      	ldrh	r3, [r7, #2]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d004      	beq.n	8004834 <HAL_GPIO_TogglePin+0x1c>
 800482a:	887b      	ldrh	r3, [r7, #2]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <HAL_GPIO_TogglePin+0x26>
 8004834:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8004838:	480a      	ldr	r0, [pc, #40]	; (8004864 <HAL_GPIO_TogglePin+0x4c>)
 800483a:	f7fd ff24 	bl	8002686 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004844:	887a      	ldrh	r2, [r7, #2]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4013      	ands	r3, r2
 800484a:	041a      	lsls	r2, r3, #16
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	43d9      	mvns	r1, r3
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	400b      	ands	r3, r1
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	611a      	str	r2, [r3, #16]
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	0800ce8c 	.word	0x0800ce8c

08004868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	4013      	ands	r3, r2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d006      	beq.n	800488c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800487e:	4a05      	ldr	r2, [pc, #20]	; (8004894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe f9f0 	bl	8002c6c <HAL_GPIO_EXTI_Callback>
  }
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40010400 	.word	0x40010400

08004898 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e05d      	b.n	8004966 <HAL_IWDG_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a30      	ldr	r2, [pc, #192]	; (8004970 <HAL_IWDG_Init+0xd8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <HAL_IWDG_Init+0x24>
 80048b4:	21ac      	movs	r1, #172	; 0xac
 80048b6:	482f      	ldr	r0, [pc, #188]	; (8004974 <HAL_IWDG_Init+0xdc>)
 80048b8:	f7fd fee5 	bl	8002686 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01b      	beq.n	80048fc <HAL_IWDG_Init+0x64>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d017      	beq.n	80048fc <HAL_IWDG_Init+0x64>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d013      	beq.n	80048fc <HAL_IWDG_Init+0x64>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d00f      	beq.n	80048fc <HAL_IWDG_Init+0x64>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d00b      	beq.n	80048fc <HAL_IWDG_Init+0x64>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b05      	cmp	r3, #5
 80048ea:	d007      	beq.n	80048fc <HAL_IWDG_Init+0x64>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d003      	beq.n	80048fc <HAL_IWDG_Init+0x64>
 80048f4:	21ad      	movs	r1, #173	; 0xad
 80048f6:	481f      	ldr	r0, [pc, #124]	; (8004974 <HAL_IWDG_Init+0xdc>)
 80048f8:	f7fd fec5 	bl	8002686 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004904:	d303      	bcc.n	800490e <HAL_IWDG_Init+0x76>
 8004906:	21ae      	movs	r1, #174	; 0xae
 8004908:	481a      	ldr	r0, [pc, #104]	; (8004974 <HAL_IWDG_Init+0xdc>)
 800490a:	f7fd febc 	bl	8002686 <assert_failed>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004916:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f245 5255 	movw	r2, #21845	; 0x5555
 8004920:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6852      	ldr	r2, [r2, #4]
 800492a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6892      	ldr	r2, [r2, #8]
 8004934:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004936:	f7fe fb11 	bl	8002f5c <HAL_GetTick>
 800493a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800493c:	e008      	b.n	8004950 <HAL_IWDG_Init+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800493e:	f7fe fb0d 	bl	8002f5c <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b26      	cmp	r3, #38	; 0x26
 800494a:	d901      	bls.n	8004950 <HAL_IWDG_Init+0xb8>
    {
      return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e00a      	b.n	8004966 <HAL_IWDG_Init+0xce>
  while (hiwdg->Instance->SR != 0x00u)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f1      	bne.n	800493e <HAL_IWDG_Init+0xa6>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004962:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40003000 	.word	0x40003000
 8004974:	0800cec8 	.word	0x0800cec8

08004978 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004988:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr
	...

08004998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e35c      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01c      	beq.n	80049ec <HAL_RCC_OscConfig+0x54>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d116      	bne.n	80049ec <HAL_RCC_OscConfig+0x54>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d110      	bne.n	80049ec <HAL_RCC_OscConfig+0x54>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <HAL_RCC_OscConfig+0x54>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d104      	bne.n	80049ec <HAL_RCC_OscConfig+0x54>
 80049e2:	f240 1167 	movw	r1, #359	; 0x167
 80049e6:	48a5      	ldr	r0, [pc, #660]	; (8004c7c <HAL_RCC_OscConfig+0x2e4>)
 80049e8:	f7fd fe4d 	bl	8002686 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 809a 	beq.w	8004b2e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00e      	beq.n	8004a20 <HAL_RCC_OscConfig+0x88>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0a:	d009      	beq.n	8004a20 <HAL_RCC_OscConfig+0x88>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a14:	d004      	beq.n	8004a20 <HAL_RCC_OscConfig+0x88>
 8004a16:	f240 116d 	movw	r1, #365	; 0x16d
 8004a1a:	4898      	ldr	r0, [pc, #608]	; (8004c7c <HAL_RCC_OscConfig+0x2e4>)
 8004a1c:	f7fd fe33 	bl	8002686 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a20:	4b97      	ldr	r3, [pc, #604]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d00c      	beq.n	8004a46 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a2c:	4b94      	ldr	r3, [pc, #592]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d112      	bne.n	8004a5e <HAL_RCC_OscConfig+0xc6>
 8004a38:	4b91      	ldr	r3, [pc, #580]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a44:	d10b      	bne.n	8004a5e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a46:	4b8e      	ldr	r3, [pc, #568]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d06c      	beq.n	8004b2c <HAL_RCC_OscConfig+0x194>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d168      	bne.n	8004b2c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e302      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a66:	d106      	bne.n	8004a76 <HAL_RCC_OscConfig+0xde>
 8004a68:	4b85      	ldr	r3, [pc, #532]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a84      	ldr	r2, [pc, #528]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e02e      	b.n	8004ad4 <HAL_RCC_OscConfig+0x13c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x100>
 8004a7e:	4b80      	ldr	r3, [pc, #512]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a7f      	ldr	r2, [pc, #508]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b7d      	ldr	r3, [pc, #500]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7c      	ldr	r2, [pc, #496]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e01d      	b.n	8004ad4 <HAL_RCC_OscConfig+0x13c>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x124>
 8004aa2:	4b77      	ldr	r3, [pc, #476]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a76      	ldr	r2, [pc, #472]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b74      	ldr	r3, [pc, #464]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a73      	ldr	r2, [pc, #460]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x13c>
 8004abc:	4b70      	ldr	r3, [pc, #448]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a6f      	ldr	r2, [pc, #444]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	4b6d      	ldr	r3, [pc, #436]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a6c      	ldr	r2, [pc, #432]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d013      	beq.n	8004b04 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fe fa3e 	bl	8002f5c <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae4:	f7fe fa3a 	bl	8002f5c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	; 0x64
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e2b6      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af6:	4b62      	ldr	r3, [pc, #392]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x14c>
 8004b02:	e014      	b.n	8004b2e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fe fa2a 	bl	8002f5c <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b0c:	f7fe fa26 	bl	8002f5c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	; 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e2a2      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	4b58      	ldr	r3, [pc, #352]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x174>
 8004b2a:	e000      	b.n	8004b2e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d079      	beq.n	8004c2e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_RCC_OscConfig+0x1bc>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d004      	beq.n	8004b54 <HAL_RCC_OscConfig+0x1bc>
 8004b4a:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004b4e:	484b      	ldr	r0, [pc, #300]	; (8004c7c <HAL_RCC_OscConfig+0x2e4>)
 8004b50:	f7fd fd99 	bl	8002686 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	2b1f      	cmp	r3, #31
 8004b5a:	d904      	bls.n	8004b66 <HAL_RCC_OscConfig+0x1ce>
 8004b5c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004b60:	4846      	ldr	r0, [pc, #280]	; (8004c7c <HAL_RCC_OscConfig+0x2e4>)
 8004b62:	f7fd fd90 	bl	8002686 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b66:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b72:	4b43      	ldr	r3, [pc, #268]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x220>
 8004b7e:	4b40      	ldr	r3, [pc, #256]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x20a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e260      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	4b37      	ldr	r3, [pc, #220]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4933      	ldr	r1, [pc, #204]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	e03a      	b.n	8004c2e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc0:	4b30      	ldr	r3, [pc, #192]	; (8004c84 <HAL_RCC_OscConfig+0x2ec>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fe f9c9 	bl	8002f5c <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fe f9c5 	bl	8002f5c <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e241      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4921      	ldr	r1, [pc, #132]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c02:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <HAL_RCC_OscConfig+0x2ec>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7fe f9a8 	bl	8002f5c <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fe f9a4 	bl	8002f5c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e220      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b17      	ldr	r3, [pc, #92]	; (8004c80 <HAL_RCC_OscConfig+0x2e8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d048      	beq.n	8004ccc <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <HAL_RCC_OscConfig+0x2bc>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d004      	beq.n	8004c54 <HAL_RCC_OscConfig+0x2bc>
 8004c4a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004c4e:	480b      	ldr	r0, [pc, #44]	; (8004c7c <HAL_RCC_OscConfig+0x2e4>)
 8004c50:	f7fd fd19 	bl	8002686 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d021      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <HAL_RCC_OscConfig+0x2f0>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c62:	f7fe f97b 	bl	8002f5c <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c68:	e010      	b.n	8004c8c <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6a:	f7fe f977 	bl	8002f5c <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d909      	bls.n	8004c8c <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e1f3      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
 8004c7c:	0800cf04 	.word	0x0800cf04
 8004c80:	40021000 	.word	0x40021000
 8004c84:	42420000 	.word	0x42420000
 8004c88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c8c:	4b67      	ldr	r3, [pc, #412]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0e8      	beq.n	8004c6a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c98:	2001      	movs	r0, #1
 8004c9a:	f000 fc51 	bl	8005540 <RCC_Delay>
 8004c9e:	e015      	b.n	8004ccc <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca0:	4b63      	ldr	r3, [pc, #396]	; (8004e30 <HAL_RCC_OscConfig+0x498>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca6:	f7fe f959 	bl	8002f5c <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cae:	f7fe f955 	bl	8002f5c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e1d1      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc0:	4b5a      	ldr	r3, [pc, #360]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80c0 	beq.w	8004e5a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <HAL_RCC_OscConfig+0x368>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d008      	beq.n	8004d00 <HAL_RCC_OscConfig+0x368>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2b05      	cmp	r3, #5
 8004cf4:	d004      	beq.n	8004d00 <HAL_RCC_OscConfig+0x368>
 8004cf6:	f240 2111 	movw	r1, #529	; 0x211
 8004cfa:	484e      	ldr	r0, [pc, #312]	; (8004e34 <HAL_RCC_OscConfig+0x49c>)
 8004cfc:	f7fd fcc3 	bl	8002686 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d00:	4b4a      	ldr	r3, [pc, #296]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10d      	bne.n	8004d28 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d0c:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	4a46      	ldr	r2, [pc, #280]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d16:	61d3      	str	r3, [r2, #28]
 8004d18:	4b44      	ldr	r3, [pc, #272]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d24:	2301      	movs	r3, #1
 8004d26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d28:	4b43      	ldr	r3, [pc, #268]	; (8004e38 <HAL_RCC_OscConfig+0x4a0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d118      	bne.n	8004d66 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d34:	4b40      	ldr	r3, [pc, #256]	; (8004e38 <HAL_RCC_OscConfig+0x4a0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a3f      	ldr	r2, [pc, #252]	; (8004e38 <HAL_RCC_OscConfig+0x4a0>)
 8004d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d40:	f7fe f90c 	bl	8002f5c <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d48:	f7fe f908 	bl	8002f5c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e184      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5a:	4b37      	ldr	r3, [pc, #220]	; (8004e38 <HAL_RCC_OscConfig+0x4a0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d106      	bne.n	8004d7c <HAL_RCC_OscConfig+0x3e4>
 8004d6e:	4b2f      	ldr	r3, [pc, #188]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	4a2e      	ldr	r2, [pc, #184]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	6213      	str	r3, [r2, #32]
 8004d7a:	e02d      	b.n	8004dd8 <HAL_RCC_OscConfig+0x440>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10c      	bne.n	8004d9e <HAL_RCC_OscConfig+0x406>
 8004d84:	4b29      	ldr	r3, [pc, #164]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	4a28      	ldr	r2, [pc, #160]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	6213      	str	r3, [r2, #32]
 8004d90:	4b26      	ldr	r3, [pc, #152]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	4a25      	ldr	r2, [pc, #148]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004d96:	f023 0304 	bic.w	r3, r3, #4
 8004d9a:	6213      	str	r3, [r2, #32]
 8004d9c:	e01c      	b.n	8004dd8 <HAL_RCC_OscConfig+0x440>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	2b05      	cmp	r3, #5
 8004da4:	d10c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x428>
 8004da6:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	4a20      	ldr	r2, [pc, #128]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004dac:	f043 0304 	orr.w	r3, r3, #4
 8004db0:	6213      	str	r3, [r2, #32]
 8004db2:	4b1e      	ldr	r3, [pc, #120]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	4a1d      	ldr	r2, [pc, #116]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	6213      	str	r3, [r2, #32]
 8004dbe:	e00b      	b.n	8004dd8 <HAL_RCC_OscConfig+0x440>
 8004dc0:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	6213      	str	r3, [r2, #32]
 8004dcc:	4b17      	ldr	r3, [pc, #92]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004dd2:	f023 0304 	bic.w	r3, r3, #4
 8004dd6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d015      	beq.n	8004e0c <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de0:	f7fe f8bc 	bl	8002f5c <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de6:	e00a      	b.n	8004dfe <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de8:	f7fe f8b8 	bl	8002f5c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e132      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCC_OscConfig+0x494>)
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0ee      	beq.n	8004de8 <HAL_RCC_OscConfig+0x450>
 8004e0a:	e01d      	b.n	8004e48 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0c:	f7fe f8a6 	bl	8002f5c <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e12:	e013      	b.n	8004e3c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e14:	f7fe f8a2 	bl	8002f5c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d90a      	bls.n	8004e3c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e11c      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
 8004e2a:	bf00      	nop
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	42420480 	.word	0x42420480
 8004e34:	0800cf04 	.word	0x0800cf04
 8004e38:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e3c:	4b8b      	ldr	r3, [pc, #556]	; (800506c <HAL_RCC_OscConfig+0x6d4>)
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4e:	4b87      	ldr	r3, [pc, #540]	; (800506c <HAL_RCC_OscConfig+0x6d4>)
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	4a86      	ldr	r2, [pc, #536]	; (800506c <HAL_RCC_OscConfig+0x6d4>)
 8004e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e58:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <HAL_RCC_OscConfig+0x4e4>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d008      	beq.n	8004e7c <HAL_RCC_OscConfig+0x4e4>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d004      	beq.n	8004e7c <HAL_RCC_OscConfig+0x4e4>
 8004e72:	f240 21af 	movw	r1, #687	; 0x2af
 8004e76:	487e      	ldr	r0, [pc, #504]	; (8005070 <HAL_RCC_OscConfig+0x6d8>)
 8004e78:	f7fd fc05 	bl	8002686 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80ee 	beq.w	8005062 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e86:	4b79      	ldr	r3, [pc, #484]	; (800506c <HAL_RCC_OscConfig+0x6d4>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	f000 80ce 	beq.w	8005030 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	f040 80b2 	bne.w	8005002 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCC_OscConfig+0x522>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eae:	d004      	beq.n	8004eba <HAL_RCC_OscConfig+0x522>
 8004eb0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8004eb4:	486e      	ldr	r0, [pc, #440]	; (8005070 <HAL_RCC_OscConfig+0x6d8>)
 8004eb6:	f7fd fbe6 	bl	8002686 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d04a      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eca:	d045      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ed4:	d040      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ede:	d03b      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee8:	d036      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ef2:	d031      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004efc:	d02c      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004f06:	d027      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f10:	d022      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004f1a:	d01d      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f24:	d018      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f2e:	d013      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f38:	d00e      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8004f42:	d009      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004f4c:	d004      	beq.n	8004f58 <HAL_RCC_OscConfig+0x5c0>
 8004f4e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8004f52:	4847      	ldr	r0, [pc, #284]	; (8005070 <HAL_RCC_OscConfig+0x6d8>)
 8004f54:	f7fd fb97 	bl	8002686 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f58:	4b46      	ldr	r3, [pc, #280]	; (8005074 <HAL_RCC_OscConfig+0x6dc>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5e:	f7fd fffd 	bl	8002f5c <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f66:	f7fd fff9 	bl	8002f5c <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e075      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f78:	4b3c      	ldr	r3, [pc, #240]	; (800506c <HAL_RCC_OscConfig+0x6d4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f0      	bne.n	8004f66 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8c:	d116      	bne.n	8004fbc <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_RCC_OscConfig+0x612>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f9e:	d004      	beq.n	8004faa <HAL_RCC_OscConfig+0x612>
 8004fa0:	f240 21cf 	movw	r1, #719	; 0x2cf
 8004fa4:	4832      	ldr	r0, [pc, #200]	; (8005070 <HAL_RCC_OscConfig+0x6d8>)
 8004fa6:	f7fd fb6e 	bl	8002686 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004faa:	4b30      	ldr	r3, [pc, #192]	; (800506c <HAL_RCC_OscConfig+0x6d4>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	492d      	ldr	r1, [pc, #180]	; (800506c <HAL_RCC_OscConfig+0x6d4>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fbc:	4b2b      	ldr	r3, [pc, #172]	; (800506c <HAL_RCC_OscConfig+0x6d4>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a19      	ldr	r1, [r3, #32]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	4927      	ldr	r1, [pc, #156]	; (800506c <HAL_RCC_OscConfig+0x6d4>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd4:	4b27      	ldr	r3, [pc, #156]	; (8005074 <HAL_RCC_OscConfig+0x6dc>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fda:	f7fd ffbf 	bl	8002f5c <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe2:	f7fd ffbb 	bl	8002f5c <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e037      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	; (800506c <HAL_RCC_OscConfig+0x6d4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x64a>
 8005000:	e02f      	b.n	8005062 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005002:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <HAL_RCC_OscConfig+0x6dc>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005008:	f7fd ffa8 	bl	8002f5c <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005010:	f7fd ffa4 	bl	8002f5c <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e020      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <HAL_RCC_OscConfig+0x6d4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0x678>
 800502e:	e018      	b.n	8005062 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e013      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCC_OscConfig+0x6d4>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	429a      	cmp	r2, r3
 800504e:	d106      	bne.n	800505e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505a:	429a      	cmp	r2, r3
 800505c:	d001      	beq.n	8005062 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40021000 	.word	0x40021000
 8005070:	0800cf04 	.word	0x0800cf04
 8005074:	42420060 	.word	0x42420060

08005078 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e176      	b.n	800537a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d116      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x4e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d110      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x4e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x4e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x4e>
 80050bc:	f44f 714e 	mov.w	r1, #824	; 0x338
 80050c0:	4874      	ldr	r0, [pc, #464]	; (8005294 <HAL_RCC_ClockConfig+0x21c>)
 80050c2:	f7fd fae0 	bl	8002686 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x6a>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d007      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x6a>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d004      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x6a>
 80050d8:	f240 3139 	movw	r1, #825	; 0x339
 80050dc:	486d      	ldr	r0, [pc, #436]	; (8005294 <HAL_RCC_ClockConfig+0x21c>)
 80050de:	f7fd fad2 	bl	8002686 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050e2:	4b6d      	ldr	r3, [pc, #436]	; (8005298 <HAL_RCC_ClockConfig+0x220>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d910      	bls.n	8005112 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f0:	4b69      	ldr	r3, [pc, #420]	; (8005298 <HAL_RCC_ClockConfig+0x220>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f023 0207 	bic.w	r2, r3, #7
 80050f8:	4967      	ldr	r1, [pc, #412]	; (8005298 <HAL_RCC_ClockConfig+0x220>)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005100:	4b65      	ldr	r3, [pc, #404]	; (8005298 <HAL_RCC_ClockConfig+0x220>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d001      	beq.n	8005112 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e133      	b.n	800537a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d049      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800512a:	4b5c      	ldr	r3, [pc, #368]	; (800529c <HAL_RCC_ClockConfig+0x224>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4a5b      	ldr	r2, [pc, #364]	; (800529c <HAL_RCC_ClockConfig+0x224>)
 8005130:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005134:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005142:	4b56      	ldr	r3, [pc, #344]	; (800529c <HAL_RCC_ClockConfig+0x224>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4a55      	ldr	r2, [pc, #340]	; (800529c <HAL_RCC_ClockConfig+0x224>)
 8005148:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800514c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d024      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x128>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b80      	cmp	r3, #128	; 0x80
 800515c:	d020      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x128>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b90      	cmp	r3, #144	; 0x90
 8005164:	d01c      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x128>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2ba0      	cmp	r3, #160	; 0xa0
 800516c:	d018      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x128>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2bb0      	cmp	r3, #176	; 0xb0
 8005174:	d014      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x128>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2bc0      	cmp	r3, #192	; 0xc0
 800517c:	d010      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x128>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2bd0      	cmp	r3, #208	; 0xd0
 8005184:	d00c      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x128>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2be0      	cmp	r3, #224	; 0xe0
 800518c:	d008      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x128>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2bf0      	cmp	r3, #240	; 0xf0
 8005194:	d004      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x128>
 8005196:	f240 315f 	movw	r1, #863	; 0x35f
 800519a:	483e      	ldr	r0, [pc, #248]	; (8005294 <HAL_RCC_ClockConfig+0x21c>)
 800519c:	f7fd fa73 	bl	8002686 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a0:	4b3e      	ldr	r3, [pc, #248]	; (800529c <HAL_RCC_ClockConfig+0x224>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	493b      	ldr	r1, [pc, #236]	; (800529c <HAL_RCC_ClockConfig+0x224>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d051      	beq.n	8005262 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00c      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x168>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d008      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x168>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d004      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x168>
 80051d6:	f240 3166 	movw	r1, #870	; 0x366
 80051da:	482e      	ldr	r0, [pc, #184]	; (8005294 <HAL_RCC_ClockConfig+0x21c>)
 80051dc:	f7fd fa53 	bl	8002686 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d107      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e8:	4b2c      	ldr	r3, [pc, #176]	; (800529c <HAL_RCC_ClockConfig+0x224>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d115      	bne.n	8005220 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0c0      	b.n	800537a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d107      	bne.n	8005210 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005200:	4b26      	ldr	r3, [pc, #152]	; (800529c <HAL_RCC_ClockConfig+0x224>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d109      	bne.n	8005220 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e0b4      	b.n	800537a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005210:	4b22      	ldr	r3, [pc, #136]	; (800529c <HAL_RCC_ClockConfig+0x224>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e0ac      	b.n	800537a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005220:	4b1e      	ldr	r3, [pc, #120]	; (800529c <HAL_RCC_ClockConfig+0x224>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f023 0203 	bic.w	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	491b      	ldr	r1, [pc, #108]	; (800529c <HAL_RCC_ClockConfig+0x224>)
 800522e:	4313      	orrs	r3, r2
 8005230:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005232:	f7fd fe93 	bl	8002f5c <HAL_GetTick>
 8005236:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005238:	e00a      	b.n	8005250 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523a:	f7fd fe8f 	bl	8002f5c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	f241 3288 	movw	r2, #5000	; 0x1388
 8005248:	4293      	cmp	r3, r2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e094      	b.n	800537a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005250:	4b12      	ldr	r3, [pc, #72]	; (800529c <HAL_RCC_ClockConfig+0x224>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f003 020c 	and.w	r2, r3, #12
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	429a      	cmp	r2, r3
 8005260:	d1eb      	bne.n	800523a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <HAL_RCC_ClockConfig+0x220>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d217      	bcs.n	80052a0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <HAL_RCC_ClockConfig+0x220>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f023 0207 	bic.w	r2, r3, #7
 8005278:	4907      	ldr	r1, [pc, #28]	; (8005298 <HAL_RCC_ClockConfig+0x220>)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	4313      	orrs	r3, r2
 800527e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <HAL_RCC_ClockConfig+0x220>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d008      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e073      	b.n	800537a <HAL_RCC_ClockConfig+0x302>
 8005292:	bf00      	nop
 8005294:	0800cf04 	.word	0x0800cf04
 8005298:	40022000 	.word	0x40022000
 800529c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d025      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d018      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x26e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052bc:	d013      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x26e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80052c6:	d00e      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x26e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80052d0:	d009      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x26e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052da:	d004      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x26e>
 80052dc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80052e0:	4828      	ldr	r0, [pc, #160]	; (8005384 <HAL_RCC_ClockConfig+0x30c>)
 80052e2:	f7fd f9d0 	bl	8002686 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e6:	4b28      	ldr	r3, [pc, #160]	; (8005388 <HAL_RCC_ClockConfig+0x310>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	4925      	ldr	r1, [pc, #148]	; (8005388 <HAL_RCC_ClockConfig+0x310>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d026      	beq.n	8005352 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d018      	beq.n	800533e <HAL_RCC_ClockConfig+0x2c6>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005314:	d013      	beq.n	800533e <HAL_RCC_ClockConfig+0x2c6>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800531e:	d00e      	beq.n	800533e <HAL_RCC_ClockConfig+0x2c6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005328:	d009      	beq.n	800533e <HAL_RCC_ClockConfig+0x2c6>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005332:	d004      	beq.n	800533e <HAL_RCC_ClockConfig+0x2c6>
 8005334:	f240 31ab 	movw	r1, #939	; 0x3ab
 8005338:	4812      	ldr	r0, [pc, #72]	; (8005384 <HAL_RCC_ClockConfig+0x30c>)
 800533a:	f7fd f9a4 	bl	8002686 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <HAL_RCC_ClockConfig+0x310>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	490e      	ldr	r1, [pc, #56]	; (8005388 <HAL_RCC_ClockConfig+0x310>)
 800534e:	4313      	orrs	r3, r2
 8005350:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005352:	f000 f821 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 8005356:	4602      	mov	r2, r0
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_RCC_ClockConfig+0x310>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	490a      	ldr	r1, [pc, #40]	; (800538c <HAL_RCC_ClockConfig+0x314>)
 8005364:	5ccb      	ldrb	r3, [r1, r3]
 8005366:	fa22 f303 	lsr.w	r3, r2, r3
 800536a:	4a09      	ldr	r2, [pc, #36]	; (8005390 <HAL_RCC_ClockConfig+0x318>)
 800536c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <HAL_RCC_ClockConfig+0x31c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7fd fbf4 	bl	8002b60 <HAL_InitTick>

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	0800cf04 	.word	0x0800cf04
 8005388:	40021000 	.word	0x40021000
 800538c:	0800d278 	.word	0x0800d278
 8005390:	20000004 	.word	0x20000004
 8005394:	20000008 	.word	0x20000008

08005398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005398:	b490      	push	{r4, r7}
 800539a:	b08a      	sub	sp, #40	; 0x28
 800539c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800539e:	4b2a      	ldr	r3, [pc, #168]	; (8005448 <HAL_RCC_GetSysClockFreq+0xb0>)
 80053a0:	1d3c      	adds	r4, r7, #4
 80053a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80053a8:	f240 2301 	movw	r3, #513	; 0x201
 80053ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	2300      	movs	r3, #0
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	2300      	movs	r3, #0
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053c2:	4b22      	ldr	r3, [pc, #136]	; (800544c <HAL_RCC_GetSysClockFreq+0xb4>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d002      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0x40>
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d003      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0x46>
 80053d6:	e02d      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053d8:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053da:	623b      	str	r3, [r7, #32]
      break;
 80053dc:	e02d      	b.n	800543a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	0c9b      	lsrs	r3, r3, #18
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80053ea:	4413      	add	r3, r2
 80053ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80053f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d013      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053fc:	4b13      	ldr	r3, [pc, #76]	; (800544c <HAL_RCC_GetSysClockFreq+0xb4>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	0c5b      	lsrs	r3, r3, #17
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800540a:	4413      	add	r3, r2
 800540c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005410:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4a0e      	ldr	r2, [pc, #56]	; (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005416:	fb02 f203 	mul.w	r2, r2, r3
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
 8005422:	e004      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	4a0b      	ldr	r2, [pc, #44]	; (8005454 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005428:	fb02 f303 	mul.w	r3, r2, r3
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	623b      	str	r3, [r7, #32]
      break;
 8005432:	e002      	b.n	800543a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005436:	623b      	str	r3, [r7, #32]
      break;
 8005438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800543a:	6a3b      	ldr	r3, [r7, #32]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3728      	adds	r7, #40	; 0x28
 8005440:	46bd      	mov	sp, r7
 8005442:	bc90      	pop	{r4, r7}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	0800cf3c 	.word	0x0800cf3c
 800544c:	40021000 	.word	0x40021000
 8005450:	007a1200 	.word	0x007a1200
 8005454:	003d0900 	.word	0x003d0900

08005458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800545c:	4b02      	ldr	r3, [pc, #8]	; (8005468 <HAL_RCC_GetHCLKFreq+0x10>)
 800545e:	681b      	ldr	r3, [r3, #0]
}
 8005460:	4618      	mov	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr
 8005468:	20000004 	.word	0x20000004

0800546c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005470:	f7ff fff2 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	0a1b      	lsrs	r3, r3, #8
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4903      	ldr	r1, [pc, #12]	; (8005490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000
 8005490:	0800d288 	.word	0x0800d288

08005494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005498:	f7ff ffde 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	0adb      	lsrs	r3, r3, #11
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	4903      	ldr	r1, [pc, #12]	; (80054b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054aa:	5ccb      	ldrb	r3, [r1, r3]
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40021000 	.word	0x40021000
 80054b8:	0800d288 	.word	0x0800d288

080054bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <HAL_RCC_GetClockConfig+0x1a>
 80054cc:	f240 5123 	movw	r1, #1315	; 0x523
 80054d0:	4818      	ldr	r0, [pc, #96]	; (8005534 <HAL_RCC_GetClockConfig+0x78>)
 80054d2:	f7fd f8d8 	bl	8002686 <assert_failed>
  assert_param(pFLatency != NULL);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d104      	bne.n	80054e6 <HAL_RCC_GetClockConfig+0x2a>
 80054dc:	f240 5124 	movw	r1, #1316	; 0x524
 80054e0:	4814      	ldr	r0, [pc, #80]	; (8005534 <HAL_RCC_GetClockConfig+0x78>)
 80054e2:	f7fd f8d0 	bl	8002686 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	220f      	movs	r2, #15
 80054ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054ec:	4b12      	ldr	r3, [pc, #72]	; (8005538 <HAL_RCC_GetClockConfig+0x7c>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f003 0203 	and.w	r2, r3, #3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054f8:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <HAL_RCC_GetClockConfig+0x7c>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <HAL_RCC_GetClockConfig+0x7c>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005510:	4b09      	ldr	r3, [pc, #36]	; (8005538 <HAL_RCC_GetClockConfig+0x7c>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	08db      	lsrs	r3, r3, #3
 8005516:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800551e:	4b07      	ldr	r3, [pc, #28]	; (800553c <HAL_RCC_GetClockConfig+0x80>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0207 	and.w	r2, r3, #7
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	0800cf04 	.word	0x0800cf04
 8005538:	40021000 	.word	0x40021000
 800553c:	40022000 	.word	0x40022000

08005540 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <RCC_Delay+0x34>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a0a      	ldr	r2, [pc, #40]	; (8005578 <RCC_Delay+0x38>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	0a5b      	lsrs	r3, r3, #9
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800555c:	bf00      	nop
  }
  while (Delay --);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1e5a      	subs	r2, r3, #1
 8005562:	60fa      	str	r2, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1f9      	bne.n	800555c <RCC_Delay+0x1c>
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr
 8005574:	20000004 	.word	0x20000004
 8005578:	10624dd3 	.word	0x10624dd3

0800557c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10f      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d103      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80055b0:	216c      	movs	r1, #108	; 0x6c
 80055b2:	4873      	ldr	r0, [pc, #460]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80055b4:	f7fd f867 	bl	8002686 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8095 	beq.w	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d012      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d6:	d00d      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e0:	d008      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ea:	d003      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80055ec:	2172      	movs	r1, #114	; 0x72
 80055ee:	4864      	ldr	r0, [pc, #400]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80055f0:	f7fd f849 	bl	8002686 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 80055f4:	2300      	movs	r3, #0
 80055f6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f8:	4b62      	ldr	r3, [pc, #392]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10d      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005604:	4b5f      	ldr	r3, [pc, #380]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	4a5e      	ldr	r2, [pc, #376]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800560a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560e:	61d3      	str	r3, [r2, #28]
 8005610:	4b5c      	ldr	r3, [pc, #368]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561c:	2301      	movs	r3, #1
 800561e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005620:	4b59      	ldr	r3, [pc, #356]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d118      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800562c:	4b56      	ldr	r3, [pc, #344]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a55      	ldr	r2, [pc, #340]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005638:	f7fd fc90 	bl	8002f5c <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563e:	e008      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005640:	f7fd fc8c 	bl	8002f5c <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b64      	cmp	r3, #100	; 0x64
 800564c:	d901      	bls.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e092      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005652:	4b4d      	ldr	r3, [pc, #308]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f0      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800565e:	4b49      	ldr	r3, [pc, #292]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005666:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d02e      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x150>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	429a      	cmp	r2, r3
 800567a:	d027      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800567c:	4b41      	ldr	r3, [pc, #260]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005684:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005686:	4b41      	ldr	r3, [pc, #260]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005688:	2201      	movs	r2, #1
 800568a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800568c:	4b3f      	ldr	r3, [pc, #252]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005692:	4a3c      	ldr	r2, [pc, #240]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d014      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a2:	f7fd fc5b 	bl	8002f5c <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a8:	e00a      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056aa:	f7fd fc57 	bl	8002f5c <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e05b      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c0:	4b30      	ldr	r3, [pc, #192]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ee      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056cc:	4b2d      	ldr	r3, [pc, #180]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	492a      	ldr	r1, [pc, #168]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056de:	7dfb      	ldrb	r3, [r7, #23]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d105      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e4:	4b27      	ldr	r3, [pc, #156]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	4a26      	ldr	r2, [pc, #152]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01f      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d012      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800570c:	d00d      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005716:	d008      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005720:	d003      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005722:	21b9      	movs	r1, #185	; 0xb9
 8005724:	4816      	ldr	r0, [pc, #88]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005726:	f7fc ffae 	bl	8002686 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800572a:	4b16      	ldr	r3, [pc, #88]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	4913      	ldr	r1, [pc, #76]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005738:	4313      	orrs	r3, r2
 800573a:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	d016      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005750:	d008      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d004      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800575a:	f240 1115 	movw	r1, #277	; 0x115
 800575e:	4808      	ldr	r0, [pc, #32]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005760:	f7fc ff91 	bl	8002686 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005764:	4b07      	ldr	r3, [pc, #28]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4904      	ldr	r1, [pc, #16]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005772:	4313      	orrs	r3, r2
 8005774:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	0800cf4c 	.word	0x0800cf4c
 8005784:	40021000 	.word	0x40021000
 8005788:	40007000 	.word	0x40007000
 800578c:	42420440 	.word	0x42420440

08005790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e16d      	b.n	8005a7e <HAL_SPI_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a6b      	ldr	r2, [pc, #428]	; (8005954 <HAL_SPI_Init+0x1c4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d009      	beq.n	80057c0 <HAL_SPI_Init+0x30>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a69      	ldr	r2, [pc, #420]	; (8005958 <HAL_SPI_Init+0x1c8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_SPI_Init+0x30>
 80057b6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80057ba:	4868      	ldr	r0, [pc, #416]	; (800595c <HAL_SPI_Init+0x1cc>)
 80057bc:	f7fc ff63 	bl	8002686 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d009      	beq.n	80057dc <HAL_SPI_Init+0x4c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057d0:	d004      	beq.n	80057dc <HAL_SPI_Init+0x4c>
 80057d2:	f240 1159 	movw	r1, #345	; 0x159
 80057d6:	4861      	ldr	r0, [pc, #388]	; (800595c <HAL_SPI_Init+0x1cc>)
 80057d8:	f7fc ff55 	bl	8002686 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00e      	beq.n	8005802 <HAL_SPI_Init+0x72>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ec:	d009      	beq.n	8005802 <HAL_SPI_Init+0x72>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f6:	d004      	beq.n	8005802 <HAL_SPI_Init+0x72>
 80057f8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80057fc:	4857      	ldr	r0, [pc, #348]	; (800595c <HAL_SPI_Init+0x1cc>)
 80057fe:	f7fc ff42 	bl	8002686 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800580a:	d008      	beq.n	800581e <HAL_SPI_Init+0x8e>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d004      	beq.n	800581e <HAL_SPI_Init+0x8e>
 8005814:	f240 115b 	movw	r1, #347	; 0x15b
 8005818:	4850      	ldr	r0, [pc, #320]	; (800595c <HAL_SPI_Init+0x1cc>)
 800581a:	f7fc ff34 	bl	8002686 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005826:	d00d      	beq.n	8005844 <HAL_SPI_Init+0xb4>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <HAL_SPI_Init+0xb4>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005838:	d004      	beq.n	8005844 <HAL_SPI_Init+0xb4>
 800583a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800583e:	4847      	ldr	r0, [pc, #284]	; (800595c <HAL_SPI_Init+0x1cc>)
 8005840:	f7fc ff21 	bl	8002686 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d020      	beq.n	800588e <HAL_SPI_Init+0xfe>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	2b08      	cmp	r3, #8
 8005852:	d01c      	beq.n	800588e <HAL_SPI_Init+0xfe>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	2b10      	cmp	r3, #16
 800585a:	d018      	beq.n	800588e <HAL_SPI_Init+0xfe>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	2b18      	cmp	r3, #24
 8005862:	d014      	beq.n	800588e <HAL_SPI_Init+0xfe>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	2b20      	cmp	r3, #32
 800586a:	d010      	beq.n	800588e <HAL_SPI_Init+0xfe>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	2b28      	cmp	r3, #40	; 0x28
 8005872:	d00c      	beq.n	800588e <HAL_SPI_Init+0xfe>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	2b30      	cmp	r3, #48	; 0x30
 800587a:	d008      	beq.n	800588e <HAL_SPI_Init+0xfe>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	2b38      	cmp	r3, #56	; 0x38
 8005882:	d004      	beq.n	800588e <HAL_SPI_Init+0xfe>
 8005884:	f240 115d 	movw	r1, #349	; 0x15d
 8005888:	4834      	ldr	r0, [pc, #208]	; (800595c <HAL_SPI_Init+0x1cc>)
 800588a:	f7fc fefc 	bl	8002686 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d008      	beq.n	80058a8 <HAL_SPI_Init+0x118>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	2b80      	cmp	r3, #128	; 0x80
 800589c:	d004      	beq.n	80058a8 <HAL_SPI_Init+0x118>
 800589e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80058a2:	482e      	ldr	r0, [pc, #184]	; (800595c <HAL_SPI_Init+0x1cc>)
 80058a4:	f7fc feef 	bl	8002686 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <HAL_SPI_Init+0x12a>
 80058b0:	f240 1161 	movw	r1, #353	; 0x161
 80058b4:	4829      	ldr	r0, [pc, #164]	; (800595c <HAL_SPI_Init+0x1cc>)
 80058b6:	f7fc fee6 	bl	8002686 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d14e      	bne.n	8005960 <HAL_SPI_Init+0x1d0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <HAL_SPI_Init+0x14c>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d004      	beq.n	80058dc <HAL_SPI_Init+0x14c>
 80058d2:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80058d6:	4821      	ldr	r0, [pc, #132]	; (800595c <HAL_SPI_Init+0x1cc>)
 80058d8:	f7fc fed5 	bl	8002686 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_SPI_Init+0x166>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d004      	beq.n	80058f6 <HAL_SPI_Init+0x166>
 80058ec:	f240 1165 	movw	r1, #357	; 0x165
 80058f0:	481a      	ldr	r0, [pc, #104]	; (800595c <HAL_SPI_Init+0x1cc>)
 80058f2:	f7fc fec8 	bl	8002686 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058fe:	d125      	bne.n	800594c <HAL_SPI_Init+0x1bc>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d056      	beq.n	80059b6 <HAL_SPI_Init+0x226>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d052      	beq.n	80059b6 <HAL_SPI_Init+0x226>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	2b10      	cmp	r3, #16
 8005916:	d04e      	beq.n	80059b6 <HAL_SPI_Init+0x226>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	2b18      	cmp	r3, #24
 800591e:	d04a      	beq.n	80059b6 <HAL_SPI_Init+0x226>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	2b20      	cmp	r3, #32
 8005926:	d046      	beq.n	80059b6 <HAL_SPI_Init+0x226>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	2b28      	cmp	r3, #40	; 0x28
 800592e:	d042      	beq.n	80059b6 <HAL_SPI_Init+0x226>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	2b30      	cmp	r3, #48	; 0x30
 8005936:	d03e      	beq.n	80059b6 <HAL_SPI_Init+0x226>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	2b38      	cmp	r3, #56	; 0x38
 800593e:	d03a      	beq.n	80059b6 <HAL_SPI_Init+0x226>
 8005940:	f240 1169 	movw	r1, #361	; 0x169
 8005944:	4805      	ldr	r0, [pc, #20]	; (800595c <HAL_SPI_Init+0x1cc>)
 8005946:	f7fc fe9e 	bl	8002686 <assert_failed>
 800594a:	e034      	b.n	80059b6 <HAL_SPI_Init+0x226>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	61da      	str	r2, [r3, #28]
 8005952:	e030      	b.n	80059b6 <HAL_SPI_Init+0x226>
 8005954:	40013000 	.word	0x40013000
 8005958:	40003800 	.word	0x40003800
 800595c:	0800cf98 	.word	0x0800cf98
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d020      	beq.n	80059aa <HAL_SPI_Init+0x21a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d01c      	beq.n	80059aa <HAL_SPI_Init+0x21a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	2b10      	cmp	r3, #16
 8005976:	d018      	beq.n	80059aa <HAL_SPI_Init+0x21a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	2b18      	cmp	r3, #24
 800597e:	d014      	beq.n	80059aa <HAL_SPI_Init+0x21a>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	2b20      	cmp	r3, #32
 8005986:	d010      	beq.n	80059aa <HAL_SPI_Init+0x21a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	2b28      	cmp	r3, #40	; 0x28
 800598e:	d00c      	beq.n	80059aa <HAL_SPI_Init+0x21a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	2b30      	cmp	r3, #48	; 0x30
 8005996:	d008      	beq.n	80059aa <HAL_SPI_Init+0x21a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	2b38      	cmp	r3, #56	; 0x38
 800599e:	d004      	beq.n	80059aa <HAL_SPI_Init+0x21a>
 80059a0:	f240 1173 	movw	r1, #371	; 0x173
 80059a4:	4838      	ldr	r0, [pc, #224]	; (8005a88 <HAL_SPI_Init+0x2f8>)
 80059a6:	f7fc fe6e 	bl	8002686 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_SPI_Init+0x246>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fd f843 	bl	8002a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3a:	ea42 0103 	orr.w	r1, r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	0c1a      	lsrs	r2, r3, #16
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f002 0204 	and.w	r2, r2, #4
 8005a5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69da      	ldr	r2, [r3, #28]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	0800cf98 	.word	0x0800cf98

08005a8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <HAL_SPI_Transmit+0x30>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab0:	d004      	beq.n	8005abc <HAL_SPI_Transmit+0x30>
 8005ab2:	f240 3122 	movw	r1, #802	; 0x322
 8005ab6:	4893      	ldr	r0, [pc, #588]	; (8005d04 <HAL_SPI_Transmit+0x278>)
 8005ab8:	f7fc fde5 	bl	8002686 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_SPI_Transmit+0x3e>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e128      	b.n	8005d1c <HAL_SPI_Transmit+0x290>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ad2:	f7fd fa43 	bl	8002f5c <HAL_GetTick>
 8005ad6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d002      	beq.n	8005aee <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005aec:	e10d      	b.n	8005d0a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <HAL_SPI_Transmit+0x6e>
 8005af4:	88fb      	ldrh	r3, [r7, #6]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d102      	bne.n	8005b00 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005afe:	e104      	b.n	8005d0a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2203      	movs	r2, #3
 8005b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	88fa      	ldrh	r2, [r7, #6]
 8005b18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	88fa      	ldrh	r2, [r7, #6]
 8005b1e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b46:	d10f      	bne.n	8005b68 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d007      	beq.n	8005b86 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b8e:	d14b      	bne.n	8005c28 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_SPI_Transmit+0x112>
 8005b98:	8afb      	ldrh	r3, [r7, #22]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d13e      	bne.n	8005c1c <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	881a      	ldrh	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	1c9a      	adds	r2, r3, #2
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bc2:	e02b      	b.n	8005c1c <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d112      	bne.n	8005bf8 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	881a      	ldrh	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	1c9a      	adds	r2, r3, #2
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bf6:	e011      	b.n	8005c1c <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf8:	f7fd f9b0 	bl	8002f5c <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d803      	bhi.n	8005c10 <HAL_SPI_Transmit+0x184>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d102      	bne.n	8005c16 <HAL_SPI_Transmit+0x18a>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d102      	bne.n	8005c1c <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c1a:	e076      	b.n	8005d0a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1ce      	bne.n	8005bc4 <HAL_SPI_Transmit+0x138>
 8005c26:	e04c      	b.n	8005cc2 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <HAL_SPI_Transmit+0x1aa>
 8005c30:	8afb      	ldrh	r3, [r7, #22]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d140      	bne.n	8005cb8 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c5c:	e02c      	b.n	8005cb8 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d113      	bne.n	8005c94 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	330c      	adds	r3, #12
 8005c76:	7812      	ldrb	r2, [r2, #0]
 8005c78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c92:	e011      	b.n	8005cb8 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c94:	f7fd f962 	bl	8002f5c <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d803      	bhi.n	8005cac <HAL_SPI_Transmit+0x220>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d102      	bne.n	8005cb2 <HAL_SPI_Transmit+0x226>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d102      	bne.n	8005cb8 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cb6:	e028      	b.n	8005d0a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1cd      	bne.n	8005c5e <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fbc6 	bl	8006458 <SPI_EndRxTxTransaction>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	77fb      	strb	r3, [r7, #31]
 8005d02:	e002      	b.n	8005d0a <HAL_SPI_Transmit+0x27e>
 8005d04:	0800cf98 	.word	0x0800cf98
  }

error:
 8005d08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d40:	d112      	bne.n	8005d68 <HAL_SPI_Receive+0x44>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10e      	bne.n	8005d68 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d52:	88fa      	ldrh	r2, [r7, #6]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	68b9      	ldr	r1, [r7, #8]
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f8f2 	bl	8005f48 <HAL_SPI_TransmitReceive>
 8005d64:	4603      	mov	r3, r0
 8005d66:	e0ea      	b.n	8005f3e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_SPI_Receive+0x52>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e0e3      	b.n	8005f3e <HAL_SPI_Receive+0x21a>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d7e:	f7fd f8ed 	bl	8002f5c <HAL_GetTick>
 8005d82:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d002      	beq.n	8005d96 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
 8005d92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d94:	e0ca      	b.n	8005f2c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_SPI_Receive+0x7e>
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d102      	bne.n	8005da8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005da6:	e0c1      	b.n	8005f2c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2204      	movs	r2, #4
 8005dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	88fa      	ldrh	r2, [r7, #6]
 8005dc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	88fa      	ldrh	r2, [r7, #6]
 8005dc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dee:	d10f      	bne.n	8005e10 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1a:	2b40      	cmp	r3, #64	; 0x40
 8005e1c:	d007      	beq.n	8005e2e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d162      	bne.n	8005efc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e36:	e02e      	b.n	8005e96 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d115      	bne.n	8005e72 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f103 020c 	add.w	r2, r3, #12
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	7812      	ldrb	r2, [r2, #0]
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e70:	e011      	b.n	8005e96 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e72:	f7fd f873 	bl	8002f5c <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d803      	bhi.n	8005e8a <HAL_SPI_Receive+0x166>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d102      	bne.n	8005e90 <HAL_SPI_Receive+0x16c>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d102      	bne.n	8005e96 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e94:	e04a      	b.n	8005f2c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1cb      	bne.n	8005e38 <HAL_SPI_Receive+0x114>
 8005ea0:	e031      	b.n	8005f06 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d113      	bne.n	8005ed8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	b292      	uxth	r2, r2
 8005ebc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ed6:	e011      	b.n	8005efc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed8:	f7fd f840 	bl	8002f5c <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d803      	bhi.n	8005ef0 <HAL_SPI_Receive+0x1cc>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d102      	bne.n	8005ef6 <HAL_SPI_Receive+0x1d2>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005efa:	e017      	b.n	8005f2c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1cd      	bne.n	8005ea2 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fa52 	bl	80063b4 <SPI_EndRxTransaction>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	75fb      	strb	r3, [r7, #23]
 8005f28:	e000      	b.n	8005f2c <HAL_SPI_Receive+0x208>
  }

error :
 8005f2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	; 0x30
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f56:	2301      	movs	r3, #1
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <HAL_SPI_TransmitReceive+0x2a>
 8005f68:	f240 419e 	movw	r1, #1182	; 0x49e
 8005f6c:	4884      	ldr	r0, [pc, #528]	; (8006180 <HAL_SPI_TransmitReceive+0x238>)
 8005f6e:	f7fc fb8a 	bl	8002686 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x38>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e18d      	b.n	800629c <HAL_SPI_TransmitReceive+0x354>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f88:	f7fc ffe8 	bl	8002f5c <HAL_GetTick>
 8005f8c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005f9e:	887b      	ldrh	r3, [r7, #2]
 8005fa0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d00f      	beq.n	8005fca <HAL_SPI_TransmitReceive+0x82>
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb0:	d107      	bne.n	8005fc2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d103      	bne.n	8005fc2 <HAL_SPI_TransmitReceive+0x7a>
 8005fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d003      	beq.n	8005fca <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005fc8:	e15e      	b.n	8006288 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_SPI_TransmitReceive+0x94>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_SPI_TransmitReceive+0x94>
 8005fd6:	887b      	ldrh	r3, [r7, #2]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005fe2:	e151      	b.n	8006288 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d003      	beq.n	8005ff8 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2205      	movs	r2, #5
 8005ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	887a      	ldrh	r2, [r7, #2]
 8006008:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	887a      	ldrh	r2, [r7, #2]
 800600e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	887a      	ldrh	r2, [r7, #2]
 800601a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	887a      	ldrh	r2, [r7, #2]
 8006020:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006038:	2b40      	cmp	r3, #64	; 0x40
 800603a:	d007      	beq.n	800604c <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800604a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006054:	d178      	bne.n	8006148 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <HAL_SPI_TransmitReceive+0x11c>
 800605e:	8b7b      	ldrh	r3, [r7, #26]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d166      	bne.n	8006132 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	881a      	ldrh	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	1c9a      	adds	r2, r3, #2
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006088:	e053      	b.n	8006132 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b02      	cmp	r3, #2
 8006096:	d11b      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x188>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d016      	beq.n	80060d0 <HAL_SPI_TransmitReceive+0x188>
 80060a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d113      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ac:	881a      	ldrh	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	1c9a      	adds	r2, r3, #2
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d119      	bne.n	8006112 <HAL_SPI_TransmitReceive+0x1ca>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d014      	beq.n	8006112 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	b292      	uxth	r2, r2
 80060f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	1c9a      	adds	r2, r3, #2
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800610e:	2301      	movs	r3, #1
 8006110:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006112:	f7fc ff23 	bl	8002f5c <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800611e:	429a      	cmp	r2, r3
 8006120:	d807      	bhi.n	8006132 <HAL_SPI_TransmitReceive+0x1ea>
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d003      	beq.n	8006132 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006130:	e0aa      	b.n	8006288 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1a6      	bne.n	800608a <HAL_SPI_TransmitReceive+0x142>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1a1      	bne.n	800608a <HAL_SPI_TransmitReceive+0x142>
 8006146:	e07f      	b.n	8006248 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <HAL_SPI_TransmitReceive+0x20e>
 8006150:	8b7b      	ldrh	r3, [r7, #26]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d16e      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	330c      	adds	r3, #12
 8006160:	7812      	ldrb	r2, [r2, #0]
 8006162:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800617c:	e05a      	b.n	8006234 <HAL_SPI_TransmitReceive+0x2ec>
 800617e:	bf00      	nop
 8006180:	0800cf98 	.word	0x0800cf98
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b02      	cmp	r3, #2
 8006190:	d11c      	bne.n	80061cc <HAL_SPI_TransmitReceive+0x284>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d017      	beq.n	80061cc <HAL_SPI_TransmitReceive+0x284>
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d114      	bne.n	80061cc <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	330c      	adds	r3, #12
 80061ac:	7812      	ldrb	r2, [r2, #0]
 80061ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d119      	bne.n	800620e <HAL_SPI_TransmitReceive+0x2c6>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d014      	beq.n	800620e <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800620a:	2301      	movs	r3, #1
 800620c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800620e:	f7fc fea5 	bl	8002f5c <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800621a:	429a      	cmp	r2, r3
 800621c:	d803      	bhi.n	8006226 <HAL_SPI_TransmitReceive+0x2de>
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d102      	bne.n	800622c <HAL_SPI_TransmitReceive+0x2e4>
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d103      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006232:	e029      	b.n	8006288 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1a2      	bne.n	8006184 <HAL_SPI_TransmitReceive+0x23c>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d19d      	bne.n	8006184 <HAL_SPI_TransmitReceive+0x23c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f903 	bl	8006458 <SPI_EndRxTxTransaction>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d006      	beq.n	8006266 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006264:	e010      	b.n	8006288 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10b      	bne.n	8006286 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	e000      	b.n	8006288 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8006286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006298:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800629c:	4618      	mov	r0, r3
 800629e:	3730      	adds	r7, #48	; 0x30
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062b4:	f7fc fe52 	bl	8002f5c <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	4413      	add	r3, r2
 80062c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062c4:	f7fc fe4a 	bl	8002f5c <HAL_GetTick>
 80062c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062ca:	4b39      	ldr	r3, [pc, #228]	; (80063b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	015b      	lsls	r3, r3, #5
 80062d0:	0d1b      	lsrs	r3, r3, #20
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	fb02 f303 	mul.w	r3, r2, r3
 80062d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062da:	e054      	b.n	8006386 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d050      	beq.n	8006386 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062e4:	f7fc fe3a 	bl	8002f5c <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d902      	bls.n	80062fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d13d      	bne.n	8006376 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006308:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006312:	d111      	bne.n	8006338 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800631c:	d004      	beq.n	8006328 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006326:	d107      	bne.n	8006338 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006336:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006340:	d10f      	bne.n	8006362 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006360:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e017      	b.n	80063a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	3b01      	subs	r3, #1
 8006384:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4013      	ands	r3, r2
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	429a      	cmp	r2, r3
 8006394:	bf0c      	ite	eq
 8006396:	2301      	moveq	r3, #1
 8006398:	2300      	movne	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d19b      	bne.n	80062dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000004 	.word	0x20000004

080063b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063c8:	d111      	bne.n	80063ee <SPI_EndRxTransaction+0x3a>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d2:	d004      	beq.n	80063de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063dc:	d107      	bne.n	80063ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ec:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063f6:	d117      	bne.n	8006428 <SPI_EndRxTransaction+0x74>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006400:	d112      	bne.n	8006428 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2200      	movs	r2, #0
 800640a:	2101      	movs	r1, #1
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7ff ff49 	bl	80062a4 <SPI_WaitFlagStateUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01a      	beq.n	800644e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641c:	f043 0220 	orr.w	r2, r3, #32
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e013      	b.n	8006450 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	2180      	movs	r1, #128	; 0x80
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff ff36 	bl	80062a4 <SPI_WaitFlagStateUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	f043 0220 	orr.w	r2, r3, #32
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e000      	b.n	8006450 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af02      	add	r7, sp, #8
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2200      	movs	r2, #0
 800646c:	2180      	movs	r1, #128	; 0x80
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff ff18 	bl	80062a4 <SPI_WaitFlagStateUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647e:	f043 0220 	orr.w	r2, r3, #32
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e000      	b.n	800648c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e093      	b.n	80065ce <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a4b      	ldr	r2, [pc, #300]	; (80065d8 <HAL_TIM_Base_Init+0x144>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d013      	beq.n	80064d8 <HAL_TIM_Base_Init+0x44>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b8:	d00e      	beq.n	80064d8 <HAL_TIM_Base_Init+0x44>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a47      	ldr	r2, [pc, #284]	; (80065dc <HAL_TIM_Base_Init+0x148>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d009      	beq.n	80064d8 <HAL_TIM_Base_Init+0x44>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a45      	ldr	r2, [pc, #276]	; (80065e0 <HAL_TIM_Base_Init+0x14c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_TIM_Base_Init+0x44>
 80064ce:	f240 1113 	movw	r1, #275	; 0x113
 80064d2:	4844      	ldr	r0, [pc, #272]	; (80065e4 <HAL_TIM_Base_Init+0x150>)
 80064d4:	f7fc f8d7 	bl	8002686 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d014      	beq.n	800650a <HAL_TIM_Base_Init+0x76>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b10      	cmp	r3, #16
 80064e6:	d010      	beq.n	800650a <HAL_TIM_Base_Init+0x76>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d00c      	beq.n	800650a <HAL_TIM_Base_Init+0x76>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d008      	beq.n	800650a <HAL_TIM_Base_Init+0x76>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	2b60      	cmp	r3, #96	; 0x60
 80064fe:	d004      	beq.n	800650a <HAL_TIM_Base_Init+0x76>
 8006500:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006504:	4837      	ldr	r0, [pc, #220]	; (80065e4 <HAL_TIM_Base_Init+0x150>)
 8006506:	f7fc f8be 	bl	8002686 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00e      	beq.n	8006530 <HAL_TIM_Base_Init+0x9c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651a:	d009      	beq.n	8006530 <HAL_TIM_Base_Init+0x9c>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006524:	d004      	beq.n	8006530 <HAL_TIM_Base_Init+0x9c>
 8006526:	f240 1115 	movw	r1, #277	; 0x115
 800652a:	482e      	ldr	r0, [pc, #184]	; (80065e4 <HAL_TIM_Base_Init+0x150>)
 800652c:	f7fc f8ab 	bl	8002686 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <HAL_TIM_Base_Init+0xb6>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	2b80      	cmp	r3, #128	; 0x80
 800653e:	d004      	beq.n	800654a <HAL_TIM_Base_Init+0xb6>
 8006540:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006544:	4827      	ldr	r0, [pc, #156]	; (80065e4 <HAL_TIM_Base_Init+0x150>)
 8006546:	f7fc f89e 	bl	8002686 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f842 	bl	80065e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3304      	adds	r3, #4
 8006574:	4619      	mov	r1, r3
 8006576:	4610      	mov	r0, r2
 8006578:	f000 f9d8 	bl	800692c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	40012c00 	.word	0x40012c00
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40000800 	.word	0x40000800
 80065e4:	0800cfd0 	.word	0x0800cfd0

080065e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bc80      	pop	{r7}
 80065f8:	4770      	bx	lr
	...

080065fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a2e      	ldr	r2, [pc, #184]	; (80066c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <HAL_TIM_Base_Start_IT+0x3a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006616:	d00e      	beq.n	8006636 <HAL_TIM_Base_Start_IT+0x3a>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a2a      	ldr	r2, [pc, #168]	; (80066c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_TIM_Base_Start_IT+0x3a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a29      	ldr	r2, [pc, #164]	; (80066cc <HAL_TIM_Base_Start_IT+0xd0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d004      	beq.n	8006636 <HAL_TIM_Base_Start_IT+0x3a>
 800662c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006630:	4827      	ldr	r0, [pc, #156]	; (80066d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006632:	f7fc f828 	bl	8002686 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b01      	cmp	r3, #1
 8006640:	d001      	beq.n	8006646 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e03a      	b.n	80066bc <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f042 0201 	orr.w	r2, r2, #1
 800665c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a18      	ldr	r2, [pc, #96]	; (80066c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00e      	beq.n	8006686 <HAL_TIM_Base_Start_IT+0x8a>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006670:	d009      	beq.n	8006686 <HAL_TIM_Base_Start_IT+0x8a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a14      	ldr	r2, [pc, #80]	; (80066c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <HAL_TIM_Base_Start_IT+0x8a>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a12      	ldr	r2, [pc, #72]	; (80066cc <HAL_TIM_Base_Start_IT+0xd0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d111      	bne.n	80066aa <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b06      	cmp	r3, #6
 8006696:	d010      	beq.n	80066ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0201 	orr.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a8:	e007      	b.n	80066ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f042 0201 	orr.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40012c00 	.word	0x40012c00
 80066c8:	40000400 	.word	0x40000400
 80066cc:	40000800 	.word	0x40000800
 80066d0:	0800cfd0 	.word	0x0800cfd0

080066d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d122      	bne.n	8006730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d11b      	bne.n	8006730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0202 	mvn.w	r2, #2
 8006700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f8ed 	bl	80068f6 <HAL_TIM_IC_CaptureCallback>
 800671c:	e005      	b.n	800672a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f8e0 	bl	80068e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f8ef 	bl	8006908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b04      	cmp	r3, #4
 800673c:	d122      	bne.n	8006784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b04      	cmp	r3, #4
 800674a:	d11b      	bne.n	8006784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0204 	mvn.w	r2, #4
 8006754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f8c3 	bl	80068f6 <HAL_TIM_IC_CaptureCallback>
 8006770:	e005      	b.n	800677e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f8b6 	bl	80068e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f8c5 	bl	8006908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b08      	cmp	r3, #8
 8006790:	d122      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0308 	and.w	r3, r3, #8
 800679c:	2b08      	cmp	r3, #8
 800679e:	d11b      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0208 	mvn.w	r2, #8
 80067a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2204      	movs	r2, #4
 80067ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f899 	bl	80068f6 <HAL_TIM_IC_CaptureCallback>
 80067c4:	e005      	b.n	80067d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f88c 	bl	80068e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f89b 	bl	8006908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0310 	and.w	r3, r3, #16
 80067e2:	2b10      	cmp	r3, #16
 80067e4:	d122      	bne.n	800682c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b10      	cmp	r3, #16
 80067f2:	d11b      	bne.n	800682c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0210 	mvn.w	r2, #16
 80067fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2208      	movs	r2, #8
 8006802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f86f 	bl	80068f6 <HAL_TIM_IC_CaptureCallback>
 8006818:	e005      	b.n	8006826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f862 	bl	80068e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f871 	bl	8006908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b01      	cmp	r3, #1
 8006838:	d10e      	bne.n	8006858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b01      	cmp	r3, #1
 8006846:	d107      	bne.n	8006858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0201 	mvn.w	r2, #1
 8006850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fb ff00 	bl	8002658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006862:	2b80      	cmp	r3, #128	; 0x80
 8006864:	d10e      	bne.n	8006884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006870:	2b80      	cmp	r3, #128	; 0x80
 8006872:	d107      	bne.n	8006884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800687c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f8bf 	bl	8006a02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688e:	2b40      	cmp	r3, #64	; 0x40
 8006890:	d10e      	bne.n	80068b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689c:	2b40      	cmp	r3, #64	; 0x40
 800689e:	d107      	bne.n	80068b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f835 	bl	800691a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	d10e      	bne.n	80068dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d107      	bne.n	80068dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f06f 0220 	mvn.w	r2, #32
 80068d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f88a 	bl	80069f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr

080068f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr

08006908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	bc80      	pop	{r7}
 8006918:	4770      	bx	lr

0800691a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr

0800692c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a29      	ldr	r2, [pc, #164]	; (80069e4 <TIM_Base_SetConfig+0xb8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00b      	beq.n	800695c <TIM_Base_SetConfig+0x30>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694a:	d007      	beq.n	800695c <TIM_Base_SetConfig+0x30>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <TIM_Base_SetConfig+0xbc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_Base_SetConfig+0x30>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a25      	ldr	r2, [pc, #148]	; (80069ec <TIM_Base_SetConfig+0xc0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d108      	bne.n	800696e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a1c      	ldr	r2, [pc, #112]	; (80069e4 <TIM_Base_SetConfig+0xb8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00b      	beq.n	800698e <TIM_Base_SetConfig+0x62>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697c:	d007      	beq.n	800698e <TIM_Base_SetConfig+0x62>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a19      	ldr	r2, [pc, #100]	; (80069e8 <TIM_Base_SetConfig+0xbc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d003      	beq.n	800698e <TIM_Base_SetConfig+0x62>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a18      	ldr	r2, [pc, #96]	; (80069ec <TIM_Base_SetConfig+0xc0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d108      	bne.n	80069a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a07      	ldr	r2, [pc, #28]	; (80069e4 <TIM_Base_SetConfig+0xb8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d103      	bne.n	80069d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	615a      	str	r2, [r3, #20]
}
 80069da:	bf00      	nop
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr
 80069e4:	40012c00 	.word	0x40012c00
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40000800 	.word	0x40000800

080069f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr

08006a02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr

08006a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e092      	b.n	8006b4c <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d02c      	beq.n	8006a88 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a48      	ldr	r2, [pc, #288]	; (8006b54 <HAL_UART_Init+0x140>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00e      	beq.n	8006a56 <HAL_UART_Init+0x42>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a46      	ldr	r2, [pc, #280]	; (8006b58 <HAL_UART_Init+0x144>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d009      	beq.n	8006a56 <HAL_UART_Init+0x42>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a45      	ldr	r2, [pc, #276]	; (8006b5c <HAL_UART_Init+0x148>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d004      	beq.n	8006a56 <HAL_UART_Init+0x42>
 8006a4c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006a50:	4843      	ldr	r0, [pc, #268]	; (8006b60 <HAL_UART_Init+0x14c>)
 8006a52:	f7fb fe18 	bl	8002686 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d028      	beq.n	8006ab0 <HAL_UART_Init+0x9c>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a66:	d023      	beq.n	8006ab0 <HAL_UART_Init+0x9c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a70:	d01e      	beq.n	8006ab0 <HAL_UART_Init+0x9c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a7a:	d019      	beq.n	8006ab0 <HAL_UART_Init+0x9c>
 8006a7c:	f240 1147 	movw	r1, #327	; 0x147
 8006a80:	4837      	ldr	r0, [pc, #220]	; (8006b60 <HAL_UART_Init+0x14c>)
 8006a82:	f7fb fe00 	bl	8002686 <assert_failed>
 8006a86:	e013      	b.n	8006ab0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a31      	ldr	r2, [pc, #196]	; (8006b54 <HAL_UART_Init+0x140>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00e      	beq.n	8006ab0 <HAL_UART_Init+0x9c>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a30      	ldr	r2, [pc, #192]	; (8006b58 <HAL_UART_Init+0x144>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d009      	beq.n	8006ab0 <HAL_UART_Init+0x9c>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a2e      	ldr	r2, [pc, #184]	; (8006b5c <HAL_UART_Init+0x148>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d004      	beq.n	8006ab0 <HAL_UART_Init+0x9c>
 8006aa6:	f240 114b 	movw	r1, #331	; 0x14b
 8006aaa:	482d      	ldr	r0, [pc, #180]	; (8006b60 <HAL_UART_Init+0x14c>)
 8006aac:	f7fb fdeb 	bl	8002686 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d009      	beq.n	8006acc <HAL_UART_Init+0xb8>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac0:	d004      	beq.n	8006acc <HAL_UART_Init+0xb8>
 8006ac2:	f240 114d 	movw	r1, #333	; 0x14d
 8006ac6:	4826      	ldr	r0, [pc, #152]	; (8006b60 <HAL_UART_Init+0x14c>)
 8006ac8:	f7fb fddd 	bl	8002686 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d106      	bne.n	8006ae6 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7fc f9a1 	bl	8002e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2224      	movs	r2, #36	; 0x24
 8006aea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006afc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f9ac 	bl	8006e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695a      	ldr	r2, [r3, #20]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	40013800 	.word	0x40013800
 8006b58:	40004400 	.word	0x40004400
 8006b5c:	40004800 	.word	0x40004800
 8006b60:	0800d008 	.word	0x0800d008

08006b64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	; 0x28
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	603b      	str	r3, [r7, #0]
 8006b70:	4613      	mov	r3, r2
 8006b72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d17c      	bne.n	8006c7e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <HAL_UART_Transmit+0x2c>
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e075      	b.n	8006c80 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d101      	bne.n	8006ba2 <HAL_UART_Transmit+0x3e>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e06e      	b.n	8006c80 <HAL_UART_Transmit+0x11c>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2221      	movs	r2, #33	; 0x21
 8006bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006bb8:	f7fc f9d0 	bl	8002f5c <HAL_GetTick>
 8006bbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	88fa      	ldrh	r2, [r7, #6]
 8006bc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	88fa      	ldrh	r2, [r7, #6]
 8006bc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd2:	d108      	bne.n	8006be6 <HAL_UART_Transmit+0x82>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	61bb      	str	r3, [r7, #24]
 8006be4:	e003      	b.n	8006bee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006bf6:	e02a      	b.n	8006c4e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2180      	movs	r1, #128	; 0x80
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 f8df 	bl	8006dc6 <UART_WaitOnFlagUntilTimeout>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e036      	b.n	8006c80 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10b      	bne.n	8006c30 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	3302      	adds	r3, #2
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	e007      	b.n	8006c40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	781a      	ldrb	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1cf      	bne.n	8006bf8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2140      	movs	r1, #64	; 0x40
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 f8af 	bl	8006dc6 <UART_WaitOnFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e006      	b.n	8006c80 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e000      	b.n	8006c80 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c7e:	2302      	movs	r3, #2
  }
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3720      	adds	r7, #32
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08a      	sub	sp, #40	; 0x28
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	4613      	mov	r3, r2
 8006c96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b20      	cmp	r3, #32
 8006ca6:	f040 8089 	bne.w	8006dbc <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_UART_Receive+0x2e>
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e081      	b.n	8006dbe <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_UART_Receive+0x40>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e07a      	b.n	8006dbe <HAL_UART_Receive+0x136>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2222      	movs	r2, #34	; 0x22
 8006cda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006cde:	f7fc f93d 	bl	8002f5c <HAL_GetTick>
 8006ce2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	88fa      	ldrh	r2, [r7, #6]
 8006cee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf8:	d108      	bne.n	8006d0c <HAL_UART_Receive+0x84>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	61bb      	str	r3, [r7, #24]
 8006d0a:	e003      	b.n	8006d14 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006d1c:	e043      	b.n	8006da6 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2200      	movs	r2, #0
 8006d26:	2120      	movs	r1, #32
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 f84c 	bl	8006dc6 <UART_WaitOnFlagUntilTimeout>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e042      	b.n	8006dbe <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10c      	bne.n	8006d58 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	3302      	adds	r3, #2
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	e01f      	b.n	8006d98 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d60:	d007      	beq.n	8006d72 <HAL_UART_Receive+0xea>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <HAL_UART_Receive+0xf8>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e008      	b.n	8006d92 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	3301      	adds	r3, #1
 8006d96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1b6      	bne.n	8006d1e <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	e000      	b.n	8006dbe <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006dbc:	2302      	movs	r3, #2
  }
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	603b      	str	r3, [r7, #0]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd6:	e02c      	b.n	8006e32 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dde:	d028      	beq.n	8006e32 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d007      	beq.n	8006df6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006de6:	f7fc f8b9 	bl	8002f5c <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d21d      	bcs.n	8006e32 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e04:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695a      	ldr	r2, [r3, #20]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0201 	bic.w	r2, r2, #1
 8006e14:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e00f      	b.n	8006e52 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	bf0c      	ite	eq
 8006e42:	2301      	moveq	r3, #1
 8006e44:	2300      	movne	r3, #0
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d0c3      	beq.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	4a5f      	ldr	r2, [pc, #380]	; (8006fe8 <UART_SetConfig+0x18c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d904      	bls.n	8006e78 <UART_SetConfig+0x1c>
 8006e6e:	f640 31f6 	movw	r1, #3062	; 0xbf6
 8006e72:	485e      	ldr	r0, [pc, #376]	; (8006fec <UART_SetConfig+0x190>)
 8006e74:	f7fb fc07 	bl	8002686 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d009      	beq.n	8006e94 <UART_SetConfig+0x38>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e88:	d004      	beq.n	8006e94 <UART_SetConfig+0x38>
 8006e8a:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8006e8e:	4857      	ldr	r0, [pc, #348]	; (8006fec <UART_SetConfig+0x190>)
 8006e90:	f7fb fbf9 	bl	8002686 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00e      	beq.n	8006eba <UART_SetConfig+0x5e>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea4:	d009      	beq.n	8006eba <UART_SetConfig+0x5e>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006eae:	d004      	beq.n	8006eba <UART_SetConfig+0x5e>
 8006eb0:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8006eb4:	484d      	ldr	r0, [pc, #308]	; (8006fec <UART_SetConfig+0x190>)
 8006eb6:	f7fb fbe6 	bl	8002686 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	695a      	ldr	r2, [r3, #20]
 8006ebe:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <UART_SetConfig+0x74>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <UART_SetConfig+0x7e>
 8006ed0:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8006ed4:	4845      	ldr	r0, [pc, #276]	; (8006fec <UART_SetConfig+0x190>)
 8006ed6:	f7fb fbd6 	bl	8002686 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006f0c:	f023 030c 	bic.w	r3, r3, #12
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6812      	ldr	r2, [r2, #0]
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	430b      	orrs	r3, r1
 8006f18:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	699a      	ldr	r2, [r3, #24]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a2e      	ldr	r2, [pc, #184]	; (8006ff0 <UART_SetConfig+0x194>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d103      	bne.n	8006f42 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006f3a:	f7fe faab 	bl	8005494 <HAL_RCC_GetPCLK2Freq>
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	e002      	b.n	8006f48 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006f42:	f7fe fa93 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8006f46:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	009a      	lsls	r2, r3, #2
 8006f52:	441a      	add	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5e:	4a25      	ldr	r2, [pc, #148]	; (8006ff4 <UART_SetConfig+0x198>)
 8006f60:	fba2 2303 	umull	r2, r3, r2, r3
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	0119      	lsls	r1, r3, #4
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009a      	lsls	r2, r3, #2
 8006f72:	441a      	add	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f7e:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <UART_SetConfig+0x198>)
 8006f80:	fba3 0302 	umull	r0, r3, r3, r2
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	2064      	movs	r0, #100	; 0x64
 8006f88:	fb00 f303 	mul.w	r3, r0, r3
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	3332      	adds	r3, #50	; 0x32
 8006f92:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <UART_SetConfig+0x198>)
 8006f94:	fba2 2303 	umull	r2, r3, r2, r3
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f9e:	4419      	add	r1, r3
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009a      	lsls	r2, r3, #2
 8006faa:	441a      	add	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fb6:	4b0f      	ldr	r3, [pc, #60]	; (8006ff4 <UART_SetConfig+0x198>)
 8006fb8:	fba3 0302 	umull	r0, r3, r3, r2
 8006fbc:	095b      	lsrs	r3, r3, #5
 8006fbe:	2064      	movs	r0, #100	; 0x64
 8006fc0:	fb00 f303 	mul.w	r3, r0, r3
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	3332      	adds	r3, #50	; 0x32
 8006fca:	4a0a      	ldr	r2, [pc, #40]	; (8006ff4 <UART_SetConfig+0x198>)
 8006fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd0:	095b      	lsrs	r3, r3, #5
 8006fd2:	f003 020f 	and.w	r2, r3, #15
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	440a      	add	r2, r1
 8006fdc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	0044aa20 	.word	0x0044aa20
 8006fec:	0800d008 	.word	0x0800d008
 8006ff0:	40013800 	.word	0x40013800
 8006ff4:	51eb851f 	.word	0x51eb851f

08006ff8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ffe:	f3ef 8305 	mrs	r3, IPSR
 8007002:	60bb      	str	r3, [r7, #8]
  return(result);
 8007004:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10f      	bne.n	800702a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800700a:	f3ef 8310 	mrs	r3, PRIMASK
 800700e:	607b      	str	r3, [r7, #4]
  return(result);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <osKernelInitialize+0x32>
 8007016:	4b10      	ldr	r3, [pc, #64]	; (8007058 <osKernelInitialize+0x60>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d109      	bne.n	8007032 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800701e:	f3ef 8311 	mrs	r3, BASEPRI
 8007022:	603b      	str	r3, [r7, #0]
  return(result);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800702a:	f06f 0305 	mvn.w	r3, #5
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e00c      	b.n	800704c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007032:	4b09      	ldr	r3, [pc, #36]	; (8007058 <osKernelInitialize+0x60>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d105      	bne.n	8007046 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800703a:	4b07      	ldr	r3, [pc, #28]	; (8007058 <osKernelInitialize+0x60>)
 800703c:	2201      	movs	r2, #1
 800703e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e002      	b.n	800704c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007046:	f04f 33ff 	mov.w	r3, #4294967295
 800704a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800704c:	68fb      	ldr	r3, [r7, #12]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr
 8007058:	200000a8 	.word	0x200000a8

0800705c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007062:	f3ef 8305 	mrs	r3, IPSR
 8007066:	60bb      	str	r3, [r7, #8]
  return(result);
 8007068:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10f      	bne.n	800708e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706e:	f3ef 8310 	mrs	r3, PRIMASK
 8007072:	607b      	str	r3, [r7, #4]
  return(result);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <osKernelStart+0x32>
 800707a:	4b11      	ldr	r3, [pc, #68]	; (80070c0 <osKernelStart+0x64>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d109      	bne.n	8007096 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007082:	f3ef 8311 	mrs	r3, BASEPRI
 8007086:	603b      	str	r3, [r7, #0]
  return(result);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <osKernelStart+0x3a>
    stat = osErrorISR;
 800708e:	f06f 0305 	mvn.w	r3, #5
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	e00e      	b.n	80070b4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007096:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <osKernelStart+0x64>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d107      	bne.n	80070ae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800709e:	4b08      	ldr	r3, [pc, #32]	; (80070c0 <osKernelStart+0x64>)
 80070a0:	2202      	movs	r2, #2
 80070a2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80070a4:	f002 f824 	bl	80090f0 <vTaskStartScheduler>
      stat = osOK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	e002      	b.n	80070b4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80070ae:	f04f 33ff 	mov.w	r3, #4294967295
 80070b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80070b4:	68fb      	ldr	r3, [r7, #12]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	200000a8 	.word	0x200000a8

080070c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b092      	sub	sp, #72	; 0x48
 80070c8:	af04      	add	r7, sp, #16
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070d4:	f3ef 8305 	mrs	r3, IPSR
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8094 	bne.w	800720a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070e2:	f3ef 8310 	mrs	r3, PRIMASK
 80070e6:	623b      	str	r3, [r7, #32]
  return(result);
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f040 808d 	bne.w	800720a <osThreadNew+0x146>
 80070f0:	4b48      	ldr	r3, [pc, #288]	; (8007214 <osThreadNew+0x150>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d106      	bne.n	8007106 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070f8:	f3ef 8311 	mrs	r3, BASEPRI
 80070fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f040 8082 	bne.w	800720a <osThreadNew+0x146>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d07e      	beq.n	800720a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800710c:	2340      	movs	r3, #64	; 0x40
 800710e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007110:	2318      	movs	r3, #24
 8007112:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007114:	2300      	movs	r3, #0
 8007116:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007118:	f107 031b 	add.w	r3, r7, #27
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800711e:	f04f 33ff 	mov.w	r3, #4294967295
 8007122:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d045      	beq.n	80071b6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <osThreadNew+0x74>
        name = attr->name;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d008      	beq.n	800715e <osThreadNew+0x9a>
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	2b38      	cmp	r3, #56	; 0x38
 8007150:	d805      	bhi.n	800715e <osThreadNew+0x9a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <osThreadNew+0x9e>
        return (NULL);
 800715e:	2300      	movs	r3, #0
 8007160:	e054      	b.n	800720c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	089b      	lsrs	r3, r3, #2
 8007170:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00e      	beq.n	8007198 <osThreadNew+0xd4>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	2b6f      	cmp	r3, #111	; 0x6f
 8007180:	d90a      	bls.n	8007198 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007186:	2b00      	cmp	r3, #0
 8007188:	d006      	beq.n	8007198 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <osThreadNew+0xd4>
        mem = 1;
 8007192:	2301      	movs	r3, #1
 8007194:	62bb      	str	r3, [r7, #40]	; 0x28
 8007196:	e010      	b.n	80071ba <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10c      	bne.n	80071ba <osThreadNew+0xf6>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d108      	bne.n	80071ba <osThreadNew+0xf6>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d104      	bne.n	80071ba <osThreadNew+0xf6>
          mem = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80071b4:	e001      	b.n	80071ba <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d110      	bne.n	80071e2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071c8:	9202      	str	r2, [sp, #8]
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f001 fdba 	bl	8008d50 <xTaskCreateStatic>
 80071dc:	4603      	mov	r3, r0
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	e013      	b.n	800720a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d110      	bne.n	800720a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f107 0314 	add.w	r3, r7, #20
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f001 fe04 	bl	8008e08 <xTaskCreate>
 8007200:	4603      	mov	r3, r0
 8007202:	2b01      	cmp	r3, #1
 8007204:	d001      	beq.n	800720a <osThreadNew+0x146>
          hTask = NULL;
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800720a:	697b      	ldr	r3, [r7, #20]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3738      	adds	r7, #56	; 0x38
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	200000a8 	.word	0x200000a8

08007218 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007220:	f3ef 8305 	mrs	r3, IPSR
 8007224:	613b      	str	r3, [r7, #16]
  return(result);
 8007226:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10f      	bne.n	800724c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800722c:	f3ef 8310 	mrs	r3, PRIMASK
 8007230:	60fb      	str	r3, [r7, #12]
  return(result);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <osDelay+0x34>
 8007238:	4b0d      	ldr	r3, [pc, #52]	; (8007270 <osDelay+0x58>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b02      	cmp	r3, #2
 800723e:	d109      	bne.n	8007254 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007240:	f3ef 8311 	mrs	r3, BASEPRI
 8007244:	60bb      	str	r3, [r7, #8]
  return(result);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <osDelay+0x3c>
    stat = osErrorISR;
 800724c:	f06f 0305 	mvn.w	r3, #5
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e007      	b.n	8007264 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007254:	2300      	movs	r3, #0
 8007256:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <osDelay+0x4c>
      vTaskDelay(ticks);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 ff12 	bl	8009088 <vTaskDelay>
    }
  }

  return (stat);
 8007264:	697b      	ldr	r3, [r7, #20]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	200000a8 	.word	0x200000a8

08007274 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	; 0x28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800727c:	2300      	movs	r3, #0
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007280:	f3ef 8305 	mrs	r3, IPSR
 8007284:	613b      	str	r3, [r7, #16]
  return(result);
 8007286:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007288:	2b00      	cmp	r3, #0
 800728a:	f040 8085 	bne.w	8007398 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800728e:	f3ef 8310 	mrs	r3, PRIMASK
 8007292:	60fb      	str	r3, [r7, #12]
  return(result);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d17e      	bne.n	8007398 <osMutexNew+0x124>
 800729a:	4b42      	ldr	r3, [pc, #264]	; (80073a4 <osMutexNew+0x130>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d105      	bne.n	80072ae <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072a2:	f3ef 8311 	mrs	r3, BASEPRI
 80072a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d174      	bne.n	8007398 <osMutexNew+0x124>
    if (attr != NULL) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <osMutexNew+0x48>
      type = attr->attr_bits;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	623b      	str	r3, [r7, #32]
 80072ba:	e001      	b.n	80072c0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <osMutexNew+0x5c>
      rmtx = 1U;
 80072ca:	2301      	movs	r3, #1
 80072cc:	61fb      	str	r3, [r7, #28]
 80072ce:	e001      	b.n	80072d4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d15c      	bne.n	8007398 <osMutexNew+0x124>
      mem = -1;
 80072de:	f04f 33ff 	mov.w	r3, #4294967295
 80072e2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d015      	beq.n	8007316 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d006      	beq.n	8007300 <osMutexNew+0x8c>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	2b4f      	cmp	r3, #79	; 0x4f
 80072f8:	d902      	bls.n	8007300 <osMutexNew+0x8c>
          mem = 1;
 80072fa:	2301      	movs	r3, #1
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	e00c      	b.n	800731a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d108      	bne.n	800731a <osMutexNew+0xa6>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <osMutexNew+0xa6>
            mem = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	61bb      	str	r3, [r7, #24]
 8007314:	e001      	b.n	800731a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d112      	bne.n	8007346 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d007      	beq.n	8007336 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	4619      	mov	r1, r3
 800732c:	2004      	movs	r0, #4
 800732e:	f000 fdcd 	bl	8007ecc <xQueueCreateMutexStatic>
 8007332:	6278      	str	r0, [r7, #36]	; 0x24
 8007334:	e016      	b.n	8007364 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	4619      	mov	r1, r3
 800733c:	2001      	movs	r0, #1
 800733e:	f000 fdc5 	bl	8007ecc <xQueueCreateMutexStatic>
 8007342:	6278      	str	r0, [r7, #36]	; 0x24
 8007344:	e00e      	b.n	8007364 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10b      	bne.n	8007364 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007352:	2004      	movs	r0, #4
 8007354:	f000 fda2 	bl	8007e9c <xQueueCreateMutex>
 8007358:	6278      	str	r0, [r7, #36]	; 0x24
 800735a:	e003      	b.n	8007364 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800735c:	2001      	movs	r0, #1
 800735e:	f000 fd9d 	bl	8007e9c <xQueueCreateMutex>
 8007362:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00c      	beq.n	8007384 <osMutexNew+0x110>
        if (attr != NULL) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <osMutexNew+0x104>
          name = attr->name;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	e001      	b.n	800737c <osMutexNew+0x108>
        } else {
          name = NULL;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800737c:	6979      	ldr	r1, [r7, #20]
 800737e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007380:	f001 fc60 	bl	8008c44 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d006      	beq.n	8007398 <osMutexNew+0x124>
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800739a:	4618      	mov	r0, r3
 800739c:	3728      	adds	r7, #40	; 0x28
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	200000a8 	.word	0x200000a8

080073a8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08c      	sub	sp, #48	; 0x30
 80073ac:	af02      	add	r7, sp, #8
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073b8:	f3ef 8305 	mrs	r3, IPSR
 80073bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80073be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f040 8086 	bne.w	80074d2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c6:	f3ef 8310 	mrs	r3, PRIMASK
 80073ca:	617b      	str	r3, [r7, #20]
  return(result);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d17f      	bne.n	80074d2 <osSemaphoreNew+0x12a>
 80073d2:	4b42      	ldr	r3, [pc, #264]	; (80074dc <osSemaphoreNew+0x134>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d105      	bne.n	80073e6 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073da:	f3ef 8311 	mrs	r3, BASEPRI
 80073de:	613b      	str	r3, [r7, #16]
  return(result);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d175      	bne.n	80074d2 <osSemaphoreNew+0x12a>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d072      	beq.n	80074d2 <osSemaphoreNew+0x12a>
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d86e      	bhi.n	80074d2 <osSemaphoreNew+0x12a>
    mem = -1;
 80073f4:	f04f 33ff 	mov.w	r3, #4294967295
 80073f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d015      	beq.n	800742c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d006      	beq.n	8007416 <osSemaphoreNew+0x6e>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b4f      	cmp	r3, #79	; 0x4f
 800740e:	d902      	bls.n	8007416 <osSemaphoreNew+0x6e>
        mem = 1;
 8007410:	2301      	movs	r3, #1
 8007412:	623b      	str	r3, [r7, #32]
 8007414:	e00c      	b.n	8007430 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d108      	bne.n	8007430 <osSemaphoreNew+0x88>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d104      	bne.n	8007430 <osSemaphoreNew+0x88>
          mem = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	623b      	str	r3, [r7, #32]
 800742a:	e001      	b.n	8007430 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d04c      	beq.n	80074d2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d128      	bne.n	8007490 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d10a      	bne.n	800745a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	2203      	movs	r2, #3
 800744a:	9200      	str	r2, [sp, #0]
 800744c:	2200      	movs	r2, #0
 800744e:	2100      	movs	r1, #0
 8007450:	2001      	movs	r0, #1
 8007452:	f000 fc31 	bl	8007cb8 <xQueueGenericCreateStatic>
 8007456:	6278      	str	r0, [r7, #36]	; 0x24
 8007458:	e005      	b.n	8007466 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800745a:	2203      	movs	r2, #3
 800745c:	2100      	movs	r1, #0
 800745e:	2001      	movs	r0, #1
 8007460:	f000 fca1 	bl	8007da6 <xQueueGenericCreate>
 8007464:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	2b00      	cmp	r3, #0
 800746a:	d022      	beq.n	80074b2 <osSemaphoreNew+0x10a>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01f      	beq.n	80074b2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007472:	2300      	movs	r3, #0
 8007474:	2200      	movs	r2, #0
 8007476:	2100      	movs	r1, #0
 8007478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800747a:	f000 fdad 	bl	8007fd8 <xQueueGenericSend>
 800747e:	4603      	mov	r3, r0
 8007480:	2b01      	cmp	r3, #1
 8007482:	d016      	beq.n	80074b2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007486:	f001 fa93 	bl	80089b0 <vQueueDelete>
            hSemaphore = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
 800748e:	e010      	b.n	80074b2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d108      	bne.n	80074a8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	461a      	mov	r2, r3
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fd2f 	bl	8007f02 <xQueueCreateCountingSemaphoreStatic>
 80074a4:	6278      	str	r0, [r7, #36]	; 0x24
 80074a6:	e004      	b.n	80074b2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 fd60 	bl	8007f70 <xQueueCreateCountingSemaphore>
 80074b0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00c      	beq.n	80074d2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <osSemaphoreNew+0x11e>
          name = attr->name;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	61fb      	str	r3, [r7, #28]
 80074c4:	e001      	b.n	80074ca <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80074ca:	69f9      	ldr	r1, [r7, #28]
 80074cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074ce:	f001 fbb9 	bl	8008c44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3728      	adds	r7, #40	; 0x28
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	200000a8 	.word	0x200000a8

080074e0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d103      	bne.n	8007500 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80074f8:	f06f 0303 	mvn.w	r3, #3
 80074fc:	61fb      	str	r3, [r7, #28]
 80074fe:	e04b      	b.n	8007598 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007500:	f3ef 8305 	mrs	r3, IPSR
 8007504:	617b      	str	r3, [r7, #20]
  return(result);
 8007506:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10f      	bne.n	800752c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800750c:	f3ef 8310 	mrs	r3, PRIMASK
 8007510:	613b      	str	r3, [r7, #16]
  return(result);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d109      	bne.n	800752c <osSemaphoreAcquire+0x4c>
 8007518:	4b22      	ldr	r3, [pc, #136]	; (80075a4 <osSemaphoreAcquire+0xc4>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d128      	bne.n	8007572 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007520:	f3ef 8311 	mrs	r3, BASEPRI
 8007524:	60fb      	str	r3, [r7, #12]
  return(result);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d022      	beq.n	8007572 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007532:	f06f 0303 	mvn.w	r3, #3
 8007536:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007538:	e02d      	b.n	8007596 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800753a:	2300      	movs	r3, #0
 800753c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800753e:	f107 0308 	add.w	r3, r7, #8
 8007542:	461a      	mov	r2, r3
 8007544:	2100      	movs	r1, #0
 8007546:	69b8      	ldr	r0, [r7, #24]
 8007548:	f001 f956 	bl	80087f8 <xQueueReceiveFromISR>
 800754c:	4603      	mov	r3, r0
 800754e:	2b01      	cmp	r3, #1
 8007550:	d003      	beq.n	800755a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007552:	f06f 0302 	mvn.w	r3, #2
 8007556:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007558:	e01d      	b.n	8007596 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01a      	beq.n	8007596 <osSemaphoreAcquire+0xb6>
 8007560:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <osSemaphoreAcquire+0xc8>)
 8007562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007570:	e011      	b.n	8007596 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	69b8      	ldr	r0, [r7, #24]
 8007576:	f001 f833 	bl	80085e0 <xQueueSemaphoreTake>
 800757a:	4603      	mov	r3, r0
 800757c:	2b01      	cmp	r3, #1
 800757e:	d00b      	beq.n	8007598 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007586:	f06f 0301 	mvn.w	r3, #1
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	e004      	b.n	8007598 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800758e:	f06f 0302 	mvn.w	r3, #2
 8007592:	61fb      	str	r3, [r7, #28]
 8007594:	e000      	b.n	8007598 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007596:	bf00      	nop
      }
    }
  }

  return (stat);
 8007598:	69fb      	ldr	r3, [r7, #28]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3720      	adds	r7, #32
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	200000a8 	.word	0x200000a8
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d103      	bne.n	80075ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80075c2:	f06f 0303 	mvn.w	r3, #3
 80075c6:	61fb      	str	r3, [r7, #28]
 80075c8:	e03e      	b.n	8007648 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ca:	f3ef 8305 	mrs	r3, IPSR
 80075ce:	617b      	str	r3, [r7, #20]
  return(result);
 80075d0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10f      	bne.n	80075f6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d6:	f3ef 8310 	mrs	r3, PRIMASK
 80075da:	613b      	str	r3, [r7, #16]
  return(result);
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <osSemaphoreRelease+0x4a>
 80075e2:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <osSemaphoreRelease+0xa8>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d120      	bne.n	800762c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075ea:	f3ef 8311 	mrs	r3, BASEPRI
 80075ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d01a      	beq.n	800762c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80075fa:	f107 0308 	add.w	r3, r7, #8
 80075fe:	4619      	mov	r1, r3
 8007600:	69b8      	ldr	r0, [r7, #24]
 8007602:	f000 fe7f 	bl	8008304 <xQueueGiveFromISR>
 8007606:	4603      	mov	r3, r0
 8007608:	2b01      	cmp	r3, #1
 800760a:	d003      	beq.n	8007614 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800760c:	f06f 0302 	mvn.w	r3, #2
 8007610:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007612:	e018      	b.n	8007646 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d015      	beq.n	8007646 <osSemaphoreRelease+0x9a>
 800761a:	4b0f      	ldr	r3, [pc, #60]	; (8007658 <osSemaphoreRelease+0xac>)
 800761c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800762a:	e00c      	b.n	8007646 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800762c:	2300      	movs	r3, #0
 800762e:	2200      	movs	r2, #0
 8007630:	2100      	movs	r1, #0
 8007632:	69b8      	ldr	r0, [r7, #24]
 8007634:	f000 fcd0 	bl	8007fd8 <xQueueGenericSend>
 8007638:	4603      	mov	r3, r0
 800763a:	2b01      	cmp	r3, #1
 800763c:	d004      	beq.n	8007648 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800763e:	f06f 0302 	mvn.w	r3, #2
 8007642:	61fb      	str	r3, [r7, #28]
 8007644:	e000      	b.n	8007648 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007646:	bf00      	nop
    }
  }

  return (stat);
 8007648:	69fb      	ldr	r3, [r7, #28]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3720      	adds	r7, #32
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	200000a8 	.word	0x200000a8
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800765c:	b580      	push	{r7, lr}
 800765e:	b08c      	sub	sp, #48	; 0x30
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007668:	2300      	movs	r3, #0
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800766c:	f3ef 8305 	mrs	r3, IPSR
 8007670:	61bb      	str	r3, [r7, #24]
  return(result);
 8007672:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007674:	2b00      	cmp	r3, #0
 8007676:	d16f      	bne.n	8007758 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007678:	f3ef 8310 	mrs	r3, PRIMASK
 800767c:	617b      	str	r3, [r7, #20]
  return(result);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d169      	bne.n	8007758 <osMessageQueueNew+0xfc>
 8007684:	4b37      	ldr	r3, [pc, #220]	; (8007764 <osMessageQueueNew+0x108>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d105      	bne.n	8007698 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800768c:	f3ef 8311 	mrs	r3, BASEPRI
 8007690:	613b      	str	r3, [r7, #16]
  return(result);
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d15f      	bne.n	8007758 <osMessageQueueNew+0xfc>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d05c      	beq.n	8007758 <osMessageQueueNew+0xfc>
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d059      	beq.n	8007758 <osMessageQueueNew+0xfc>
    mem = -1;
 80076a4:	f04f 33ff 	mov.w	r3, #4294967295
 80076a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d029      	beq.n	8007704 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d012      	beq.n	80076de <osMessageQueueNew+0x82>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	2b4f      	cmp	r3, #79	; 0x4f
 80076be:	d90e      	bls.n	80076de <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	695a      	ldr	r2, [r3, #20]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	fb01 f303 	mul.w	r3, r1, r3
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d302      	bcc.n	80076de <osMessageQueueNew+0x82>
        mem = 1;
 80076d8:	2301      	movs	r3, #1
 80076da:	623b      	str	r3, [r7, #32]
 80076dc:	e014      	b.n	8007708 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d110      	bne.n	8007708 <osMessageQueueNew+0xac>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10c      	bne.n	8007708 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d108      	bne.n	8007708 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <osMessageQueueNew+0xac>
          mem = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	623b      	str	r3, [r7, #32]
 8007702:	e001      	b.n	8007708 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d10b      	bne.n	8007726 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691a      	ldr	r2, [r3, #16]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2100      	movs	r1, #0
 8007718:	9100      	str	r1, [sp, #0]
 800771a:	68b9      	ldr	r1, [r7, #8]
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 facb 	bl	8007cb8 <xQueueGenericCreateStatic>
 8007722:	6278      	str	r0, [r7, #36]	; 0x24
 8007724:	e008      	b.n	8007738 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d105      	bne.n	8007738 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800772c:	2200      	movs	r2, #0
 800772e:	68b9      	ldr	r1, [r7, #8]
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 fb38 	bl	8007da6 <xQueueGenericCreate>
 8007736:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00c      	beq.n	8007758 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <osMessageQueueNew+0xf0>
        name = attr->name;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	61fb      	str	r3, [r7, #28]
 800774a:	e001      	b.n	8007750 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800774c:	2300      	movs	r3, #0
 800774e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007750:	69f9      	ldr	r1, [r7, #28]
 8007752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007754:	f001 fa76 	bl	8008c44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800775a:	4618      	mov	r0, r3
 800775c:	3728      	adds	r7, #40	; 0x28
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	200000a8 	.word	0x200000a8

08007768 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007768:	b580      	push	{r7, lr}
 800776a:	b08a      	sub	sp, #40	; 0x28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800777c:	2300      	movs	r3, #0
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007780:	f3ef 8305 	mrs	r3, IPSR
 8007784:	61fb      	str	r3, [r7, #28]
  return(result);
 8007786:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10f      	bne.n	80077ac <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800778c:	f3ef 8310 	mrs	r3, PRIMASK
 8007790:	61bb      	str	r3, [r7, #24]
  return(result);
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <osMessageQueuePut+0x44>
 8007798:	4b2b      	ldr	r3, [pc, #172]	; (8007848 <osMessageQueuePut+0xe0>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b02      	cmp	r3, #2
 800779e:	d12e      	bne.n	80077fe <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077a0:	f3ef 8311 	mrs	r3, BASEPRI
 80077a4:	617b      	str	r3, [r7, #20]
  return(result);
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d028      	beq.n	80077fe <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <osMessageQueuePut+0x56>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <osMessageQueuePut+0x56>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80077be:	f06f 0303 	mvn.w	r3, #3
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077c4:	e039      	b.n	800783a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80077ca:	f107 0210 	add.w	r2, r7, #16
 80077ce:	2300      	movs	r3, #0
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	6a38      	ldr	r0, [r7, #32]
 80077d4:	f000 fcfe 	bl	80081d4 <xQueueGenericSendFromISR>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d003      	beq.n	80077e6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80077de:	f06f 0302 	mvn.w	r3, #2
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077e4:	e029      	b.n	800783a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d026      	beq.n	800783a <osMessageQueuePut+0xd2>
 80077ec:	4b17      	ldr	r3, [pc, #92]	; (800784c <osMessageQueuePut+0xe4>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077fc:	e01d      	b.n	800783a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <osMessageQueuePut+0xa2>
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800780a:	f06f 0303 	mvn.w	r3, #3
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
 8007810:	e014      	b.n	800783c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007812:	2300      	movs	r3, #0
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	6a38      	ldr	r0, [r7, #32]
 800781a:	f000 fbdd 	bl	8007fd8 <xQueueGenericSend>
 800781e:	4603      	mov	r3, r0
 8007820:	2b01      	cmp	r3, #1
 8007822:	d00b      	beq.n	800783c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800782a:	f06f 0301 	mvn.w	r3, #1
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
 8007830:	e004      	b.n	800783c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007832:	f06f 0302 	mvn.w	r3, #2
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
 8007838:	e000      	b.n	800783c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800783a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800783e:	4618      	mov	r0, r3
 8007840:	3728      	adds	r7, #40	; 0x28
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	200000a8 	.word	0x200000a8
 800784c:	e000ed04 	.word	0xe000ed04

08007850 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007850:	b580      	push	{r7, lr}
 8007852:	b08a      	sub	sp, #40	; 0x28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007862:	2300      	movs	r3, #0
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007866:	f3ef 8305 	mrs	r3, IPSR
 800786a:	61fb      	str	r3, [r7, #28]
  return(result);
 800786c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10f      	bne.n	8007892 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007872:	f3ef 8310 	mrs	r3, PRIMASK
 8007876:	61bb      	str	r3, [r7, #24]
  return(result);
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d109      	bne.n	8007892 <osMessageQueueGet+0x42>
 800787e:	4b2b      	ldr	r3, [pc, #172]	; (800792c <osMessageQueueGet+0xdc>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d12e      	bne.n	80078e4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007886:	f3ef 8311 	mrs	r3, BASEPRI
 800788a:	617b      	str	r3, [r7, #20]
  return(result);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d028      	beq.n	80078e4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d005      	beq.n	80078a4 <osMessageQueueGet+0x54>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <osMessageQueueGet+0x54>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80078a4:	f06f 0303 	mvn.w	r3, #3
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80078aa:	e038      	b.n	800791e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80078ac:	2300      	movs	r3, #0
 80078ae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80078b0:	f107 0310 	add.w	r3, r7, #16
 80078b4:	461a      	mov	r2, r3
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	6a38      	ldr	r0, [r7, #32]
 80078ba:	f000 ff9d 	bl	80087f8 <xQueueReceiveFromISR>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d003      	beq.n	80078cc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80078c4:	f06f 0302 	mvn.w	r3, #2
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80078ca:	e028      	b.n	800791e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d025      	beq.n	800791e <osMessageQueueGet+0xce>
 80078d2:	4b17      	ldr	r3, [pc, #92]	; (8007930 <osMessageQueueGet+0xe0>)
 80078d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80078e2:	e01c      	b.n	800791e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <osMessageQueueGet+0xa0>
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d103      	bne.n	80078f8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80078f0:	f06f 0303 	mvn.w	r3, #3
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
 80078f6:	e013      	b.n	8007920 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	6a38      	ldr	r0, [r7, #32]
 80078fe:	f000 fd8f 	bl	8008420 <xQueueReceive>
 8007902:	4603      	mov	r3, r0
 8007904:	2b01      	cmp	r3, #1
 8007906:	d00b      	beq.n	8007920 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800790e:	f06f 0301 	mvn.w	r3, #1
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
 8007914:	e004      	b.n	8007920 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007916:	f06f 0302 	mvn.w	r3, #2
 800791a:	627b      	str	r3, [r7, #36]	; 0x24
 800791c:	e000      	b.n	8007920 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800791e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007922:	4618      	mov	r0, r3
 8007924:	3728      	adds	r7, #40	; 0x28
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	200000a8 	.word	0x200000a8
 8007930:	e000ed04 	.word	0xe000ed04

08007934 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d102      	bne.n	800794c <osMessageQueueGetCount+0x18>
    count = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	61fb      	str	r3, [r7, #28]
 800794a:	e01e      	b.n	800798a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800794c:	f3ef 8305 	mrs	r3, IPSR
 8007950:	617b      	str	r3, [r7, #20]
  return(result);
 8007952:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10f      	bne.n	8007978 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007958:	f3ef 8310 	mrs	r3, PRIMASK
 800795c:	613b      	str	r3, [r7, #16]
  return(result);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d109      	bne.n	8007978 <osMessageQueueGetCount+0x44>
 8007964:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <osMessageQueueGetCount+0x60>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d10a      	bne.n	8007982 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800796c:	f3ef 8311 	mrs	r3, BASEPRI
 8007970:	60fb      	str	r3, [r7, #12]
  return(result);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d004      	beq.n	8007982 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007978:	69b8      	ldr	r0, [r7, #24]
 800797a:	f000 fffe 	bl	800897a <uxQueueMessagesWaitingFromISR>
 800797e:	61f8      	str	r0, [r7, #28]
 8007980:	e003      	b.n	800798a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007982:	69b8      	ldr	r0, [r7, #24]
 8007984:	f000 ffb8 	bl	80088f8 <uxQueueMessagesWaiting>
 8007988:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800798a:	69fb      	ldr	r3, [r7, #28]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3720      	adds	r7, #32
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	200000a8 	.word	0x200000a8

08007998 <osMessageQueueGetSpace>:

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8007998:	b580      	push	{r7, lr}
 800799a:	b08c      	sub	sp, #48	; 0x30
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d102      	bne.n	80079b0 <osMessageQueueGetSpace+0x18>
    space = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ae:	e034      	b.n	8007a1a <osMessageQueueGetSpace+0x82>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079b0:	f3ef 8305 	mrs	r3, IPSR
 80079b4:	623b      	str	r3, [r7, #32]
  return(result);
 80079b6:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10f      	bne.n	80079dc <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079bc:	f3ef 8310 	mrs	r3, PRIMASK
 80079c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d109      	bne.n	80079dc <osMessageQueueGetSpace+0x44>
 80079c8:	4b16      	ldr	r3, [pc, #88]	; (8007a24 <osMessageQueueGetSpace+0x8c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d120      	bne.n	8007a12 <osMessageQueueGetSpace+0x7a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079d0:	f3ef 8311 	mrs	r3, BASEPRI
 80079d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01a      	beq.n	8007a12 <osMessageQueueGetSpace+0x7a>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079dc:	f3ef 8211 	mrs	r2, BASEPRI
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	613a      	str	r2, [r7, #16]
 80079f2:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079f4:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a0e:	bf00      	nop

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 8007a10:	e003      	b.n	8007a1a <osMessageQueueGetSpace+0x82>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8007a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a14:	f000 ff8e 	bl	8008934 <uxQueueSpacesAvailable>
 8007a18:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 8007a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3730      	adds	r7, #48	; 0x30
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	200000a8 	.word	0x200000a8

08007a28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4a06      	ldr	r2, [pc, #24]	; (8007a50 <vApplicationGetIdleTaskMemory+0x28>)
 8007a38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	4a05      	ldr	r2, [pc, #20]	; (8007a54 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2240      	movs	r2, #64	; 0x40
 8007a44:	601a      	str	r2, [r3, #0]
}
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bc80      	pop	{r7}
 8007a4e:	4770      	bx	lr
 8007a50:	200000ac 	.word	0x200000ac
 8007a54:	2000011c 	.word	0x2000011c

08007a58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4a06      	ldr	r2, [pc, #24]	; (8007a80 <vApplicationGetTimerTaskMemory+0x28>)
 8007a68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	4a05      	ldr	r2, [pc, #20]	; (8007a84 <vApplicationGetTimerTaskMemory+0x2c>)
 8007a6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2280      	movs	r2, #128	; 0x80
 8007a74:	601a      	str	r2, [r3, #0]
}
 8007a76:	bf00      	nop
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bc80      	pop	{r7}
 8007a7e:	4770      	bx	lr
 8007a80:	2000021c 	.word	0x2000021c
 8007a84:	2000028c 	.word	0x2000028c

08007a88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f103 0208 	add.w	r2, r3, #8
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f103 0208 	add.w	r2, r3, #8
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f103 0208 	add.w	r2, r3, #8
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr

08007ac6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr

08007ade <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b085      	sub	sp, #20
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	689a      	ldr	r2, [r3, #8]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	601a      	str	r2, [r3, #0]
}
 8007b1a:	bf00      	nop
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr

08007b24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3a:	d103      	bne.n	8007b44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	e00c      	b.n	8007b5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3308      	adds	r3, #8
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	e002      	b.n	8007b52 <vListInsert+0x2e>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d2f6      	bcs.n	8007b4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	601a      	str	r2, [r3, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bc80      	pop	{r7}
 8007b92:	4770      	bx	lr

08007b94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6892      	ldr	r2, [r2, #8]
 8007baa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	6852      	ldr	r2, [r2, #4]
 8007bb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d103      	bne.n	8007bc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	1e5a      	subs	r2, r3, #1
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bc80      	pop	{r7}
 8007be4:	4770      	bx	lr
	...

08007be8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <xQueueGenericReset+0x2a>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	60bb      	str	r3, [r7, #8]
}
 8007c0e:	bf00      	nop
 8007c10:	e7fe      	b.n	8007c10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c12:	f002 fcc3 	bl	800a59c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1e:	68f9      	ldr	r1, [r7, #12]
 8007c20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c22:	fb01 f303 	mul.w	r3, r1, r3
 8007c26:	441a      	add	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c42:	3b01      	subs	r3, #1
 8007c44:	68f9      	ldr	r1, [r7, #12]
 8007c46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c48:	fb01 f303 	mul.w	r3, r1, r3
 8007c4c:	441a      	add	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	22ff      	movs	r2, #255	; 0xff
 8007c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	22ff      	movs	r2, #255	; 0xff
 8007c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d114      	bne.n	8007c92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d01a      	beq.n	8007ca6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	3310      	adds	r3, #16
 8007c74:	4618      	mov	r0, r3
 8007c76:	f001 fce3 	bl	8009640 <xTaskRemoveFromEventList>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d012      	beq.n	8007ca6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c80:	4b0c      	ldr	r3, [pc, #48]	; (8007cb4 <xQueueGenericReset+0xcc>)
 8007c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	e009      	b.n	8007ca6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3310      	adds	r3, #16
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff fef6 	bl	8007a88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3324      	adds	r3, #36	; 0x24
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff fef1 	bl	8007a88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ca6:	f002 fca9 	bl	800a5fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007caa:	2301      	movs	r3, #1
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	e000ed04 	.word	0xe000ed04

08007cb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08e      	sub	sp, #56	; 0x38
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10a      	bne.n	8007ce2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cde:	bf00      	nop
 8007ce0:	e7fe      	b.n	8007ce0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <xQueueGenericCreateStatic+0x52>
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <xQueueGenericCreateStatic+0x56>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e000      	b.n	8007d10 <xQueueGenericCreateStatic+0x58>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10a      	bne.n	8007d2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	623b      	str	r3, [r7, #32]
}
 8007d26:	bf00      	nop
 8007d28:	e7fe      	b.n	8007d28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <xQueueGenericCreateStatic+0x7e>
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <xQueueGenericCreateStatic+0x82>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e000      	b.n	8007d3c <xQueueGenericCreateStatic+0x84>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	61fb      	str	r3, [r7, #28]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d56:	2350      	movs	r3, #80	; 0x50
 8007d58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b50      	cmp	r3, #80	; 0x50
 8007d5e:	d00a      	beq.n	8007d76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	61bb      	str	r3, [r7, #24]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00d      	beq.n	8007d9c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d88:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	4613      	mov	r3, r2
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	68b9      	ldr	r1, [r7, #8]
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 f843 	bl	8007e22 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3730      	adds	r7, #48	; 0x30
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b08a      	sub	sp, #40	; 0x28
 8007daa:	af02      	add	r7, sp, #8
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	4613      	mov	r3, r2
 8007db2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10a      	bne.n	8007dd0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	613b      	str	r3, [r7, #16]
}
 8007dcc:	bf00      	nop
 8007dce:	e7fe      	b.n	8007dce <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d102      	bne.n	8007ddc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	61fb      	str	r3, [r7, #28]
 8007dda:	e004      	b.n	8007de6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	fb02 f303 	mul.w	r3, r2, r3
 8007de4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	3350      	adds	r3, #80	; 0x50
 8007dea:	4618      	mov	r0, r3
 8007dec:	f002 fcd6 	bl	800a79c <pvPortMalloc>
 8007df0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00f      	beq.n	8007e18 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	3350      	adds	r3, #80	; 0x50
 8007dfc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e06:	79fa      	ldrb	r2, [r7, #7]
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	68b9      	ldr	r1, [r7, #8]
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 f805 	bl	8007e22 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007e18:	69bb      	ldr	r3, [r7, #24]
	}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3720      	adds	r7, #32
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	607a      	str	r2, [r7, #4]
 8007e2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d103      	bne.n	8007e3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	e002      	b.n	8007e44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e50:	2101      	movs	r1, #1
 8007e52:	69b8      	ldr	r0, [r7, #24]
 8007e54:	f7ff fec8 	bl	8007be8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	78fa      	ldrb	r2, [r7, #3]
 8007e5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00e      	beq.n	8007e94 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f8a2 	bl	8007fd8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007eae:	79fb      	ldrb	r3, [r7, #7]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6939      	ldr	r1, [r7, #16]
 8007eb4:	6978      	ldr	r0, [r7, #20]
 8007eb6:	f7ff ff76 	bl	8007da6 <xQueueGenericCreate>
 8007eba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f7ff ffd3 	bl	8007e68 <prvInitialiseMutex>

		return pxNewQueue;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
	}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af02      	add	r7, sp, #8
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	2300      	movs	r3, #0
 8007ede:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007ee0:	79fb      	ldrb	r3, [r7, #7]
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	6939      	ldr	r1, [r7, #16]
 8007eea:	6978      	ldr	r0, [r7, #20]
 8007eec:	f7ff fee4 	bl	8007cb8 <xQueueGenericCreateStatic>
 8007ef0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f7ff ffb8 	bl	8007e68 <prvInitialiseMutex>

		return pxNewQueue;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
	}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b08a      	sub	sp, #40	; 0x28
 8007f06:	af02      	add	r7, sp, #8
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	61bb      	str	r3, [r7, #24]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d90a      	bls.n	8007f48 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	617b      	str	r3, [r7, #20]
}
 8007f44:	bf00      	nop
 8007f46:	e7fe      	b.n	8007f46 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f48:	2302      	movs	r3, #2
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2100      	movs	r1, #0
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f7ff feb0 	bl	8007cb8 <xQueueGenericCreateStatic>
 8007f58:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007f66:	69fb      	ldr	r3, [r7, #28]
	}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3720      	adds	r7, #32
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	613b      	str	r3, [r7, #16]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d90a      	bls.n	8007fb4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	60fb      	str	r3, [r7, #12]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff fef4 	bl	8007da6 <xQueueGenericCreate>
 8007fbe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007fcc:	697b      	ldr	r3, [r7, #20]
	}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
	...

08007fd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08e      	sub	sp, #56	; 0x38
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <xQueueGenericSend+0x32>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d103      	bne.n	8008018 <xQueueGenericSend+0x40>
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <xQueueGenericSend+0x44>
 8008018:	2301      	movs	r3, #1
 800801a:	e000      	b.n	800801e <xQueueGenericSend+0x46>
 800801c:	2300      	movs	r3, #0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <xQueueGenericSend+0x60>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b02      	cmp	r3, #2
 800803c:	d103      	bne.n	8008046 <xQueueGenericSend+0x6e>
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008042:	2b01      	cmp	r3, #1
 8008044:	d101      	bne.n	800804a <xQueueGenericSend+0x72>
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <xQueueGenericSend+0x74>
 800804a:	2300      	movs	r3, #0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10a      	bne.n	8008066 <xQueueGenericSend+0x8e>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	623b      	str	r3, [r7, #32]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008066:	f001 fcad 	bl	80099c4 <xTaskGetSchedulerState>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d102      	bne.n	8008076 <xQueueGenericSend+0x9e>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <xQueueGenericSend+0xa2>
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <xQueueGenericSend+0xa4>
 800807a:	2300      	movs	r3, #0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <xQueueGenericSend+0xbe>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	61fb      	str	r3, [r7, #28]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008096:	f002 fa81 	bl	800a59c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d302      	bcc.n	80080ac <xQueueGenericSend+0xd4>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d129      	bne.n	8008100 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	68b9      	ldr	r1, [r7, #8]
 80080b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080b2:	f000 fcb7 	bl	8008a24 <prvCopyDataToQueue>
 80080b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d010      	beq.n	80080e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	3324      	adds	r3, #36	; 0x24
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 fabb 	bl	8009640 <xTaskRemoveFromEventList>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d013      	beq.n	80080f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080d0:	4b3f      	ldr	r3, [pc, #252]	; (80081d0 <xQueueGenericSend+0x1f8>)
 80080d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	e00a      	b.n	80080f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d007      	beq.n	80080f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080e8:	4b39      	ldr	r3, [pc, #228]	; (80081d0 <xQueueGenericSend+0x1f8>)
 80080ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080f8:	f002 fa80 	bl	800a5fc <vPortExitCritical>
				return pdPASS;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e063      	b.n	80081c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d103      	bne.n	800810e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008106:	f002 fa79 	bl	800a5fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800810a:	2300      	movs	r3, #0
 800810c:	e05c      	b.n	80081c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800810e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008110:	2b00      	cmp	r3, #0
 8008112:	d106      	bne.n	8008122 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008114:	f107 0314 	add.w	r3, r7, #20
 8008118:	4618      	mov	r0, r3
 800811a:	f001 faf5 	bl	8009708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800811e:	2301      	movs	r3, #1
 8008120:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008122:	f002 fa6b 	bl	800a5fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008126:	f001 f84b 	bl	80091c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800812a:	f002 fa37 	bl	800a59c <vPortEnterCritical>
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008134:	b25b      	sxtb	r3, r3
 8008136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813a:	d103      	bne.n	8008144 <xQueueGenericSend+0x16c>
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800814a:	b25b      	sxtb	r3, r3
 800814c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008150:	d103      	bne.n	800815a <xQueueGenericSend+0x182>
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800815a:	f002 fa4f 	bl	800a5fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800815e:	1d3a      	adds	r2, r7, #4
 8008160:	f107 0314 	add.w	r3, r7, #20
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f001 fae4 	bl	8009734 <xTaskCheckForTimeOut>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d124      	bne.n	80081bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008174:	f000 fd4e 	bl	8008c14 <prvIsQueueFull>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d018      	beq.n	80081b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	3310      	adds	r3, #16
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f001 fa0a 	bl	80095a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800818c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800818e:	f000 fcd9 	bl	8008b44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008192:	f001 f823 	bl	80091dc <xTaskResumeAll>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	f47f af7c 	bne.w	8008096 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800819e:	4b0c      	ldr	r3, [pc, #48]	; (80081d0 <xQueueGenericSend+0x1f8>)
 80081a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	e772      	b.n	8008096 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081b2:	f000 fcc7 	bl	8008b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081b6:	f001 f811 	bl	80091dc <xTaskResumeAll>
 80081ba:	e76c      	b.n	8008096 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081be:	f000 fcc1 	bl	8008b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081c2:	f001 f80b 	bl	80091dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081c6:	2300      	movs	r3, #0
		}
	}
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3738      	adds	r7, #56	; 0x38
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	e000ed04 	.word	0xe000ed04

080081d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08e      	sub	sp, #56	; 0x38
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10a      	bne.n	8008202 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081fe:	bf00      	nop
 8008200:	e7fe      	b.n	8008200 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d103      	bne.n	8008210 <xQueueGenericSendFromISR+0x3c>
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <xQueueGenericSendFromISR+0x40>
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <xQueueGenericSendFromISR+0x42>
 8008214:	2300      	movs	r3, #0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	623b      	str	r3, [r7, #32]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d103      	bne.n	800823e <xQueueGenericSendFromISR+0x6a>
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823a:	2b01      	cmp	r3, #1
 800823c:	d101      	bne.n	8008242 <xQueueGenericSendFromISR+0x6e>
 800823e:	2301      	movs	r3, #1
 8008240:	e000      	b.n	8008244 <xQueueGenericSendFromISR+0x70>
 8008242:	2300      	movs	r3, #0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	61fb      	str	r3, [r7, #28]
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800825e:	f002 fa5f 	bl	800a720 <vPortValidateInterruptPriority>
	__asm volatile
 8008262:	f3ef 8211 	mrs	r2, BASEPRI
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	61ba      	str	r2, [r7, #24]
 8008278:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800827a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800827c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008286:	429a      	cmp	r2, r3
 8008288:	d302      	bcc.n	8008290 <xQueueGenericSendFromISR+0xbc>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d12c      	bne.n	80082ea <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	68b9      	ldr	r1, [r7, #8]
 800829e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082a0:	f000 fbc0 	bl	8008a24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80082a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ac:	d112      	bne.n	80082d4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d016      	beq.n	80082e4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	3324      	adds	r3, #36	; 0x24
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 f9c0 	bl	8009640 <xTaskRemoveFromEventList>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00e      	beq.n	80082e4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	e007      	b.n	80082e4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082d8:	3301      	adds	r3, #1
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	b25a      	sxtb	r2, r3
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082e4:	2301      	movs	r3, #1
 80082e6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80082e8:	e001      	b.n	80082ee <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	637b      	str	r3, [r7, #52]	; 0x34
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f383 8811 	msr	BASEPRI, r3
}
 80082f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3738      	adds	r7, #56	; 0x38
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08e      	sub	sp, #56	; 0x38
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	623b      	str	r3, [r7, #32]
}
 800832a:	bf00      	nop
 800832c:	e7fe      	b.n	800832c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <xQueueGiveFromISR+0x48>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	61fb      	str	r3, [r7, #28]
}
 8008348:	bf00      	nop
 800834a:	e7fe      	b.n	800834a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d103      	bne.n	800835c <xQueueGiveFromISR+0x58>
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <xQueueGiveFromISR+0x5c>
 800835c:	2301      	movs	r3, #1
 800835e:	e000      	b.n	8008362 <xQueueGiveFromISR+0x5e>
 8008360:	2300      	movs	r3, #0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10a      	bne.n	800837c <xQueueGiveFromISR+0x78>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	61bb      	str	r3, [r7, #24]
}
 8008378:	bf00      	nop
 800837a:	e7fe      	b.n	800837a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800837c:	f002 f9d0 	bl	800a720 <vPortValidateInterruptPriority>
	__asm volatile
 8008380:	f3ef 8211 	mrs	r2, BASEPRI
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	617a      	str	r2, [r7, #20]
 8008396:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008398:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800839a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80083a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d22b      	bcs.n	8008404 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d112      	bne.n	80083ee <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d016      	beq.n	80083fe <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	3324      	adds	r3, #36	; 0x24
 80083d4:	4618      	mov	r0, r3
 80083d6:	f001 f933 	bl	8009640 <xTaskRemoveFromEventList>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00e      	beq.n	80083fe <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00b      	beq.n	80083fe <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2201      	movs	r2, #1
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	e007      	b.n	80083fe <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083f2:	3301      	adds	r3, #1
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	b25a      	sxtb	r2, r3
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80083fe:	2301      	movs	r3, #1
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
 8008402:	e001      	b.n	8008408 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008404:	2300      	movs	r3, #0
 8008406:	637b      	str	r3, [r7, #52]	; 0x34
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f383 8811 	msr	BASEPRI, r3
}
 8008412:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008416:	4618      	mov	r0, r3
 8008418:	3738      	adds	r7, #56	; 0x38
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08c      	sub	sp, #48	; 0x30
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800842c:	2300      	movs	r3, #0
 800842e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <xQueueReceive+0x30>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	623b      	str	r3, [r7, #32]
}
 800844c:	bf00      	nop
 800844e:	e7fe      	b.n	800844e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d103      	bne.n	800845e <xQueueReceive+0x3e>
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <xQueueReceive+0x42>
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <xQueueReceive+0x44>
 8008462:	2300      	movs	r3, #0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <xQueueReceive+0x5e>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	61fb      	str	r3, [r7, #28]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800847e:	f001 faa1 	bl	80099c4 <xTaskGetSchedulerState>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <xQueueReceive+0x6e>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <xQueueReceive+0x72>
 800848e:	2301      	movs	r3, #1
 8008490:	e000      	b.n	8008494 <xQueueReceive+0x74>
 8008492:	2300      	movs	r3, #0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <xQueueReceive+0x8e>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	61bb      	str	r3, [r7, #24]
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80084ae:	f002 f875 	bl	800a59c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d01f      	beq.n	80084fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c2:	f000 fb19 	bl	8008af8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	1e5a      	subs	r2, r3, #1
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00f      	beq.n	80084f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	3310      	adds	r3, #16
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 f8b0 	bl	8009640 <xTaskRemoveFromEventList>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084e6:	4b3d      	ldr	r3, [pc, #244]	; (80085dc <xQueueReceive+0x1bc>)
 80084e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084f6:	f002 f881 	bl	800a5fc <vPortExitCritical>
				return pdPASS;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e069      	b.n	80085d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d103      	bne.n	800850c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008504:	f002 f87a 	bl	800a5fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008508:	2300      	movs	r3, #0
 800850a:	e062      	b.n	80085d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d106      	bne.n	8008520 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008512:	f107 0310 	add.w	r3, r7, #16
 8008516:	4618      	mov	r0, r3
 8008518:	f001 f8f6 	bl	8009708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800851c:	2301      	movs	r3, #1
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008520:	f002 f86c 	bl	800a5fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008524:	f000 fe4c 	bl	80091c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008528:	f002 f838 	bl	800a59c <vPortEnterCritical>
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008532:	b25b      	sxtb	r3, r3
 8008534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008538:	d103      	bne.n	8008542 <xQueueReceive+0x122>
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008548:	b25b      	sxtb	r3, r3
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	d103      	bne.n	8008558 <xQueueReceive+0x138>
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008558:	f002 f850 	bl	800a5fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800855c:	1d3a      	adds	r2, r7, #4
 800855e:	f107 0310 	add.w	r3, r7, #16
 8008562:	4611      	mov	r1, r2
 8008564:	4618      	mov	r0, r3
 8008566:	f001 f8e5 	bl	8009734 <xTaskCheckForTimeOut>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d123      	bne.n	80085b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008572:	f000 fb39 	bl	8008be8 <prvIsQueueEmpty>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d017      	beq.n	80085ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	3324      	adds	r3, #36	; 0x24
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	4611      	mov	r1, r2
 8008584:	4618      	mov	r0, r3
 8008586:	f001 f80b 	bl	80095a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800858a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800858c:	f000 fada 	bl	8008b44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008590:	f000 fe24 	bl	80091dc <xTaskResumeAll>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d189      	bne.n	80084ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800859a:	4b10      	ldr	r3, [pc, #64]	; (80085dc <xQueueReceive+0x1bc>)
 800859c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	e780      	b.n	80084ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ae:	f000 fac9 	bl	8008b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085b2:	f000 fe13 	bl	80091dc <xTaskResumeAll>
 80085b6:	e77a      	b.n	80084ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ba:	f000 fac3 	bl	8008b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085be:	f000 fe0d 	bl	80091dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c4:	f000 fb10 	bl	8008be8 <prvIsQueueEmpty>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f43f af6f 	beq.w	80084ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3730      	adds	r7, #48	; 0x30
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	e000ed04 	.word	0xe000ed04

080085e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b08e      	sub	sp, #56	; 0x38
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80085ea:	2300      	movs	r3, #0
 80085ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80085f2:	2300      	movs	r3, #0
 80085f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	623b      	str	r3, [r7, #32]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	61fb      	str	r3, [r7, #28]
}
 800862c:	bf00      	nop
 800862e:	e7fe      	b.n	800862e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008630:	f001 f9c8 	bl	80099c4 <xTaskGetSchedulerState>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <xQueueSemaphoreTake+0x60>
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <xQueueSemaphoreTake+0x64>
 8008640:	2301      	movs	r3, #1
 8008642:	e000      	b.n	8008646 <xQueueSemaphoreTake+0x66>
 8008644:	2300      	movs	r3, #0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	61bb      	str	r3, [r7, #24]
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008660:	f001 ff9c 	bl	800a59c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	d024      	beq.n	80086ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	1e5a      	subs	r2, r3, #1
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d104      	bne.n	800868a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008680:	f001 fb20 	bl	8009cc4 <pvTaskIncrementMutexHeldCount>
 8008684:	4602      	mov	r2, r0
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00f      	beq.n	80086b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	3310      	adds	r3, #16
 8008696:	4618      	mov	r0, r3
 8008698:	f000 ffd2 	bl	8009640 <xTaskRemoveFromEventList>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d007      	beq.n	80086b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086a2:	4b54      	ldr	r3, [pc, #336]	; (80087f4 <xQueueSemaphoreTake+0x214>)
 80086a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a8:	601a      	str	r2, [r3, #0]
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086b2:	f001 ffa3 	bl	800a5fc <vPortExitCritical>
				return pdPASS;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e097      	b.n	80087ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d111      	bne.n	80086e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00a      	beq.n	80086dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	617b      	str	r3, [r7, #20]
}
 80086d8:	bf00      	nop
 80086da:	e7fe      	b.n	80086da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80086dc:	f001 ff8e 	bl	800a5fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086e0:	2300      	movs	r3, #0
 80086e2:	e082      	b.n	80087ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d106      	bne.n	80086f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086ea:	f107 030c 	add.w	r3, r7, #12
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 f80a 	bl	8009708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086f4:	2301      	movs	r3, #1
 80086f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086f8:	f001 ff80 	bl	800a5fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086fc:	f000 fd60 	bl	80091c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008700:	f001 ff4c 	bl	800a59c <vPortEnterCritical>
 8008704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800870a:	b25b      	sxtb	r3, r3
 800870c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008710:	d103      	bne.n	800871a <xQueueSemaphoreTake+0x13a>
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008720:	b25b      	sxtb	r3, r3
 8008722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008726:	d103      	bne.n	8008730 <xQueueSemaphoreTake+0x150>
 8008728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008730:	f001 ff64 	bl	800a5fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008734:	463a      	mov	r2, r7
 8008736:	f107 030c 	add.w	r3, r7, #12
 800873a:	4611      	mov	r1, r2
 800873c:	4618      	mov	r0, r3
 800873e:	f000 fff9 	bl	8009734 <xTaskCheckForTimeOut>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d132      	bne.n	80087ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008748:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800874a:	f000 fa4d 	bl	8008be8 <prvIsQueueEmpty>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d026      	beq.n	80087a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d109      	bne.n	8008770 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800875c:	f001 ff1e 	bl	800a59c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	4618      	mov	r0, r3
 8008766:	f001 f94b 	bl	8009a00 <xTaskPriorityInherit>
 800876a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800876c:	f001 ff46 	bl	800a5fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	3324      	adds	r3, #36	; 0x24
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	4611      	mov	r1, r2
 8008778:	4618      	mov	r0, r3
 800877a:	f000 ff11 	bl	80095a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800877e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008780:	f000 f9e0 	bl	8008b44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008784:	f000 fd2a 	bl	80091dc <xTaskResumeAll>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	f47f af68 	bne.w	8008660 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008790:	4b18      	ldr	r3, [pc, #96]	; (80087f4 <xQueueSemaphoreTake+0x214>)
 8008792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	e75e      	b.n	8008660 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80087a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087a4:	f000 f9ce 	bl	8008b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087a8:	f000 fd18 	bl	80091dc <xTaskResumeAll>
 80087ac:	e758      	b.n	8008660 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80087ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087b0:	f000 f9c8 	bl	8008b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087b4:	f000 fd12 	bl	80091dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087ba:	f000 fa15 	bl	8008be8 <prvIsQueueEmpty>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f43f af4d 	beq.w	8008660 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00d      	beq.n	80087e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80087cc:	f001 fee6 	bl	800a59c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80087d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087d2:	f000 f910 	bl	80089f6 <prvGetDisinheritPriorityAfterTimeout>
 80087d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 f9ea 	bl	8009bb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80087e4:	f001 ff0a 	bl	800a5fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3738      	adds	r7, #56	; 0x38
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	e000ed04 	.word	0xe000ed04

080087f8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08e      	sub	sp, #56	; 0x38
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10a      	bne.n	8008824 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	623b      	str	r3, [r7, #32]
}
 8008820:	bf00      	nop
 8008822:	e7fe      	b.n	8008822 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d103      	bne.n	8008832 <xQueueReceiveFromISR+0x3a>
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <xQueueReceiveFromISR+0x3e>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <xQueueReceiveFromISR+0x40>
 8008836:	2300      	movs	r3, #0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10a      	bne.n	8008852 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	61fb      	str	r3, [r7, #28]
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008852:	f001 ff65 	bl	800a720 <vPortValidateInterruptPriority>
	__asm volatile
 8008856:	f3ef 8211 	mrs	r2, BASEPRI
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	61ba      	str	r2, [r7, #24]
 800886c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800886e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008870:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008876:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	2b00      	cmp	r3, #0
 800887c:	d02f      	beq.n	80088de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008888:	68b9      	ldr	r1, [r7, #8]
 800888a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800888c:	f000 f934 	bl	8008af8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	1e5a      	subs	r2, r3, #1
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008898:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800889c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a0:	d112      	bne.n	80088c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d016      	beq.n	80088d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	3310      	adds	r3, #16
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 fec6 	bl	8009640 <xTaskRemoveFromEventList>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00e      	beq.n	80088d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	e007      	b.n	80088d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80088c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088cc:	3301      	adds	r3, #1
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	b25a      	sxtb	r2, r3
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80088d8:	2301      	movs	r3, #1
 80088da:	637b      	str	r3, [r7, #52]	; 0x34
 80088dc:	e001      	b.n	80088e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80088de:	2300      	movs	r3, #0
 80088e0:	637b      	str	r3, [r7, #52]	; 0x34
 80088e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f383 8811 	msr	BASEPRI, r3
}
 80088ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3738      	adds	r7, #56	; 0x38
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	60bb      	str	r3, [r7, #8]
}
 8008918:	bf00      	nop
 800891a:	e7fe      	b.n	800891a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800891c:	f001 fe3e 	bl	800a59c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008924:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008926:	f001 fe69 	bl	800a5fc <vPortExitCritical>

	return uxReturn;
 800892a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10a      	bne.n	800895c <uxQueueSpacesAvailable+0x28>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	60fb      	str	r3, [r7, #12]
}
 8008958:	bf00      	nop
 800895a:	e7fe      	b.n	800895a <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800895c:	f001 fe1e 	bl	800a59c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800896c:	f001 fe46 	bl	800a5fc <vPortExitCritical>

	return uxReturn;
 8008970:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008972:	4618      	mov	r0, r3
 8008974:	3718      	adds	r7, #24
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800897a:	b480      	push	{r7}
 800897c:	b085      	sub	sp, #20
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10a      	bne.n	800899e <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	60bb      	str	r3, [r7, #8]
}
 800899a:	bf00      	nop
 800899c:	e7fe      	b.n	800899c <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a2:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 80089a4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80089a6:	4618      	mov	r0, r3
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr

080089b0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10a      	bne.n	80089d8 <vQueueDelete+0x28>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	60bb      	str	r3, [r7, #8]
}
 80089d4:	bf00      	nop
 80089d6:	e7fe      	b.n	80089d6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 f95b 	bl	8008c94 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f001 ff9b 	bl	800a924 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80089ee:	bf00      	nop
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d006      	beq.n	8008a14 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008a10:	60fb      	str	r3, [r7, #12]
 8008a12:	e001      	b.n	8008a18 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008a14:	2300      	movs	r3, #0
 8008a16:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008a18:	68fb      	ldr	r3, [r7, #12]
	}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bc80      	pop	{r7}
 8008a22:	4770      	bx	lr

08008a24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10d      	bne.n	8008a5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d14d      	bne.n	8008ae6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 f844 	bl	8009adc <xTaskPriorityDisinherit>
 8008a54:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	605a      	str	r2, [r3, #4]
 8008a5c:	e043      	b.n	8008ae6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d119      	bne.n	8008a98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6898      	ldr	r0, [r3, #8]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	68b9      	ldr	r1, [r7, #8]
 8008a70:	f002 f896 	bl	800aba0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689a      	ldr	r2, [r3, #8]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7c:	441a      	add	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d32b      	bcc.n	8008ae6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	609a      	str	r2, [r3, #8]
 8008a96:	e026      	b.n	8008ae6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	68d8      	ldr	r0, [r3, #12]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	68b9      	ldr	r1, [r7, #8]
 8008aa4:	f002 f87c 	bl	800aba0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	68da      	ldr	r2, [r3, #12]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab0:	425b      	negs	r3, r3
 8008ab2:	441a      	add	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d207      	bcs.n	8008ad4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008acc:	425b      	negs	r3, r3
 8008ace:	441a      	add	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d105      	bne.n	8008ae6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	1c5a      	adds	r2, r3, #1
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008aee:	697b      	ldr	r3, [r7, #20]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d018      	beq.n	8008b3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	441a      	add	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d303      	bcc.n	8008b2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68d9      	ldr	r1, [r3, #12]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b34:	461a      	mov	r2, r3
 8008b36:	6838      	ldr	r0, [r7, #0]
 8008b38:	f002 f832 	bl	800aba0 <memcpy>
	}
}
 8008b3c:	bf00      	nop
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b4c:	f001 fd26 	bl	800a59c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b58:	e011      	b.n	8008b7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d012      	beq.n	8008b88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3324      	adds	r3, #36	; 0x24
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fd6a 	bl	8009640 <xTaskRemoveFromEventList>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b72:	f000 fe41 	bl	80097f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	dce9      	bgt.n	8008b5a <prvUnlockQueue+0x16>
 8008b86:	e000      	b.n	8008b8a <prvUnlockQueue+0x46>
					break;
 8008b88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	22ff      	movs	r2, #255	; 0xff
 8008b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b92:	f001 fd33 	bl	800a5fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b96:	f001 fd01 	bl	800a59c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ba0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ba2:	e011      	b.n	8008bc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d012      	beq.n	8008bd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3310      	adds	r3, #16
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 fd45 	bl	8009640 <xTaskRemoveFromEventList>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008bbc:	f000 fe1c 	bl	80097f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	dce9      	bgt.n	8008ba4 <prvUnlockQueue+0x60>
 8008bd0:	e000      	b.n	8008bd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008bd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	22ff      	movs	r2, #255	; 0xff
 8008bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008bdc:	f001 fd0e 	bl	800a5fc <vPortExitCritical>
}
 8008be0:	bf00      	nop
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bf0:	f001 fcd4 	bl	800a59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d102      	bne.n	8008c02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	e001      	b.n	8008c06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c02:	2300      	movs	r3, #0
 8008c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c06:	f001 fcf9 	bl	800a5fc <vPortExitCritical>

	return xReturn;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c1c:	f001 fcbe 	bl	800a59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d102      	bne.n	8008c32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	e001      	b.n	8008c36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c32:	2300      	movs	r3, #0
 8008c34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c36:	f001 fce1 	bl	800a5fc <vPortExitCritical>

	return xReturn;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	e014      	b.n	8008c7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c54:	4a0e      	ldr	r2, [pc, #56]	; (8008c90 <vQueueAddToRegistry+0x4c>)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10b      	bne.n	8008c78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c60:	490b      	ldr	r1, [pc, #44]	; (8008c90 <vQueueAddToRegistry+0x4c>)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c6a:	4a09      	ldr	r2, [pc, #36]	; (8008c90 <vQueueAddToRegistry+0x4c>)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	4413      	add	r3, r2
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c76:	e006      	b.n	8008c86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2b07      	cmp	r3, #7
 8008c82:	d9e7      	bls.n	8008c54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bc80      	pop	{r7}
 8008c8e:	4770      	bx	lr
 8008c90:	20003b28 	.word	0x20003b28

08008c94 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	e016      	b.n	8008cd0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008ca2:	4a10      	ldr	r2, [pc, #64]	; (8008ce4 <vQueueUnregisterQueue+0x50>)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	4413      	add	r3, r2
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d10b      	bne.n	8008cca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008cb2:	4a0c      	ldr	r2, [pc, #48]	; (8008ce4 <vQueueUnregisterQueue+0x50>)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008cbc:	4a09      	ldr	r2, [pc, #36]	; (8008ce4 <vQueueUnregisterQueue+0x50>)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	00db      	lsls	r3, r3, #3
 8008cc2:	4413      	add	r3, r2
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	605a      	str	r2, [r3, #4]
				break;
 8008cc8:	e006      	b.n	8008cd8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b07      	cmp	r3, #7
 8008cd4:	d9e5      	bls.n	8008ca2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bc80      	pop	{r7}
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	20003b28 	.word	0x20003b28

08008ce8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008cf8:	f001 fc50 	bl	800a59c <vPortEnterCritical>
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d02:	b25b      	sxtb	r3, r3
 8008d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d08:	d103      	bne.n	8008d12 <vQueueWaitForMessageRestricted+0x2a>
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d18:	b25b      	sxtb	r3, r3
 8008d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1e:	d103      	bne.n	8008d28 <vQueueWaitForMessageRestricted+0x40>
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d28:	f001 fc68 	bl	800a5fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d106      	bne.n	8008d42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	3324      	adds	r3, #36	; 0x24
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f000 fc53 	bl	80095e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d42:	6978      	ldr	r0, [r7, #20]
 8008d44:	f7ff fefe 	bl	8008b44 <prvUnlockQueue>
	}
 8008d48:	bf00      	nop
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08e      	sub	sp, #56	; 0x38
 8008d54:	af04      	add	r7, sp, #16
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	623b      	str	r3, [r7, #32]
}
 8008d76:	bf00      	nop
 8008d78:	e7fe      	b.n	8008d78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10a      	bne.n	8008d96 <xTaskCreateStatic+0x46>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	61fb      	str	r3, [r7, #28]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d96:	2370      	movs	r3, #112	; 0x70
 8008d98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	2b70      	cmp	r3, #112	; 0x70
 8008d9e:	d00a      	beq.n	8008db6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	61bb      	str	r3, [r7, #24]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01e      	beq.n	8008dfa <xTaskCreateStatic+0xaa>
 8008dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d01b      	beq.n	8008dfa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	2202      	movs	r2, #2
 8008dd0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9303      	str	r3, [sp, #12]
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	9302      	str	r3, [sp, #8]
 8008ddc:	f107 0314 	add.w	r3, r7, #20
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	68b9      	ldr	r1, [r7, #8]
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 f850 	bl	8008e92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008df4:	f000 f8d8 	bl	8008fa8 <prvAddNewTaskToReadyList>
 8008df8:	e001      	b.n	8008dfe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008dfe:	697b      	ldr	r3, [r7, #20]
	}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3728      	adds	r7, #40	; 0x28
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08c      	sub	sp, #48	; 0x30
 8008e0c:	af04      	add	r7, sp, #16
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	4613      	mov	r3, r2
 8008e16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f001 fcbd 	bl	800a79c <pvPortMalloc>
 8008e22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00e      	beq.n	8008e48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008e2a:	2070      	movs	r0, #112	; 0x70
 8008e2c:	f001 fcb6 	bl	800a79c <pvPortMalloc>
 8008e30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d003      	beq.n	8008e40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8008e3e:	e005      	b.n	8008e4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e40:	6978      	ldr	r0, [r7, #20]
 8008e42:	f001 fd6f 	bl	800a924 <vPortFree>
 8008e46:	e001      	b.n	8008e4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d017      	beq.n	8008e82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e5a:	88fa      	ldrh	r2, [r7, #6]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	9303      	str	r3, [sp, #12]
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	9302      	str	r3, [sp, #8]
 8008e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	68b9      	ldr	r1, [r7, #8]
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 f80e 	bl	8008e92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e76:	69f8      	ldr	r0, [r7, #28]
 8008e78:	f000 f896 	bl	8008fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	61bb      	str	r3, [r7, #24]
 8008e80:	e002      	b.n	8008e88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e82:	f04f 33ff 	mov.w	r3, #4294967295
 8008e86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e88:	69bb      	ldr	r3, [r7, #24]
	}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3720      	adds	r7, #32
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b088      	sub	sp, #32
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	607a      	str	r2, [r7, #4]
 8008e9e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	21a5      	movs	r1, #165	; 0xa5
 8008eac:	f001 fe86 	bl	800abbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	f023 0307 	bic.w	r3, r3, #7
 8008ec8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	617b      	str	r3, [r7, #20]
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
 8008eee:	e012      	b.n	8008f16 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	7819      	ldrb	r1, [r3, #0]
 8008ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	4413      	add	r3, r2
 8008efe:	3334      	adds	r3, #52	; 0x34
 8008f00:	460a      	mov	r2, r1
 8008f02:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	4413      	add	r3, r2
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d006      	beq.n	8008f1e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	3301      	adds	r3, #1
 8008f14:	61fb      	str	r3, [r7, #28]
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	2b1f      	cmp	r3, #31
 8008f1a:	d9e9      	bls.n	8008ef0 <prvInitialiseNewTask+0x5e>
 8008f1c:	e000      	b.n	8008f20 <prvInitialiseNewTask+0x8e>
		{
			break;
 8008f1e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	2b37      	cmp	r3, #55	; 0x37
 8008f2c:	d901      	bls.n	8008f32 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f2e:	2337      	movs	r3, #55	; 0x37
 8008f30:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f3c:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f40:	2200      	movs	r2, #0
 8008f42:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	3304      	adds	r3, #4
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe fdbc 	bl	8007ac6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f50:	3318      	adds	r3, #24
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe fdb7 	bl	8007ac6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	2200      	movs	r2, #0
 8008f72:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	2200      	movs	r2, #0
 8008f78:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	68f9      	ldr	r1, [r7, #12]
 8008f86:	69b8      	ldr	r0, [r7, #24]
 8008f88:	f001 fa16 	bl	800a3b8 <pxPortInitialiseStack>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f9e:	bf00      	nop
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
	...

08008fa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fb0:	f001 faf4 	bl	800a59c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008fb4:	4b2d      	ldr	r3, [pc, #180]	; (800906c <prvAddNewTaskToReadyList+0xc4>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	4a2c      	ldr	r2, [pc, #176]	; (800906c <prvAddNewTaskToReadyList+0xc4>)
 8008fbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fbe:	4b2c      	ldr	r3, [pc, #176]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d109      	bne.n	8008fda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fc6:	4a2a      	ldr	r2, [pc, #168]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fcc:	4b27      	ldr	r3, [pc, #156]	; (800906c <prvAddNewTaskToReadyList+0xc4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d110      	bne.n	8008ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fd4:	f000 fc34 	bl	8009840 <prvInitialiseTaskLists>
 8008fd8:	e00d      	b.n	8008ff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008fda:	4b26      	ldr	r3, [pc, #152]	; (8009074 <prvAddNewTaskToReadyList+0xcc>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d109      	bne.n	8008ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fe2:	4b23      	ldr	r3, [pc, #140]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d802      	bhi.n	8008ff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ff0:	4a1f      	ldr	r2, [pc, #124]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ff6:	4b20      	ldr	r3, [pc, #128]	; (8009078 <prvAddNewTaskToReadyList+0xd0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	4a1e      	ldr	r2, [pc, #120]	; (8009078 <prvAddNewTaskToReadyList+0xd0>)
 8008ffe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009000:	4b1d      	ldr	r3, [pc, #116]	; (8009078 <prvAddNewTaskToReadyList+0xd0>)
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900c:	4b1b      	ldr	r3, [pc, #108]	; (800907c <prvAddNewTaskToReadyList+0xd4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	429a      	cmp	r2, r3
 8009012:	d903      	bls.n	800901c <prvAddNewTaskToReadyList+0x74>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009018:	4a18      	ldr	r2, [pc, #96]	; (800907c <prvAddNewTaskToReadyList+0xd4>)
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009020:	4613      	mov	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4a15      	ldr	r2, [pc, #84]	; (8009080 <prvAddNewTaskToReadyList+0xd8>)
 800902a:	441a      	add	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3304      	adds	r3, #4
 8009030:	4619      	mov	r1, r3
 8009032:	4610      	mov	r0, r2
 8009034:	f7fe fd53 	bl	8007ade <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009038:	f001 fae0 	bl	800a5fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800903c:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <prvAddNewTaskToReadyList+0xcc>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00e      	beq.n	8009062 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009044:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <prvAddNewTaskToReadyList+0xc8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	429a      	cmp	r2, r3
 8009050:	d207      	bcs.n	8009062 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009052:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <prvAddNewTaskToReadyList+0xdc>)
 8009054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009062:	bf00      	nop
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000960 	.word	0x20000960
 8009070:	2000048c 	.word	0x2000048c
 8009074:	2000096c 	.word	0x2000096c
 8009078:	2000097c 	.word	0x2000097c
 800907c:	20000968 	.word	0x20000968
 8009080:	20000490 	.word	0x20000490
 8009084:	e000ed04 	.word	0xe000ed04

08009088 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009090:	2300      	movs	r3, #0
 8009092:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d017      	beq.n	80090ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800909a:	4b13      	ldr	r3, [pc, #76]	; (80090e8 <vTaskDelay+0x60>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00a      	beq.n	80090b8 <vTaskDelay+0x30>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	60bb      	str	r3, [r7, #8]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090b8:	f000 f882 	bl	80091c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090bc:	2100      	movs	r1, #0
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fe14 	bl	8009cec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090c4:	f000 f88a 	bl	80091dc <xTaskResumeAll>
 80090c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d107      	bne.n	80090e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80090d0:	4b06      	ldr	r3, [pc, #24]	; (80090ec <vTaskDelay+0x64>)
 80090d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090e0:	bf00      	nop
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20000988 	.word	0x20000988
 80090ec:	e000ed04 	.word	0xe000ed04

080090f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08a      	sub	sp, #40	; 0x28
 80090f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090fe:	463a      	mov	r2, r7
 8009100:	1d39      	adds	r1, r7, #4
 8009102:	f107 0308 	add.w	r3, r7, #8
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe fc8e 	bl	8007a28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	9202      	str	r2, [sp, #8]
 8009114:	9301      	str	r3, [sp, #4]
 8009116:	2300      	movs	r3, #0
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	2300      	movs	r3, #0
 800911c:	460a      	mov	r2, r1
 800911e:	4922      	ldr	r1, [pc, #136]	; (80091a8 <vTaskStartScheduler+0xb8>)
 8009120:	4822      	ldr	r0, [pc, #136]	; (80091ac <vTaskStartScheduler+0xbc>)
 8009122:	f7ff fe15 	bl	8008d50 <xTaskCreateStatic>
 8009126:	4603      	mov	r3, r0
 8009128:	4a21      	ldr	r2, [pc, #132]	; (80091b0 <vTaskStartScheduler+0xc0>)
 800912a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800912c:	4b20      	ldr	r3, [pc, #128]	; (80091b0 <vTaskStartScheduler+0xc0>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009134:	2301      	movs	r3, #1
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	e001      	b.n	800913e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800913a:	2300      	movs	r3, #0
 800913c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d102      	bne.n	800914a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009144:	f000 fe26 	bl	8009d94 <xTimerCreateTimerTask>
 8009148:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d118      	bne.n	8009182 <vTaskStartScheduler+0x92>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	613b      	str	r3, [r7, #16]
}
 8009162:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009164:	4b13      	ldr	r3, [pc, #76]	; (80091b4 <vTaskStartScheduler+0xc4>)
 8009166:	f04f 32ff 	mov.w	r2, #4294967295
 800916a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800916c:	4b12      	ldr	r3, [pc, #72]	; (80091b8 <vTaskStartScheduler+0xc8>)
 800916e:	2201      	movs	r2, #1
 8009170:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009172:	4b12      	ldr	r3, [pc, #72]	; (80091bc <vTaskStartScheduler+0xcc>)
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009178:	f7f7 fbac 	bl	80008d4 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800917c:	f001 f99c 	bl	800a4b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009180:	e00e      	b.n	80091a0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009188:	d10a      	bne.n	80091a0 <vTaskStartScheduler+0xb0>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	60fb      	str	r3, [r7, #12]
}
 800919c:	bf00      	nop
 800919e:	e7fe      	b.n	800919e <vTaskStartScheduler+0xae>
}
 80091a0:	bf00      	nop
 80091a2:	3718      	adds	r7, #24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	0800d044 	.word	0x0800d044
 80091ac:	08009811 	.word	0x08009811
 80091b0:	20000984 	.word	0x20000984
 80091b4:	20000980 	.word	0x20000980
 80091b8:	2000096c 	.word	0x2000096c
 80091bc:	20000964 	.word	0x20000964

080091c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80091c4:	4b04      	ldr	r3, [pc, #16]	; (80091d8 <vTaskSuspendAll+0x18>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3301      	adds	r3, #1
 80091ca:	4a03      	ldr	r2, [pc, #12]	; (80091d8 <vTaskSuspendAll+0x18>)
 80091cc:	6013      	str	r3, [r2, #0]
}
 80091ce:	bf00      	nop
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	20000988 	.word	0x20000988

080091dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091e6:	2300      	movs	r3, #0
 80091e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091ea:	4b42      	ldr	r3, [pc, #264]	; (80092f4 <xTaskResumeAll+0x118>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10a      	bne.n	8009208 <xTaskResumeAll+0x2c>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	603b      	str	r3, [r7, #0]
}
 8009204:	bf00      	nop
 8009206:	e7fe      	b.n	8009206 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009208:	f001 f9c8 	bl	800a59c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800920c:	4b39      	ldr	r3, [pc, #228]	; (80092f4 <xTaskResumeAll+0x118>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3b01      	subs	r3, #1
 8009212:	4a38      	ldr	r2, [pc, #224]	; (80092f4 <xTaskResumeAll+0x118>)
 8009214:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009216:	4b37      	ldr	r3, [pc, #220]	; (80092f4 <xTaskResumeAll+0x118>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d162      	bne.n	80092e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800921e:	4b36      	ldr	r3, [pc, #216]	; (80092f8 <xTaskResumeAll+0x11c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d05e      	beq.n	80092e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009226:	e02f      	b.n	8009288 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009228:	4b34      	ldr	r3, [pc, #208]	; (80092fc <xTaskResumeAll+0x120>)
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3318      	adds	r3, #24
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe fcad 	bl	8007b94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	3304      	adds	r3, #4
 800923e:	4618      	mov	r0, r3
 8009240:	f7fe fca8 	bl	8007b94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009248:	4b2d      	ldr	r3, [pc, #180]	; (8009300 <xTaskResumeAll+0x124>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	429a      	cmp	r2, r3
 800924e:	d903      	bls.n	8009258 <xTaskResumeAll+0x7c>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009254:	4a2a      	ldr	r2, [pc, #168]	; (8009300 <xTaskResumeAll+0x124>)
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925c:	4613      	mov	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4a27      	ldr	r2, [pc, #156]	; (8009304 <xTaskResumeAll+0x128>)
 8009266:	441a      	add	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	3304      	adds	r3, #4
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f7fe fc35 	bl	8007ade <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009278:	4b23      	ldr	r3, [pc, #140]	; (8009308 <xTaskResumeAll+0x12c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927e:	429a      	cmp	r2, r3
 8009280:	d302      	bcc.n	8009288 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009282:	4b22      	ldr	r3, [pc, #136]	; (800930c <xTaskResumeAll+0x130>)
 8009284:	2201      	movs	r2, #1
 8009286:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009288:	4b1c      	ldr	r3, [pc, #112]	; (80092fc <xTaskResumeAll+0x120>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1cb      	bne.n	8009228 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009296:	f000 fb71 	bl	800997c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800929a:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <xTaskResumeAll+0x134>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d010      	beq.n	80092c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092a6:	f000 f845 	bl	8009334 <xTaskIncrementTick>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80092b0:	4b16      	ldr	r3, [pc, #88]	; (800930c <xTaskResumeAll+0x130>)
 80092b2:	2201      	movs	r2, #1
 80092b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1f1      	bne.n	80092a6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80092c2:	4b13      	ldr	r3, [pc, #76]	; (8009310 <xTaskResumeAll+0x134>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092c8:	4b10      	ldr	r3, [pc, #64]	; (800930c <xTaskResumeAll+0x130>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d009      	beq.n	80092e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092d0:	2301      	movs	r3, #1
 80092d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092d4:	4b0f      	ldr	r3, [pc, #60]	; (8009314 <xTaskResumeAll+0x138>)
 80092d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092e4:	f001 f98a 	bl	800a5fc <vPortExitCritical>

	return xAlreadyYielded;
 80092e8:	68bb      	ldr	r3, [r7, #8]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	20000988 	.word	0x20000988
 80092f8:	20000960 	.word	0x20000960
 80092fc:	20000920 	.word	0x20000920
 8009300:	20000968 	.word	0x20000968
 8009304:	20000490 	.word	0x20000490
 8009308:	2000048c 	.word	0x2000048c
 800930c:	20000974 	.word	0x20000974
 8009310:	20000970 	.word	0x20000970
 8009314:	e000ed04 	.word	0xe000ed04

08009318 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800931e:	4b04      	ldr	r3, [pc, #16]	; (8009330 <xTaskGetTickCount+0x18>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009324:	687b      	ldr	r3, [r7, #4]
}
 8009326:	4618      	mov	r0, r3
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	bc80      	pop	{r7}
 800932e:	4770      	bx	lr
 8009330:	20000964 	.word	0x20000964

08009334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800933e:	4b51      	ldr	r3, [pc, #324]	; (8009484 <xTaskIncrementTick+0x150>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	f040 808e 	bne.w	8009464 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009348:	4b4f      	ldr	r3, [pc, #316]	; (8009488 <xTaskIncrementTick+0x154>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3301      	adds	r3, #1
 800934e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009350:	4a4d      	ldr	r2, [pc, #308]	; (8009488 <xTaskIncrementTick+0x154>)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d120      	bne.n	800939e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800935c:	4b4b      	ldr	r3, [pc, #300]	; (800948c <xTaskIncrementTick+0x158>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <xTaskIncrementTick+0x48>
	__asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	603b      	str	r3, [r7, #0]
}
 8009378:	bf00      	nop
 800937a:	e7fe      	b.n	800937a <xTaskIncrementTick+0x46>
 800937c:	4b43      	ldr	r3, [pc, #268]	; (800948c <xTaskIncrementTick+0x158>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	4b43      	ldr	r3, [pc, #268]	; (8009490 <xTaskIncrementTick+0x15c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a41      	ldr	r2, [pc, #260]	; (800948c <xTaskIncrementTick+0x158>)
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	4a41      	ldr	r2, [pc, #260]	; (8009490 <xTaskIncrementTick+0x15c>)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	4b40      	ldr	r3, [pc, #256]	; (8009494 <xTaskIncrementTick+0x160>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	4a3f      	ldr	r2, [pc, #252]	; (8009494 <xTaskIncrementTick+0x160>)
 8009398:	6013      	str	r3, [r2, #0]
 800939a:	f000 faef 	bl	800997c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800939e:	4b3e      	ldr	r3, [pc, #248]	; (8009498 <xTaskIncrementTick+0x164>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d34e      	bcc.n	8009446 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093a8:	4b38      	ldr	r3, [pc, #224]	; (800948c <xTaskIncrementTick+0x158>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <xTaskIncrementTick+0x82>
 80093b2:	2301      	movs	r3, #1
 80093b4:	e000      	b.n	80093b8 <xTaskIncrementTick+0x84>
 80093b6:	2300      	movs	r3, #0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d004      	beq.n	80093c6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093bc:	4b36      	ldr	r3, [pc, #216]	; (8009498 <xTaskIncrementTick+0x164>)
 80093be:	f04f 32ff 	mov.w	r2, #4294967295
 80093c2:	601a      	str	r2, [r3, #0]
					break;
 80093c4:	e03f      	b.n	8009446 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80093c6:	4b31      	ldr	r3, [pc, #196]	; (800948c <xTaskIncrementTick+0x158>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d203      	bcs.n	80093e6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093de:	4a2e      	ldr	r2, [pc, #184]	; (8009498 <xTaskIncrementTick+0x164>)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6013      	str	r3, [r2, #0]
						break;
 80093e4:	e02f      	b.n	8009446 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	3304      	adds	r3, #4
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe fbd2 	bl	8007b94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d004      	beq.n	8009402 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	3318      	adds	r3, #24
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fe fbc9 	bl	8007b94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009406:	4b25      	ldr	r3, [pc, #148]	; (800949c <xTaskIncrementTick+0x168>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	429a      	cmp	r2, r3
 800940c:	d903      	bls.n	8009416 <xTaskIncrementTick+0xe2>
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	4a22      	ldr	r2, [pc, #136]	; (800949c <xTaskIncrementTick+0x168>)
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4a1f      	ldr	r2, [pc, #124]	; (80094a0 <xTaskIncrementTick+0x16c>)
 8009424:	441a      	add	r2, r3
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	3304      	adds	r3, #4
 800942a:	4619      	mov	r1, r3
 800942c:	4610      	mov	r0, r2
 800942e:	f7fe fb56 	bl	8007ade <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009436:	4b1b      	ldr	r3, [pc, #108]	; (80094a4 <xTaskIncrementTick+0x170>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	429a      	cmp	r2, r3
 800943e:	d3b3      	bcc.n	80093a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009440:	2301      	movs	r3, #1
 8009442:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009444:	e7b0      	b.n	80093a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009446:	4b17      	ldr	r3, [pc, #92]	; (80094a4 <xTaskIncrementTick+0x170>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944c:	4914      	ldr	r1, [pc, #80]	; (80094a0 <xTaskIncrementTick+0x16c>)
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	440b      	add	r3, r1
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d907      	bls.n	800946e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800945e:	2301      	movs	r3, #1
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	e004      	b.n	800946e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009464:	4b10      	ldr	r3, [pc, #64]	; (80094a8 <xTaskIncrementTick+0x174>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3301      	adds	r3, #1
 800946a:	4a0f      	ldr	r2, [pc, #60]	; (80094a8 <xTaskIncrementTick+0x174>)
 800946c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800946e:	4b0f      	ldr	r3, [pc, #60]	; (80094ac <xTaskIncrementTick+0x178>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009476:	2301      	movs	r3, #1
 8009478:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800947a:	697b      	ldr	r3, [r7, #20]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3718      	adds	r7, #24
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	20000988 	.word	0x20000988
 8009488:	20000964 	.word	0x20000964
 800948c:	20000918 	.word	0x20000918
 8009490:	2000091c 	.word	0x2000091c
 8009494:	20000978 	.word	0x20000978
 8009498:	20000980 	.word	0x20000980
 800949c:	20000968 	.word	0x20000968
 80094a0:	20000490 	.word	0x20000490
 80094a4:	2000048c 	.word	0x2000048c
 80094a8:	20000970 	.word	0x20000970
 80094ac:	20000974 	.word	0x20000974

080094b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094b6:	4b33      	ldr	r3, [pc, #204]	; (8009584 <vTaskSwitchContext+0xd4>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d003      	beq.n	80094c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094be:	4b32      	ldr	r3, [pc, #200]	; (8009588 <vTaskSwitchContext+0xd8>)
 80094c0:	2201      	movs	r2, #1
 80094c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094c4:	e05a      	b.n	800957c <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 80094c6:	4b30      	ldr	r3, [pc, #192]	; (8009588 <vTaskSwitchContext+0xd8>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80094cc:	f7f7 fa08 	bl	80008e0 <getRunTimeCounterValue>
 80094d0:	4603      	mov	r3, r0
 80094d2:	4a2e      	ldr	r2, [pc, #184]	; (800958c <vTaskSwitchContext+0xdc>)
 80094d4:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80094d6:	4b2d      	ldr	r3, [pc, #180]	; (800958c <vTaskSwitchContext+0xdc>)
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	4b2d      	ldr	r3, [pc, #180]	; (8009590 <vTaskSwitchContext+0xe0>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d909      	bls.n	80094f6 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80094e2:	4b2c      	ldr	r3, [pc, #176]	; (8009594 <vTaskSwitchContext+0xe4>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80094e8:	4a28      	ldr	r2, [pc, #160]	; (800958c <vTaskSwitchContext+0xdc>)
 80094ea:	6810      	ldr	r0, [r2, #0]
 80094ec:	4a28      	ldr	r2, [pc, #160]	; (8009590 <vTaskSwitchContext+0xe0>)
 80094ee:	6812      	ldr	r2, [r2, #0]
 80094f0:	1a82      	subs	r2, r0, r2
 80094f2:	440a      	add	r2, r1
 80094f4:	665a      	str	r2, [r3, #100]	; 0x64
				ulTaskSwitchedInTime = ulTotalRunTime;
 80094f6:	4b25      	ldr	r3, [pc, #148]	; (800958c <vTaskSwitchContext+0xdc>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a25      	ldr	r2, [pc, #148]	; (8009590 <vTaskSwitchContext+0xe0>)
 80094fc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80094fe:	4b26      	ldr	r3, [pc, #152]	; (8009598 <vTaskSwitchContext+0xe8>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	e010      	b.n	8009528 <vTaskSwitchContext+0x78>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10a      	bne.n	8009522 <vTaskSwitchContext+0x72>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	607b      	str	r3, [r7, #4]
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <vTaskSwitchContext+0x70>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3b01      	subs	r3, #1
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	491c      	ldr	r1, [pc, #112]	; (800959c <vTaskSwitchContext+0xec>)
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	440b      	add	r3, r1
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0e4      	beq.n	8009506 <vTaskSwitchContext+0x56>
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4a15      	ldr	r2, [pc, #84]	; (800959c <vTaskSwitchContext+0xec>)
 8009548:	4413      	add	r3, r2
 800954a:	60bb      	str	r3, [r7, #8]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	605a      	str	r2, [r3, #4]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	685a      	ldr	r2, [r3, #4]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	3308      	adds	r3, #8
 800955e:	429a      	cmp	r2, r3
 8009560:	d104      	bne.n	800956c <vTaskSwitchContext+0xbc>
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	605a      	str	r2, [r3, #4]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	4a08      	ldr	r2, [pc, #32]	; (8009594 <vTaskSwitchContext+0xe4>)
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	4a08      	ldr	r2, [pc, #32]	; (8009598 <vTaskSwitchContext+0xe8>)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6013      	str	r3, [r2, #0]
}
 800957c:	bf00      	nop
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20000988 	.word	0x20000988
 8009588:	20000974 	.word	0x20000974
 800958c:	20000990 	.word	0x20000990
 8009590:	2000098c 	.word	0x2000098c
 8009594:	2000048c 	.word	0x2000048c
 8009598:	20000968 	.word	0x20000968
 800959c:	20000490 	.word	0x20000490

080095a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10a      	bne.n	80095c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	60fb      	str	r3, [r7, #12]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095c6:	4b07      	ldr	r3, [pc, #28]	; (80095e4 <vTaskPlaceOnEventList+0x44>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3318      	adds	r3, #24
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7fe faa8 	bl	8007b24 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095d4:	2101      	movs	r1, #1
 80095d6:	6838      	ldr	r0, [r7, #0]
 80095d8:	f000 fb88 	bl	8009cec <prvAddCurrentTaskToDelayedList>
}
 80095dc:	bf00      	nop
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	2000048c 	.word	0x2000048c

080095e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	617b      	str	r3, [r7, #20]
}
 800960c:	bf00      	nop
 800960e:	e7fe      	b.n	800960e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009610:	4b0a      	ldr	r3, [pc, #40]	; (800963c <vTaskPlaceOnEventListRestricted+0x54>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3318      	adds	r3, #24
 8009616:	4619      	mov	r1, r3
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f7fe fa60 	bl	8007ade <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009624:	f04f 33ff 	mov.w	r3, #4294967295
 8009628:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	68b8      	ldr	r0, [r7, #8]
 800962e:	f000 fb5d 	bl	8009cec <prvAddCurrentTaskToDelayedList>
	}
 8009632:	bf00      	nop
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	2000048c 	.word	0x2000048c

08009640 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	60fb      	str	r3, [r7, #12]
}
 8009668:	bf00      	nop
 800966a:	e7fe      	b.n	800966a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	3318      	adds	r3, #24
 8009670:	4618      	mov	r0, r3
 8009672:	f7fe fa8f 	bl	8007b94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009676:	4b1e      	ldr	r3, [pc, #120]	; (80096f0 <xTaskRemoveFromEventList+0xb0>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d11d      	bne.n	80096ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	3304      	adds	r3, #4
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fa86 	bl	8007b94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968c:	4b19      	ldr	r3, [pc, #100]	; (80096f4 <xTaskRemoveFromEventList+0xb4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	429a      	cmp	r2, r3
 8009692:	d903      	bls.n	800969c <xTaskRemoveFromEventList+0x5c>
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	4a16      	ldr	r2, [pc, #88]	; (80096f4 <xTaskRemoveFromEventList+0xb4>)
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a0:	4613      	mov	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4a13      	ldr	r2, [pc, #76]	; (80096f8 <xTaskRemoveFromEventList+0xb8>)
 80096aa:	441a      	add	r2, r3
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	3304      	adds	r3, #4
 80096b0:	4619      	mov	r1, r3
 80096b2:	4610      	mov	r0, r2
 80096b4:	f7fe fa13 	bl	8007ade <vListInsertEnd>
 80096b8:	e005      	b.n	80096c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	3318      	adds	r3, #24
 80096be:	4619      	mov	r1, r3
 80096c0:	480e      	ldr	r0, [pc, #56]	; (80096fc <xTaskRemoveFromEventList+0xbc>)
 80096c2:	f7fe fa0c 	bl	8007ade <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ca:	4b0d      	ldr	r3, [pc, #52]	; (8009700 <xTaskRemoveFromEventList+0xc0>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d905      	bls.n	80096e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096d4:	2301      	movs	r3, #1
 80096d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096d8:	4b0a      	ldr	r3, [pc, #40]	; (8009704 <xTaskRemoveFromEventList+0xc4>)
 80096da:	2201      	movs	r2, #1
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	e001      	b.n	80096e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80096e0:	2300      	movs	r3, #0
 80096e2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80096e4:	697b      	ldr	r3, [r7, #20]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20000988 	.word	0x20000988
 80096f4:	20000968 	.word	0x20000968
 80096f8:	20000490 	.word	0x20000490
 80096fc:	20000920 	.word	0x20000920
 8009700:	2000048c 	.word	0x2000048c
 8009704:	20000974 	.word	0x20000974

08009708 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009710:	4b06      	ldr	r3, [pc, #24]	; (800972c <vTaskInternalSetTimeOutState+0x24>)
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009718:	4b05      	ldr	r3, [pc, #20]	; (8009730 <vTaskInternalSetTimeOutState+0x28>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	605a      	str	r2, [r3, #4]
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	bc80      	pop	{r7}
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20000978 	.word	0x20000978
 8009730:	20000964 	.word	0x20000964

08009734 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b088      	sub	sp, #32
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10a      	bne.n	800975a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	613b      	str	r3, [r7, #16]
}
 8009756:	bf00      	nop
 8009758:	e7fe      	b.n	8009758 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	60fb      	str	r3, [r7, #12]
}
 8009772:	bf00      	nop
 8009774:	e7fe      	b.n	8009774 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009776:	f000 ff11 	bl	800a59c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800977a:	4b1d      	ldr	r3, [pc, #116]	; (80097f0 <xTaskCheckForTimeOut+0xbc>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009792:	d102      	bne.n	800979a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009794:	2300      	movs	r3, #0
 8009796:	61fb      	str	r3, [r7, #28]
 8009798:	e023      	b.n	80097e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	4b15      	ldr	r3, [pc, #84]	; (80097f4 <xTaskCheckForTimeOut+0xc0>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d007      	beq.n	80097b6 <xTaskCheckForTimeOut+0x82>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d302      	bcc.n	80097b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097b0:	2301      	movs	r3, #1
 80097b2:	61fb      	str	r3, [r7, #28]
 80097b4:	e015      	b.n	80097e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d20b      	bcs.n	80097d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	1ad2      	subs	r2, r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7ff ff9b 	bl	8009708 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097d2:	2300      	movs	r3, #0
 80097d4:	61fb      	str	r3, [r7, #28]
 80097d6:	e004      	b.n	80097e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097de:	2301      	movs	r3, #1
 80097e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097e2:	f000 ff0b 	bl	800a5fc <vPortExitCritical>

	return xReturn;
 80097e6:	69fb      	ldr	r3, [r7, #28]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3720      	adds	r7, #32
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20000964 	.word	0x20000964
 80097f4:	20000978 	.word	0x20000978

080097f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097fc:	4b03      	ldr	r3, [pc, #12]	; (800980c <vTaskMissedYield+0x14>)
 80097fe:	2201      	movs	r2, #1
 8009800:	601a      	str	r2, [r3, #0]
}
 8009802:	bf00      	nop
 8009804:	46bd      	mov	sp, r7
 8009806:	bc80      	pop	{r7}
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	20000974 	.word	0x20000974

08009810 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009818:	f000 f852 	bl	80098c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800981c:	4b06      	ldr	r3, [pc, #24]	; (8009838 <prvIdleTask+0x28>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d9f9      	bls.n	8009818 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009824:	4b05      	ldr	r3, [pc, #20]	; (800983c <prvIdleTask+0x2c>)
 8009826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009834:	e7f0      	b.n	8009818 <prvIdleTask+0x8>
 8009836:	bf00      	nop
 8009838:	20000490 	.word	0x20000490
 800983c:	e000ed04 	.word	0xe000ed04

08009840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009846:	2300      	movs	r3, #0
 8009848:	607b      	str	r3, [r7, #4]
 800984a:	e00c      	b.n	8009866 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	4613      	mov	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4a12      	ldr	r2, [pc, #72]	; (80098a0 <prvInitialiseTaskLists+0x60>)
 8009858:	4413      	add	r3, r2
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe f914 	bl	8007a88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3301      	adds	r3, #1
 8009864:	607b      	str	r3, [r7, #4]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b37      	cmp	r3, #55	; 0x37
 800986a:	d9ef      	bls.n	800984c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800986c:	480d      	ldr	r0, [pc, #52]	; (80098a4 <prvInitialiseTaskLists+0x64>)
 800986e:	f7fe f90b 	bl	8007a88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009872:	480d      	ldr	r0, [pc, #52]	; (80098a8 <prvInitialiseTaskLists+0x68>)
 8009874:	f7fe f908 	bl	8007a88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009878:	480c      	ldr	r0, [pc, #48]	; (80098ac <prvInitialiseTaskLists+0x6c>)
 800987a:	f7fe f905 	bl	8007a88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800987e:	480c      	ldr	r0, [pc, #48]	; (80098b0 <prvInitialiseTaskLists+0x70>)
 8009880:	f7fe f902 	bl	8007a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009884:	480b      	ldr	r0, [pc, #44]	; (80098b4 <prvInitialiseTaskLists+0x74>)
 8009886:	f7fe f8ff 	bl	8007a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800988a:	4b0b      	ldr	r3, [pc, #44]	; (80098b8 <prvInitialiseTaskLists+0x78>)
 800988c:	4a05      	ldr	r2, [pc, #20]	; (80098a4 <prvInitialiseTaskLists+0x64>)
 800988e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009890:	4b0a      	ldr	r3, [pc, #40]	; (80098bc <prvInitialiseTaskLists+0x7c>)
 8009892:	4a05      	ldr	r2, [pc, #20]	; (80098a8 <prvInitialiseTaskLists+0x68>)
 8009894:	601a      	str	r2, [r3, #0]
}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20000490 	.word	0x20000490
 80098a4:	200008f0 	.word	0x200008f0
 80098a8:	20000904 	.word	0x20000904
 80098ac:	20000920 	.word	0x20000920
 80098b0:	20000934 	.word	0x20000934
 80098b4:	2000094c 	.word	0x2000094c
 80098b8:	20000918 	.word	0x20000918
 80098bc:	2000091c 	.word	0x2000091c

080098c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098c6:	e019      	b.n	80098fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098c8:	f000 fe68 	bl	800a59c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80098cc:	4b10      	ldr	r3, [pc, #64]	; (8009910 <prvCheckTasksWaitingTermination+0x50>)
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3304      	adds	r3, #4
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fe f95b 	bl	8007b94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098de:	4b0d      	ldr	r3, [pc, #52]	; (8009914 <prvCheckTasksWaitingTermination+0x54>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	4a0b      	ldr	r2, [pc, #44]	; (8009914 <prvCheckTasksWaitingTermination+0x54>)
 80098e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098e8:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <prvCheckTasksWaitingTermination+0x58>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	4a0a      	ldr	r2, [pc, #40]	; (8009918 <prvCheckTasksWaitingTermination+0x58>)
 80098f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098f2:	f000 fe83 	bl	800a5fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f810 	bl	800991c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098fc:	4b06      	ldr	r3, [pc, #24]	; (8009918 <prvCheckTasksWaitingTermination+0x58>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1e1      	bne.n	80098c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20000934 	.word	0x20000934
 8009914:	20000960 	.word	0x20000960
 8009918:	20000948 	.word	0x20000948

0800991c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800992a:	2b00      	cmp	r3, #0
 800992c:	d108      	bne.n	8009940 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009932:	4618      	mov	r0, r3
 8009934:	f000 fff6 	bl	800a924 <vPortFree>
				vPortFree( pxTCB );
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fff3 	bl	800a924 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800993e:	e018      	b.n	8009972 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8009946:	2b01      	cmp	r3, #1
 8009948:	d103      	bne.n	8009952 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 ffea 	bl	800a924 <vPortFree>
	}
 8009950:	e00f      	b.n	8009972 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8009958:	2b02      	cmp	r3, #2
 800995a:	d00a      	beq.n	8009972 <prvDeleteTCB+0x56>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	60fb      	str	r3, [r7, #12]
}
 800996e:	bf00      	nop
 8009970:	e7fe      	b.n	8009970 <prvDeleteTCB+0x54>
	}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009982:	4b0e      	ldr	r3, [pc, #56]	; (80099bc <prvResetNextTaskUnblockTime+0x40>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <prvResetNextTaskUnblockTime+0x14>
 800998c:	2301      	movs	r3, #1
 800998e:	e000      	b.n	8009992 <prvResetNextTaskUnblockTime+0x16>
 8009990:	2300      	movs	r3, #0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d004      	beq.n	80099a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009996:	4b0a      	ldr	r3, [pc, #40]	; (80099c0 <prvResetNextTaskUnblockTime+0x44>)
 8009998:	f04f 32ff 	mov.w	r2, #4294967295
 800999c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800999e:	e008      	b.n	80099b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80099a0:	4b06      	ldr	r3, [pc, #24]	; (80099bc <prvResetNextTaskUnblockTime+0x40>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	4a04      	ldr	r2, [pc, #16]	; (80099c0 <prvResetNextTaskUnblockTime+0x44>)
 80099b0:	6013      	str	r3, [r2, #0]
}
 80099b2:	bf00      	nop
 80099b4:	370c      	adds	r7, #12
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bc80      	pop	{r7}
 80099ba:	4770      	bx	lr
 80099bc:	20000918 	.word	0x20000918
 80099c0:	20000980 	.word	0x20000980

080099c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099ca:	4b0b      	ldr	r3, [pc, #44]	; (80099f8 <xTaskGetSchedulerState+0x34>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d102      	bne.n	80099d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099d2:	2301      	movs	r3, #1
 80099d4:	607b      	str	r3, [r7, #4]
 80099d6:	e008      	b.n	80099ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099d8:	4b08      	ldr	r3, [pc, #32]	; (80099fc <xTaskGetSchedulerState+0x38>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d102      	bne.n	80099e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099e0:	2302      	movs	r3, #2
 80099e2:	607b      	str	r3, [r7, #4]
 80099e4:	e001      	b.n	80099ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099e6:	2300      	movs	r3, #0
 80099e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099ea:	687b      	ldr	r3, [r7, #4]
	}
 80099ec:	4618      	mov	r0, r3
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bc80      	pop	{r7}
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	2000096c 	.word	0x2000096c
 80099fc:	20000988 	.word	0x20000988

08009a00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d056      	beq.n	8009ac4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a1a:	4b2d      	ldr	r3, [pc, #180]	; (8009ad0 <xTaskPriorityInherit+0xd0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d246      	bcs.n	8009ab2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	db06      	blt.n	8009a3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a2c:	4b28      	ldr	r3, [pc, #160]	; (8009ad0 <xTaskPriorityInherit+0xd0>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6959      	ldr	r1, [r3, #20]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a42:	4613      	mov	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4a22      	ldr	r2, [pc, #136]	; (8009ad4 <xTaskPriorityInherit+0xd4>)
 8009a4c:	4413      	add	r3, r2
 8009a4e:	4299      	cmp	r1, r3
 8009a50:	d101      	bne.n	8009a56 <xTaskPriorityInherit+0x56>
 8009a52:	2301      	movs	r3, #1
 8009a54:	e000      	b.n	8009a58 <xTaskPriorityInherit+0x58>
 8009a56:	2300      	movs	r3, #0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d022      	beq.n	8009aa2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe f897 	bl	8007b94 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a66:	4b1a      	ldr	r3, [pc, #104]	; (8009ad0 <xTaskPriorityInherit+0xd0>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a74:	4b18      	ldr	r3, [pc, #96]	; (8009ad8 <xTaskPriorityInherit+0xd8>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d903      	bls.n	8009a84 <xTaskPriorityInherit+0x84>
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	4a15      	ldr	r2, [pc, #84]	; (8009ad8 <xTaskPriorityInherit+0xd8>)
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a88:	4613      	mov	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4a10      	ldr	r2, [pc, #64]	; (8009ad4 <xTaskPriorityInherit+0xd4>)
 8009a92:	441a      	add	r2, r3
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	3304      	adds	r3, #4
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4610      	mov	r0, r2
 8009a9c:	f7fe f81f 	bl	8007ade <vListInsertEnd>
 8009aa0:	e004      	b.n	8009aac <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009aa2:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <xTaskPriorityInherit+0xd0>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009aac:	2301      	movs	r3, #1
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e008      	b.n	8009ac4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ab6:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <xTaskPriorityInherit+0xd0>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d201      	bcs.n	8009ac4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
	}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	2000048c 	.word	0x2000048c
 8009ad4:	20000490 	.word	0x20000490
 8009ad8:	20000968 	.word	0x20000968

08009adc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d056      	beq.n	8009ba0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009af2:	4b2e      	ldr	r3, [pc, #184]	; (8009bac <xTaskPriorityDisinherit+0xd0>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d00a      	beq.n	8009b12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	60fb      	str	r3, [r7, #12]
}
 8009b0e:	bf00      	nop
 8009b10:	e7fe      	b.n	8009b10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10a      	bne.n	8009b30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	60bb      	str	r3, [r7, #8]
}
 8009b2c:	bf00      	nop
 8009b2e:	e7fe      	b.n	8009b2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b34:	1e5a      	subs	r2, r3, #1
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d02c      	beq.n	8009ba0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d128      	bne.n	8009ba0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	3304      	adds	r3, #4
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe f81e 	bl	8007b94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b70:	4b0f      	ldr	r3, [pc, #60]	; (8009bb0 <xTaskPriorityDisinherit+0xd4>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d903      	bls.n	8009b80 <xTaskPriorityDisinherit+0xa4>
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7c:	4a0c      	ldr	r2, [pc, #48]	; (8009bb0 <xTaskPriorityDisinherit+0xd4>)
 8009b7e:	6013      	str	r3, [r2, #0]
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4a09      	ldr	r2, [pc, #36]	; (8009bb4 <xTaskPriorityDisinherit+0xd8>)
 8009b8e:	441a      	add	r2, r3
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	3304      	adds	r3, #4
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f7fd ffa1 	bl	8007ade <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ba0:	697b      	ldr	r3, [r7, #20]
	}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	2000048c 	.word	0x2000048c
 8009bb0:	20000968 	.word	0x20000968
 8009bb4:	20000490 	.word	0x20000490

08009bb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d06f      	beq.n	8009cb0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10a      	bne.n	8009bee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	60fb      	str	r3, [r7, #12]
}
 8009bea:	bf00      	nop
 8009bec:	e7fe      	b.n	8009bec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d902      	bls.n	8009bfe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	61fb      	str	r3, [r7, #28]
 8009bfc:	e002      	b.n	8009c04 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c08:	69fa      	ldr	r2, [r7, #28]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d050      	beq.n	8009cb0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d14b      	bne.n	8009cb0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009c18:	4b27      	ldr	r3, [pc, #156]	; (8009cb8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d10a      	bne.n	8009c38 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	60bb      	str	r3, [r7, #8]
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	69fa      	ldr	r2, [r7, #28]
 8009c42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	db04      	blt.n	8009c56 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	6959      	ldr	r1, [r3, #20]
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4a15      	ldr	r2, [pc, #84]	; (8009cbc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009c66:	4413      	add	r3, r2
 8009c68:	4299      	cmp	r1, r3
 8009c6a:	d101      	bne.n	8009c70 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e000      	b.n	8009c72 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009c70:	2300      	movs	r3, #0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d01c      	beq.n	8009cb0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	3304      	adds	r3, #4
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fd ff8a 	bl	8007b94 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c84:	4b0e      	ldr	r3, [pc, #56]	; (8009cc0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d903      	bls.n	8009c94 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c90:	4a0b      	ldr	r2, [pc, #44]	; (8009cc0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4a06      	ldr	r2, [pc, #24]	; (8009cbc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009ca2:	441a      	add	r2, r3
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4610      	mov	r0, r2
 8009cac:	f7fd ff17 	bl	8007ade <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009cb0:	bf00      	nop
 8009cb2:	3720      	adds	r7, #32
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	2000048c 	.word	0x2000048c
 8009cbc:	20000490 	.word	0x20000490
 8009cc0:	20000968 	.word	0x20000968

08009cc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009cc8:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d004      	beq.n	8009cda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009cd0:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009cd6:	3201      	adds	r2, #1
 8009cd8:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 8009cda:	4b03      	ldr	r3, [pc, #12]	; (8009ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
	}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bc80      	pop	{r7}
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	2000048c 	.word	0x2000048c

08009cec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009cf6:	4b21      	ldr	r3, [pc, #132]	; (8009d7c <prvAddCurrentTaskToDelayedList+0x90>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cfc:	4b20      	ldr	r3, [pc, #128]	; (8009d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3304      	adds	r3, #4
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fd ff46 	bl	8007b94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0e:	d10a      	bne.n	8009d26 <prvAddCurrentTaskToDelayedList+0x3a>
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d007      	beq.n	8009d26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d16:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4819      	ldr	r0, [pc, #100]	; (8009d84 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d20:	f7fd fedd 	bl	8007ade <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d24:	e026      	b.n	8009d74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d2e:	4b14      	ldr	r3, [pc, #80]	; (8009d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d209      	bcs.n	8009d52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d3e:	4b12      	ldr	r3, [pc, #72]	; (8009d88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	4b0f      	ldr	r3, [pc, #60]	; (8009d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3304      	adds	r3, #4
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	f7fd feea 	bl	8007b24 <vListInsert>
}
 8009d50:	e010      	b.n	8009d74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d52:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	f7fd fee0 	bl	8007b24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d64:	4b0a      	ldr	r3, [pc, #40]	; (8009d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d202      	bcs.n	8009d74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d6e:	4a08      	ldr	r2, [pc, #32]	; (8009d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	6013      	str	r3, [r2, #0]
}
 8009d74:	bf00      	nop
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	20000964 	.word	0x20000964
 8009d80:	2000048c 	.word	0x2000048c
 8009d84:	2000094c 	.word	0x2000094c
 8009d88:	2000091c 	.word	0x2000091c
 8009d8c:	20000918 	.word	0x20000918
 8009d90:	20000980 	.word	0x20000980

08009d94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08a      	sub	sp, #40	; 0x28
 8009d98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d9e:	f000 facb 	bl	800a338 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009da2:	4b1c      	ldr	r3, [pc, #112]	; (8009e14 <xTimerCreateTimerTask+0x80>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d021      	beq.n	8009dee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009db2:	1d3a      	adds	r2, r7, #4
 8009db4:	f107 0108 	add.w	r1, r7, #8
 8009db8:	f107 030c 	add.w	r3, r7, #12
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fd fe4b 	bl	8007a58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009dc2:	6879      	ldr	r1, [r7, #4]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	9202      	str	r2, [sp, #8]
 8009dca:	9301      	str	r3, [sp, #4]
 8009dcc:	2302      	movs	r3, #2
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	460a      	mov	r2, r1
 8009dd4:	4910      	ldr	r1, [pc, #64]	; (8009e18 <xTimerCreateTimerTask+0x84>)
 8009dd6:	4811      	ldr	r0, [pc, #68]	; (8009e1c <xTimerCreateTimerTask+0x88>)
 8009dd8:	f7fe ffba 	bl	8008d50 <xTaskCreateStatic>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	4a10      	ldr	r2, [pc, #64]	; (8009e20 <xTimerCreateTimerTask+0x8c>)
 8009de0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009de2:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <xTimerCreateTimerTask+0x8c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009dea:	2301      	movs	r3, #1
 8009dec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10a      	bne.n	8009e0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	613b      	str	r3, [r7, #16]
}
 8009e06:	bf00      	nop
 8009e08:	e7fe      	b.n	8009e08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e0a:	697b      	ldr	r3, [r7, #20]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3718      	adds	r7, #24
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	200009c4 	.word	0x200009c4
 8009e18:	0800d074 	.word	0x0800d074
 8009e1c:	08009f41 	.word	0x08009f41
 8009e20:	200009c8 	.word	0x200009c8

08009e24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b08a      	sub	sp, #40	; 0x28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e32:	2300      	movs	r3, #0
 8009e34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10a      	bne.n	8009e52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	623b      	str	r3, [r7, #32]
}
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e52:	4b1a      	ldr	r3, [pc, #104]	; (8009ebc <xTimerGenericCommand+0x98>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d02a      	beq.n	8009eb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2b05      	cmp	r3, #5
 8009e6a:	dc18      	bgt.n	8009e9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e6c:	f7ff fdaa 	bl	80099c4 <xTaskGetSchedulerState>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d109      	bne.n	8009e8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e76:	4b11      	ldr	r3, [pc, #68]	; (8009ebc <xTimerGenericCommand+0x98>)
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	f107 0110 	add.w	r1, r7, #16
 8009e7e:	2300      	movs	r3, #0
 8009e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e82:	f7fe f8a9 	bl	8007fd8 <xQueueGenericSend>
 8009e86:	6278      	str	r0, [r7, #36]	; 0x24
 8009e88:	e012      	b.n	8009eb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e8a:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <xTimerGenericCommand+0x98>)
 8009e8c:	6818      	ldr	r0, [r3, #0]
 8009e8e:	f107 0110 	add.w	r1, r7, #16
 8009e92:	2300      	movs	r3, #0
 8009e94:	2200      	movs	r2, #0
 8009e96:	f7fe f89f 	bl	8007fd8 <xQueueGenericSend>
 8009e9a:	6278      	str	r0, [r7, #36]	; 0x24
 8009e9c:	e008      	b.n	8009eb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e9e:	4b07      	ldr	r3, [pc, #28]	; (8009ebc <xTimerGenericCommand+0x98>)
 8009ea0:	6818      	ldr	r0, [r3, #0]
 8009ea2:	f107 0110 	add.w	r1, r7, #16
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	f7fe f993 	bl	80081d4 <xQueueGenericSendFromISR>
 8009eae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3728      	adds	r7, #40	; 0x28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	200009c4 	.word	0x200009c4

08009ec0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009eca:	4b1c      	ldr	r3, [pc, #112]	; (8009f3c <prvProcessExpiredTimer+0x7c>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fd fe5b 	bl	8007b94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	69db      	ldr	r3, [r3, #28]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d122      	bne.n	8009f2c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	699a      	ldr	r2, [r3, #24]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	18d1      	adds	r1, r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	6978      	ldr	r0, [r7, #20]
 8009ef4:	f000 f8c8 	bl	800a088 <prvInsertTimerInActiveList>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d016      	beq.n	8009f2c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009efe:	2300      	movs	r3, #0
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	2300      	movs	r3, #0
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	2100      	movs	r1, #0
 8009f08:	6978      	ldr	r0, [r7, #20]
 8009f0a:	f7ff ff8b 	bl	8009e24 <xTimerGenericCommand>
 8009f0e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10a      	bne.n	8009f2c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	60fb      	str	r3, [r7, #12]
}
 8009f28:	bf00      	nop
 8009f2a:	e7fe      	b.n	8009f2a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	6978      	ldr	r0, [r7, #20]
 8009f32:	4798      	blx	r3
}
 8009f34:	bf00      	nop
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	200009bc 	.word	0x200009bc

08009f40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f48:	f107 0308 	add.w	r3, r7, #8
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 f857 	bl	800a000 <prvGetNextExpireTime>
 8009f52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	4619      	mov	r1, r3
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f000 f803 	bl	8009f64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f5e:	f000 f8d5 	bl	800a10c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f62:	e7f1      	b.n	8009f48 <prvTimerTask+0x8>

08009f64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f6e:	f7ff f927 	bl	80091c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f72:	f107 0308 	add.w	r3, r7, #8
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 f866 	bl	800a048 <prvSampleTimeNow>
 8009f7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d130      	bne.n	8009fe6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10a      	bne.n	8009fa0 <prvProcessTimerOrBlockTask+0x3c>
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d806      	bhi.n	8009fa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f92:	f7ff f923 	bl	80091dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f96:	68f9      	ldr	r1, [r7, #12]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7ff ff91 	bl	8009ec0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f9e:	e024      	b.n	8009fea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d008      	beq.n	8009fb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009fa6:	4b13      	ldr	r3, [pc, #76]	; (8009ff4 <prvProcessTimerOrBlockTask+0x90>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	bf0c      	ite	eq
 8009fb0:	2301      	moveq	r3, #1
 8009fb2:	2300      	movne	r3, #0
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009fb8:	4b0f      	ldr	r3, [pc, #60]	; (8009ff8 <prvProcessTimerOrBlockTask+0x94>)
 8009fba:	6818      	ldr	r0, [r3, #0]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	f7fe fe8f 	bl	8008ce8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009fca:	f7ff f907 	bl	80091dc <xTaskResumeAll>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10a      	bne.n	8009fea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009fd4:	4b09      	ldr	r3, [pc, #36]	; (8009ffc <prvProcessTimerOrBlockTask+0x98>)
 8009fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fda:	601a      	str	r2, [r3, #0]
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	f3bf 8f6f 	isb	sy
}
 8009fe4:	e001      	b.n	8009fea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009fe6:	f7ff f8f9 	bl	80091dc <xTaskResumeAll>
}
 8009fea:	bf00      	nop
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	200009c0 	.word	0x200009c0
 8009ff8:	200009c4 	.word	0x200009c4
 8009ffc:	e000ed04 	.word	0xe000ed04

0800a000 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a008:	4b0e      	ldr	r3, [pc, #56]	; (800a044 <prvGetNextExpireTime+0x44>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	bf0c      	ite	eq
 800a012:	2301      	moveq	r3, #1
 800a014:	2300      	movne	r3, #0
 800a016:	b2db      	uxtb	r3, r3
 800a018:	461a      	mov	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d105      	bne.n	800a032 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a026:	4b07      	ldr	r3, [pc, #28]	; (800a044 <prvGetNextExpireTime+0x44>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	e001      	b.n	800a036 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a036:	68fb      	ldr	r3, [r7, #12]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bc80      	pop	{r7}
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	200009bc 	.word	0x200009bc

0800a048 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a050:	f7ff f962 	bl	8009318 <xTaskGetTickCount>
 800a054:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a056:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <prvSampleTimeNow+0x3c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d205      	bcs.n	800a06c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a060:	f000 f908 	bl	800a274 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	e002      	b.n	800a072 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a072:	4a04      	ldr	r2, [pc, #16]	; (800a084 <prvSampleTimeNow+0x3c>)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a078:	68fb      	ldr	r3, [r7, #12]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	200009cc 	.word	0x200009cc

0800a088 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a096:	2300      	movs	r3, #0
 800a098:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d812      	bhi.n	800a0d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	1ad2      	subs	r2, r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d302      	bcc.n	800a0c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	617b      	str	r3, [r7, #20]
 800a0c0:	e01b      	b.n	800a0fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a0c2:	4b10      	ldr	r3, [pc, #64]	; (800a104 <prvInsertTimerInActiveList+0x7c>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	f7fd fd29 	bl	8007b24 <vListInsert>
 800a0d2:	e012      	b.n	800a0fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d206      	bcs.n	800a0ea <prvInsertTimerInActiveList+0x62>
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d302      	bcc.n	800a0ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	617b      	str	r3, [r7, #20]
 800a0e8:	e007      	b.n	800a0fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0ea:	4b07      	ldr	r3, [pc, #28]	; (800a108 <prvInsertTimerInActiveList+0x80>)
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3304      	adds	r3, #4
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	f7fd fd15 	bl	8007b24 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0fa:	697b      	ldr	r3, [r7, #20]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	200009c0 	.word	0x200009c0
 800a108:	200009bc 	.word	0x200009bc

0800a10c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08e      	sub	sp, #56	; 0x38
 800a110:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a112:	e09d      	b.n	800a250 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	da18      	bge.n	800a14c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a11a:	1d3b      	adds	r3, r7, #4
 800a11c:	3304      	adds	r3, #4
 800a11e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10a      	bne.n	800a13c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	61fb      	str	r3, [r7, #28]
}
 800a138:	bf00      	nop
 800a13a:	e7fe      	b.n	800a13a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a142:	6850      	ldr	r0, [r2, #4]
 800a144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a146:	6892      	ldr	r2, [r2, #8]
 800a148:	4611      	mov	r1, r2
 800a14a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	db7d      	blt.n	800a24e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d004      	beq.n	800a168 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	3304      	adds	r3, #4
 800a162:	4618      	mov	r0, r3
 800a164:	f7fd fd16 	bl	8007b94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a168:	463b      	mov	r3, r7
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7ff ff6c 	bl	800a048 <prvSampleTimeNow>
 800a170:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b09      	cmp	r3, #9
 800a176:	d86b      	bhi.n	800a250 <prvProcessReceivedCommands+0x144>
 800a178:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <prvProcessReceivedCommands+0x74>)
 800a17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17e:	bf00      	nop
 800a180:	0800a1a9 	.word	0x0800a1a9
 800a184:	0800a1a9 	.word	0x0800a1a9
 800a188:	0800a1a9 	.word	0x0800a1a9
 800a18c:	0800a251 	.word	0x0800a251
 800a190:	0800a205 	.word	0x0800a205
 800a194:	0800a23d 	.word	0x0800a23d
 800a198:	0800a1a9 	.word	0x0800a1a9
 800a19c:	0800a1a9 	.word	0x0800a1a9
 800a1a0:	0800a251 	.word	0x0800a251
 800a1a4:	0800a205 	.word	0x0800a205
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	18d1      	adds	r1, r2, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1b6:	f7ff ff67 	bl	800a088 <prvInsertTimerInActiveList>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d047      	beq.n	800a250 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1c6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	69db      	ldr	r3, [r3, #28]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d13f      	bne.n	800a250 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	441a      	add	r2, r3
 800a1d8:	2300      	movs	r3, #0
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	2100      	movs	r1, #0
 800a1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e2:	f7ff fe1f 	bl	8009e24 <xTimerGenericCommand>
 800a1e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d130      	bne.n	800a250 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	61bb      	str	r3, [r7, #24]
}
 800a200:	bf00      	nop
 800a202:	e7fe      	b.n	800a202 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10a      	bne.n	800a228 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	617b      	str	r3, [r7, #20]
}
 800a224:	bf00      	nop
 800a226:	e7fe      	b.n	800a226 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22a:	699a      	ldr	r2, [r3, #24]
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	18d1      	adds	r1, r2, r3
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a236:	f7ff ff27 	bl	800a088 <prvInsertTimerInActiveList>
					break;
 800a23a:	e009      	b.n	800a250 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a242:	2b00      	cmp	r3, #0
 800a244:	d104      	bne.n	800a250 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a248:	f000 fb6c 	bl	800a924 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a24c:	e000      	b.n	800a250 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a24e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a250:	4b07      	ldr	r3, [pc, #28]	; (800a270 <prvProcessReceivedCommands+0x164>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	1d39      	adds	r1, r7, #4
 800a256:	2200      	movs	r2, #0
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fe f8e1 	bl	8008420 <xQueueReceive>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	f47f af57 	bne.w	800a114 <prvProcessReceivedCommands+0x8>
	}
}
 800a266:	bf00      	nop
 800a268:	bf00      	nop
 800a26a:	3730      	adds	r7, #48	; 0x30
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	200009c4 	.word	0x200009c4

0800a274 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a27a:	e045      	b.n	800a308 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a27c:	4b2c      	ldr	r3, [pc, #176]	; (800a330 <prvSwitchTimerLists+0xbc>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a286:	4b2a      	ldr	r3, [pc, #168]	; (800a330 <prvSwitchTimerLists+0xbc>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3304      	adds	r3, #4
 800a294:	4618      	mov	r0, r3
 800a296:	f7fd fc7d 	bl	8007b94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d12e      	bne.n	800a308 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d90e      	bls.n	800a2da <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2c8:	4b19      	ldr	r3, [pc, #100]	; (800a330 <prvSwitchTimerLists+0xbc>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	f7fd fc26 	bl	8007b24 <vListInsert>
 800a2d8:	e016      	b.n	800a308 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2da:	2300      	movs	r3, #0
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	2300      	movs	r3, #0
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f7ff fd9d 	bl	8009e24 <xTimerGenericCommand>
 800a2ea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <prvSwitchTimerLists+0x94>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	603b      	str	r3, [r7, #0]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a308:	4b09      	ldr	r3, [pc, #36]	; (800a330 <prvSwitchTimerLists+0xbc>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1b4      	bne.n	800a27c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a312:	4b07      	ldr	r3, [pc, #28]	; (800a330 <prvSwitchTimerLists+0xbc>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a318:	4b06      	ldr	r3, [pc, #24]	; (800a334 <prvSwitchTimerLists+0xc0>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a04      	ldr	r2, [pc, #16]	; (800a330 <prvSwitchTimerLists+0xbc>)
 800a31e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a320:	4a04      	ldr	r2, [pc, #16]	; (800a334 <prvSwitchTimerLists+0xc0>)
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	6013      	str	r3, [r2, #0]
}
 800a326:	bf00      	nop
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	200009bc 	.word	0x200009bc
 800a334:	200009c0 	.word	0x200009c0

0800a338 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a33e:	f000 f92d 	bl	800a59c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a342:	4b15      	ldr	r3, [pc, #84]	; (800a398 <prvCheckForValidListAndQueue+0x60>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d120      	bne.n	800a38c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a34a:	4814      	ldr	r0, [pc, #80]	; (800a39c <prvCheckForValidListAndQueue+0x64>)
 800a34c:	f7fd fb9c 	bl	8007a88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a350:	4813      	ldr	r0, [pc, #76]	; (800a3a0 <prvCheckForValidListAndQueue+0x68>)
 800a352:	f7fd fb99 	bl	8007a88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a356:	4b13      	ldr	r3, [pc, #76]	; (800a3a4 <prvCheckForValidListAndQueue+0x6c>)
 800a358:	4a10      	ldr	r2, [pc, #64]	; (800a39c <prvCheckForValidListAndQueue+0x64>)
 800a35a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a35c:	4b12      	ldr	r3, [pc, #72]	; (800a3a8 <prvCheckForValidListAndQueue+0x70>)
 800a35e:	4a10      	ldr	r2, [pc, #64]	; (800a3a0 <prvCheckForValidListAndQueue+0x68>)
 800a360:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a362:	2300      	movs	r3, #0
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	4b11      	ldr	r3, [pc, #68]	; (800a3ac <prvCheckForValidListAndQueue+0x74>)
 800a368:	4a11      	ldr	r2, [pc, #68]	; (800a3b0 <prvCheckForValidListAndQueue+0x78>)
 800a36a:	2110      	movs	r1, #16
 800a36c:	200a      	movs	r0, #10
 800a36e:	f7fd fca3 	bl	8007cb8 <xQueueGenericCreateStatic>
 800a372:	4603      	mov	r3, r0
 800a374:	4a08      	ldr	r2, [pc, #32]	; (800a398 <prvCheckForValidListAndQueue+0x60>)
 800a376:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a378:	4b07      	ldr	r3, [pc, #28]	; (800a398 <prvCheckForValidListAndQueue+0x60>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d005      	beq.n	800a38c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a380:	4b05      	ldr	r3, [pc, #20]	; (800a398 <prvCheckForValidListAndQueue+0x60>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	490b      	ldr	r1, [pc, #44]	; (800a3b4 <prvCheckForValidListAndQueue+0x7c>)
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe fc5c 	bl	8008c44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a38c:	f000 f936 	bl	800a5fc <vPortExitCritical>
}
 800a390:	bf00      	nop
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	200009c4 	.word	0x200009c4
 800a39c:	20000994 	.word	0x20000994
 800a3a0:	200009a8 	.word	0x200009a8
 800a3a4:	200009bc 	.word	0x200009bc
 800a3a8:	200009c0 	.word	0x200009c0
 800a3ac:	20000a70 	.word	0x20000a70
 800a3b0:	200009d0 	.word	0x200009d0
 800a3b4:	0800d07c 	.word	0x0800d07c

0800a3b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3b04      	subs	r3, #4
 800a3c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a3d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3b04      	subs	r3, #4
 800a3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f023 0201 	bic.w	r2, r3, #1
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3b04      	subs	r3, #4
 800a3e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3e8:	4a08      	ldr	r2, [pc, #32]	; (800a40c <pxPortInitialiseStack+0x54>)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	3b14      	subs	r3, #20
 800a3f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3b20      	subs	r3, #32
 800a3fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a400:	68fb      	ldr	r3, [r7, #12]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	bc80      	pop	{r7}
 800a40a:	4770      	bx	lr
 800a40c:	0800a411 	.word	0x0800a411

0800a410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a416:	2300      	movs	r3, #0
 800a418:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a41a:	4b12      	ldr	r3, [pc, #72]	; (800a464 <prvTaskExitError+0x54>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a422:	d00a      	beq.n	800a43a <prvTaskExitError+0x2a>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	60fb      	str	r3, [r7, #12]
}
 800a436:	bf00      	nop
 800a438:	e7fe      	b.n	800a438 <prvTaskExitError+0x28>
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	60bb      	str	r3, [r7, #8]
}
 800a44c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a44e:	bf00      	nop
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d0fc      	beq.n	800a450 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a456:	bf00      	nop
 800a458:	bf00      	nop
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bc80      	pop	{r7}
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	20000010 	.word	0x20000010
	...

0800a470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a470:	4b07      	ldr	r3, [pc, #28]	; (800a490 <pxCurrentTCBConst2>)
 800a472:	6819      	ldr	r1, [r3, #0]
 800a474:	6808      	ldr	r0, [r1, #0]
 800a476:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a47a:	f380 8809 	msr	PSP, r0
 800a47e:	f3bf 8f6f 	isb	sy
 800a482:	f04f 0000 	mov.w	r0, #0
 800a486:	f380 8811 	msr	BASEPRI, r0
 800a48a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a48e:	4770      	bx	lr

0800a490 <pxCurrentTCBConst2>:
 800a490:	2000048c 	.word	0x2000048c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a494:	bf00      	nop
 800a496:	bf00      	nop

0800a498 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a498:	4806      	ldr	r0, [pc, #24]	; (800a4b4 <prvPortStartFirstTask+0x1c>)
 800a49a:	6800      	ldr	r0, [r0, #0]
 800a49c:	6800      	ldr	r0, [r0, #0]
 800a49e:	f380 8808 	msr	MSP, r0
 800a4a2:	b662      	cpsie	i
 800a4a4:	b661      	cpsie	f
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	df00      	svc	0
 800a4b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a4b2:	bf00      	nop
 800a4b4:	e000ed08 	.word	0xe000ed08

0800a4b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a4be:	4b32      	ldr	r3, [pc, #200]	; (800a588 <xPortStartScheduler+0xd0>)
 800a4c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	22ff      	movs	r2, #255	; 0xff
 800a4ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4d8:	78fb      	ldrb	r3, [r7, #3]
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	4b2a      	ldr	r3, [pc, #168]	; (800a58c <xPortStartScheduler+0xd4>)
 800a4e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a4e6:	4b2a      	ldr	r3, [pc, #168]	; (800a590 <xPortStartScheduler+0xd8>)
 800a4e8:	2207      	movs	r2, #7
 800a4ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4ec:	e009      	b.n	800a502 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a4ee:	4b28      	ldr	r3, [pc, #160]	; (800a590 <xPortStartScheduler+0xd8>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	4a26      	ldr	r2, [pc, #152]	; (800a590 <xPortStartScheduler+0xd8>)
 800a4f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4f8:	78fb      	ldrb	r3, [r7, #3]
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	005b      	lsls	r3, r3, #1
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a502:	78fb      	ldrb	r3, [r7, #3]
 800a504:	b2db      	uxtb	r3, r3
 800a506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a50a:	2b80      	cmp	r3, #128	; 0x80
 800a50c:	d0ef      	beq.n	800a4ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a50e:	4b20      	ldr	r3, [pc, #128]	; (800a590 <xPortStartScheduler+0xd8>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f1c3 0307 	rsb	r3, r3, #7
 800a516:	2b04      	cmp	r3, #4
 800a518:	d00a      	beq.n	800a530 <xPortStartScheduler+0x78>
	__asm volatile
 800a51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51e:	f383 8811 	msr	BASEPRI, r3
 800a522:	f3bf 8f6f 	isb	sy
 800a526:	f3bf 8f4f 	dsb	sy
 800a52a:	60bb      	str	r3, [r7, #8]
}
 800a52c:	bf00      	nop
 800a52e:	e7fe      	b.n	800a52e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a530:	4b17      	ldr	r3, [pc, #92]	; (800a590 <xPortStartScheduler+0xd8>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	021b      	lsls	r3, r3, #8
 800a536:	4a16      	ldr	r2, [pc, #88]	; (800a590 <xPortStartScheduler+0xd8>)
 800a538:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a53a:	4b15      	ldr	r3, [pc, #84]	; (800a590 <xPortStartScheduler+0xd8>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a542:	4a13      	ldr	r2, [pc, #76]	; (800a590 <xPortStartScheduler+0xd8>)
 800a544:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a54e:	4b11      	ldr	r3, [pc, #68]	; (800a594 <xPortStartScheduler+0xdc>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a10      	ldr	r2, [pc, #64]	; (800a594 <xPortStartScheduler+0xdc>)
 800a554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a558:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a55a:	4b0e      	ldr	r3, [pc, #56]	; (800a594 <xPortStartScheduler+0xdc>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a0d      	ldr	r2, [pc, #52]	; (800a594 <xPortStartScheduler+0xdc>)
 800a560:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a564:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a566:	f000 f8b9 	bl	800a6dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a56a:	4b0b      	ldr	r3, [pc, #44]	; (800a598 <xPortStartScheduler+0xe0>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a570:	f7ff ff92 	bl	800a498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a574:	f7fe ff9c 	bl	80094b0 <vTaskSwitchContext>
	prvTaskExitError();
 800a578:	f7ff ff4a 	bl	800a410 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	e000e400 	.word	0xe000e400
 800a58c:	20000ac0 	.word	0x20000ac0
 800a590:	20000ac4 	.word	0x20000ac4
 800a594:	e000ed20 	.word	0xe000ed20
 800a598:	20000010 	.word	0x20000010

0800a59c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
	__asm volatile
 800a5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	607b      	str	r3, [r7, #4]
}
 800a5b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a5b6:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <vPortEnterCritical+0x58>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	4a0d      	ldr	r2, [pc, #52]	; (800a5f4 <vPortEnterCritical+0x58>)
 800a5be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5c0:	4b0c      	ldr	r3, [pc, #48]	; (800a5f4 <vPortEnterCritical+0x58>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d10f      	bne.n	800a5e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a5c8:	4b0b      	ldr	r3, [pc, #44]	; (800a5f8 <vPortEnterCritical+0x5c>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00a      	beq.n	800a5e8 <vPortEnterCritical+0x4c>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	603b      	str	r3, [r7, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	e7fe      	b.n	800a5e6 <vPortEnterCritical+0x4a>
	}
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bc80      	pop	{r7}
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	20000010 	.word	0x20000010
 800a5f8:	e000ed04 	.word	0xe000ed04

0800a5fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a602:	4b11      	ldr	r3, [pc, #68]	; (800a648 <vPortExitCritical+0x4c>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10a      	bne.n	800a620 <vPortExitCritical+0x24>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	607b      	str	r3, [r7, #4]
}
 800a61c:	bf00      	nop
 800a61e:	e7fe      	b.n	800a61e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a620:	4b09      	ldr	r3, [pc, #36]	; (800a648 <vPortExitCritical+0x4c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3b01      	subs	r3, #1
 800a626:	4a08      	ldr	r2, [pc, #32]	; (800a648 <vPortExitCritical+0x4c>)
 800a628:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a62a:	4b07      	ldr	r3, [pc, #28]	; (800a648 <vPortExitCritical+0x4c>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d105      	bne.n	800a63e <vPortExitCritical+0x42>
 800a632:	2300      	movs	r3, #0
 800a634:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	f383 8811 	msr	BASEPRI, r3
}
 800a63c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a63e:	bf00      	nop
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	bc80      	pop	{r7}
 800a646:	4770      	bx	lr
 800a648:	20000010 	.word	0x20000010
 800a64c:	00000000 	.word	0x00000000

0800a650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a650:	f3ef 8009 	mrs	r0, PSP
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	4b0d      	ldr	r3, [pc, #52]	; (800a690 <pxCurrentTCBConst>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a660:	6010      	str	r0, [r2, #0]
 800a662:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a666:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a66a:	f380 8811 	msr	BASEPRI, r0
 800a66e:	f7fe ff1f 	bl	80094b0 <vTaskSwitchContext>
 800a672:	f04f 0000 	mov.w	r0, #0
 800a676:	f380 8811 	msr	BASEPRI, r0
 800a67a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a67e:	6819      	ldr	r1, [r3, #0]
 800a680:	6808      	ldr	r0, [r1, #0]
 800a682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a686:	f380 8809 	msr	PSP, r0
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	4770      	bx	lr

0800a690 <pxCurrentTCBConst>:
 800a690:	2000048c 	.word	0x2000048c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a694:	bf00      	nop
 800a696:	bf00      	nop

0800a698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	607b      	str	r3, [r7, #4]
}
 800a6b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6b2:	f7fe fe3f 	bl	8009334 <xTaskIncrementTick>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6bc:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <SysTick_Handler+0x40>)
 800a6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	f383 8811 	msr	BASEPRI, r3
}
 800a6ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6d0:	bf00      	nop
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	e000ed04 	.word	0xe000ed04

0800a6dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6dc:	b480      	push	{r7}
 800a6de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6e0:	4b0a      	ldr	r3, [pc, #40]	; (800a70c <vPortSetupTimerInterrupt+0x30>)
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6e6:	4b0a      	ldr	r3, [pc, #40]	; (800a710 <vPortSetupTimerInterrupt+0x34>)
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a6ec:	4b09      	ldr	r3, [pc, #36]	; (800a714 <vPortSetupTimerInterrupt+0x38>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a09      	ldr	r2, [pc, #36]	; (800a718 <vPortSetupTimerInterrupt+0x3c>)
 800a6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f6:	095b      	lsrs	r3, r3, #5
 800a6f8:	4a08      	ldr	r2, [pc, #32]	; (800a71c <vPortSetupTimerInterrupt+0x40>)
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6fe:	4b03      	ldr	r3, [pc, #12]	; (800a70c <vPortSetupTimerInterrupt+0x30>)
 800a700:	2207      	movs	r2, #7
 800a702:	601a      	str	r2, [r3, #0]
}
 800a704:	bf00      	nop
 800a706:	46bd      	mov	sp, r7
 800a708:	bc80      	pop	{r7}
 800a70a:	4770      	bx	lr
 800a70c:	e000e010 	.word	0xe000e010
 800a710:	e000e018 	.word	0xe000e018
 800a714:	20000004 	.word	0x20000004
 800a718:	51eb851f 	.word	0x51eb851f
 800a71c:	e000e014 	.word	0xe000e014

0800a720 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a726:	f3ef 8305 	mrs	r3, IPSR
 800a72a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2b0f      	cmp	r3, #15
 800a730:	d914      	bls.n	800a75c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a732:	4a16      	ldr	r2, [pc, #88]	; (800a78c <vPortValidateInterruptPriority+0x6c>)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a73c:	4b14      	ldr	r3, [pc, #80]	; (800a790 <vPortValidateInterruptPriority+0x70>)
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	7afa      	ldrb	r2, [r7, #11]
 800a742:	429a      	cmp	r2, r3
 800a744:	d20a      	bcs.n	800a75c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	607b      	str	r3, [r7, #4]
}
 800a758:	bf00      	nop
 800a75a:	e7fe      	b.n	800a75a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a75c:	4b0d      	ldr	r3, [pc, #52]	; (800a794 <vPortValidateInterruptPriority+0x74>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a764:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <vPortValidateInterruptPriority+0x78>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d90a      	bls.n	800a782 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	603b      	str	r3, [r7, #0]
}
 800a77e:	bf00      	nop
 800a780:	e7fe      	b.n	800a780 <vPortValidateInterruptPriority+0x60>
	}
 800a782:	bf00      	nop
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	bc80      	pop	{r7}
 800a78a:	4770      	bx	lr
 800a78c:	e000e3f0 	.word	0xe000e3f0
 800a790:	20000ac0 	.word	0x20000ac0
 800a794:	e000ed0c 	.word	0xe000ed0c
 800a798:	20000ac4 	.word	0x20000ac4

0800a79c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b08a      	sub	sp, #40	; 0x28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7a8:	f7fe fd0a 	bl	80091c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7ac:	4b58      	ldr	r3, [pc, #352]	; (800a910 <pvPortMalloc+0x174>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d101      	bne.n	800a7b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7b4:	f000 f910 	bl	800a9d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7b8:	4b56      	ldr	r3, [pc, #344]	; (800a914 <pvPortMalloc+0x178>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4013      	ands	r3, r2
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f040 808e 	bne.w	800a8e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d01d      	beq.n	800a808 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a7cc:	2208      	movs	r2, #8
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d014      	beq.n	800a808 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f023 0307 	bic.w	r3, r3, #7
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f003 0307 	and.w	r3, r3, #7
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00a      	beq.n	800a808 <pvPortMalloc+0x6c>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	617b      	str	r3, [r7, #20]
}
 800a804:	bf00      	nop
 800a806:	e7fe      	b.n	800a806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d069      	beq.n	800a8e2 <pvPortMalloc+0x146>
 800a80e:	4b42      	ldr	r3, [pc, #264]	; (800a918 <pvPortMalloc+0x17c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	429a      	cmp	r2, r3
 800a816:	d864      	bhi.n	800a8e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a818:	4b40      	ldr	r3, [pc, #256]	; (800a91c <pvPortMalloc+0x180>)
 800a81a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a81c:	4b3f      	ldr	r3, [pc, #252]	; (800a91c <pvPortMalloc+0x180>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a822:	e004      	b.n	800a82e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a826:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	429a      	cmp	r2, r3
 800a836:	d903      	bls.n	800a840 <pvPortMalloc+0xa4>
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1f1      	bne.n	800a824 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a840:	4b33      	ldr	r3, [pc, #204]	; (800a910 <pvPortMalloc+0x174>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a846:	429a      	cmp	r2, r3
 800a848:	d04b      	beq.n	800a8e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2208      	movs	r2, #8
 800a850:	4413      	add	r3, r2
 800a852:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	685a      	ldr	r2, [r3, #4]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	1ad2      	subs	r2, r2, r3
 800a864:	2308      	movs	r3, #8
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	429a      	cmp	r2, r3
 800a86a:	d91f      	bls.n	800a8ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4413      	add	r3, r2
 800a872:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	f003 0307 	and.w	r3, r3, #7
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00a      	beq.n	800a894 <pvPortMalloc+0xf8>
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	613b      	str	r3, [r7, #16]
}
 800a890:	bf00      	nop
 800a892:	e7fe      	b.n	800a892 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	1ad2      	subs	r2, r2, r3
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8a6:	69b8      	ldr	r0, [r7, #24]
 800a8a8:	f000 f8f8 	bl	800aa9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8ac:	4b1a      	ldr	r3, [pc, #104]	; (800a918 <pvPortMalloc+0x17c>)
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	4a18      	ldr	r2, [pc, #96]	; (800a918 <pvPortMalloc+0x17c>)
 800a8b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8ba:	4b17      	ldr	r3, [pc, #92]	; (800a918 <pvPortMalloc+0x17c>)
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	4b18      	ldr	r3, [pc, #96]	; (800a920 <pvPortMalloc+0x184>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d203      	bcs.n	800a8ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8c6:	4b14      	ldr	r3, [pc, #80]	; (800a918 <pvPortMalloc+0x17c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a15      	ldr	r2, [pc, #84]	; (800a920 <pvPortMalloc+0x184>)
 800a8cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	4b10      	ldr	r3, [pc, #64]	; (800a914 <pvPortMalloc+0x178>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	431a      	orrs	r2, r3
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	2200      	movs	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8e2:	f7fe fc7b 	bl	80091dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	f003 0307 	and.w	r3, r3, #7
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00a      	beq.n	800a906 <pvPortMalloc+0x16a>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	60fb      	str	r3, [r7, #12]
}
 800a902:	bf00      	nop
 800a904:	e7fe      	b.n	800a904 <pvPortMalloc+0x168>
	return pvReturn;
 800a906:	69fb      	ldr	r3, [r7, #28]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3728      	adds	r7, #40	; 0x28
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	200039b0 	.word	0x200039b0
 800a914:	200039bc 	.word	0x200039bc
 800a918:	200039b4 	.word	0x200039b4
 800a91c:	200039a8 	.word	0x200039a8
 800a920:	200039b8 	.word	0x200039b8

0800a924 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d048      	beq.n	800a9c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a936:	2308      	movs	r3, #8
 800a938:	425b      	negs	r3, r3
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	4413      	add	r3, r2
 800a93e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	685a      	ldr	r2, [r3, #4]
 800a948:	4b21      	ldr	r3, [pc, #132]	; (800a9d0 <vPortFree+0xac>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4013      	ands	r3, r2
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10a      	bne.n	800a968 <vPortFree+0x44>
	__asm volatile
 800a952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	60fb      	str	r3, [r7, #12]
}
 800a964:	bf00      	nop
 800a966:	e7fe      	b.n	800a966 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00a      	beq.n	800a986 <vPortFree+0x62>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	60bb      	str	r3, [r7, #8]
}
 800a982:	bf00      	nop
 800a984:	e7fe      	b.n	800a984 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	4b11      	ldr	r3, [pc, #68]	; (800a9d0 <vPortFree+0xac>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4013      	ands	r3, r2
 800a990:	2b00      	cmp	r3, #0
 800a992:	d019      	beq.n	800a9c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d115      	bne.n	800a9c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <vPortFree+0xac>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	43db      	mvns	r3, r3
 800a9a6:	401a      	ands	r2, r3
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a9ac:	f7fe fc08 	bl	80091c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	685a      	ldr	r2, [r3, #4]
 800a9b4:	4b07      	ldr	r3, [pc, #28]	; (800a9d4 <vPortFree+0xb0>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	4a06      	ldr	r2, [pc, #24]	; (800a9d4 <vPortFree+0xb0>)
 800a9bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9be:	6938      	ldr	r0, [r7, #16]
 800a9c0:	f000 f86c 	bl	800aa9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a9c4:	f7fe fc0a 	bl	80091dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9c8:	bf00      	nop
 800a9ca:	3718      	adds	r7, #24
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	200039bc 	.word	0x200039bc
 800a9d4:	200039b4 	.word	0x200039b4

0800a9d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9de:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800a9e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9e4:	4b27      	ldr	r3, [pc, #156]	; (800aa84 <prvHeapInit+0xac>)
 800a9e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f003 0307 	and.w	r3, r3, #7
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00c      	beq.n	800aa0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3307      	adds	r3, #7
 800a9f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f023 0307 	bic.w	r3, r3, #7
 800a9fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	4a1f      	ldr	r2, [pc, #124]	; (800aa84 <prvHeapInit+0xac>)
 800aa08:	4413      	add	r3, r2
 800aa0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa10:	4a1d      	ldr	r2, [pc, #116]	; (800aa88 <prvHeapInit+0xb0>)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa16:	4b1c      	ldr	r3, [pc, #112]	; (800aa88 <prvHeapInit+0xb0>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	4413      	add	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa24:	2208      	movs	r2, #8
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	1a9b      	subs	r3, r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f023 0307 	bic.w	r3, r3, #7
 800aa32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4a15      	ldr	r2, [pc, #84]	; (800aa8c <prvHeapInit+0xb4>)
 800aa38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa3a:	4b14      	ldr	r3, [pc, #80]	; (800aa8c <prvHeapInit+0xb4>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa42:	4b12      	ldr	r3, [pc, #72]	; (800aa8c <prvHeapInit+0xb4>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2200      	movs	r2, #0
 800aa48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	1ad2      	subs	r2, r2, r3
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa58:	4b0c      	ldr	r3, [pc, #48]	; (800aa8c <prvHeapInit+0xb4>)
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	4a0a      	ldr	r2, [pc, #40]	; (800aa90 <prvHeapInit+0xb8>)
 800aa66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	4a09      	ldr	r2, [pc, #36]	; (800aa94 <prvHeapInit+0xbc>)
 800aa6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa70:	4b09      	ldr	r3, [pc, #36]	; (800aa98 <prvHeapInit+0xc0>)
 800aa72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa76:	601a      	str	r2, [r3, #0]
}
 800aa78:	bf00      	nop
 800aa7a:	3714      	adds	r7, #20
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bc80      	pop	{r7}
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	20000ac8 	.word	0x20000ac8
 800aa88:	200039a8 	.word	0x200039a8
 800aa8c:	200039b0 	.word	0x200039b0
 800aa90:	200039b8 	.word	0x200039b8
 800aa94:	200039b4 	.word	0x200039b4
 800aa98:	200039bc 	.word	0x200039bc

0800aa9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aaa4:	4b27      	ldr	r3, [pc, #156]	; (800ab44 <prvInsertBlockIntoFreeList+0xa8>)
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	e002      	b.n	800aab0 <prvInsertBlockIntoFreeList+0x14>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	60fb      	str	r3, [r7, #12]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d8f7      	bhi.n	800aaaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	4413      	add	r3, r2
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d108      	bne.n	800aade <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	441a      	add	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	441a      	add	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d118      	bne.n	800ab24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	4b14      	ldr	r3, [pc, #80]	; (800ab48 <prvInsertBlockIntoFreeList+0xac>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d00d      	beq.n	800ab1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	441a      	add	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	601a      	str	r2, [r3, #0]
 800ab18:	e008      	b.n	800ab2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab1a:	4b0b      	ldr	r3, [pc, #44]	; (800ab48 <prvInsertBlockIntoFreeList+0xac>)
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	601a      	str	r2, [r3, #0]
 800ab22:	e003      	b.n	800ab2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d002      	beq.n	800ab3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab3a:	bf00      	nop
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bc80      	pop	{r7}
 800ab42:	4770      	bx	lr
 800ab44:	200039a8 	.word	0x200039a8
 800ab48:	200039b0 	.word	0x200039b0

0800ab4c <__errno>:
 800ab4c:	4b01      	ldr	r3, [pc, #4]	; (800ab54 <__errno+0x8>)
 800ab4e:	6818      	ldr	r0, [r3, #0]
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	20000014 	.word	0x20000014

0800ab58 <__libc_init_array>:
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	2600      	movs	r6, #0
 800ab5c:	4d0c      	ldr	r5, [pc, #48]	; (800ab90 <__libc_init_array+0x38>)
 800ab5e:	4c0d      	ldr	r4, [pc, #52]	; (800ab94 <__libc_init_array+0x3c>)
 800ab60:	1b64      	subs	r4, r4, r5
 800ab62:	10a4      	asrs	r4, r4, #2
 800ab64:	42a6      	cmp	r6, r4
 800ab66:	d109      	bne.n	800ab7c <__libc_init_array+0x24>
 800ab68:	f001 f8d2 	bl	800bd10 <_init>
 800ab6c:	2600      	movs	r6, #0
 800ab6e:	4d0a      	ldr	r5, [pc, #40]	; (800ab98 <__libc_init_array+0x40>)
 800ab70:	4c0a      	ldr	r4, [pc, #40]	; (800ab9c <__libc_init_array+0x44>)
 800ab72:	1b64      	subs	r4, r4, r5
 800ab74:	10a4      	asrs	r4, r4, #2
 800ab76:	42a6      	cmp	r6, r4
 800ab78:	d105      	bne.n	800ab86 <__libc_init_array+0x2e>
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}
 800ab7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab80:	4798      	blx	r3
 800ab82:	3601      	adds	r6, #1
 800ab84:	e7ee      	b.n	800ab64 <__libc_init_array+0xc>
 800ab86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab8a:	4798      	blx	r3
 800ab8c:	3601      	adds	r6, #1
 800ab8e:	e7f2      	b.n	800ab76 <__libc_init_array+0x1e>
 800ab90:	0800d328 	.word	0x0800d328
 800ab94:	0800d328 	.word	0x0800d328
 800ab98:	0800d328 	.word	0x0800d328
 800ab9c:	0800d32c 	.word	0x0800d32c

0800aba0 <memcpy>:
 800aba0:	440a      	add	r2, r1
 800aba2:	4291      	cmp	r1, r2
 800aba4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aba8:	d100      	bne.n	800abac <memcpy+0xc>
 800abaa:	4770      	bx	lr
 800abac:	b510      	push	{r4, lr}
 800abae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abb2:	4291      	cmp	r1, r2
 800abb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abb8:	d1f9      	bne.n	800abae <memcpy+0xe>
 800abba:	bd10      	pop	{r4, pc}

0800abbc <memset>:
 800abbc:	4603      	mov	r3, r0
 800abbe:	4402      	add	r2, r0
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d100      	bne.n	800abc6 <memset+0xa>
 800abc4:	4770      	bx	lr
 800abc6:	f803 1b01 	strb.w	r1, [r3], #1
 800abca:	e7f9      	b.n	800abc0 <memset+0x4>

0800abcc <_puts_r>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	460e      	mov	r6, r1
 800abd0:	4605      	mov	r5, r0
 800abd2:	b118      	cbz	r0, 800abdc <_puts_r+0x10>
 800abd4:	6983      	ldr	r3, [r0, #24]
 800abd6:	b90b      	cbnz	r3, 800abdc <_puts_r+0x10>
 800abd8:	f000 fb24 	bl	800b224 <__sinit>
 800abdc:	69ab      	ldr	r3, [r5, #24]
 800abde:	68ac      	ldr	r4, [r5, #8]
 800abe0:	b913      	cbnz	r3, 800abe8 <_puts_r+0x1c>
 800abe2:	4628      	mov	r0, r5
 800abe4:	f000 fb1e 	bl	800b224 <__sinit>
 800abe8:	4b2c      	ldr	r3, [pc, #176]	; (800ac9c <_puts_r+0xd0>)
 800abea:	429c      	cmp	r4, r3
 800abec:	d120      	bne.n	800ac30 <_puts_r+0x64>
 800abee:	686c      	ldr	r4, [r5, #4]
 800abf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abf2:	07db      	lsls	r3, r3, #31
 800abf4:	d405      	bmi.n	800ac02 <_puts_r+0x36>
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	0598      	lsls	r0, r3, #22
 800abfa:	d402      	bmi.n	800ac02 <_puts_r+0x36>
 800abfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abfe:	f000 fbaf 	bl	800b360 <__retarget_lock_acquire_recursive>
 800ac02:	89a3      	ldrh	r3, [r4, #12]
 800ac04:	0719      	lsls	r1, r3, #28
 800ac06:	d51d      	bpl.n	800ac44 <_puts_r+0x78>
 800ac08:	6923      	ldr	r3, [r4, #16]
 800ac0a:	b1db      	cbz	r3, 800ac44 <_puts_r+0x78>
 800ac0c:	3e01      	subs	r6, #1
 800ac0e:	68a3      	ldr	r3, [r4, #8]
 800ac10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ac14:	3b01      	subs	r3, #1
 800ac16:	60a3      	str	r3, [r4, #8]
 800ac18:	bb39      	cbnz	r1, 800ac6a <_puts_r+0x9e>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	da38      	bge.n	800ac90 <_puts_r+0xc4>
 800ac1e:	4622      	mov	r2, r4
 800ac20:	210a      	movs	r1, #10
 800ac22:	4628      	mov	r0, r5
 800ac24:	f000 f924 	bl	800ae70 <__swbuf_r>
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d011      	beq.n	800ac50 <_puts_r+0x84>
 800ac2c:	250a      	movs	r5, #10
 800ac2e:	e011      	b.n	800ac54 <_puts_r+0x88>
 800ac30:	4b1b      	ldr	r3, [pc, #108]	; (800aca0 <_puts_r+0xd4>)
 800ac32:	429c      	cmp	r4, r3
 800ac34:	d101      	bne.n	800ac3a <_puts_r+0x6e>
 800ac36:	68ac      	ldr	r4, [r5, #8]
 800ac38:	e7da      	b.n	800abf0 <_puts_r+0x24>
 800ac3a:	4b1a      	ldr	r3, [pc, #104]	; (800aca4 <_puts_r+0xd8>)
 800ac3c:	429c      	cmp	r4, r3
 800ac3e:	bf08      	it	eq
 800ac40:	68ec      	ldreq	r4, [r5, #12]
 800ac42:	e7d5      	b.n	800abf0 <_puts_r+0x24>
 800ac44:	4621      	mov	r1, r4
 800ac46:	4628      	mov	r0, r5
 800ac48:	f000 f964 	bl	800af14 <__swsetup_r>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d0dd      	beq.n	800ac0c <_puts_r+0x40>
 800ac50:	f04f 35ff 	mov.w	r5, #4294967295
 800ac54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac56:	07da      	lsls	r2, r3, #31
 800ac58:	d405      	bmi.n	800ac66 <_puts_r+0x9a>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	059b      	lsls	r3, r3, #22
 800ac5e:	d402      	bmi.n	800ac66 <_puts_r+0x9a>
 800ac60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac62:	f000 fb7e 	bl	800b362 <__retarget_lock_release_recursive>
 800ac66:	4628      	mov	r0, r5
 800ac68:	bd70      	pop	{r4, r5, r6, pc}
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	da04      	bge.n	800ac78 <_puts_r+0xac>
 800ac6e:	69a2      	ldr	r2, [r4, #24]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	dc06      	bgt.n	800ac82 <_puts_r+0xb6>
 800ac74:	290a      	cmp	r1, #10
 800ac76:	d004      	beq.n	800ac82 <_puts_r+0xb6>
 800ac78:	6823      	ldr	r3, [r4, #0]
 800ac7a:	1c5a      	adds	r2, r3, #1
 800ac7c:	6022      	str	r2, [r4, #0]
 800ac7e:	7019      	strb	r1, [r3, #0]
 800ac80:	e7c5      	b.n	800ac0e <_puts_r+0x42>
 800ac82:	4622      	mov	r2, r4
 800ac84:	4628      	mov	r0, r5
 800ac86:	f000 f8f3 	bl	800ae70 <__swbuf_r>
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d1bf      	bne.n	800ac0e <_puts_r+0x42>
 800ac8e:	e7df      	b.n	800ac50 <_puts_r+0x84>
 800ac90:	250a      	movs	r5, #10
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	1c5a      	adds	r2, r3, #1
 800ac96:	6022      	str	r2, [r4, #0]
 800ac98:	701d      	strb	r5, [r3, #0]
 800ac9a:	e7db      	b.n	800ac54 <_puts_r+0x88>
 800ac9c:	0800d2b4 	.word	0x0800d2b4
 800aca0:	0800d2d4 	.word	0x0800d2d4
 800aca4:	0800d294 	.word	0x0800d294

0800aca8 <puts>:
 800aca8:	4b02      	ldr	r3, [pc, #8]	; (800acb4 <puts+0xc>)
 800acaa:	4601      	mov	r1, r0
 800acac:	6818      	ldr	r0, [r3, #0]
 800acae:	f7ff bf8d 	b.w	800abcc <_puts_r>
 800acb2:	bf00      	nop
 800acb4:	20000014 	.word	0x20000014

0800acb8 <setvbuf>:
 800acb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acbc:	461d      	mov	r5, r3
 800acbe:	4b5d      	ldr	r3, [pc, #372]	; (800ae34 <setvbuf+0x17c>)
 800acc0:	4604      	mov	r4, r0
 800acc2:	681f      	ldr	r7, [r3, #0]
 800acc4:	460e      	mov	r6, r1
 800acc6:	4690      	mov	r8, r2
 800acc8:	b127      	cbz	r7, 800acd4 <setvbuf+0x1c>
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	b913      	cbnz	r3, 800acd4 <setvbuf+0x1c>
 800acce:	4638      	mov	r0, r7
 800acd0:	f000 faa8 	bl	800b224 <__sinit>
 800acd4:	4b58      	ldr	r3, [pc, #352]	; (800ae38 <setvbuf+0x180>)
 800acd6:	429c      	cmp	r4, r3
 800acd8:	d167      	bne.n	800adaa <setvbuf+0xf2>
 800acda:	687c      	ldr	r4, [r7, #4]
 800acdc:	f1b8 0f02 	cmp.w	r8, #2
 800ace0:	d006      	beq.n	800acf0 <setvbuf+0x38>
 800ace2:	f1b8 0f01 	cmp.w	r8, #1
 800ace6:	f200 809f 	bhi.w	800ae28 <setvbuf+0x170>
 800acea:	2d00      	cmp	r5, #0
 800acec:	f2c0 809c 	blt.w	800ae28 <setvbuf+0x170>
 800acf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acf2:	07db      	lsls	r3, r3, #31
 800acf4:	d405      	bmi.n	800ad02 <setvbuf+0x4a>
 800acf6:	89a3      	ldrh	r3, [r4, #12]
 800acf8:	0598      	lsls	r0, r3, #22
 800acfa:	d402      	bmi.n	800ad02 <setvbuf+0x4a>
 800acfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acfe:	f000 fb2f 	bl	800b360 <__retarget_lock_acquire_recursive>
 800ad02:	4621      	mov	r1, r4
 800ad04:	4638      	mov	r0, r7
 800ad06:	f000 f9f9 	bl	800b0fc <_fflush_r>
 800ad0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad0c:	b141      	cbz	r1, 800ad20 <setvbuf+0x68>
 800ad0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad12:	4299      	cmp	r1, r3
 800ad14:	d002      	beq.n	800ad1c <setvbuf+0x64>
 800ad16:	4638      	mov	r0, r7
 800ad18:	f000 fb90 	bl	800b43c <_free_r>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	6363      	str	r3, [r4, #52]	; 0x34
 800ad20:	2300      	movs	r3, #0
 800ad22:	61a3      	str	r3, [r4, #24]
 800ad24:	6063      	str	r3, [r4, #4]
 800ad26:	89a3      	ldrh	r3, [r4, #12]
 800ad28:	0619      	lsls	r1, r3, #24
 800ad2a:	d503      	bpl.n	800ad34 <setvbuf+0x7c>
 800ad2c:	4638      	mov	r0, r7
 800ad2e:	6921      	ldr	r1, [r4, #16]
 800ad30:	f000 fb84 	bl	800b43c <_free_r>
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	f1b8 0f02 	cmp.w	r8, #2
 800ad3a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800ad3e:	f023 0303 	bic.w	r3, r3, #3
 800ad42:	81a3      	strh	r3, [r4, #12]
 800ad44:	d06c      	beq.n	800ae20 <setvbuf+0x168>
 800ad46:	ab01      	add	r3, sp, #4
 800ad48:	466a      	mov	r2, sp
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f000 fb09 	bl	800b364 <__swhatbuf_r>
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	4318      	orrs	r0, r3
 800ad56:	81a0      	strh	r0, [r4, #12]
 800ad58:	2d00      	cmp	r5, #0
 800ad5a:	d130      	bne.n	800adbe <setvbuf+0x106>
 800ad5c:	9d00      	ldr	r5, [sp, #0]
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f000 fb64 	bl	800b42c <malloc>
 800ad64:	4606      	mov	r6, r0
 800ad66:	2800      	cmp	r0, #0
 800ad68:	d155      	bne.n	800ae16 <setvbuf+0x15e>
 800ad6a:	f8dd 9000 	ldr.w	r9, [sp]
 800ad6e:	45a9      	cmp	r9, r5
 800ad70:	d14a      	bne.n	800ae08 <setvbuf+0x150>
 800ad72:	f04f 35ff 	mov.w	r5, #4294967295
 800ad76:	2200      	movs	r2, #0
 800ad78:	60a2      	str	r2, [r4, #8]
 800ad7a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800ad7e:	6022      	str	r2, [r4, #0]
 800ad80:	6122      	str	r2, [r4, #16]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad88:	6162      	str	r2, [r4, #20]
 800ad8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad8c:	f043 0302 	orr.w	r3, r3, #2
 800ad90:	07d2      	lsls	r2, r2, #31
 800ad92:	81a3      	strh	r3, [r4, #12]
 800ad94:	d405      	bmi.n	800ada2 <setvbuf+0xea>
 800ad96:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ad9a:	d102      	bne.n	800ada2 <setvbuf+0xea>
 800ad9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad9e:	f000 fae0 	bl	800b362 <__retarget_lock_release_recursive>
 800ada2:	4628      	mov	r0, r5
 800ada4:	b003      	add	sp, #12
 800ada6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adaa:	4b24      	ldr	r3, [pc, #144]	; (800ae3c <setvbuf+0x184>)
 800adac:	429c      	cmp	r4, r3
 800adae:	d101      	bne.n	800adb4 <setvbuf+0xfc>
 800adb0:	68bc      	ldr	r4, [r7, #8]
 800adb2:	e793      	b.n	800acdc <setvbuf+0x24>
 800adb4:	4b22      	ldr	r3, [pc, #136]	; (800ae40 <setvbuf+0x188>)
 800adb6:	429c      	cmp	r4, r3
 800adb8:	bf08      	it	eq
 800adba:	68fc      	ldreq	r4, [r7, #12]
 800adbc:	e78e      	b.n	800acdc <setvbuf+0x24>
 800adbe:	2e00      	cmp	r6, #0
 800adc0:	d0cd      	beq.n	800ad5e <setvbuf+0xa6>
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	b913      	cbnz	r3, 800adcc <setvbuf+0x114>
 800adc6:	4638      	mov	r0, r7
 800adc8:	f000 fa2c 	bl	800b224 <__sinit>
 800adcc:	f1b8 0f01 	cmp.w	r8, #1
 800add0:	bf08      	it	eq
 800add2:	89a3      	ldrheq	r3, [r4, #12]
 800add4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800add8:	bf04      	itt	eq
 800adda:	f043 0301 	orreq.w	r3, r3, #1
 800adde:	81a3      	strheq	r3, [r4, #12]
 800ade0:	89a2      	ldrh	r2, [r4, #12]
 800ade2:	6026      	str	r6, [r4, #0]
 800ade4:	f012 0308 	ands.w	r3, r2, #8
 800ade8:	d01c      	beq.n	800ae24 <setvbuf+0x16c>
 800adea:	07d3      	lsls	r3, r2, #31
 800adec:	bf41      	itttt	mi
 800adee:	2300      	movmi	r3, #0
 800adf0:	426d      	negmi	r5, r5
 800adf2:	60a3      	strmi	r3, [r4, #8]
 800adf4:	61a5      	strmi	r5, [r4, #24]
 800adf6:	bf58      	it	pl
 800adf8:	60a5      	strpl	r5, [r4, #8]
 800adfa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800adfc:	f015 0501 	ands.w	r5, r5, #1
 800ae00:	d115      	bne.n	800ae2e <setvbuf+0x176>
 800ae02:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ae06:	e7c8      	b.n	800ad9a <setvbuf+0xe2>
 800ae08:	4648      	mov	r0, r9
 800ae0a:	f000 fb0f 	bl	800b42c <malloc>
 800ae0e:	4606      	mov	r6, r0
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d0ae      	beq.n	800ad72 <setvbuf+0xba>
 800ae14:	464d      	mov	r5, r9
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae1c:	81a3      	strh	r3, [r4, #12]
 800ae1e:	e7d0      	b.n	800adc2 <setvbuf+0x10a>
 800ae20:	2500      	movs	r5, #0
 800ae22:	e7a8      	b.n	800ad76 <setvbuf+0xbe>
 800ae24:	60a3      	str	r3, [r4, #8]
 800ae26:	e7e8      	b.n	800adfa <setvbuf+0x142>
 800ae28:	f04f 35ff 	mov.w	r5, #4294967295
 800ae2c:	e7b9      	b.n	800ada2 <setvbuf+0xea>
 800ae2e:	2500      	movs	r5, #0
 800ae30:	e7b7      	b.n	800ada2 <setvbuf+0xea>
 800ae32:	bf00      	nop
 800ae34:	20000014 	.word	0x20000014
 800ae38:	0800d2b4 	.word	0x0800d2b4
 800ae3c:	0800d2d4 	.word	0x0800d2d4
 800ae40:	0800d294 	.word	0x0800d294

0800ae44 <viprintf>:
 800ae44:	4b09      	ldr	r3, [pc, #36]	; (800ae6c <viprintf+0x28>)
 800ae46:	b570      	push	{r4, r5, r6, lr}
 800ae48:	681c      	ldr	r4, [r3, #0]
 800ae4a:	4605      	mov	r5, r0
 800ae4c:	460e      	mov	r6, r1
 800ae4e:	b124      	cbz	r4, 800ae5a <viprintf+0x16>
 800ae50:	69a3      	ldr	r3, [r4, #24]
 800ae52:	b913      	cbnz	r3, 800ae5a <viprintf+0x16>
 800ae54:	4620      	mov	r0, r4
 800ae56:	f000 f9e5 	bl	800b224 <__sinit>
 800ae5a:	4633      	mov	r3, r6
 800ae5c:	462a      	mov	r2, r5
 800ae5e:	4620      	mov	r0, r4
 800ae60:	68a1      	ldr	r1, [r4, #8]
 800ae62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae66:	f000 bbb7 	b.w	800b5d8 <_vfiprintf_r>
 800ae6a:	bf00      	nop
 800ae6c:	20000014 	.word	0x20000014

0800ae70 <__swbuf_r>:
 800ae70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae72:	460e      	mov	r6, r1
 800ae74:	4614      	mov	r4, r2
 800ae76:	4605      	mov	r5, r0
 800ae78:	b118      	cbz	r0, 800ae82 <__swbuf_r+0x12>
 800ae7a:	6983      	ldr	r3, [r0, #24]
 800ae7c:	b90b      	cbnz	r3, 800ae82 <__swbuf_r+0x12>
 800ae7e:	f000 f9d1 	bl	800b224 <__sinit>
 800ae82:	4b21      	ldr	r3, [pc, #132]	; (800af08 <__swbuf_r+0x98>)
 800ae84:	429c      	cmp	r4, r3
 800ae86:	d12b      	bne.n	800aee0 <__swbuf_r+0x70>
 800ae88:	686c      	ldr	r4, [r5, #4]
 800ae8a:	69a3      	ldr	r3, [r4, #24]
 800ae8c:	60a3      	str	r3, [r4, #8]
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	071a      	lsls	r2, r3, #28
 800ae92:	d52f      	bpl.n	800aef4 <__swbuf_r+0x84>
 800ae94:	6923      	ldr	r3, [r4, #16]
 800ae96:	b36b      	cbz	r3, 800aef4 <__swbuf_r+0x84>
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	6820      	ldr	r0, [r4, #0]
 800ae9c:	b2f6      	uxtb	r6, r6
 800ae9e:	1ac0      	subs	r0, r0, r3
 800aea0:	6963      	ldr	r3, [r4, #20]
 800aea2:	4637      	mov	r7, r6
 800aea4:	4283      	cmp	r3, r0
 800aea6:	dc04      	bgt.n	800aeb2 <__swbuf_r+0x42>
 800aea8:	4621      	mov	r1, r4
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f000 f926 	bl	800b0fc <_fflush_r>
 800aeb0:	bb30      	cbnz	r0, 800af00 <__swbuf_r+0x90>
 800aeb2:	68a3      	ldr	r3, [r4, #8]
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	60a3      	str	r3, [r4, #8]
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	1c5a      	adds	r2, r3, #1
 800aebe:	6022      	str	r2, [r4, #0]
 800aec0:	701e      	strb	r6, [r3, #0]
 800aec2:	6963      	ldr	r3, [r4, #20]
 800aec4:	4283      	cmp	r3, r0
 800aec6:	d004      	beq.n	800aed2 <__swbuf_r+0x62>
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	07db      	lsls	r3, r3, #31
 800aecc:	d506      	bpl.n	800aedc <__swbuf_r+0x6c>
 800aece:	2e0a      	cmp	r6, #10
 800aed0:	d104      	bne.n	800aedc <__swbuf_r+0x6c>
 800aed2:	4621      	mov	r1, r4
 800aed4:	4628      	mov	r0, r5
 800aed6:	f000 f911 	bl	800b0fc <_fflush_r>
 800aeda:	b988      	cbnz	r0, 800af00 <__swbuf_r+0x90>
 800aedc:	4638      	mov	r0, r7
 800aede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee0:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <__swbuf_r+0x9c>)
 800aee2:	429c      	cmp	r4, r3
 800aee4:	d101      	bne.n	800aeea <__swbuf_r+0x7a>
 800aee6:	68ac      	ldr	r4, [r5, #8]
 800aee8:	e7cf      	b.n	800ae8a <__swbuf_r+0x1a>
 800aeea:	4b09      	ldr	r3, [pc, #36]	; (800af10 <__swbuf_r+0xa0>)
 800aeec:	429c      	cmp	r4, r3
 800aeee:	bf08      	it	eq
 800aef0:	68ec      	ldreq	r4, [r5, #12]
 800aef2:	e7ca      	b.n	800ae8a <__swbuf_r+0x1a>
 800aef4:	4621      	mov	r1, r4
 800aef6:	4628      	mov	r0, r5
 800aef8:	f000 f80c 	bl	800af14 <__swsetup_r>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d0cb      	beq.n	800ae98 <__swbuf_r+0x28>
 800af00:	f04f 37ff 	mov.w	r7, #4294967295
 800af04:	e7ea      	b.n	800aedc <__swbuf_r+0x6c>
 800af06:	bf00      	nop
 800af08:	0800d2b4 	.word	0x0800d2b4
 800af0c:	0800d2d4 	.word	0x0800d2d4
 800af10:	0800d294 	.word	0x0800d294

0800af14 <__swsetup_r>:
 800af14:	4b32      	ldr	r3, [pc, #200]	; (800afe0 <__swsetup_r+0xcc>)
 800af16:	b570      	push	{r4, r5, r6, lr}
 800af18:	681d      	ldr	r5, [r3, #0]
 800af1a:	4606      	mov	r6, r0
 800af1c:	460c      	mov	r4, r1
 800af1e:	b125      	cbz	r5, 800af2a <__swsetup_r+0x16>
 800af20:	69ab      	ldr	r3, [r5, #24]
 800af22:	b913      	cbnz	r3, 800af2a <__swsetup_r+0x16>
 800af24:	4628      	mov	r0, r5
 800af26:	f000 f97d 	bl	800b224 <__sinit>
 800af2a:	4b2e      	ldr	r3, [pc, #184]	; (800afe4 <__swsetup_r+0xd0>)
 800af2c:	429c      	cmp	r4, r3
 800af2e:	d10f      	bne.n	800af50 <__swsetup_r+0x3c>
 800af30:	686c      	ldr	r4, [r5, #4]
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af38:	0719      	lsls	r1, r3, #28
 800af3a:	d42c      	bmi.n	800af96 <__swsetup_r+0x82>
 800af3c:	06dd      	lsls	r5, r3, #27
 800af3e:	d411      	bmi.n	800af64 <__swsetup_r+0x50>
 800af40:	2309      	movs	r3, #9
 800af42:	6033      	str	r3, [r6, #0]
 800af44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af48:	f04f 30ff 	mov.w	r0, #4294967295
 800af4c:	81a3      	strh	r3, [r4, #12]
 800af4e:	e03e      	b.n	800afce <__swsetup_r+0xba>
 800af50:	4b25      	ldr	r3, [pc, #148]	; (800afe8 <__swsetup_r+0xd4>)
 800af52:	429c      	cmp	r4, r3
 800af54:	d101      	bne.n	800af5a <__swsetup_r+0x46>
 800af56:	68ac      	ldr	r4, [r5, #8]
 800af58:	e7eb      	b.n	800af32 <__swsetup_r+0x1e>
 800af5a:	4b24      	ldr	r3, [pc, #144]	; (800afec <__swsetup_r+0xd8>)
 800af5c:	429c      	cmp	r4, r3
 800af5e:	bf08      	it	eq
 800af60:	68ec      	ldreq	r4, [r5, #12]
 800af62:	e7e6      	b.n	800af32 <__swsetup_r+0x1e>
 800af64:	0758      	lsls	r0, r3, #29
 800af66:	d512      	bpl.n	800af8e <__swsetup_r+0x7a>
 800af68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af6a:	b141      	cbz	r1, 800af7e <__swsetup_r+0x6a>
 800af6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af70:	4299      	cmp	r1, r3
 800af72:	d002      	beq.n	800af7a <__swsetup_r+0x66>
 800af74:	4630      	mov	r0, r6
 800af76:	f000 fa61 	bl	800b43c <_free_r>
 800af7a:	2300      	movs	r3, #0
 800af7c:	6363      	str	r3, [r4, #52]	; 0x34
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af84:	81a3      	strh	r3, [r4, #12]
 800af86:	2300      	movs	r3, #0
 800af88:	6063      	str	r3, [r4, #4]
 800af8a:	6923      	ldr	r3, [r4, #16]
 800af8c:	6023      	str	r3, [r4, #0]
 800af8e:	89a3      	ldrh	r3, [r4, #12]
 800af90:	f043 0308 	orr.w	r3, r3, #8
 800af94:	81a3      	strh	r3, [r4, #12]
 800af96:	6923      	ldr	r3, [r4, #16]
 800af98:	b94b      	cbnz	r3, 800afae <__swsetup_r+0x9a>
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afa4:	d003      	beq.n	800afae <__swsetup_r+0x9a>
 800afa6:	4621      	mov	r1, r4
 800afa8:	4630      	mov	r0, r6
 800afaa:	f000 f9ff 	bl	800b3ac <__smakebuf_r>
 800afae:	89a0      	ldrh	r0, [r4, #12]
 800afb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afb4:	f010 0301 	ands.w	r3, r0, #1
 800afb8:	d00a      	beq.n	800afd0 <__swsetup_r+0xbc>
 800afba:	2300      	movs	r3, #0
 800afbc:	60a3      	str	r3, [r4, #8]
 800afbe:	6963      	ldr	r3, [r4, #20]
 800afc0:	425b      	negs	r3, r3
 800afc2:	61a3      	str	r3, [r4, #24]
 800afc4:	6923      	ldr	r3, [r4, #16]
 800afc6:	b943      	cbnz	r3, 800afda <__swsetup_r+0xc6>
 800afc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afcc:	d1ba      	bne.n	800af44 <__swsetup_r+0x30>
 800afce:	bd70      	pop	{r4, r5, r6, pc}
 800afd0:	0781      	lsls	r1, r0, #30
 800afd2:	bf58      	it	pl
 800afd4:	6963      	ldrpl	r3, [r4, #20]
 800afd6:	60a3      	str	r3, [r4, #8]
 800afd8:	e7f4      	b.n	800afc4 <__swsetup_r+0xb0>
 800afda:	2000      	movs	r0, #0
 800afdc:	e7f7      	b.n	800afce <__swsetup_r+0xba>
 800afde:	bf00      	nop
 800afe0:	20000014 	.word	0x20000014
 800afe4:	0800d2b4 	.word	0x0800d2b4
 800afe8:	0800d2d4 	.word	0x0800d2d4
 800afec:	0800d294 	.word	0x0800d294

0800aff0 <__sflush_r>:
 800aff0:	898a      	ldrh	r2, [r1, #12]
 800aff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff6:	4605      	mov	r5, r0
 800aff8:	0710      	lsls	r0, r2, #28
 800affa:	460c      	mov	r4, r1
 800affc:	d458      	bmi.n	800b0b0 <__sflush_r+0xc0>
 800affe:	684b      	ldr	r3, [r1, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	dc05      	bgt.n	800b010 <__sflush_r+0x20>
 800b004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b006:	2b00      	cmp	r3, #0
 800b008:	dc02      	bgt.n	800b010 <__sflush_r+0x20>
 800b00a:	2000      	movs	r0, #0
 800b00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b012:	2e00      	cmp	r6, #0
 800b014:	d0f9      	beq.n	800b00a <__sflush_r+0x1a>
 800b016:	2300      	movs	r3, #0
 800b018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b01c:	682f      	ldr	r7, [r5, #0]
 800b01e:	602b      	str	r3, [r5, #0]
 800b020:	d032      	beq.n	800b088 <__sflush_r+0x98>
 800b022:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b024:	89a3      	ldrh	r3, [r4, #12]
 800b026:	075a      	lsls	r2, r3, #29
 800b028:	d505      	bpl.n	800b036 <__sflush_r+0x46>
 800b02a:	6863      	ldr	r3, [r4, #4]
 800b02c:	1ac0      	subs	r0, r0, r3
 800b02e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b030:	b10b      	cbz	r3, 800b036 <__sflush_r+0x46>
 800b032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b034:	1ac0      	subs	r0, r0, r3
 800b036:	2300      	movs	r3, #0
 800b038:	4602      	mov	r2, r0
 800b03a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b03c:	4628      	mov	r0, r5
 800b03e:	6a21      	ldr	r1, [r4, #32]
 800b040:	47b0      	blx	r6
 800b042:	1c43      	adds	r3, r0, #1
 800b044:	89a3      	ldrh	r3, [r4, #12]
 800b046:	d106      	bne.n	800b056 <__sflush_r+0x66>
 800b048:	6829      	ldr	r1, [r5, #0]
 800b04a:	291d      	cmp	r1, #29
 800b04c:	d82c      	bhi.n	800b0a8 <__sflush_r+0xb8>
 800b04e:	4a2a      	ldr	r2, [pc, #168]	; (800b0f8 <__sflush_r+0x108>)
 800b050:	40ca      	lsrs	r2, r1
 800b052:	07d6      	lsls	r6, r2, #31
 800b054:	d528      	bpl.n	800b0a8 <__sflush_r+0xb8>
 800b056:	2200      	movs	r2, #0
 800b058:	6062      	str	r2, [r4, #4]
 800b05a:	6922      	ldr	r2, [r4, #16]
 800b05c:	04d9      	lsls	r1, r3, #19
 800b05e:	6022      	str	r2, [r4, #0]
 800b060:	d504      	bpl.n	800b06c <__sflush_r+0x7c>
 800b062:	1c42      	adds	r2, r0, #1
 800b064:	d101      	bne.n	800b06a <__sflush_r+0x7a>
 800b066:	682b      	ldr	r3, [r5, #0]
 800b068:	b903      	cbnz	r3, 800b06c <__sflush_r+0x7c>
 800b06a:	6560      	str	r0, [r4, #84]	; 0x54
 800b06c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b06e:	602f      	str	r7, [r5, #0]
 800b070:	2900      	cmp	r1, #0
 800b072:	d0ca      	beq.n	800b00a <__sflush_r+0x1a>
 800b074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b078:	4299      	cmp	r1, r3
 800b07a:	d002      	beq.n	800b082 <__sflush_r+0x92>
 800b07c:	4628      	mov	r0, r5
 800b07e:	f000 f9dd 	bl	800b43c <_free_r>
 800b082:	2000      	movs	r0, #0
 800b084:	6360      	str	r0, [r4, #52]	; 0x34
 800b086:	e7c1      	b.n	800b00c <__sflush_r+0x1c>
 800b088:	6a21      	ldr	r1, [r4, #32]
 800b08a:	2301      	movs	r3, #1
 800b08c:	4628      	mov	r0, r5
 800b08e:	47b0      	blx	r6
 800b090:	1c41      	adds	r1, r0, #1
 800b092:	d1c7      	bne.n	800b024 <__sflush_r+0x34>
 800b094:	682b      	ldr	r3, [r5, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d0c4      	beq.n	800b024 <__sflush_r+0x34>
 800b09a:	2b1d      	cmp	r3, #29
 800b09c:	d001      	beq.n	800b0a2 <__sflush_r+0xb2>
 800b09e:	2b16      	cmp	r3, #22
 800b0a0:	d101      	bne.n	800b0a6 <__sflush_r+0xb6>
 800b0a2:	602f      	str	r7, [r5, #0]
 800b0a4:	e7b1      	b.n	800b00a <__sflush_r+0x1a>
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ac:	81a3      	strh	r3, [r4, #12]
 800b0ae:	e7ad      	b.n	800b00c <__sflush_r+0x1c>
 800b0b0:	690f      	ldr	r7, [r1, #16]
 800b0b2:	2f00      	cmp	r7, #0
 800b0b4:	d0a9      	beq.n	800b00a <__sflush_r+0x1a>
 800b0b6:	0793      	lsls	r3, r2, #30
 800b0b8:	bf18      	it	ne
 800b0ba:	2300      	movne	r3, #0
 800b0bc:	680e      	ldr	r6, [r1, #0]
 800b0be:	bf08      	it	eq
 800b0c0:	694b      	ldreq	r3, [r1, #20]
 800b0c2:	eba6 0807 	sub.w	r8, r6, r7
 800b0c6:	600f      	str	r7, [r1, #0]
 800b0c8:	608b      	str	r3, [r1, #8]
 800b0ca:	f1b8 0f00 	cmp.w	r8, #0
 800b0ce:	dd9c      	ble.n	800b00a <__sflush_r+0x1a>
 800b0d0:	4643      	mov	r3, r8
 800b0d2:	463a      	mov	r2, r7
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	6a21      	ldr	r1, [r4, #32]
 800b0d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0da:	47b0      	blx	r6
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	dc06      	bgt.n	800b0ee <__sflush_r+0xfe>
 800b0e0:	89a3      	ldrh	r3, [r4, #12]
 800b0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ea:	81a3      	strh	r3, [r4, #12]
 800b0ec:	e78e      	b.n	800b00c <__sflush_r+0x1c>
 800b0ee:	4407      	add	r7, r0
 800b0f0:	eba8 0800 	sub.w	r8, r8, r0
 800b0f4:	e7e9      	b.n	800b0ca <__sflush_r+0xda>
 800b0f6:	bf00      	nop
 800b0f8:	20400001 	.word	0x20400001

0800b0fc <_fflush_r>:
 800b0fc:	b538      	push	{r3, r4, r5, lr}
 800b0fe:	690b      	ldr	r3, [r1, #16]
 800b100:	4605      	mov	r5, r0
 800b102:	460c      	mov	r4, r1
 800b104:	b913      	cbnz	r3, 800b10c <_fflush_r+0x10>
 800b106:	2500      	movs	r5, #0
 800b108:	4628      	mov	r0, r5
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	b118      	cbz	r0, 800b116 <_fflush_r+0x1a>
 800b10e:	6983      	ldr	r3, [r0, #24]
 800b110:	b90b      	cbnz	r3, 800b116 <_fflush_r+0x1a>
 800b112:	f000 f887 	bl	800b224 <__sinit>
 800b116:	4b14      	ldr	r3, [pc, #80]	; (800b168 <_fflush_r+0x6c>)
 800b118:	429c      	cmp	r4, r3
 800b11a:	d11b      	bne.n	800b154 <_fflush_r+0x58>
 800b11c:	686c      	ldr	r4, [r5, #4]
 800b11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d0ef      	beq.n	800b106 <_fflush_r+0xa>
 800b126:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b128:	07d0      	lsls	r0, r2, #31
 800b12a:	d404      	bmi.n	800b136 <_fflush_r+0x3a>
 800b12c:	0599      	lsls	r1, r3, #22
 800b12e:	d402      	bmi.n	800b136 <_fflush_r+0x3a>
 800b130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b132:	f000 f915 	bl	800b360 <__retarget_lock_acquire_recursive>
 800b136:	4628      	mov	r0, r5
 800b138:	4621      	mov	r1, r4
 800b13a:	f7ff ff59 	bl	800aff0 <__sflush_r>
 800b13e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b140:	4605      	mov	r5, r0
 800b142:	07da      	lsls	r2, r3, #31
 800b144:	d4e0      	bmi.n	800b108 <_fflush_r+0xc>
 800b146:	89a3      	ldrh	r3, [r4, #12]
 800b148:	059b      	lsls	r3, r3, #22
 800b14a:	d4dd      	bmi.n	800b108 <_fflush_r+0xc>
 800b14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b14e:	f000 f908 	bl	800b362 <__retarget_lock_release_recursive>
 800b152:	e7d9      	b.n	800b108 <_fflush_r+0xc>
 800b154:	4b05      	ldr	r3, [pc, #20]	; (800b16c <_fflush_r+0x70>)
 800b156:	429c      	cmp	r4, r3
 800b158:	d101      	bne.n	800b15e <_fflush_r+0x62>
 800b15a:	68ac      	ldr	r4, [r5, #8]
 800b15c:	e7df      	b.n	800b11e <_fflush_r+0x22>
 800b15e:	4b04      	ldr	r3, [pc, #16]	; (800b170 <_fflush_r+0x74>)
 800b160:	429c      	cmp	r4, r3
 800b162:	bf08      	it	eq
 800b164:	68ec      	ldreq	r4, [r5, #12]
 800b166:	e7da      	b.n	800b11e <_fflush_r+0x22>
 800b168:	0800d2b4 	.word	0x0800d2b4
 800b16c:	0800d2d4 	.word	0x0800d2d4
 800b170:	0800d294 	.word	0x0800d294

0800b174 <std>:
 800b174:	2300      	movs	r3, #0
 800b176:	b510      	push	{r4, lr}
 800b178:	4604      	mov	r4, r0
 800b17a:	e9c0 3300 	strd	r3, r3, [r0]
 800b17e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b182:	6083      	str	r3, [r0, #8]
 800b184:	8181      	strh	r1, [r0, #12]
 800b186:	6643      	str	r3, [r0, #100]	; 0x64
 800b188:	81c2      	strh	r2, [r0, #14]
 800b18a:	6183      	str	r3, [r0, #24]
 800b18c:	4619      	mov	r1, r3
 800b18e:	2208      	movs	r2, #8
 800b190:	305c      	adds	r0, #92	; 0x5c
 800b192:	f7ff fd13 	bl	800abbc <memset>
 800b196:	4b05      	ldr	r3, [pc, #20]	; (800b1ac <std+0x38>)
 800b198:	6224      	str	r4, [r4, #32]
 800b19a:	6263      	str	r3, [r4, #36]	; 0x24
 800b19c:	4b04      	ldr	r3, [pc, #16]	; (800b1b0 <std+0x3c>)
 800b19e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1a0:	4b04      	ldr	r3, [pc, #16]	; (800b1b4 <std+0x40>)
 800b1a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1a4:	4b04      	ldr	r3, [pc, #16]	; (800b1b8 <std+0x44>)
 800b1a6:	6323      	str	r3, [r4, #48]	; 0x30
 800b1a8:	bd10      	pop	{r4, pc}
 800b1aa:	bf00      	nop
 800b1ac:	0800bb85 	.word	0x0800bb85
 800b1b0:	0800bba7 	.word	0x0800bba7
 800b1b4:	0800bbdf 	.word	0x0800bbdf
 800b1b8:	0800bc03 	.word	0x0800bc03

0800b1bc <_cleanup_r>:
 800b1bc:	4901      	ldr	r1, [pc, #4]	; (800b1c4 <_cleanup_r+0x8>)
 800b1be:	f000 b8af 	b.w	800b320 <_fwalk_reent>
 800b1c2:	bf00      	nop
 800b1c4:	0800b0fd 	.word	0x0800b0fd

0800b1c8 <__sfmoreglue>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	2568      	movs	r5, #104	; 0x68
 800b1cc:	1e4a      	subs	r2, r1, #1
 800b1ce:	4355      	muls	r5, r2
 800b1d0:	460e      	mov	r6, r1
 800b1d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1d6:	f000 f97d 	bl	800b4d4 <_malloc_r>
 800b1da:	4604      	mov	r4, r0
 800b1dc:	b140      	cbz	r0, 800b1f0 <__sfmoreglue+0x28>
 800b1de:	2100      	movs	r1, #0
 800b1e0:	e9c0 1600 	strd	r1, r6, [r0]
 800b1e4:	300c      	adds	r0, #12
 800b1e6:	60a0      	str	r0, [r4, #8]
 800b1e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1ec:	f7ff fce6 	bl	800abbc <memset>
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	bd70      	pop	{r4, r5, r6, pc}

0800b1f4 <__sfp_lock_acquire>:
 800b1f4:	4801      	ldr	r0, [pc, #4]	; (800b1fc <__sfp_lock_acquire+0x8>)
 800b1f6:	f000 b8b3 	b.w	800b360 <__retarget_lock_acquire_recursive>
 800b1fa:	bf00      	nop
 800b1fc:	20003b70 	.word	0x20003b70

0800b200 <__sfp_lock_release>:
 800b200:	4801      	ldr	r0, [pc, #4]	; (800b208 <__sfp_lock_release+0x8>)
 800b202:	f000 b8ae 	b.w	800b362 <__retarget_lock_release_recursive>
 800b206:	bf00      	nop
 800b208:	20003b70 	.word	0x20003b70

0800b20c <__sinit_lock_acquire>:
 800b20c:	4801      	ldr	r0, [pc, #4]	; (800b214 <__sinit_lock_acquire+0x8>)
 800b20e:	f000 b8a7 	b.w	800b360 <__retarget_lock_acquire_recursive>
 800b212:	bf00      	nop
 800b214:	20003b6b 	.word	0x20003b6b

0800b218 <__sinit_lock_release>:
 800b218:	4801      	ldr	r0, [pc, #4]	; (800b220 <__sinit_lock_release+0x8>)
 800b21a:	f000 b8a2 	b.w	800b362 <__retarget_lock_release_recursive>
 800b21e:	bf00      	nop
 800b220:	20003b6b 	.word	0x20003b6b

0800b224 <__sinit>:
 800b224:	b510      	push	{r4, lr}
 800b226:	4604      	mov	r4, r0
 800b228:	f7ff fff0 	bl	800b20c <__sinit_lock_acquire>
 800b22c:	69a3      	ldr	r3, [r4, #24]
 800b22e:	b11b      	cbz	r3, 800b238 <__sinit+0x14>
 800b230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b234:	f7ff bff0 	b.w	800b218 <__sinit_lock_release>
 800b238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b23c:	6523      	str	r3, [r4, #80]	; 0x50
 800b23e:	4b13      	ldr	r3, [pc, #76]	; (800b28c <__sinit+0x68>)
 800b240:	4a13      	ldr	r2, [pc, #76]	; (800b290 <__sinit+0x6c>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	62a2      	str	r2, [r4, #40]	; 0x28
 800b246:	42a3      	cmp	r3, r4
 800b248:	bf08      	it	eq
 800b24a:	2301      	moveq	r3, #1
 800b24c:	4620      	mov	r0, r4
 800b24e:	bf08      	it	eq
 800b250:	61a3      	streq	r3, [r4, #24]
 800b252:	f000 f81f 	bl	800b294 <__sfp>
 800b256:	6060      	str	r0, [r4, #4]
 800b258:	4620      	mov	r0, r4
 800b25a:	f000 f81b 	bl	800b294 <__sfp>
 800b25e:	60a0      	str	r0, [r4, #8]
 800b260:	4620      	mov	r0, r4
 800b262:	f000 f817 	bl	800b294 <__sfp>
 800b266:	2200      	movs	r2, #0
 800b268:	2104      	movs	r1, #4
 800b26a:	60e0      	str	r0, [r4, #12]
 800b26c:	6860      	ldr	r0, [r4, #4]
 800b26e:	f7ff ff81 	bl	800b174 <std>
 800b272:	2201      	movs	r2, #1
 800b274:	2109      	movs	r1, #9
 800b276:	68a0      	ldr	r0, [r4, #8]
 800b278:	f7ff ff7c 	bl	800b174 <std>
 800b27c:	2202      	movs	r2, #2
 800b27e:	2112      	movs	r1, #18
 800b280:	68e0      	ldr	r0, [r4, #12]
 800b282:	f7ff ff77 	bl	800b174 <std>
 800b286:	2301      	movs	r3, #1
 800b288:	61a3      	str	r3, [r4, #24]
 800b28a:	e7d1      	b.n	800b230 <__sinit+0xc>
 800b28c:	0800d290 	.word	0x0800d290
 800b290:	0800b1bd 	.word	0x0800b1bd

0800b294 <__sfp>:
 800b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b296:	4607      	mov	r7, r0
 800b298:	f7ff ffac 	bl	800b1f4 <__sfp_lock_acquire>
 800b29c:	4b1e      	ldr	r3, [pc, #120]	; (800b318 <__sfp+0x84>)
 800b29e:	681e      	ldr	r6, [r3, #0]
 800b2a0:	69b3      	ldr	r3, [r6, #24]
 800b2a2:	b913      	cbnz	r3, 800b2aa <__sfp+0x16>
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	f7ff ffbd 	bl	800b224 <__sinit>
 800b2aa:	3648      	adds	r6, #72	; 0x48
 800b2ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	d503      	bpl.n	800b2bc <__sfp+0x28>
 800b2b4:	6833      	ldr	r3, [r6, #0]
 800b2b6:	b30b      	cbz	r3, 800b2fc <__sfp+0x68>
 800b2b8:	6836      	ldr	r6, [r6, #0]
 800b2ba:	e7f7      	b.n	800b2ac <__sfp+0x18>
 800b2bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2c0:	b9d5      	cbnz	r5, 800b2f8 <__sfp+0x64>
 800b2c2:	4b16      	ldr	r3, [pc, #88]	; (800b31c <__sfp+0x88>)
 800b2c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2c8:	60e3      	str	r3, [r4, #12]
 800b2ca:	6665      	str	r5, [r4, #100]	; 0x64
 800b2cc:	f000 f847 	bl	800b35e <__retarget_lock_init_recursive>
 800b2d0:	f7ff ff96 	bl	800b200 <__sfp_lock_release>
 800b2d4:	2208      	movs	r2, #8
 800b2d6:	4629      	mov	r1, r5
 800b2d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2e0:	6025      	str	r5, [r4, #0]
 800b2e2:	61a5      	str	r5, [r4, #24]
 800b2e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2e8:	f7ff fc68 	bl	800abbc <memset>
 800b2ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2f8:	3468      	adds	r4, #104	; 0x68
 800b2fa:	e7d9      	b.n	800b2b0 <__sfp+0x1c>
 800b2fc:	2104      	movs	r1, #4
 800b2fe:	4638      	mov	r0, r7
 800b300:	f7ff ff62 	bl	800b1c8 <__sfmoreglue>
 800b304:	4604      	mov	r4, r0
 800b306:	6030      	str	r0, [r6, #0]
 800b308:	2800      	cmp	r0, #0
 800b30a:	d1d5      	bne.n	800b2b8 <__sfp+0x24>
 800b30c:	f7ff ff78 	bl	800b200 <__sfp_lock_release>
 800b310:	230c      	movs	r3, #12
 800b312:	603b      	str	r3, [r7, #0]
 800b314:	e7ee      	b.n	800b2f4 <__sfp+0x60>
 800b316:	bf00      	nop
 800b318:	0800d290 	.word	0x0800d290
 800b31c:	ffff0001 	.word	0xffff0001

0800b320 <_fwalk_reent>:
 800b320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b324:	4606      	mov	r6, r0
 800b326:	4688      	mov	r8, r1
 800b328:	2700      	movs	r7, #0
 800b32a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b32e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b332:	f1b9 0901 	subs.w	r9, r9, #1
 800b336:	d505      	bpl.n	800b344 <_fwalk_reent+0x24>
 800b338:	6824      	ldr	r4, [r4, #0]
 800b33a:	2c00      	cmp	r4, #0
 800b33c:	d1f7      	bne.n	800b32e <_fwalk_reent+0xe>
 800b33e:	4638      	mov	r0, r7
 800b340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b344:	89ab      	ldrh	r3, [r5, #12]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d907      	bls.n	800b35a <_fwalk_reent+0x3a>
 800b34a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b34e:	3301      	adds	r3, #1
 800b350:	d003      	beq.n	800b35a <_fwalk_reent+0x3a>
 800b352:	4629      	mov	r1, r5
 800b354:	4630      	mov	r0, r6
 800b356:	47c0      	blx	r8
 800b358:	4307      	orrs	r7, r0
 800b35a:	3568      	adds	r5, #104	; 0x68
 800b35c:	e7e9      	b.n	800b332 <_fwalk_reent+0x12>

0800b35e <__retarget_lock_init_recursive>:
 800b35e:	4770      	bx	lr

0800b360 <__retarget_lock_acquire_recursive>:
 800b360:	4770      	bx	lr

0800b362 <__retarget_lock_release_recursive>:
 800b362:	4770      	bx	lr

0800b364 <__swhatbuf_r>:
 800b364:	b570      	push	{r4, r5, r6, lr}
 800b366:	460e      	mov	r6, r1
 800b368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36c:	4614      	mov	r4, r2
 800b36e:	2900      	cmp	r1, #0
 800b370:	461d      	mov	r5, r3
 800b372:	b096      	sub	sp, #88	; 0x58
 800b374:	da07      	bge.n	800b386 <__swhatbuf_r+0x22>
 800b376:	2300      	movs	r3, #0
 800b378:	602b      	str	r3, [r5, #0]
 800b37a:	89b3      	ldrh	r3, [r6, #12]
 800b37c:	061a      	lsls	r2, r3, #24
 800b37e:	d410      	bmi.n	800b3a2 <__swhatbuf_r+0x3e>
 800b380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b384:	e00e      	b.n	800b3a4 <__swhatbuf_r+0x40>
 800b386:	466a      	mov	r2, sp
 800b388:	f000 fc62 	bl	800bc50 <_fstat_r>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	dbf2      	blt.n	800b376 <__swhatbuf_r+0x12>
 800b390:	9a01      	ldr	r2, [sp, #4]
 800b392:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b396:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b39a:	425a      	negs	r2, r3
 800b39c:	415a      	adcs	r2, r3
 800b39e:	602a      	str	r2, [r5, #0]
 800b3a0:	e7ee      	b.n	800b380 <__swhatbuf_r+0x1c>
 800b3a2:	2340      	movs	r3, #64	; 0x40
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	6023      	str	r3, [r4, #0]
 800b3a8:	b016      	add	sp, #88	; 0x58
 800b3aa:	bd70      	pop	{r4, r5, r6, pc}

0800b3ac <__smakebuf_r>:
 800b3ac:	898b      	ldrh	r3, [r1, #12]
 800b3ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3b0:	079d      	lsls	r5, r3, #30
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	460c      	mov	r4, r1
 800b3b6:	d507      	bpl.n	800b3c8 <__smakebuf_r+0x1c>
 800b3b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3bc:	6023      	str	r3, [r4, #0]
 800b3be:	6123      	str	r3, [r4, #16]
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	6163      	str	r3, [r4, #20]
 800b3c4:	b002      	add	sp, #8
 800b3c6:	bd70      	pop	{r4, r5, r6, pc}
 800b3c8:	466a      	mov	r2, sp
 800b3ca:	ab01      	add	r3, sp, #4
 800b3cc:	f7ff ffca 	bl	800b364 <__swhatbuf_r>
 800b3d0:	9900      	ldr	r1, [sp, #0]
 800b3d2:	4605      	mov	r5, r0
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	f000 f87d 	bl	800b4d4 <_malloc_r>
 800b3da:	b948      	cbnz	r0, 800b3f0 <__smakebuf_r+0x44>
 800b3dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3e0:	059a      	lsls	r2, r3, #22
 800b3e2:	d4ef      	bmi.n	800b3c4 <__smakebuf_r+0x18>
 800b3e4:	f023 0303 	bic.w	r3, r3, #3
 800b3e8:	f043 0302 	orr.w	r3, r3, #2
 800b3ec:	81a3      	strh	r3, [r4, #12]
 800b3ee:	e7e3      	b.n	800b3b8 <__smakebuf_r+0xc>
 800b3f0:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <__smakebuf_r+0x7c>)
 800b3f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	6020      	str	r0, [r4, #0]
 800b3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3fc:	81a3      	strh	r3, [r4, #12]
 800b3fe:	9b00      	ldr	r3, [sp, #0]
 800b400:	6120      	str	r0, [r4, #16]
 800b402:	6163      	str	r3, [r4, #20]
 800b404:	9b01      	ldr	r3, [sp, #4]
 800b406:	b15b      	cbz	r3, 800b420 <__smakebuf_r+0x74>
 800b408:	4630      	mov	r0, r6
 800b40a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b40e:	f000 fc31 	bl	800bc74 <_isatty_r>
 800b412:	b128      	cbz	r0, 800b420 <__smakebuf_r+0x74>
 800b414:	89a3      	ldrh	r3, [r4, #12]
 800b416:	f023 0303 	bic.w	r3, r3, #3
 800b41a:	f043 0301 	orr.w	r3, r3, #1
 800b41e:	81a3      	strh	r3, [r4, #12]
 800b420:	89a0      	ldrh	r0, [r4, #12]
 800b422:	4305      	orrs	r5, r0
 800b424:	81a5      	strh	r5, [r4, #12]
 800b426:	e7cd      	b.n	800b3c4 <__smakebuf_r+0x18>
 800b428:	0800b1bd 	.word	0x0800b1bd

0800b42c <malloc>:
 800b42c:	4b02      	ldr	r3, [pc, #8]	; (800b438 <malloc+0xc>)
 800b42e:	4601      	mov	r1, r0
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	f000 b84f 	b.w	800b4d4 <_malloc_r>
 800b436:	bf00      	nop
 800b438:	20000014 	.word	0x20000014

0800b43c <_free_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4605      	mov	r5, r0
 800b440:	2900      	cmp	r1, #0
 800b442:	d043      	beq.n	800b4cc <_free_r+0x90>
 800b444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b448:	1f0c      	subs	r4, r1, #4
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	bfb8      	it	lt
 800b44e:	18e4      	addlt	r4, r4, r3
 800b450:	f000 fc40 	bl	800bcd4 <__malloc_lock>
 800b454:	4a1e      	ldr	r2, [pc, #120]	; (800b4d0 <_free_r+0x94>)
 800b456:	6813      	ldr	r3, [r2, #0]
 800b458:	4610      	mov	r0, r2
 800b45a:	b933      	cbnz	r3, 800b46a <_free_r+0x2e>
 800b45c:	6063      	str	r3, [r4, #4]
 800b45e:	6014      	str	r4, [r2, #0]
 800b460:	4628      	mov	r0, r5
 800b462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b466:	f000 bc3b 	b.w	800bce0 <__malloc_unlock>
 800b46a:	42a3      	cmp	r3, r4
 800b46c:	d90a      	bls.n	800b484 <_free_r+0x48>
 800b46e:	6821      	ldr	r1, [r4, #0]
 800b470:	1862      	adds	r2, r4, r1
 800b472:	4293      	cmp	r3, r2
 800b474:	bf01      	itttt	eq
 800b476:	681a      	ldreq	r2, [r3, #0]
 800b478:	685b      	ldreq	r3, [r3, #4]
 800b47a:	1852      	addeq	r2, r2, r1
 800b47c:	6022      	streq	r2, [r4, #0]
 800b47e:	6063      	str	r3, [r4, #4]
 800b480:	6004      	str	r4, [r0, #0]
 800b482:	e7ed      	b.n	800b460 <_free_r+0x24>
 800b484:	461a      	mov	r2, r3
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	b10b      	cbz	r3, 800b48e <_free_r+0x52>
 800b48a:	42a3      	cmp	r3, r4
 800b48c:	d9fa      	bls.n	800b484 <_free_r+0x48>
 800b48e:	6811      	ldr	r1, [r2, #0]
 800b490:	1850      	adds	r0, r2, r1
 800b492:	42a0      	cmp	r0, r4
 800b494:	d10b      	bne.n	800b4ae <_free_r+0x72>
 800b496:	6820      	ldr	r0, [r4, #0]
 800b498:	4401      	add	r1, r0
 800b49a:	1850      	adds	r0, r2, r1
 800b49c:	4283      	cmp	r3, r0
 800b49e:	6011      	str	r1, [r2, #0]
 800b4a0:	d1de      	bne.n	800b460 <_free_r+0x24>
 800b4a2:	6818      	ldr	r0, [r3, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	4401      	add	r1, r0
 800b4a8:	6011      	str	r1, [r2, #0]
 800b4aa:	6053      	str	r3, [r2, #4]
 800b4ac:	e7d8      	b.n	800b460 <_free_r+0x24>
 800b4ae:	d902      	bls.n	800b4b6 <_free_r+0x7a>
 800b4b0:	230c      	movs	r3, #12
 800b4b2:	602b      	str	r3, [r5, #0]
 800b4b4:	e7d4      	b.n	800b460 <_free_r+0x24>
 800b4b6:	6820      	ldr	r0, [r4, #0]
 800b4b8:	1821      	adds	r1, r4, r0
 800b4ba:	428b      	cmp	r3, r1
 800b4bc:	bf01      	itttt	eq
 800b4be:	6819      	ldreq	r1, [r3, #0]
 800b4c0:	685b      	ldreq	r3, [r3, #4]
 800b4c2:	1809      	addeq	r1, r1, r0
 800b4c4:	6021      	streq	r1, [r4, #0]
 800b4c6:	6063      	str	r3, [r4, #4]
 800b4c8:	6054      	str	r4, [r2, #4]
 800b4ca:	e7c9      	b.n	800b460 <_free_r+0x24>
 800b4cc:	bd38      	pop	{r3, r4, r5, pc}
 800b4ce:	bf00      	nop
 800b4d0:	200039c0 	.word	0x200039c0

0800b4d4 <_malloc_r>:
 800b4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d6:	1ccd      	adds	r5, r1, #3
 800b4d8:	f025 0503 	bic.w	r5, r5, #3
 800b4dc:	3508      	adds	r5, #8
 800b4de:	2d0c      	cmp	r5, #12
 800b4e0:	bf38      	it	cc
 800b4e2:	250c      	movcc	r5, #12
 800b4e4:	2d00      	cmp	r5, #0
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	db01      	blt.n	800b4ee <_malloc_r+0x1a>
 800b4ea:	42a9      	cmp	r1, r5
 800b4ec:	d903      	bls.n	800b4f6 <_malloc_r+0x22>
 800b4ee:	230c      	movs	r3, #12
 800b4f0:	6033      	str	r3, [r6, #0]
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f6:	f000 fbed 	bl	800bcd4 <__malloc_lock>
 800b4fa:	4921      	ldr	r1, [pc, #132]	; (800b580 <_malloc_r+0xac>)
 800b4fc:	680a      	ldr	r2, [r1, #0]
 800b4fe:	4614      	mov	r4, r2
 800b500:	b99c      	cbnz	r4, 800b52a <_malloc_r+0x56>
 800b502:	4f20      	ldr	r7, [pc, #128]	; (800b584 <_malloc_r+0xb0>)
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	b923      	cbnz	r3, 800b512 <_malloc_r+0x3e>
 800b508:	4621      	mov	r1, r4
 800b50a:	4630      	mov	r0, r6
 800b50c:	f000 fb2a 	bl	800bb64 <_sbrk_r>
 800b510:	6038      	str	r0, [r7, #0]
 800b512:	4629      	mov	r1, r5
 800b514:	4630      	mov	r0, r6
 800b516:	f000 fb25 	bl	800bb64 <_sbrk_r>
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	d123      	bne.n	800b566 <_malloc_r+0x92>
 800b51e:	230c      	movs	r3, #12
 800b520:	4630      	mov	r0, r6
 800b522:	6033      	str	r3, [r6, #0]
 800b524:	f000 fbdc 	bl	800bce0 <__malloc_unlock>
 800b528:	e7e3      	b.n	800b4f2 <_malloc_r+0x1e>
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	1b5b      	subs	r3, r3, r5
 800b52e:	d417      	bmi.n	800b560 <_malloc_r+0x8c>
 800b530:	2b0b      	cmp	r3, #11
 800b532:	d903      	bls.n	800b53c <_malloc_r+0x68>
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	441c      	add	r4, r3
 800b538:	6025      	str	r5, [r4, #0]
 800b53a:	e004      	b.n	800b546 <_malloc_r+0x72>
 800b53c:	6863      	ldr	r3, [r4, #4]
 800b53e:	42a2      	cmp	r2, r4
 800b540:	bf0c      	ite	eq
 800b542:	600b      	streq	r3, [r1, #0]
 800b544:	6053      	strne	r3, [r2, #4]
 800b546:	4630      	mov	r0, r6
 800b548:	f000 fbca 	bl	800bce0 <__malloc_unlock>
 800b54c:	f104 000b 	add.w	r0, r4, #11
 800b550:	1d23      	adds	r3, r4, #4
 800b552:	f020 0007 	bic.w	r0, r0, #7
 800b556:	1ac2      	subs	r2, r0, r3
 800b558:	d0cc      	beq.n	800b4f4 <_malloc_r+0x20>
 800b55a:	1a1b      	subs	r3, r3, r0
 800b55c:	50a3      	str	r3, [r4, r2]
 800b55e:	e7c9      	b.n	800b4f4 <_malloc_r+0x20>
 800b560:	4622      	mov	r2, r4
 800b562:	6864      	ldr	r4, [r4, #4]
 800b564:	e7cc      	b.n	800b500 <_malloc_r+0x2c>
 800b566:	1cc4      	adds	r4, r0, #3
 800b568:	f024 0403 	bic.w	r4, r4, #3
 800b56c:	42a0      	cmp	r0, r4
 800b56e:	d0e3      	beq.n	800b538 <_malloc_r+0x64>
 800b570:	1a21      	subs	r1, r4, r0
 800b572:	4630      	mov	r0, r6
 800b574:	f000 faf6 	bl	800bb64 <_sbrk_r>
 800b578:	3001      	adds	r0, #1
 800b57a:	d1dd      	bne.n	800b538 <_malloc_r+0x64>
 800b57c:	e7cf      	b.n	800b51e <_malloc_r+0x4a>
 800b57e:	bf00      	nop
 800b580:	200039c0 	.word	0x200039c0
 800b584:	200039c4 	.word	0x200039c4

0800b588 <__sfputc_r>:
 800b588:	6893      	ldr	r3, [r2, #8]
 800b58a:	b410      	push	{r4}
 800b58c:	3b01      	subs	r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	6093      	str	r3, [r2, #8]
 800b592:	da07      	bge.n	800b5a4 <__sfputc_r+0x1c>
 800b594:	6994      	ldr	r4, [r2, #24]
 800b596:	42a3      	cmp	r3, r4
 800b598:	db01      	blt.n	800b59e <__sfputc_r+0x16>
 800b59a:	290a      	cmp	r1, #10
 800b59c:	d102      	bne.n	800b5a4 <__sfputc_r+0x1c>
 800b59e:	bc10      	pop	{r4}
 800b5a0:	f7ff bc66 	b.w	800ae70 <__swbuf_r>
 800b5a4:	6813      	ldr	r3, [r2, #0]
 800b5a6:	1c58      	adds	r0, r3, #1
 800b5a8:	6010      	str	r0, [r2, #0]
 800b5aa:	7019      	strb	r1, [r3, #0]
 800b5ac:	4608      	mov	r0, r1
 800b5ae:	bc10      	pop	{r4}
 800b5b0:	4770      	bx	lr

0800b5b2 <__sfputs_r>:
 800b5b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b4:	4606      	mov	r6, r0
 800b5b6:	460f      	mov	r7, r1
 800b5b8:	4614      	mov	r4, r2
 800b5ba:	18d5      	adds	r5, r2, r3
 800b5bc:	42ac      	cmp	r4, r5
 800b5be:	d101      	bne.n	800b5c4 <__sfputs_r+0x12>
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	e007      	b.n	800b5d4 <__sfputs_r+0x22>
 800b5c4:	463a      	mov	r2, r7
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5cc:	f7ff ffdc 	bl	800b588 <__sfputc_r>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	d1f3      	bne.n	800b5bc <__sfputs_r+0xa>
 800b5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5d8 <_vfiprintf_r>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	460d      	mov	r5, r1
 800b5de:	4614      	mov	r4, r2
 800b5e0:	4698      	mov	r8, r3
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	b09d      	sub	sp, #116	; 0x74
 800b5e6:	b118      	cbz	r0, 800b5f0 <_vfiprintf_r+0x18>
 800b5e8:	6983      	ldr	r3, [r0, #24]
 800b5ea:	b90b      	cbnz	r3, 800b5f0 <_vfiprintf_r+0x18>
 800b5ec:	f7ff fe1a 	bl	800b224 <__sinit>
 800b5f0:	4b89      	ldr	r3, [pc, #548]	; (800b818 <_vfiprintf_r+0x240>)
 800b5f2:	429d      	cmp	r5, r3
 800b5f4:	d11b      	bne.n	800b62e <_vfiprintf_r+0x56>
 800b5f6:	6875      	ldr	r5, [r6, #4]
 800b5f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5fa:	07d9      	lsls	r1, r3, #31
 800b5fc:	d405      	bmi.n	800b60a <_vfiprintf_r+0x32>
 800b5fe:	89ab      	ldrh	r3, [r5, #12]
 800b600:	059a      	lsls	r2, r3, #22
 800b602:	d402      	bmi.n	800b60a <_vfiprintf_r+0x32>
 800b604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b606:	f7ff feab 	bl	800b360 <__retarget_lock_acquire_recursive>
 800b60a:	89ab      	ldrh	r3, [r5, #12]
 800b60c:	071b      	lsls	r3, r3, #28
 800b60e:	d501      	bpl.n	800b614 <_vfiprintf_r+0x3c>
 800b610:	692b      	ldr	r3, [r5, #16]
 800b612:	b9eb      	cbnz	r3, 800b650 <_vfiprintf_r+0x78>
 800b614:	4629      	mov	r1, r5
 800b616:	4630      	mov	r0, r6
 800b618:	f7ff fc7c 	bl	800af14 <__swsetup_r>
 800b61c:	b1c0      	cbz	r0, 800b650 <_vfiprintf_r+0x78>
 800b61e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b620:	07dc      	lsls	r4, r3, #31
 800b622:	d50e      	bpl.n	800b642 <_vfiprintf_r+0x6a>
 800b624:	f04f 30ff 	mov.w	r0, #4294967295
 800b628:	b01d      	add	sp, #116	; 0x74
 800b62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62e:	4b7b      	ldr	r3, [pc, #492]	; (800b81c <_vfiprintf_r+0x244>)
 800b630:	429d      	cmp	r5, r3
 800b632:	d101      	bne.n	800b638 <_vfiprintf_r+0x60>
 800b634:	68b5      	ldr	r5, [r6, #8]
 800b636:	e7df      	b.n	800b5f8 <_vfiprintf_r+0x20>
 800b638:	4b79      	ldr	r3, [pc, #484]	; (800b820 <_vfiprintf_r+0x248>)
 800b63a:	429d      	cmp	r5, r3
 800b63c:	bf08      	it	eq
 800b63e:	68f5      	ldreq	r5, [r6, #12]
 800b640:	e7da      	b.n	800b5f8 <_vfiprintf_r+0x20>
 800b642:	89ab      	ldrh	r3, [r5, #12]
 800b644:	0598      	lsls	r0, r3, #22
 800b646:	d4ed      	bmi.n	800b624 <_vfiprintf_r+0x4c>
 800b648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b64a:	f7ff fe8a 	bl	800b362 <__retarget_lock_release_recursive>
 800b64e:	e7e9      	b.n	800b624 <_vfiprintf_r+0x4c>
 800b650:	2300      	movs	r3, #0
 800b652:	9309      	str	r3, [sp, #36]	; 0x24
 800b654:	2320      	movs	r3, #32
 800b656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b65a:	2330      	movs	r3, #48	; 0x30
 800b65c:	f04f 0901 	mov.w	r9, #1
 800b660:	f8cd 800c 	str.w	r8, [sp, #12]
 800b664:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b824 <_vfiprintf_r+0x24c>
 800b668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b66c:	4623      	mov	r3, r4
 800b66e:	469a      	mov	sl, r3
 800b670:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b674:	b10a      	cbz	r2, 800b67a <_vfiprintf_r+0xa2>
 800b676:	2a25      	cmp	r2, #37	; 0x25
 800b678:	d1f9      	bne.n	800b66e <_vfiprintf_r+0x96>
 800b67a:	ebba 0b04 	subs.w	fp, sl, r4
 800b67e:	d00b      	beq.n	800b698 <_vfiprintf_r+0xc0>
 800b680:	465b      	mov	r3, fp
 800b682:	4622      	mov	r2, r4
 800b684:	4629      	mov	r1, r5
 800b686:	4630      	mov	r0, r6
 800b688:	f7ff ff93 	bl	800b5b2 <__sfputs_r>
 800b68c:	3001      	adds	r0, #1
 800b68e:	f000 80aa 	beq.w	800b7e6 <_vfiprintf_r+0x20e>
 800b692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b694:	445a      	add	r2, fp
 800b696:	9209      	str	r2, [sp, #36]	; 0x24
 800b698:	f89a 3000 	ldrb.w	r3, [sl]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 80a2 	beq.w	800b7e6 <_vfiprintf_r+0x20e>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6ac:	f10a 0a01 	add.w	sl, sl, #1
 800b6b0:	9304      	str	r3, [sp, #16]
 800b6b2:	9307      	str	r3, [sp, #28]
 800b6b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6b8:	931a      	str	r3, [sp, #104]	; 0x68
 800b6ba:	4654      	mov	r4, sl
 800b6bc:	2205      	movs	r2, #5
 800b6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c2:	4858      	ldr	r0, [pc, #352]	; (800b824 <_vfiprintf_r+0x24c>)
 800b6c4:	f000 faf8 	bl	800bcb8 <memchr>
 800b6c8:	9a04      	ldr	r2, [sp, #16]
 800b6ca:	b9d8      	cbnz	r0, 800b704 <_vfiprintf_r+0x12c>
 800b6cc:	06d1      	lsls	r1, r2, #27
 800b6ce:	bf44      	itt	mi
 800b6d0:	2320      	movmi	r3, #32
 800b6d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6d6:	0713      	lsls	r3, r2, #28
 800b6d8:	bf44      	itt	mi
 800b6da:	232b      	movmi	r3, #43	; 0x2b
 800b6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e4:	2b2a      	cmp	r3, #42	; 0x2a
 800b6e6:	d015      	beq.n	800b714 <_vfiprintf_r+0x13c>
 800b6e8:	4654      	mov	r4, sl
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	f04f 0c0a 	mov.w	ip, #10
 800b6f0:	9a07      	ldr	r2, [sp, #28]
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f8:	3b30      	subs	r3, #48	; 0x30
 800b6fa:	2b09      	cmp	r3, #9
 800b6fc:	d94e      	bls.n	800b79c <_vfiprintf_r+0x1c4>
 800b6fe:	b1b0      	cbz	r0, 800b72e <_vfiprintf_r+0x156>
 800b700:	9207      	str	r2, [sp, #28]
 800b702:	e014      	b.n	800b72e <_vfiprintf_r+0x156>
 800b704:	eba0 0308 	sub.w	r3, r0, r8
 800b708:	fa09 f303 	lsl.w	r3, r9, r3
 800b70c:	4313      	orrs	r3, r2
 800b70e:	46a2      	mov	sl, r4
 800b710:	9304      	str	r3, [sp, #16]
 800b712:	e7d2      	b.n	800b6ba <_vfiprintf_r+0xe2>
 800b714:	9b03      	ldr	r3, [sp, #12]
 800b716:	1d19      	adds	r1, r3, #4
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	9103      	str	r1, [sp, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	bfbb      	ittet	lt
 800b720:	425b      	neglt	r3, r3
 800b722:	f042 0202 	orrlt.w	r2, r2, #2
 800b726:	9307      	strge	r3, [sp, #28]
 800b728:	9307      	strlt	r3, [sp, #28]
 800b72a:	bfb8      	it	lt
 800b72c:	9204      	strlt	r2, [sp, #16]
 800b72e:	7823      	ldrb	r3, [r4, #0]
 800b730:	2b2e      	cmp	r3, #46	; 0x2e
 800b732:	d10c      	bne.n	800b74e <_vfiprintf_r+0x176>
 800b734:	7863      	ldrb	r3, [r4, #1]
 800b736:	2b2a      	cmp	r3, #42	; 0x2a
 800b738:	d135      	bne.n	800b7a6 <_vfiprintf_r+0x1ce>
 800b73a:	9b03      	ldr	r3, [sp, #12]
 800b73c:	3402      	adds	r4, #2
 800b73e:	1d1a      	adds	r2, r3, #4
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	9203      	str	r2, [sp, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	bfb8      	it	lt
 800b748:	f04f 33ff 	movlt.w	r3, #4294967295
 800b74c:	9305      	str	r3, [sp, #20]
 800b74e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b834 <_vfiprintf_r+0x25c>
 800b752:	2203      	movs	r2, #3
 800b754:	4650      	mov	r0, sl
 800b756:	7821      	ldrb	r1, [r4, #0]
 800b758:	f000 faae 	bl	800bcb8 <memchr>
 800b75c:	b140      	cbz	r0, 800b770 <_vfiprintf_r+0x198>
 800b75e:	2340      	movs	r3, #64	; 0x40
 800b760:	eba0 000a 	sub.w	r0, r0, sl
 800b764:	fa03 f000 	lsl.w	r0, r3, r0
 800b768:	9b04      	ldr	r3, [sp, #16]
 800b76a:	3401      	adds	r4, #1
 800b76c:	4303      	orrs	r3, r0
 800b76e:	9304      	str	r3, [sp, #16]
 800b770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b774:	2206      	movs	r2, #6
 800b776:	482c      	ldr	r0, [pc, #176]	; (800b828 <_vfiprintf_r+0x250>)
 800b778:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b77c:	f000 fa9c 	bl	800bcb8 <memchr>
 800b780:	2800      	cmp	r0, #0
 800b782:	d03f      	beq.n	800b804 <_vfiprintf_r+0x22c>
 800b784:	4b29      	ldr	r3, [pc, #164]	; (800b82c <_vfiprintf_r+0x254>)
 800b786:	bb1b      	cbnz	r3, 800b7d0 <_vfiprintf_r+0x1f8>
 800b788:	9b03      	ldr	r3, [sp, #12]
 800b78a:	3307      	adds	r3, #7
 800b78c:	f023 0307 	bic.w	r3, r3, #7
 800b790:	3308      	adds	r3, #8
 800b792:	9303      	str	r3, [sp, #12]
 800b794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b796:	443b      	add	r3, r7
 800b798:	9309      	str	r3, [sp, #36]	; 0x24
 800b79a:	e767      	b.n	800b66c <_vfiprintf_r+0x94>
 800b79c:	460c      	mov	r4, r1
 800b79e:	2001      	movs	r0, #1
 800b7a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7a4:	e7a5      	b.n	800b6f2 <_vfiprintf_r+0x11a>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f04f 0c0a 	mov.w	ip, #10
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	3401      	adds	r4, #1
 800b7b0:	9305      	str	r3, [sp, #20]
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7b8:	3a30      	subs	r2, #48	; 0x30
 800b7ba:	2a09      	cmp	r2, #9
 800b7bc:	d903      	bls.n	800b7c6 <_vfiprintf_r+0x1ee>
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0c5      	beq.n	800b74e <_vfiprintf_r+0x176>
 800b7c2:	9105      	str	r1, [sp, #20]
 800b7c4:	e7c3      	b.n	800b74e <_vfiprintf_r+0x176>
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7ce:	e7f0      	b.n	800b7b2 <_vfiprintf_r+0x1da>
 800b7d0:	ab03      	add	r3, sp, #12
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	462a      	mov	r2, r5
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	4b15      	ldr	r3, [pc, #84]	; (800b830 <_vfiprintf_r+0x258>)
 800b7da:	a904      	add	r1, sp, #16
 800b7dc:	f3af 8000 	nop.w
 800b7e0:	4607      	mov	r7, r0
 800b7e2:	1c78      	adds	r0, r7, #1
 800b7e4:	d1d6      	bne.n	800b794 <_vfiprintf_r+0x1bc>
 800b7e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7e8:	07d9      	lsls	r1, r3, #31
 800b7ea:	d405      	bmi.n	800b7f8 <_vfiprintf_r+0x220>
 800b7ec:	89ab      	ldrh	r3, [r5, #12]
 800b7ee:	059a      	lsls	r2, r3, #22
 800b7f0:	d402      	bmi.n	800b7f8 <_vfiprintf_r+0x220>
 800b7f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7f4:	f7ff fdb5 	bl	800b362 <__retarget_lock_release_recursive>
 800b7f8:	89ab      	ldrh	r3, [r5, #12]
 800b7fa:	065b      	lsls	r3, r3, #25
 800b7fc:	f53f af12 	bmi.w	800b624 <_vfiprintf_r+0x4c>
 800b800:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b802:	e711      	b.n	800b628 <_vfiprintf_r+0x50>
 800b804:	ab03      	add	r3, sp, #12
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	462a      	mov	r2, r5
 800b80a:	4630      	mov	r0, r6
 800b80c:	4b08      	ldr	r3, [pc, #32]	; (800b830 <_vfiprintf_r+0x258>)
 800b80e:	a904      	add	r1, sp, #16
 800b810:	f000 f882 	bl	800b918 <_printf_i>
 800b814:	e7e4      	b.n	800b7e0 <_vfiprintf_r+0x208>
 800b816:	bf00      	nop
 800b818:	0800d2b4 	.word	0x0800d2b4
 800b81c:	0800d2d4 	.word	0x0800d2d4
 800b820:	0800d294 	.word	0x0800d294
 800b824:	0800d2f4 	.word	0x0800d2f4
 800b828:	0800d2fe 	.word	0x0800d2fe
 800b82c:	00000000 	.word	0x00000000
 800b830:	0800b5b3 	.word	0x0800b5b3
 800b834:	0800d2fa 	.word	0x0800d2fa

0800b838 <_printf_common>:
 800b838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b83c:	4616      	mov	r6, r2
 800b83e:	4699      	mov	r9, r3
 800b840:	688a      	ldr	r2, [r1, #8]
 800b842:	690b      	ldr	r3, [r1, #16]
 800b844:	4607      	mov	r7, r0
 800b846:	4293      	cmp	r3, r2
 800b848:	bfb8      	it	lt
 800b84a:	4613      	movlt	r3, r2
 800b84c:	6033      	str	r3, [r6, #0]
 800b84e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b852:	460c      	mov	r4, r1
 800b854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b858:	b10a      	cbz	r2, 800b85e <_printf_common+0x26>
 800b85a:	3301      	adds	r3, #1
 800b85c:	6033      	str	r3, [r6, #0]
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	0699      	lsls	r1, r3, #26
 800b862:	bf42      	ittt	mi
 800b864:	6833      	ldrmi	r3, [r6, #0]
 800b866:	3302      	addmi	r3, #2
 800b868:	6033      	strmi	r3, [r6, #0]
 800b86a:	6825      	ldr	r5, [r4, #0]
 800b86c:	f015 0506 	ands.w	r5, r5, #6
 800b870:	d106      	bne.n	800b880 <_printf_common+0x48>
 800b872:	f104 0a19 	add.w	sl, r4, #25
 800b876:	68e3      	ldr	r3, [r4, #12]
 800b878:	6832      	ldr	r2, [r6, #0]
 800b87a:	1a9b      	subs	r3, r3, r2
 800b87c:	42ab      	cmp	r3, r5
 800b87e:	dc28      	bgt.n	800b8d2 <_printf_common+0x9a>
 800b880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b884:	1e13      	subs	r3, r2, #0
 800b886:	6822      	ldr	r2, [r4, #0]
 800b888:	bf18      	it	ne
 800b88a:	2301      	movne	r3, #1
 800b88c:	0692      	lsls	r2, r2, #26
 800b88e:	d42d      	bmi.n	800b8ec <_printf_common+0xb4>
 800b890:	4649      	mov	r1, r9
 800b892:	4638      	mov	r0, r7
 800b894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b898:	47c0      	blx	r8
 800b89a:	3001      	adds	r0, #1
 800b89c:	d020      	beq.n	800b8e0 <_printf_common+0xa8>
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	68e5      	ldr	r5, [r4, #12]
 800b8a2:	f003 0306 	and.w	r3, r3, #6
 800b8a6:	2b04      	cmp	r3, #4
 800b8a8:	bf18      	it	ne
 800b8aa:	2500      	movne	r5, #0
 800b8ac:	6832      	ldr	r2, [r6, #0]
 800b8ae:	f04f 0600 	mov.w	r6, #0
 800b8b2:	68a3      	ldr	r3, [r4, #8]
 800b8b4:	bf08      	it	eq
 800b8b6:	1aad      	subeq	r5, r5, r2
 800b8b8:	6922      	ldr	r2, [r4, #16]
 800b8ba:	bf08      	it	eq
 800b8bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	bfc4      	itt	gt
 800b8c4:	1a9b      	subgt	r3, r3, r2
 800b8c6:	18ed      	addgt	r5, r5, r3
 800b8c8:	341a      	adds	r4, #26
 800b8ca:	42b5      	cmp	r5, r6
 800b8cc:	d11a      	bne.n	800b904 <_printf_common+0xcc>
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	e008      	b.n	800b8e4 <_printf_common+0xac>
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	4652      	mov	r2, sl
 800b8d6:	4649      	mov	r1, r9
 800b8d8:	4638      	mov	r0, r7
 800b8da:	47c0      	blx	r8
 800b8dc:	3001      	adds	r0, #1
 800b8de:	d103      	bne.n	800b8e8 <_printf_common+0xb0>
 800b8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e8:	3501      	adds	r5, #1
 800b8ea:	e7c4      	b.n	800b876 <_printf_common+0x3e>
 800b8ec:	2030      	movs	r0, #48	; 0x30
 800b8ee:	18e1      	adds	r1, r4, r3
 800b8f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b8f4:	1c5a      	adds	r2, r3, #1
 800b8f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b8fa:	4422      	add	r2, r4
 800b8fc:	3302      	adds	r3, #2
 800b8fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b902:	e7c5      	b.n	800b890 <_printf_common+0x58>
 800b904:	2301      	movs	r3, #1
 800b906:	4622      	mov	r2, r4
 800b908:	4649      	mov	r1, r9
 800b90a:	4638      	mov	r0, r7
 800b90c:	47c0      	blx	r8
 800b90e:	3001      	adds	r0, #1
 800b910:	d0e6      	beq.n	800b8e0 <_printf_common+0xa8>
 800b912:	3601      	adds	r6, #1
 800b914:	e7d9      	b.n	800b8ca <_printf_common+0x92>
	...

0800b918 <_printf_i>:
 800b918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b91c:	460c      	mov	r4, r1
 800b91e:	7e27      	ldrb	r7, [r4, #24]
 800b920:	4691      	mov	r9, r2
 800b922:	2f78      	cmp	r7, #120	; 0x78
 800b924:	4680      	mov	r8, r0
 800b926:	469a      	mov	sl, r3
 800b928:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b92a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b92e:	d807      	bhi.n	800b940 <_printf_i+0x28>
 800b930:	2f62      	cmp	r7, #98	; 0x62
 800b932:	d80a      	bhi.n	800b94a <_printf_i+0x32>
 800b934:	2f00      	cmp	r7, #0
 800b936:	f000 80d9 	beq.w	800baec <_printf_i+0x1d4>
 800b93a:	2f58      	cmp	r7, #88	; 0x58
 800b93c:	f000 80a4 	beq.w	800ba88 <_printf_i+0x170>
 800b940:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b948:	e03a      	b.n	800b9c0 <_printf_i+0xa8>
 800b94a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b94e:	2b15      	cmp	r3, #21
 800b950:	d8f6      	bhi.n	800b940 <_printf_i+0x28>
 800b952:	a001      	add	r0, pc, #4	; (adr r0, 800b958 <_printf_i+0x40>)
 800b954:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b958:	0800b9b1 	.word	0x0800b9b1
 800b95c:	0800b9c5 	.word	0x0800b9c5
 800b960:	0800b941 	.word	0x0800b941
 800b964:	0800b941 	.word	0x0800b941
 800b968:	0800b941 	.word	0x0800b941
 800b96c:	0800b941 	.word	0x0800b941
 800b970:	0800b9c5 	.word	0x0800b9c5
 800b974:	0800b941 	.word	0x0800b941
 800b978:	0800b941 	.word	0x0800b941
 800b97c:	0800b941 	.word	0x0800b941
 800b980:	0800b941 	.word	0x0800b941
 800b984:	0800bad3 	.word	0x0800bad3
 800b988:	0800b9f5 	.word	0x0800b9f5
 800b98c:	0800bab5 	.word	0x0800bab5
 800b990:	0800b941 	.word	0x0800b941
 800b994:	0800b941 	.word	0x0800b941
 800b998:	0800baf5 	.word	0x0800baf5
 800b99c:	0800b941 	.word	0x0800b941
 800b9a0:	0800b9f5 	.word	0x0800b9f5
 800b9a4:	0800b941 	.word	0x0800b941
 800b9a8:	0800b941 	.word	0x0800b941
 800b9ac:	0800babd 	.word	0x0800babd
 800b9b0:	680b      	ldr	r3, [r1, #0]
 800b9b2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b9b6:	1d1a      	adds	r2, r3, #4
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	600a      	str	r2, [r1, #0]
 800b9bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e0a4      	b.n	800bb0e <_printf_i+0x1f6>
 800b9c4:	6825      	ldr	r5, [r4, #0]
 800b9c6:	6808      	ldr	r0, [r1, #0]
 800b9c8:	062e      	lsls	r6, r5, #24
 800b9ca:	f100 0304 	add.w	r3, r0, #4
 800b9ce:	d50a      	bpl.n	800b9e6 <_printf_i+0xce>
 800b9d0:	6805      	ldr	r5, [r0, #0]
 800b9d2:	600b      	str	r3, [r1, #0]
 800b9d4:	2d00      	cmp	r5, #0
 800b9d6:	da03      	bge.n	800b9e0 <_printf_i+0xc8>
 800b9d8:	232d      	movs	r3, #45	; 0x2d
 800b9da:	426d      	negs	r5, r5
 800b9dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9e0:	230a      	movs	r3, #10
 800b9e2:	485e      	ldr	r0, [pc, #376]	; (800bb5c <_printf_i+0x244>)
 800b9e4:	e019      	b.n	800ba1a <_printf_i+0x102>
 800b9e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b9ea:	6805      	ldr	r5, [r0, #0]
 800b9ec:	600b      	str	r3, [r1, #0]
 800b9ee:	bf18      	it	ne
 800b9f0:	b22d      	sxthne	r5, r5
 800b9f2:	e7ef      	b.n	800b9d4 <_printf_i+0xbc>
 800b9f4:	680b      	ldr	r3, [r1, #0]
 800b9f6:	6825      	ldr	r5, [r4, #0]
 800b9f8:	1d18      	adds	r0, r3, #4
 800b9fa:	6008      	str	r0, [r1, #0]
 800b9fc:	0628      	lsls	r0, r5, #24
 800b9fe:	d501      	bpl.n	800ba04 <_printf_i+0xec>
 800ba00:	681d      	ldr	r5, [r3, #0]
 800ba02:	e002      	b.n	800ba0a <_printf_i+0xf2>
 800ba04:	0669      	lsls	r1, r5, #25
 800ba06:	d5fb      	bpl.n	800ba00 <_printf_i+0xe8>
 800ba08:	881d      	ldrh	r5, [r3, #0]
 800ba0a:	2f6f      	cmp	r7, #111	; 0x6f
 800ba0c:	bf0c      	ite	eq
 800ba0e:	2308      	moveq	r3, #8
 800ba10:	230a      	movne	r3, #10
 800ba12:	4852      	ldr	r0, [pc, #328]	; (800bb5c <_printf_i+0x244>)
 800ba14:	2100      	movs	r1, #0
 800ba16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba1a:	6866      	ldr	r6, [r4, #4]
 800ba1c:	2e00      	cmp	r6, #0
 800ba1e:	bfa8      	it	ge
 800ba20:	6821      	ldrge	r1, [r4, #0]
 800ba22:	60a6      	str	r6, [r4, #8]
 800ba24:	bfa4      	itt	ge
 800ba26:	f021 0104 	bicge.w	r1, r1, #4
 800ba2a:	6021      	strge	r1, [r4, #0]
 800ba2c:	b90d      	cbnz	r5, 800ba32 <_printf_i+0x11a>
 800ba2e:	2e00      	cmp	r6, #0
 800ba30:	d04d      	beq.n	800bace <_printf_i+0x1b6>
 800ba32:	4616      	mov	r6, r2
 800ba34:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba38:	fb03 5711 	mls	r7, r3, r1, r5
 800ba3c:	5dc7      	ldrb	r7, [r0, r7]
 800ba3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba42:	462f      	mov	r7, r5
 800ba44:	42bb      	cmp	r3, r7
 800ba46:	460d      	mov	r5, r1
 800ba48:	d9f4      	bls.n	800ba34 <_printf_i+0x11c>
 800ba4a:	2b08      	cmp	r3, #8
 800ba4c:	d10b      	bne.n	800ba66 <_printf_i+0x14e>
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	07df      	lsls	r7, r3, #31
 800ba52:	d508      	bpl.n	800ba66 <_printf_i+0x14e>
 800ba54:	6923      	ldr	r3, [r4, #16]
 800ba56:	6861      	ldr	r1, [r4, #4]
 800ba58:	4299      	cmp	r1, r3
 800ba5a:	bfde      	ittt	le
 800ba5c:	2330      	movle	r3, #48	; 0x30
 800ba5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba62:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba66:	1b92      	subs	r2, r2, r6
 800ba68:	6122      	str	r2, [r4, #16]
 800ba6a:	464b      	mov	r3, r9
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	4640      	mov	r0, r8
 800ba70:	f8cd a000 	str.w	sl, [sp]
 800ba74:	aa03      	add	r2, sp, #12
 800ba76:	f7ff fedf 	bl	800b838 <_printf_common>
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	d14c      	bne.n	800bb18 <_printf_i+0x200>
 800ba7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba82:	b004      	add	sp, #16
 800ba84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba88:	4834      	ldr	r0, [pc, #208]	; (800bb5c <_printf_i+0x244>)
 800ba8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ba8e:	680e      	ldr	r6, [r1, #0]
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	f856 5b04 	ldr.w	r5, [r6], #4
 800ba96:	061f      	lsls	r7, r3, #24
 800ba98:	600e      	str	r6, [r1, #0]
 800ba9a:	d514      	bpl.n	800bac6 <_printf_i+0x1ae>
 800ba9c:	07d9      	lsls	r1, r3, #31
 800ba9e:	bf44      	itt	mi
 800baa0:	f043 0320 	orrmi.w	r3, r3, #32
 800baa4:	6023      	strmi	r3, [r4, #0]
 800baa6:	b91d      	cbnz	r5, 800bab0 <_printf_i+0x198>
 800baa8:	6823      	ldr	r3, [r4, #0]
 800baaa:	f023 0320 	bic.w	r3, r3, #32
 800baae:	6023      	str	r3, [r4, #0]
 800bab0:	2310      	movs	r3, #16
 800bab2:	e7af      	b.n	800ba14 <_printf_i+0xfc>
 800bab4:	6823      	ldr	r3, [r4, #0]
 800bab6:	f043 0320 	orr.w	r3, r3, #32
 800baba:	6023      	str	r3, [r4, #0]
 800babc:	2378      	movs	r3, #120	; 0x78
 800babe:	4828      	ldr	r0, [pc, #160]	; (800bb60 <_printf_i+0x248>)
 800bac0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bac4:	e7e3      	b.n	800ba8e <_printf_i+0x176>
 800bac6:	065e      	lsls	r6, r3, #25
 800bac8:	bf48      	it	mi
 800baca:	b2ad      	uxthmi	r5, r5
 800bacc:	e7e6      	b.n	800ba9c <_printf_i+0x184>
 800bace:	4616      	mov	r6, r2
 800bad0:	e7bb      	b.n	800ba4a <_printf_i+0x132>
 800bad2:	680b      	ldr	r3, [r1, #0]
 800bad4:	6826      	ldr	r6, [r4, #0]
 800bad6:	1d1d      	adds	r5, r3, #4
 800bad8:	6960      	ldr	r0, [r4, #20]
 800bada:	600d      	str	r5, [r1, #0]
 800badc:	0635      	lsls	r5, r6, #24
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	d501      	bpl.n	800bae6 <_printf_i+0x1ce>
 800bae2:	6018      	str	r0, [r3, #0]
 800bae4:	e002      	b.n	800baec <_printf_i+0x1d4>
 800bae6:	0671      	lsls	r1, r6, #25
 800bae8:	d5fb      	bpl.n	800bae2 <_printf_i+0x1ca>
 800baea:	8018      	strh	r0, [r3, #0]
 800baec:	2300      	movs	r3, #0
 800baee:	4616      	mov	r6, r2
 800baf0:	6123      	str	r3, [r4, #16]
 800baf2:	e7ba      	b.n	800ba6a <_printf_i+0x152>
 800baf4:	680b      	ldr	r3, [r1, #0]
 800baf6:	1d1a      	adds	r2, r3, #4
 800baf8:	600a      	str	r2, [r1, #0]
 800bafa:	681e      	ldr	r6, [r3, #0]
 800bafc:	2100      	movs	r1, #0
 800bafe:	4630      	mov	r0, r6
 800bb00:	6862      	ldr	r2, [r4, #4]
 800bb02:	f000 f8d9 	bl	800bcb8 <memchr>
 800bb06:	b108      	cbz	r0, 800bb0c <_printf_i+0x1f4>
 800bb08:	1b80      	subs	r0, r0, r6
 800bb0a:	6060      	str	r0, [r4, #4]
 800bb0c:	6863      	ldr	r3, [r4, #4]
 800bb0e:	6123      	str	r3, [r4, #16]
 800bb10:	2300      	movs	r3, #0
 800bb12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb16:	e7a8      	b.n	800ba6a <_printf_i+0x152>
 800bb18:	4632      	mov	r2, r6
 800bb1a:	4649      	mov	r1, r9
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	6923      	ldr	r3, [r4, #16]
 800bb20:	47d0      	blx	sl
 800bb22:	3001      	adds	r0, #1
 800bb24:	d0ab      	beq.n	800ba7e <_printf_i+0x166>
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	079b      	lsls	r3, r3, #30
 800bb2a:	d413      	bmi.n	800bb54 <_printf_i+0x23c>
 800bb2c:	68e0      	ldr	r0, [r4, #12]
 800bb2e:	9b03      	ldr	r3, [sp, #12]
 800bb30:	4298      	cmp	r0, r3
 800bb32:	bfb8      	it	lt
 800bb34:	4618      	movlt	r0, r3
 800bb36:	e7a4      	b.n	800ba82 <_printf_i+0x16a>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	4632      	mov	r2, r6
 800bb3c:	4649      	mov	r1, r9
 800bb3e:	4640      	mov	r0, r8
 800bb40:	47d0      	blx	sl
 800bb42:	3001      	adds	r0, #1
 800bb44:	d09b      	beq.n	800ba7e <_printf_i+0x166>
 800bb46:	3501      	adds	r5, #1
 800bb48:	68e3      	ldr	r3, [r4, #12]
 800bb4a:	9903      	ldr	r1, [sp, #12]
 800bb4c:	1a5b      	subs	r3, r3, r1
 800bb4e:	42ab      	cmp	r3, r5
 800bb50:	dcf2      	bgt.n	800bb38 <_printf_i+0x220>
 800bb52:	e7eb      	b.n	800bb2c <_printf_i+0x214>
 800bb54:	2500      	movs	r5, #0
 800bb56:	f104 0619 	add.w	r6, r4, #25
 800bb5a:	e7f5      	b.n	800bb48 <_printf_i+0x230>
 800bb5c:	0800d305 	.word	0x0800d305
 800bb60:	0800d316 	.word	0x0800d316

0800bb64 <_sbrk_r>:
 800bb64:	b538      	push	{r3, r4, r5, lr}
 800bb66:	2300      	movs	r3, #0
 800bb68:	4d05      	ldr	r5, [pc, #20]	; (800bb80 <_sbrk_r+0x1c>)
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	602b      	str	r3, [r5, #0]
 800bb70:	f7f7 f8f2 	bl	8002d58 <_sbrk>
 800bb74:	1c43      	adds	r3, r0, #1
 800bb76:	d102      	bne.n	800bb7e <_sbrk_r+0x1a>
 800bb78:	682b      	ldr	r3, [r5, #0]
 800bb7a:	b103      	cbz	r3, 800bb7e <_sbrk_r+0x1a>
 800bb7c:	6023      	str	r3, [r4, #0]
 800bb7e:	bd38      	pop	{r3, r4, r5, pc}
 800bb80:	20003b74 	.word	0x20003b74

0800bb84 <__sread>:
 800bb84:	b510      	push	{r4, lr}
 800bb86:	460c      	mov	r4, r1
 800bb88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb8c:	f000 f8ae 	bl	800bcec <_read_r>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	bfab      	itete	ge
 800bb94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb96:	89a3      	ldrhlt	r3, [r4, #12]
 800bb98:	181b      	addge	r3, r3, r0
 800bb9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb9e:	bfac      	ite	ge
 800bba0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bba2:	81a3      	strhlt	r3, [r4, #12]
 800bba4:	bd10      	pop	{r4, pc}

0800bba6 <__swrite>:
 800bba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbaa:	461f      	mov	r7, r3
 800bbac:	898b      	ldrh	r3, [r1, #12]
 800bbae:	4605      	mov	r5, r0
 800bbb0:	05db      	lsls	r3, r3, #23
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	4616      	mov	r6, r2
 800bbb6:	d505      	bpl.n	800bbc4 <__swrite+0x1e>
 800bbb8:	2302      	movs	r3, #2
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbc0:	f000 f868 	bl	800bc94 <_lseek_r>
 800bbc4:	89a3      	ldrh	r3, [r4, #12]
 800bbc6:	4632      	mov	r2, r6
 800bbc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbcc:	81a3      	strh	r3, [r4, #12]
 800bbce:	4628      	mov	r0, r5
 800bbd0:	463b      	mov	r3, r7
 800bbd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbda:	f000 b817 	b.w	800bc0c <_write_r>

0800bbde <__sseek>:
 800bbde:	b510      	push	{r4, lr}
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe6:	f000 f855 	bl	800bc94 <_lseek_r>
 800bbea:	1c43      	adds	r3, r0, #1
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	bf15      	itete	ne
 800bbf0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbfa:	81a3      	strheq	r3, [r4, #12]
 800bbfc:	bf18      	it	ne
 800bbfe:	81a3      	strhne	r3, [r4, #12]
 800bc00:	bd10      	pop	{r4, pc}

0800bc02 <__sclose>:
 800bc02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc06:	f000 b813 	b.w	800bc30 <_close_r>
	...

0800bc0c <_write_r>:
 800bc0c:	b538      	push	{r3, r4, r5, lr}
 800bc0e:	4604      	mov	r4, r0
 800bc10:	4608      	mov	r0, r1
 800bc12:	4611      	mov	r1, r2
 800bc14:	2200      	movs	r2, #0
 800bc16:	4d05      	ldr	r5, [pc, #20]	; (800bc2c <_write_r+0x20>)
 800bc18:	602a      	str	r2, [r5, #0]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	f7f6 fe50 	bl	80028c0 <_write>
 800bc20:	1c43      	adds	r3, r0, #1
 800bc22:	d102      	bne.n	800bc2a <_write_r+0x1e>
 800bc24:	682b      	ldr	r3, [r5, #0]
 800bc26:	b103      	cbz	r3, 800bc2a <_write_r+0x1e>
 800bc28:	6023      	str	r3, [r4, #0]
 800bc2a:	bd38      	pop	{r3, r4, r5, pc}
 800bc2c:	20003b74 	.word	0x20003b74

0800bc30 <_close_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	2300      	movs	r3, #0
 800bc34:	4d05      	ldr	r5, [pc, #20]	; (800bc4c <_close_r+0x1c>)
 800bc36:	4604      	mov	r4, r0
 800bc38:	4608      	mov	r0, r1
 800bc3a:	602b      	str	r3, [r5, #0]
 800bc3c:	f7f6 fe6c 	bl	8002918 <_close>
 800bc40:	1c43      	adds	r3, r0, #1
 800bc42:	d102      	bne.n	800bc4a <_close_r+0x1a>
 800bc44:	682b      	ldr	r3, [r5, #0]
 800bc46:	b103      	cbz	r3, 800bc4a <_close_r+0x1a>
 800bc48:	6023      	str	r3, [r4, #0]
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}
 800bc4c:	20003b74 	.word	0x20003b74

0800bc50 <_fstat_r>:
 800bc50:	b538      	push	{r3, r4, r5, lr}
 800bc52:	2300      	movs	r3, #0
 800bc54:	4d06      	ldr	r5, [pc, #24]	; (800bc70 <_fstat_r+0x20>)
 800bc56:	4604      	mov	r4, r0
 800bc58:	4608      	mov	r0, r1
 800bc5a:	4611      	mov	r1, r2
 800bc5c:	602b      	str	r3, [r5, #0]
 800bc5e:	f7f6 feab 	bl	80029b8 <_fstat>
 800bc62:	1c43      	adds	r3, r0, #1
 800bc64:	d102      	bne.n	800bc6c <_fstat_r+0x1c>
 800bc66:	682b      	ldr	r3, [r5, #0]
 800bc68:	b103      	cbz	r3, 800bc6c <_fstat_r+0x1c>
 800bc6a:	6023      	str	r3, [r4, #0]
 800bc6c:	bd38      	pop	{r3, r4, r5, pc}
 800bc6e:	bf00      	nop
 800bc70:	20003b74 	.word	0x20003b74

0800bc74 <_isatty_r>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	2300      	movs	r3, #0
 800bc78:	4d05      	ldr	r5, [pc, #20]	; (800bc90 <_isatty_r+0x1c>)
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	4608      	mov	r0, r1
 800bc7e:	602b      	str	r3, [r5, #0]
 800bc80:	f7f6 fe08 	bl	8002894 <_isatty>
 800bc84:	1c43      	adds	r3, r0, #1
 800bc86:	d102      	bne.n	800bc8e <_isatty_r+0x1a>
 800bc88:	682b      	ldr	r3, [r5, #0]
 800bc8a:	b103      	cbz	r3, 800bc8e <_isatty_r+0x1a>
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	bd38      	pop	{r3, r4, r5, pc}
 800bc90:	20003b74 	.word	0x20003b74

0800bc94 <_lseek_r>:
 800bc94:	b538      	push	{r3, r4, r5, lr}
 800bc96:	4604      	mov	r4, r0
 800bc98:	4608      	mov	r0, r1
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	4d05      	ldr	r5, [pc, #20]	; (800bcb4 <_lseek_r+0x20>)
 800bca0:	602a      	str	r2, [r5, #0]
 800bca2:	461a      	mov	r2, r3
 800bca4:	f7f6 fe4f 	bl	8002946 <_lseek>
 800bca8:	1c43      	adds	r3, r0, #1
 800bcaa:	d102      	bne.n	800bcb2 <_lseek_r+0x1e>
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	b103      	cbz	r3, 800bcb2 <_lseek_r+0x1e>
 800bcb0:	6023      	str	r3, [r4, #0]
 800bcb2:	bd38      	pop	{r3, r4, r5, pc}
 800bcb4:	20003b74 	.word	0x20003b74

0800bcb8 <memchr>:
 800bcb8:	4603      	mov	r3, r0
 800bcba:	b510      	push	{r4, lr}
 800bcbc:	b2c9      	uxtb	r1, r1
 800bcbe:	4402      	add	r2, r0
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	d101      	bne.n	800bcca <memchr+0x12>
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	e003      	b.n	800bcd2 <memchr+0x1a>
 800bcca:	7804      	ldrb	r4, [r0, #0]
 800bccc:	3301      	adds	r3, #1
 800bcce:	428c      	cmp	r4, r1
 800bcd0:	d1f6      	bne.n	800bcc0 <memchr+0x8>
 800bcd2:	bd10      	pop	{r4, pc}

0800bcd4 <__malloc_lock>:
 800bcd4:	4801      	ldr	r0, [pc, #4]	; (800bcdc <__malloc_lock+0x8>)
 800bcd6:	f7ff bb43 	b.w	800b360 <__retarget_lock_acquire_recursive>
 800bcda:	bf00      	nop
 800bcdc:	20003b6c 	.word	0x20003b6c

0800bce0 <__malloc_unlock>:
 800bce0:	4801      	ldr	r0, [pc, #4]	; (800bce8 <__malloc_unlock+0x8>)
 800bce2:	f7ff bb3e 	b.w	800b362 <__retarget_lock_release_recursive>
 800bce6:	bf00      	nop
 800bce8:	20003b6c 	.word	0x20003b6c

0800bcec <_read_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	4604      	mov	r4, r0
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	4d05      	ldr	r5, [pc, #20]	; (800bd0c <_read_r+0x20>)
 800bcf8:	602a      	str	r2, [r5, #0]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	f7f6 fe34 	bl	8002968 <_read>
 800bd00:	1c43      	adds	r3, r0, #1
 800bd02:	d102      	bne.n	800bd0a <_read_r+0x1e>
 800bd04:	682b      	ldr	r3, [r5, #0]
 800bd06:	b103      	cbz	r3, 800bd0a <_read_r+0x1e>
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	bd38      	pop	{r3, r4, r5, pc}
 800bd0c:	20003b74 	.word	0x20003b74

0800bd10 <_init>:
 800bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd12:	bf00      	nop
 800bd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd16:	bc08      	pop	{r3}
 800bd18:	469e      	mov	lr, r3
 800bd1a:	4770      	bx	lr

0800bd1c <_fini>:
 800bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1e:	bf00      	nop
 800bd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd22:	bc08      	pop	{r3}
 800bd24:	469e      	mov	lr, r3
 800bd26:	4770      	bx	lr
