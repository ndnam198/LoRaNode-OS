
LoRaNodeUsingRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b978  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000161c  0800ba88  0800ba88  0001ba88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0a4  0800d0a4  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800d0a4  0800d0a4  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d0a4  0800d0a4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0a4  0800d0a4  0001d0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0a8  0800d0a8  0001d0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d0ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003af8  20000098  0800d140  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003b90  0800d140  00023b90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027436  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005387  00000000  00000000  000474f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c00  00000000  00000000  0004c880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b8  00000000  00000000  0004e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008636  00000000  00000000  0004fe38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000284bc  00000000  00000000  0005846e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a17ed  00000000  00000000  0008092a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122117  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b1c  00000000  00000000  0012216c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ba70 	.word	0x0800ba70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	0800ba70 	.word	0x0800ba70

08000150 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b18      	ldr	r3, [pc, #96]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000162:	4a19      	ldr	r2, [pc, #100]	; (80001c8 <MX_ADC1_Init+0x78>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000166:	4b17      	ldr	r3, [pc, #92]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000168:	2200      	movs	r2, #0
 800016a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016c:	4b15      	ldr	r3, [pc, #84]	; (80001c4 <MX_ADC1_Init+0x74>)
 800016e:	2200      	movs	r2, #0
 8000170:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000172:	4b14      	ldr	r3, [pc, #80]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000178:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <MX_ADC1_Init+0x74>)
 800017a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000180:	4b10      	ldr	r3, [pc, #64]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000186:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000188:	2201      	movs	r2, #1
 800018a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018c:	480d      	ldr	r0, [pc, #52]	; (80001c4 <MX_ADC1_Init+0x74>)
 800018e:	f002 fe45 	bl	8002e1c <HAL_ADC_Init>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d001      	beq.n	800019c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000198:	f002 f9f2 	bl	8002580 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019c:	2300      	movs	r3, #0
 800019e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a0:	2301      	movs	r3, #1
 80001a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001a4:	2307      	movs	r3, #7
 80001a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	4619      	mov	r1, r3
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <MX_ADC1_Init+0x74>)
 80001ae:	f003 f983 	bl	80034b8 <HAL_ADC_ConfigChannel>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b8:	f002 f9e2 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001bc:	bf00      	nop
 80001be:	3710      	adds	r7, #16
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	200039e8 	.word	0x200039e8
 80001c8:	40012400 	.word	0x40012400

080001cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a18      	ldr	r2, [pc, #96]	; (8000248 <HAL_ADC_MspInit+0x7c>)
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d129      	bne.n	8000240 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001ec:	4b17      	ldr	r3, [pc, #92]	; (800024c <HAL_ADC_MspInit+0x80>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a16      	ldr	r2, [pc, #88]	; (800024c <HAL_ADC_MspInit+0x80>)
 80001f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b14      	ldr	r3, [pc, #80]	; (800024c <HAL_ADC_MspInit+0x80>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000204:	4b11      	ldr	r3, [pc, #68]	; (800024c <HAL_ADC_MspInit+0x80>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a10      	ldr	r2, [pc, #64]	; (800024c <HAL_ADC_MspInit+0x80>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	6193      	str	r3, [r2, #24]
 8000210:	4b0e      	ldr	r3, [pc, #56]	; (800024c <HAL_ADC_MspInit+0x80>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f003 0304 	and.w	r3, r3, #4
 8000218:	60bb      	str	r3, [r7, #8]
 800021a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LIGHT_SENSOR_OUTPUT_Pin;
 800021c:	2301      	movs	r3, #1
 800021e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000220:	2303      	movs	r3, #3
 8000222:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LIGHT_SENSOR_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <HAL_ADC_MspInit+0x84>)
 800022c:	f003 ff84 	bl	8004138 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	2105      	movs	r1, #5
 8000234:	2012      	movs	r0, #18
 8000236:	f003 fc63 	bl	8003b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800023a:	2012      	movs	r0, #18
 800023c:	f003 fc8c 	bl	8003b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000240:	bf00      	nop
 8000242:	3720      	adds	r7, #32
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40012400 	.word	0x40012400
 800024c:	40021000 	.word	0x40021000
 8000250:	40010800 	.word	0x40010800

08000254 <Flash_WriteWord>:
#include "flash.h"
#include "stm_log.h"

HAL_StatusTypeDef Flash_WriteWord(uint32_t start_address, uint32_t data)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b08a      	sub	sp, #40	; 0x28
 8000258:	af06      	add	r7, sp, #24
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	6039      	str	r1, [r7, #0]
    if (Flash_ReadAddress(start_address) != -1)
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f000 f850 	bl	8000304 <Flash_ReadAddress>
 8000264:	4603      	mov	r3, r0
 8000266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800026a:	d001      	beq.n	8000270 <Flash_WriteWord+0x1c>
        return HAL_ERROR;
 800026c:	2301      	movs	r3, #1
 800026e:	e03d      	b.n	80002ec <Flash_WriteWord+0x98>
    // /* Erase Flash based on initialize struct */
    // HAL_StatusTypeDef err = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
    // if (err != HAL_OK) {
    //     return flash_status;
    // }
    STM_LOGV("Flash", "write data to 0x%x: 0x%x - dec: %d", start_address, data, data);
 8000270:	f002 fda6 	bl	8002dc0 <HAL_GetTick>
 8000274:	4602      	mov	r2, r0
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	9305      	str	r3, [sp, #20]
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	9304      	str	r3, [sp, #16]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	9303      	str	r3, [sp, #12]
 8000282:	2315      	movs	r3, #21
 8000284:	9302      	str	r3, [sp, #8]
 8000286:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <Flash_WriteWord+0xa0>)
 8000288:	9301      	str	r3, [sp, #4]
 800028a:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <Flash_WriteWord+0xa4>)
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	4613      	mov	r3, r2
 8000290:	4a1a      	ldr	r2, [pc, #104]	; (80002fc <Flash_WriteWord+0xa8>)
 8000292:	4919      	ldr	r1, [pc, #100]	; (80002f8 <Flash_WriteWord+0xa4>)
 8000294:	2005      	movs	r0, #5
 8000296:	f002 fc7b 	bl	8002b90 <stm_log_write>
    HAL_FLASH_Unlock();
 800029a:	f003 fd25 	bl	8003ce8 <HAL_FLASH_Unlock>
    HAL_StatusTypeDef err = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_address, data);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	461a      	mov	r2, r3
 80002a2:	f04f 0300 	mov.w	r3, #0
 80002a6:	6879      	ldr	r1, [r7, #4]
 80002a8:	2002      	movs	r0, #2
 80002aa:	f003 fc6d 	bl	8003b88 <HAL_FLASH_Program>
 80002ae:	4603      	mov	r3, r0
 80002b0:	73fb      	strb	r3, [r7, #15]
    HAL_FLASH_Lock();
 80002b2:	f003 fd3f 	bl	8003d34 <HAL_FLASH_Lock>
    FLASH_READ(start_address);
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f000 f824 	bl	8000304 <Flash_ReadAddress>
 80002bc:	4603      	mov	r3, r0
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	f002 fd7e 	bl	8002dc0 <HAL_GetTick>
 80002c4:	4602      	mov	r2, r0
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	9305      	str	r3, [sp, #20]
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	9304      	str	r3, [sp, #16]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	9303      	str	r3, [sp, #12]
 80002d2:	2319      	movs	r3, #25
 80002d4:	9302      	str	r3, [sp, #8]
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <Flash_WriteWord+0xa0>)
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <Flash_WriteWord+0xa4>)
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	4613      	mov	r3, r2
 80002e0:	4a07      	ldr	r2, [pc, #28]	; (8000300 <Flash_WriteWord+0xac>)
 80002e2:	4905      	ldr	r1, [pc, #20]	; (80002f8 <Flash_WriteWord+0xa4>)
 80002e4:	2005      	movs	r0, #5
 80002e6:	f002 fc53 	bl	8002b90 <stm_log_write>
    return err;
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	0800cde8 	.word	0x0800cde8
 80002f8:	0800bac8 	.word	0x0800bac8
 80002fc:	0800ba88 	.word	0x0800ba88
 8000300:	0800bad0 	.word	0x0800bad0

08000304 <Flash_ReadAddress>:

int Flash_ReadAddress(uint32_t flash_address)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
    return *(volatile int*)(flash_address);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
}
 8000310:	4618      	mov	r0, r3
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
	...

0800031c <Flash_ErasePage>:
        return -1;
    }
}

HAL_StatusTypeDef Flash_ErasePage(uint32_t start_address, uint32_t nb_of_delete_pages)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08c      	sub	sp, #48	; 0x30
 8000320:	af04      	add	r7, sp, #16
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef EraseInitStruct = { 0 };
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
    uint32_t PageError = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	60bb      	str	r3, [r7, #8]

    HAL_FLASH_Unlock();
 8000338:	f003 fcd6 	bl	8003ce8 <HAL_FLASH_Unlock>

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.PageAddress = start_address;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbPages = nb_of_delete_pages;
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	61bb      	str	r3, [r7, #24]

    HAL_StatusTypeDef err = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000348:	f107 0208 	add.w	r2, r7, #8
 800034c:	f107 030c 	add.w	r3, r7, #12
 8000350:	4611      	mov	r1, r2
 8000352:	4618      	mov	r0, r3
 8000354:	f003 fdb0 	bl	8003eb8 <HAL_FLASHEx_Erase>
 8000358:	4603      	mov	r3, r0
 800035a:	77fb      	strb	r3, [r7, #31]
    if (PageError != 0xFFFFFFFF) {
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000362:	d010      	beq.n	8000386 <Flash_ErasePage+0x6a>
        STM_LOGE("Flash", "PageError != 0xFFFFFFFF, %d", PageError);
 8000364:	f002 fd2c 	bl	8002dc0 <HAL_GetTick>
 8000368:	4602      	mov	r2, r0
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	9303      	str	r3, [sp, #12]
 800036e:	233a      	movs	r3, #58	; 0x3a
 8000370:	9302      	str	r3, [sp, #8]
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <Flash_ErasePage+0x78>)
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <Flash_ErasePage+0x7c>)
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	4613      	mov	r3, r2
 800037c:	4a07      	ldr	r2, [pc, #28]	; (800039c <Flash_ErasePage+0x80>)
 800037e:	4906      	ldr	r1, [pc, #24]	; (8000398 <Flash_ErasePage+0x7c>)
 8000380:	2001      	movs	r0, #1
 8000382:	f002 fc05 	bl	8002b90 <stm_log_write>
    }

    HAL_FLASH_Lock();
 8000386:	f003 fcd5 	bl	8003d34 <HAL_FLASH_Lock>
    return err;
 800038a:	7ffb      	ldrb	r3, [r7, #31]
}
 800038c:	4618      	mov	r0, r3
 800038e:	3720      	adds	r7, #32
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	0800cdf8 	.word	0x0800cdf8
 8000398:	0800bac8 	.word	0x0800bac8
 800039c:	0800bb0c 	.word	0x0800bb0c

080003a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003a4:	f3bf 8f4f 	dsb	sy
}
 80003a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <__NVIC_SystemReset+0x24>)
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80003b2:	4904      	ldr	r1, [pc, #16]	; (80003c4 <__NVIC_SystemReset+0x24>)
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <__NVIC_SystemReset+0x28>)
 80003b6:	4313      	orrs	r3, r2
 80003b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80003ba:	f3bf 8f4f 	dsb	sy
}
 80003be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <__NVIC_SystemReset+0x20>
 80003c4:	e000ed00 	.word	0xe000ed00
 80003c8:	05fa0004 	.word	0x05fa0004

080003cc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0

}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return 0;
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
	...

080003e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af04      	add	r7, sp, #16

  /* USER CODE END Init */

  /* Create the recursive mutex(es) */
  /* creation of nodedataMutex */
  nodedataMutexHandle = osMutexNew(&nodedataMutex_attributes);
 80003ee:	4850      	ldr	r0, [pc, #320]	; (8000530 <MX_FREERTOS_Init+0x148>)
 80003f0:	f006 fdf2 	bl	8006fd8 <osMutexNew>
 80003f4:	4603      	mov	r3, r0
 80003f6:	4a4f      	ldr	r2, [pc, #316]	; (8000534 <MX_FREERTOS_Init+0x14c>)
 80003f8:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of rxDoneSemaphore */
  rxDoneSemaphoreHandle = osSemaphoreNew(5, 0, &rxDoneSemaphore_attributes);
 80003fa:	4a4f      	ldr	r2, [pc, #316]	; (8000538 <MX_FREERTOS_Init+0x150>)
 80003fc:	2100      	movs	r1, #0
 80003fe:	2005      	movs	r0, #5
 8000400:	f006 fe84 	bl	800710c <osSemaphoreNew>
 8000404:	4603      	mov	r3, r0
 8000406:	4a4d      	ldr	r2, [pc, #308]	; (800053c <MX_FREERTOS_Init+0x154>)
 8000408:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  if (rxDoneSemaphoreHandle == NULL)
 800040a:	4b4c      	ldr	r3, [pc, #304]	; (800053c <MX_FREERTOS_Init+0x154>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d10d      	bne.n	800042e <MX_FREERTOS_Init+0x46>
    STM_LOGE("ERROR", "create rxDoneSemaphoreHandle failed");
 8000412:	f002 fcd5 	bl	8002dc0 <HAL_GetTick>
 8000416:	4603      	mov	r3, r0
 8000418:	22a0      	movs	r2, #160	; 0xa0
 800041a:	9202      	str	r2, [sp, #8]
 800041c:	4a48      	ldr	r2, [pc, #288]	; (8000540 <MX_FREERTOS_Init+0x158>)
 800041e:	9201      	str	r2, [sp, #4]
 8000420:	4a48      	ldr	r2, [pc, #288]	; (8000544 <MX_FREERTOS_Init+0x15c>)
 8000422:	9200      	str	r2, [sp, #0]
 8000424:	4a48      	ldr	r2, [pc, #288]	; (8000548 <MX_FREERTOS_Init+0x160>)
 8000426:	4947      	ldr	r1, [pc, #284]	; (8000544 <MX_FREERTOS_Init+0x15c>)
 8000428:	2001      	movs	r0, #1
 800042a:	f002 fbb1 	bl	8002b90 <stm_log_write>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (10, 10, &myQueue01_attributes);
 800042e:	4a47      	ldr	r2, [pc, #284]	; (800054c <MX_FREERTOS_Init+0x164>)
 8000430:	210a      	movs	r1, #10
 8000432:	200a      	movs	r0, #10
 8000434:	f006 ffc4 	bl	80073c0 <osMessageQueueNew>
 8000438:	4603      	mov	r3, r0
 800043a:	4a45      	ldr	r2, [pc, #276]	; (8000550 <MX_FREERTOS_Init+0x168>)
 800043c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  if (myQueue01Handle == NULL)
 800043e:	4b44      	ldr	r3, [pc, #272]	; (8000550 <MX_FREERTOS_Init+0x168>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d10d      	bne.n	8000462 <MX_FREERTOS_Init+0x7a>
    STM_LOGE("ERROR", "create myQueue01Handle failed");
 8000446:	f002 fcbb 	bl	8002dc0 <HAL_GetTick>
 800044a:	4603      	mov	r3, r0
 800044c:	22ac      	movs	r2, #172	; 0xac
 800044e:	9202      	str	r2, [sp, #8]
 8000450:	4a3b      	ldr	r2, [pc, #236]	; (8000540 <MX_FREERTOS_Init+0x158>)
 8000452:	9201      	str	r2, [sp, #4]
 8000454:	4a3b      	ldr	r2, [pc, #236]	; (8000544 <MX_FREERTOS_Init+0x15c>)
 8000456:	9200      	str	r2, [sp, #0]
 8000458:	4a3e      	ldr	r2, [pc, #248]	; (8000554 <MX_FREERTOS_Init+0x16c>)
 800045a:	493a      	ldr	r1, [pc, #232]	; (8000544 <MX_FREERTOS_Init+0x15c>)
 800045c:	2001      	movs	r0, #1
 800045e:	f002 fb97 	bl	8002b90 <stm_log_write>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000462:	4a3d      	ldr	r2, [pc, #244]	; (8000558 <MX_FREERTOS_Init+0x170>)
 8000464:	2100      	movs	r1, #0
 8000466:	483d      	ldr	r0, [pc, #244]	; (800055c <MX_FREERTOS_Init+0x174>)
 8000468:	f006 fcde 	bl	8006e28 <osThreadNew>
 800046c:	4603      	mov	r3, r0
 800046e:	4a3c      	ldr	r2, [pc, #240]	; (8000560 <MX_FREERTOS_Init+0x178>)
 8000470:	6013      	str	r3, [r2, #0]

  /* creation of taskProducer */
  taskProducerHandle = osThreadNew(entryProducer, NULL, &taskProducer_attributes);
 8000472:	4a3c      	ldr	r2, [pc, #240]	; (8000564 <MX_FREERTOS_Init+0x17c>)
 8000474:	2100      	movs	r1, #0
 8000476:	483c      	ldr	r0, [pc, #240]	; (8000568 <MX_FREERTOS_Init+0x180>)
 8000478:	f006 fcd6 	bl	8006e28 <osThreadNew>
 800047c:	4603      	mov	r3, r0
 800047e:	4a3b      	ldr	r2, [pc, #236]	; (800056c <MX_FREERTOS_Init+0x184>)
 8000480:	6013      	str	r3, [r2, #0]

  /* creation of taskConsumer */
  taskConsumerHandle = osThreadNew(entryConsumer, NULL, &taskConsumer_attributes);
 8000482:	4a3b      	ldr	r2, [pc, #236]	; (8000570 <MX_FREERTOS_Init+0x188>)
 8000484:	2100      	movs	r1, #0
 8000486:	483b      	ldr	r0, [pc, #236]	; (8000574 <MX_FREERTOS_Init+0x18c>)
 8000488:	f006 fcce 	bl	8006e28 <osThreadNew>
 800048c:	4603      	mov	r3, r0
 800048e:	4a3a      	ldr	r2, [pc, #232]	; (8000578 <MX_FREERTOS_Init+0x190>)
 8000490:	6013      	str	r3, [r2, #0]

  /* creation of taskPeriodic */
  taskPeriodicHandle = osThreadNew(entryPeriodic, NULL, &taskPeriodic_attributes);
 8000492:	4a3a      	ldr	r2, [pc, #232]	; (800057c <MX_FREERTOS_Init+0x194>)
 8000494:	2100      	movs	r1, #0
 8000496:	483a      	ldr	r0, [pc, #232]	; (8000580 <MX_FREERTOS_Init+0x198>)
 8000498:	f006 fcc6 	bl	8006e28 <osThreadNew>
 800049c:	4603      	mov	r3, r0
 800049e:	4a39      	ldr	r2, [pc, #228]	; (8000584 <MX_FREERTOS_Init+0x19c>)
 80004a0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  if (taskProducerHandle == NULL)
 80004a2:	4b32      	ldr	r3, [pc, #200]	; (800056c <MX_FREERTOS_Init+0x184>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d10d      	bne.n	80004c6 <MX_FREERTOS_Init+0xde>
    STM_LOGE("ERROR", "create taskProducerHandle failed");
 80004aa:	f002 fc89 	bl	8002dc0 <HAL_GetTick>
 80004ae:	4603      	mov	r3, r0
 80004b0:	22bf      	movs	r2, #191	; 0xbf
 80004b2:	9202      	str	r2, [sp, #8]
 80004b4:	4a22      	ldr	r2, [pc, #136]	; (8000540 <MX_FREERTOS_Init+0x158>)
 80004b6:	9201      	str	r2, [sp, #4]
 80004b8:	4a22      	ldr	r2, [pc, #136]	; (8000544 <MX_FREERTOS_Init+0x15c>)
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	4a32      	ldr	r2, [pc, #200]	; (8000588 <MX_FREERTOS_Init+0x1a0>)
 80004be:	4921      	ldr	r1, [pc, #132]	; (8000544 <MX_FREERTOS_Init+0x15c>)
 80004c0:	2001      	movs	r0, #1
 80004c2:	f002 fb65 	bl	8002b90 <stm_log_write>
  if (taskConsumerHandle == NULL)
 80004c6:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <MX_FREERTOS_Init+0x190>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10d      	bne.n	80004ea <MX_FREERTOS_Init+0x102>
    STM_LOGE("ERROR", "create taskConsumerHandle failed");
 80004ce:	f002 fc77 	bl	8002dc0 <HAL_GetTick>
 80004d2:	4603      	mov	r3, r0
 80004d4:	22c1      	movs	r2, #193	; 0xc1
 80004d6:	9202      	str	r2, [sp, #8]
 80004d8:	4a19      	ldr	r2, [pc, #100]	; (8000540 <MX_FREERTOS_Init+0x158>)
 80004da:	9201      	str	r2, [sp, #4]
 80004dc:	4a19      	ldr	r2, [pc, #100]	; (8000544 <MX_FREERTOS_Init+0x15c>)
 80004de:	9200      	str	r2, [sp, #0]
 80004e0:	4a2a      	ldr	r2, [pc, #168]	; (800058c <MX_FREERTOS_Init+0x1a4>)
 80004e2:	4918      	ldr	r1, [pc, #96]	; (8000544 <MX_FREERTOS_Init+0x15c>)
 80004e4:	2001      	movs	r0, #1
 80004e6:	f002 fb53 	bl	8002b90 <stm_log_write>
  if (taskPeriodicHandle == NULL)
 80004ea:	4b26      	ldr	r3, [pc, #152]	; (8000584 <MX_FREERTOS_Init+0x19c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d10d      	bne.n	800050e <MX_FREERTOS_Init+0x126>
    STM_LOGE("ERROR", "create taskPeriodicHandle failed");
 80004f2:	f002 fc65 	bl	8002dc0 <HAL_GetTick>
 80004f6:	4603      	mov	r3, r0
 80004f8:	22c3      	movs	r2, #195	; 0xc3
 80004fa:	9202      	str	r2, [sp, #8]
 80004fc:	4a10      	ldr	r2, [pc, #64]	; (8000540 <MX_FREERTOS_Init+0x158>)
 80004fe:	9201      	str	r2, [sp, #4]
 8000500:	4a10      	ldr	r2, [pc, #64]	; (8000544 <MX_FREERTOS_Init+0x15c>)
 8000502:	9200      	str	r2, [sp, #0]
 8000504:	4a22      	ldr	r2, [pc, #136]	; (8000590 <MX_FREERTOS_Init+0x1a8>)
 8000506:	490f      	ldr	r1, [pc, #60]	; (8000544 <MX_FREERTOS_Init+0x15c>)
 8000508:	2001      	movs	r0, #1
 800050a:	f002 fb41 	bl	8002b90 <stm_log_write>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  STM_LOGV("MileStone", "Kernel starts");
 800050e:	f002 fc57 	bl	8002dc0 <HAL_GetTick>
 8000512:	4603      	mov	r3, r0
 8000514:	22c7      	movs	r2, #199	; 0xc7
 8000516:	9202      	str	r2, [sp, #8]
 8000518:	4a09      	ldr	r2, [pc, #36]	; (8000540 <MX_FREERTOS_Init+0x158>)
 800051a:	9201      	str	r2, [sp, #4]
 800051c:	4a1d      	ldr	r2, [pc, #116]	; (8000594 <MX_FREERTOS_Init+0x1ac>)
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	4a1d      	ldr	r2, [pc, #116]	; (8000598 <MX_FREERTOS_Init+0x1b0>)
 8000522:	491c      	ldr	r1, [pc, #112]	; (8000594 <MX_FREERTOS_Init+0x1ac>)
 8000524:	2005      	movs	r0, #5
 8000526:	f002 fb33 	bl	8002b90 <stm_log_write>
  /* USER CODE END RTOS_EVENTS */

}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	0800ceb0 	.word	0x0800ceb0
 8000534:	20003a28 	.word	0x20003a28
 8000538:	0800cec0 	.word	0x0800cec0
 800053c:	20003a1c 	.word	0x20003a1c
 8000540:	0800ced0 	.word	0x0800ced0
 8000544:	0800bbfc 	.word	0x0800bbfc
 8000548:	0800bbb4 	.word	0x0800bbb4
 800054c:	0800ce98 	.word	0x0800ce98
 8000550:	20003a2c 	.word	0x20003a2c
 8000554:	0800bc04 	.word	0x0800bc04
 8000558:	0800ce08 	.word	0x0800ce08
 800055c:	0800059d 	.word	0x0800059d
 8000560:	20003a18 	.word	0x20003a18
 8000564:	0800ce2c 	.word	0x0800ce2c
 8000568:	080005ad 	.word	0x080005ad
 800056c:	20003a24 	.word	0x20003a24
 8000570:	0800ce50 	.word	0x0800ce50
 8000574:	08000781 	.word	0x08000781
 8000578:	20003a20 	.word	0x20003a20
 800057c:	0800ce74 	.word	0x0800ce74
 8000580:	0800089d 	.word	0x0800089d
 8000584:	20003a30 	.word	0x20003a30
 8000588:	0800bc48 	.word	0x0800bc48
 800058c:	0800bc8c 	.word	0x0800bc8c
 8000590:	0800bcd0 	.word	0x0800bcd0
 8000594:	0800bd40 	.word	0x0800bd40
 8000598:	0800bd14 	.word	0x0800bd14

0800059c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f006 fce9 	bl	8006f7c <osDelay>
 80005aa:	e7fb      	b.n	80005a4 <StartDefaultTask+0x8>

080005ac <entryProducer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryProducer */
void entryProducer(void *argument)
{
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b08e      	sub	sp, #56	; 0x38
 80005b0:	af06      	add	r7, sp, #24
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryProducer */
  osStatus_t err;
  uint8_t receivedMsg[10];
  uint32_t tickToWait = pdMS_TO_TICKS(5000);
 80005b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005b8:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for (;;)
  {
    err = osSemaphoreAcquire(rxDoneSemaphoreHandle, portMAX_DELAY);
 80005ba:	4b64      	ldr	r3, [pc, #400]	; (800074c <entryProducer+0x1a0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f04f 31ff 	mov.w	r1, #4294967295
 80005c2:	4618      	mov	r0, r3
 80005c4:	f006 fe3e 	bl	8007244 <osSemaphoreAcquire>
 80005c8:	6178      	str	r0, [r7, #20]
    if (!err) {
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1f4      	bne.n	80005ba <entryProducer+0xe>
      TOGGLE_LED();
 80005d0:	2101      	movs	r1, #1
 80005d2:	485f      	ldr	r0, [pc, #380]	; (8000750 <entryProducer+0x1a4>)
 80005d4:	f004 f852 	bl	800467c <HAL_GPIO_TogglePin>
      STM_LOGV("Producer", "Get semaphore ok");
 80005d8:	f002 fbf2 	bl	8002dc0 <HAL_GetTick>
 80005dc:	4603      	mov	r3, r0
 80005de:	22f1      	movs	r2, #241	; 0xf1
 80005e0:	9202      	str	r2, [sp, #8]
 80005e2:	4a5c      	ldr	r2, [pc, #368]	; (8000754 <entryProducer+0x1a8>)
 80005e4:	9201      	str	r2, [sp, #4]
 80005e6:	4a5c      	ldr	r2, [pc, #368]	; (8000758 <entryProducer+0x1ac>)
 80005e8:	9200      	str	r2, [sp, #0]
 80005ea:	4a5c      	ldr	r2, [pc, #368]	; (800075c <entryProducer+0x1b0>)
 80005ec:	495a      	ldr	r1, [pc, #360]	; (8000758 <entryProducer+0x1ac>)
 80005ee:	2005      	movs	r0, #5
 80005f0:	f002 face 	bl	8002b90 <stm_log_write>

      if (LoRaGetITFlag(PAYLOAD_CRC_ERROR_MskPos) == 1)
 80005f4:	2005      	movs	r0, #5
 80005f6:	f001 fc7f 	bl	8001ef8 <LoRaGetITFlag>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d10e      	bne.n	800061e <entryProducer+0x72>
      {
        STM_LOGE("Producer", "Payload CRC failed");
 8000600:	f002 fbde 	bl	8002dc0 <HAL_GetTick>
 8000604:	4603      	mov	r3, r0
 8000606:	22f5      	movs	r2, #245	; 0xf5
 8000608:	9202      	str	r2, [sp, #8]
 800060a:	4a52      	ldr	r2, [pc, #328]	; (8000754 <entryProducer+0x1a8>)
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	4a52      	ldr	r2, [pc, #328]	; (8000758 <entryProducer+0x1ac>)
 8000610:	9200      	str	r2, [sp, #0]
 8000612:	4a53      	ldr	r2, [pc, #332]	; (8000760 <entryProducer+0x1b4>)
 8000614:	4950      	ldr	r1, [pc, #320]	; (8000758 <entryProducer+0x1ac>)
 8000616:	2001      	movs	r0, #1
 8000618:	f002 faba 	bl	8002b90 <stm_log_write>
 800061c:	e092      	b.n	8000744 <entryProducer+0x198>
      }
      else
      {
        LORA_SET_FIFO_CURRENT_MSG();
 800061e:	2010      	movs	r0, #16
 8000620:	f000 fd02 	bl	8001028 <ucSpi1Read>
 8000624:	4603      	mov	r3, r0
 8000626:	4619      	mov	r1, r3
 8000628:	200d      	movs	r0, #13
 800062a:	f000 fc95 	bl	8000f58 <vSpi1Write>
        for (uint8_t i = 0; i < PAYLOAD_LENGTH; i++) {
 800062e:	2300      	movs	r3, #0
 8000630:	77fb      	strb	r3, [r7, #31]
 8000632:	e00d      	b.n	8000650 <entryProducer+0xa4>
          receivedMsg[i] = ucSpi1Read(RegFifo);
 8000634:	7ffc      	ldrb	r4, [r7, #31]
 8000636:	2000      	movs	r0, #0
 8000638:	f000 fcf6 	bl	8001028 <ucSpi1Read>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4423      	add	r3, r4
 8000646:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (uint8_t i = 0; i < PAYLOAD_LENGTH; i++) {
 800064a:	7ffb      	ldrb	r3, [r7, #31]
 800064c:	3301      	adds	r3, #1
 800064e:	77fb      	strb	r3, [r7, #31]
 8000650:	7ffb      	ldrb	r3, [r7, #31]
 8000652:	2b09      	cmp	r3, #9
 8000654:	d9ee      	bls.n	8000634 <entryProducer+0x88>
          // STM_LOGI("Producer", "receivedData[%d]: %x", i, receivedMsg[i]);
        }

        STM_LOGI("Producer", "msg dest ID: %x - thisNodeID: %x", receivedMsg[INDEX_DEST_ID], thisNode.nodeID);
 8000656:	f002 fbb3 	bl	8002dc0 <HAL_GetTick>
 800065a:	4603      	mov	r3, r0
 800065c:	7a7a      	ldrb	r2, [r7, #9]
 800065e:	4611      	mov	r1, r2
 8000660:	4a40      	ldr	r2, [pc, #256]	; (8000764 <entryProducer+0x1b8>)
 8000662:	7812      	ldrb	r2, [r2, #0]
 8000664:	9204      	str	r2, [sp, #16]
 8000666:	9103      	str	r1, [sp, #12]
 8000668:	22ff      	movs	r2, #255	; 0xff
 800066a:	9202      	str	r2, [sp, #8]
 800066c:	4a39      	ldr	r2, [pc, #228]	; (8000754 <entryProducer+0x1a8>)
 800066e:	9201      	str	r2, [sp, #4]
 8000670:	4a39      	ldr	r2, [pc, #228]	; (8000758 <entryProducer+0x1ac>)
 8000672:	9200      	str	r2, [sp, #0]
 8000674:	4a3c      	ldr	r2, [pc, #240]	; (8000768 <entryProducer+0x1bc>)
 8000676:	4938      	ldr	r1, [pc, #224]	; (8000758 <entryProducer+0x1ac>)
 8000678:	2003      	movs	r0, #3
 800067a:	f002 fa89 	bl	8002b90 <stm_log_write>
        if (receivedMsg[INDEX_DEST_ID] == thisNode.nodeID &&
 800067e:	7a7a      	ldrb	r2, [r7, #9]
 8000680:	4b38      	ldr	r3, [pc, #224]	; (8000764 <entryProducer+0x1b8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	d14e      	bne.n	8000726 <entryProducer+0x17a>
          receivedMsg[INDEX_MSG_TYPE] == MSG_TYPE_REQUEST)
 8000688:	7abb      	ldrb	r3, [r7, #10]
        if (receivedMsg[INDEX_DEST_ID] == thisNode.nodeID &&
 800068a:	2b00      	cmp	r3, #0
 800068c:	d14b      	bne.n	8000726 <entryProducer+0x17a>
        {

          STM_LOGV("Producer", "put queue");
 800068e:	f002 fb97 	bl	8002dc0 <HAL_GetTick>
 8000692:	4603      	mov	r3, r0
 8000694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000698:	9202      	str	r2, [sp, #8]
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <entryProducer+0x1a8>)
 800069c:	9201      	str	r2, [sp, #4]
 800069e:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <entryProducer+0x1ac>)
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	4a32      	ldr	r2, [pc, #200]	; (800076c <entryProducer+0x1c0>)
 80006a4:	492c      	ldr	r1, [pc, #176]	; (8000758 <entryProducer+0x1ac>)
 80006a6:	2005      	movs	r0, #5
 80006a8:	f002 fa72 	bl	8002b90 <stm_log_write>
          err = osMessageQueuePut(myQueue01Handle, receivedMsg, 0, tickToWait);
 80006ac:	4b30      	ldr	r3, [pc, #192]	; (8000770 <entryProducer+0x1c4>)
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	f107 0108 	add.w	r1, r7, #8
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	2200      	movs	r2, #0
 80006b8:	f006 ff08 	bl	80074cc <osMessageQueuePut>
 80006bc:	6178      	str	r0, [r7, #20]
          if (!err)
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d10f      	bne.n	80006e4 <entryProducer+0x138>
          {
            STM_LOGV("Producer", "put queue ok");
 80006c4:	f002 fb7c 	bl	8002dc0 <HAL_GetTick>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f44f 7284 	mov.w	r2, #264	; 0x108
 80006ce:	9202      	str	r2, [sp, #8]
 80006d0:	4a20      	ldr	r2, [pc, #128]	; (8000754 <entryProducer+0x1a8>)
 80006d2:	9201      	str	r2, [sp, #4]
 80006d4:	4a20      	ldr	r2, [pc, #128]	; (8000758 <entryProducer+0x1ac>)
 80006d6:	9200      	str	r2, [sp, #0]
 80006d8:	4a26      	ldr	r2, [pc, #152]	; (8000774 <entryProducer+0x1c8>)
 80006da:	491f      	ldr	r1, [pc, #124]	; (8000758 <entryProducer+0x1ac>)
 80006dc:	2005      	movs	r0, #5
 80006de:	f002 fa57 	bl	8002b90 <stm_log_write>
          if (!err)
 80006e2:	e02f      	b.n	8000744 <entryProducer+0x198>
          }
          else
          {
            STM_LOGE("Producer", "put queue failed, err %d\n\r NbOfMsg in queue : % d\n\ravailable size : % d", \
 80006e4:	f002 fb6c 	bl	8002dc0 <HAL_GetTick>
 80006e8:	4605      	mov	r5, r0
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <entryProducer+0x1c4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f006 ffd2 	bl	8007698 <osMessageQueueGetCount>
 80006f4:	4604      	mov	r4, r0
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <entryProducer+0x1c4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f006 fffe 	bl	80076fc <osMessageQueueGetSpace>
 8000700:	4603      	mov	r3, r0
 8000702:	9305      	str	r3, [sp, #20]
 8000704:	9404      	str	r4, [sp, #16]
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	9303      	str	r3, [sp, #12]
 800070a:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800070e:	9302      	str	r3, [sp, #8]
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <entryProducer+0x1a8>)
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <entryProducer+0x1ac>)
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	462b      	mov	r3, r5
 800071a:	4a17      	ldr	r2, [pc, #92]	; (8000778 <entryProducer+0x1cc>)
 800071c:	490e      	ldr	r1, [pc, #56]	; (8000758 <entryProducer+0x1ac>)
 800071e:	2001      	movs	r0, #1
 8000720:	f002 fa36 	bl	8002b90 <stm_log_write>
          if (!err)
 8000724:	e00e      	b.n	8000744 <entryProducer+0x198>
              osMessageQueueGetSpace(myQueue01Handle));
          }
        }
        else
        {
          STM_LOGV("Producer", "msg not matched --> dicarded");
 8000726:	f002 fb4b 	bl	8002dc0 <HAL_GetTick>
 800072a:	4603      	mov	r3, r0
 800072c:	f44f 728a 	mov.w	r2, #276	; 0x114
 8000730:	9202      	str	r2, [sp, #8]
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <entryProducer+0x1a8>)
 8000734:	9201      	str	r2, [sp, #4]
 8000736:	4a08      	ldr	r2, [pc, #32]	; (8000758 <entryProducer+0x1ac>)
 8000738:	9200      	str	r2, [sp, #0]
 800073a:	4a10      	ldr	r2, [pc, #64]	; (800077c <entryProducer+0x1d0>)
 800073c:	4906      	ldr	r1, [pc, #24]	; (8000758 <entryProducer+0x1ac>)
 800073e:	2005      	movs	r0, #5
 8000740:	f002 fa26 	bl	8002b90 <stm_log_write>
        }
      }
      LoRaClearITFlag(RX_DONE_Msk | PAYLOAD_CRC_ERROR_Msk);
 8000744:	2060      	movs	r0, #96	; 0x60
 8000746:	f001 fc21 	bl	8001f8c <LoRaClearITFlag>
    err = osSemaphoreAcquire(rxDoneSemaphoreHandle, portMAX_DELAY);
 800074a:	e736      	b.n	80005ba <entryProducer+0xe>
 800074c:	20003a1c 	.word	0x20003a1c
 8000750:	40010c00 	.word	0x40010c00
 8000754:	0800cee4 	.word	0x0800cee4
 8000758:	0800bd7c 	.word	0x0800bd7c
 800075c:	0800bd4c 	.word	0x0800bd4c
 8000760:	0800bd88 	.word	0x0800bd88
 8000764:	20000000 	.word	0x20000000
 8000768:	0800bdc0 	.word	0x0800bdc0
 800076c:	0800be04 	.word	0x0800be04
 8000770:	20003a2c 	.word	0x20003a2c
 8000774:	0800be2c 	.word	0x0800be2c
 8000778:	0800be58 	.word	0x0800be58
 800077c:	0800bec4 	.word	0x0800bec4

08000780 <entryConsumer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryConsumer */
void entryConsumer(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af04      	add	r7, sp, #16
 8000786:	6078      	str	r0, [r7, #4]
  static uint8_t receivedMsgFromQueue[PAYLOAD_LENGTH];
  osStatus_t err;
  /* Infinite loop */
  for (;;)
  {
    err = osMessageQueueGet(myQueue01Handle, receivedMsgFromQueue, 0, portMAX_DELAY);
 8000788:	4b3c      	ldr	r3, [pc, #240]	; (800087c <entryConsumer+0xfc>)
 800078a:	6818      	ldr	r0, [r3, #0]
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	2200      	movs	r2, #0
 8000792:	493b      	ldr	r1, [pc, #236]	; (8000880 <entryConsumer+0x100>)
 8000794:	f006 ff0e 	bl	80075b4 <osMessageQueueGet>
 8000798:	60f8      	str	r0, [r7, #12]
    if (!err)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1f3      	bne.n	8000788 <entryConsumer+0x8>
    {
      printf("\r\n");
 80007a0:	4838      	ldr	r0, [pc, #224]	; (8000884 <entryConsumer+0x104>)
 80007a2:	f00a f931 	bl	800aa08 <puts>
      STM_LOGV("Consumer", "Get queue ok");
 80007a6:	f002 fb0b 	bl	8002dc0 <HAL_GetTick>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f44f 7298 	mov.w	r2, #304	; 0x130
 80007b0:	9202      	str	r2, [sp, #8]
 80007b2:	4a35      	ldr	r2, [pc, #212]	; (8000888 <entryConsumer+0x108>)
 80007b4:	9201      	str	r2, [sp, #4]
 80007b6:	4a35      	ldr	r2, [pc, #212]	; (800088c <entryConsumer+0x10c>)
 80007b8:	9200      	str	r2, [sp, #0]
 80007ba:	4a35      	ldr	r2, [pc, #212]	; (8000890 <entryConsumer+0x110>)
 80007bc:	4933      	ldr	r1, [pc, #204]	; (800088c <entryConsumer+0x10c>)
 80007be:	2005      	movs	r0, #5
 80007c0:	f002 f9e6 	bl	8002b90 <stm_log_write>
      STM_LOGI("Consumer", "-----> OPCODE: %d", receivedMsgFromQueue[INDEX_COMMAND_OPCODE]);
 80007c4:	f002 fafc 	bl	8002dc0 <HAL_GetTick>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <entryConsumer+0x100>)
 80007cc:	7a12      	ldrb	r2, [r2, #8]
 80007ce:	9203      	str	r2, [sp, #12]
 80007d0:	f240 1231 	movw	r2, #305	; 0x131
 80007d4:	9202      	str	r2, [sp, #8]
 80007d6:	4a2c      	ldr	r2, [pc, #176]	; (8000888 <entryConsumer+0x108>)
 80007d8:	9201      	str	r2, [sp, #4]
 80007da:	4a2c      	ldr	r2, [pc, #176]	; (800088c <entryConsumer+0x10c>)
 80007dc:	9200      	str	r2, [sp, #0]
 80007de:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <entryConsumer+0x114>)
 80007e0:	492a      	ldr	r1, [pc, #168]	; (800088c <entryConsumer+0x10c>)
 80007e2:	2003      	movs	r0, #3
 80007e4:	f002 f9d4 	bl	8002b90 <stm_log_write>
      vModeInit(STDBY_MODE);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 fd29 	bl	8001240 <vModeInit>
      switch (receivedMsgFromQueue[INDEX_COMMAND_OPCODE])
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <entryConsumer+0x100>)
 80007f0:	7a1b      	ldrb	r3, [r3, #8]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d828      	bhi.n	800084a <entryConsumer+0xca>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <entryConsumer+0x80>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000811 	.word	0x08000811
 8000804:	0800081d 	.word	0x0800081d
 8000808:	0800082f 	.word	0x0800082f
 800080c:	08000839 	.word	0x08000839
      {
      case OPCODE_REQUEST_STATE:
        opcodeInquiry(receivedMsgFromQueue[INDEX_SEQUENCE_ID]);
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <entryConsumer+0x100>)
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f861 	bl	80008dc <opcodeInquiry>
        break;
 800081a:	e029      	b.n	8000870 <entryConsumer+0xf0>
      case OPCODE_REQUEST_RELAY_CONTROL:
        opcodeRelayControl(receivedMsgFromQueue[INDEX_DATA_RELAY_STATE], receivedMsgFromQueue[INDEX_SEQUENCE_ID]);
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <entryConsumer+0x100>)
 800081e:	799b      	ldrb	r3, [r3, #6]
 8000820:	4a17      	ldr	r2, [pc, #92]	; (8000880 <entryConsumer+0x100>)
 8000822:	7912      	ldrb	r2, [r2, #4]
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f884 	bl	8000934 <opcodeRelayControl>
        break;
 800082c:	e020      	b.n	8000870 <entryConsumer+0xf0>
      case OPCODE_REQUEST_MCU_RESET:
        opcodeMcuReset();
 800082e:	f000 fa4b 	bl	8000cc8 <opcodeMcuReset>
        updateDataToFlash();
 8000832:	f001 fda7 	bl	8002384 <updateDataToFlash>
        break;
 8000836:	e01b      	b.n	8000870 <entryConsumer+0xf0>
      case OPCODE_REQUEST_LOCATION_UPDATE:
        opcodeLocationUpdate(receivedMsgFromQueue[INDEX_DATA_LOCATION], receivedMsgFromQueue[INDEX_SEQUENCE_ID]);
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <entryConsumer+0x100>)
 800083a:	795b      	ldrb	r3, [r3, #5]
 800083c:	4a10      	ldr	r2, [pc, #64]	; (8000880 <entryConsumer+0x100>)
 800083e:	7912      	ldrb	r2, [r2, #4]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fa5a 	bl	8000cfc <opcodeLocationUpdate>
        break;
 8000848:	e012      	b.n	8000870 <entryConsumer+0xf0>
      default:
        STM_LOGE("Consumer", "No service for opcode %d", receivedMsgFromQueue[INDEX_COMMAND_OPCODE]);
 800084a:	f002 fab9 	bl	8002dc0 <HAL_GetTick>
 800084e:	4603      	mov	r3, r0
 8000850:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <entryConsumer+0x100>)
 8000852:	7a12      	ldrb	r2, [r2, #8]
 8000854:	9203      	str	r2, [sp, #12]
 8000856:	f240 1243 	movw	r2, #323	; 0x143
 800085a:	9202      	str	r2, [sp, #8]
 800085c:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <entryConsumer+0x108>)
 800085e:	9201      	str	r2, [sp, #4]
 8000860:	4a0a      	ldr	r2, [pc, #40]	; (800088c <entryConsumer+0x10c>)
 8000862:	9200      	str	r2, [sp, #0]
 8000864:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <entryConsumer+0x118>)
 8000866:	4909      	ldr	r1, [pc, #36]	; (800088c <entryConsumer+0x10c>)
 8000868:	2001      	movs	r0, #1
 800086a:	f002 f991 	bl	8002b90 <stm_log_write>
        break;
 800086e:	bf00      	nop
      }

      // LED_OFF();
      vModeInit(RXCONTINUOUS_MODE);
 8000870:	2005      	movs	r0, #5
 8000872:	f000 fce5 	bl	8001240 <vModeInit>
      updateDataToFlash();
 8000876:	f001 fd85 	bl	8002384 <updateDataToFlash>
    err = osMessageQueueGet(myQueue01Handle, receivedMsgFromQueue, 0, portMAX_DELAY);
 800087a:	e785      	b.n	8000788 <entryConsumer+0x8>
 800087c:	20003a2c 	.word	0x20003a2c
 8000880:	200000b4 	.word	0x200000b4
 8000884:	0800bf00 	.word	0x0800bf00
 8000888:	0800cef4 	.word	0x0800cef4
 800088c:	0800bf30 	.word	0x0800bf30
 8000890:	0800bf04 	.word	0x0800bf04
 8000894:	0800bf3c 	.word	0x0800bf3c
 8000898:	0800bf74 	.word	0x0800bf74

0800089c <entryPeriodic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPeriodic */
void entryPeriodic(void *argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  static const uint32_t tickToWait = pdMS_TO_TICKS(1000);
  static int count;
  /* Infinite loop */
  for (;;)
  {
    TOGGLE_LED();
 80008a4:	2101      	movs	r1, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <entryPeriodic+0x34>)
 80008a8:	f003 fee8 	bl	800467c <HAL_GPIO_TogglePin>
    if (++count >= 10) {
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <entryPeriodic+0x38>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <entryPeriodic+0x38>)
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <entryPeriodic+0x38>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b09      	cmp	r3, #9
 80008bc:	dd02      	ble.n	80008c4 <entryPeriodic+0x28>
      count = 0;
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <entryPeriodic+0x38>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
      // STM_LOGI("Periodic", "relay: %s", WHICH_RELAY(thisNode.relayState));
    }
    // HAL_IWDG_Refresh(&hiwdg);
    osDelay(tickToWait);
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <entryPeriodic+0x3c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f006 fb57 	bl	8006f7c <osDelay>
    TOGGLE_LED();
 80008ce:	e7e9      	b.n	80008a4 <entryPeriodic+0x8>
 80008d0:	40010c00 	.word	0x40010c00
 80008d4:	200000c0 	.word	0x200000c0
 80008d8:	0800cf04 	.word	0x0800cf04

080008dc <opcodeInquiry>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void opcodeInquiry(uint8_t seqID)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  uint8_t msg[10];
  PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_OK, seqID, OPCODE_RESPOSNE_STATE);
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <opcodeInquiry+0x54>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	733b      	strb	r3, [r7, #12]
 80008ec:	23ff      	movs	r3, #255	; 0xff
 80008ee:	737b      	strb	r3, [r7, #13]
 80008f0:	2301      	movs	r3, #1
 80008f2:	73bb      	strb	r3, [r7, #14]
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	743b      	strb	r3, [r7, #16]
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <opcodeInquiry+0x54>)
 80008fe:	785b      	ldrb	r3, [r3, #1]
 8000900:	747b      	strb	r3, [r7, #17]
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <opcodeInquiry+0x54>)
 8000904:	789b      	ldrb	r3, [r3, #2]
 8000906:	74bb      	strb	r3, [r7, #18]
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <opcodeInquiry+0x54>)
 800090a:	78db      	ldrb	r3, [r3, #3]
 800090c:	74fb      	strb	r3, [r7, #19]
 800090e:	2365      	movs	r3, #101	; 0x65
 8000910:	753b      	strb	r3, [r7, #20]
 8000912:	2300      	movs	r3, #0
 8000914:	757b      	strb	r3, [r7, #21]
  LoRaTransmit(msg, PAYLOAD_LENGTH, LORA_DELAY);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	f04f 32ff 	mov.w	r2, #4294967295
 800091e:	210a      	movs	r1, #10
 8000920:	4618      	mov	r0, r3
 8000922:	f001 f829 	bl	8001978 <LoRaTransmit>
}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000000 	.word	0x20000000

08000934 <opcodeRelayControl>:

static void opcodeRelayControl(uint8_t newState, uint8_t seqID)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b08d      	sub	sp, #52	; 0x34
 8000938:	af06      	add	r7, sp, #24
 800093a:	4603      	mov	r3, r0
 800093c:	460a      	mov	r2, r1
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	4613      	mov	r3, r2
 8000942:	71bb      	strb	r3, [r7, #6]
  uint8_t msg[10];
  uint8_t countCheck = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	75fb      	strb	r3, [r7, #23]
  bool isAck = false;
 8000948:	2300      	movs	r3, #0
 800094a:	75bb      	strb	r3, [r7, #22]
  bool isChecking = true;
 800094c:	2301      	movs	r3, #1
 800094e:	757b      	strb	r3, [r7, #21]
  if (thisNode.relayState != newState)
 8000950:	4b9c      	ldr	r3, [pc, #624]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	79fa      	ldrb	r2, [r7, #7]
 8000956:	429a      	cmp	r2, r3
 8000958:	f000 811f 	beq.w	8000b9a <opcodeRelayControl+0x266>
  {
    STM_LOGI("Consumer", "State changes: {%s} to {%s}", WHICH_RELAY(thisNode.relayState), WHICH_RELAY(newState));
 800095c:	f002 fa30 	bl	8002dc0 <HAL_GetTick>
 8000960:	4601      	mov	r1, r0
 8000962:	4b98      	ldr	r3, [pc, #608]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000964:	789b      	ldrb	r3, [r3, #2]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d007      	beq.n	800097a <opcodeRelayControl+0x46>
 800096a:	4b96      	ldr	r3, [pc, #600]	; (8000bc4 <opcodeRelayControl+0x290>)
 800096c:	789b      	ldrb	r3, [r3, #2]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d101      	bne.n	8000976 <opcodeRelayControl+0x42>
 8000972:	4b95      	ldr	r3, [pc, #596]	; (8000bc8 <opcodeRelayControl+0x294>)
 8000974:	e002      	b.n	800097c <opcodeRelayControl+0x48>
 8000976:	4b95      	ldr	r3, [pc, #596]	; (8000bcc <opcodeRelayControl+0x298>)
 8000978:	e000      	b.n	800097c <opcodeRelayControl+0x48>
 800097a:	4b95      	ldr	r3, [pc, #596]	; (8000bd0 <opcodeRelayControl+0x29c>)
 800097c:	79fa      	ldrb	r2, [r7, #7]
 800097e:	2a00      	cmp	r2, #0
 8000980:	d006      	beq.n	8000990 <opcodeRelayControl+0x5c>
 8000982:	79fa      	ldrb	r2, [r7, #7]
 8000984:	2a01      	cmp	r2, #1
 8000986:	d101      	bne.n	800098c <opcodeRelayControl+0x58>
 8000988:	4a8f      	ldr	r2, [pc, #572]	; (8000bc8 <opcodeRelayControl+0x294>)
 800098a:	e002      	b.n	8000992 <opcodeRelayControl+0x5e>
 800098c:	4a8f      	ldr	r2, [pc, #572]	; (8000bcc <opcodeRelayControl+0x298>)
 800098e:	e000      	b.n	8000992 <opcodeRelayControl+0x5e>
 8000990:	4a8f      	ldr	r2, [pc, #572]	; (8000bd0 <opcodeRelayControl+0x29c>)
 8000992:	9204      	str	r2, [sp, #16]
 8000994:	9303      	str	r3, [sp, #12]
 8000996:	f44f 73bd 	mov.w	r3, #378	; 0x17a
 800099a:	9302      	str	r3, [sp, #8]
 800099c:	4b8d      	ldr	r3, [pc, #564]	; (8000bd4 <opcodeRelayControl+0x2a0>)
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	4b8d      	ldr	r3, [pc, #564]	; (8000bd8 <opcodeRelayControl+0x2a4>)
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	460b      	mov	r3, r1
 80009a6:	4a8d      	ldr	r2, [pc, #564]	; (8000bdc <opcodeRelayControl+0x2a8>)
 80009a8:	498b      	ldr	r1, [pc, #556]	; (8000bd8 <opcodeRelayControl+0x2a4>)
 80009aa:	2003      	movs	r0, #3
 80009ac:	f002 f8f0 	bl	8002b90 <stm_log_write>
    thisNode.relayState = newState;
 80009b0:	4a84      	ldr	r2, [pc, #528]	; (8000bc4 <opcodeRelayControl+0x290>)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	7093      	strb	r3, [r2, #2]
    RELAY_CONTROL(thisNode.relayState);
 80009b6:	4b83      	ldr	r3, [pc, #524]	; (8000bc4 <opcodeRelayControl+0x290>)
 80009b8:	789b      	ldrb	r3, [r3, #2]
 80009ba:	461a      	mov	r2, r3
 80009bc:	2102      	movs	r1, #2
 80009be:	4888      	ldr	r0, [pc, #544]	; (8000be0 <opcodeRelayControl+0x2ac>)
 80009c0:	f003 fe2a 	bl	8004618 <HAL_GPIO_WritePin>
    STM_LOGV("Consumer", "Checking relay ...");
 80009c4:	f002 f9fc 	bl	8002dc0 <HAL_GetTick>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f240 127d 	movw	r2, #381	; 0x17d
 80009ce:	9202      	str	r2, [sp, #8]
 80009d0:	4a80      	ldr	r2, [pc, #512]	; (8000bd4 <opcodeRelayControl+0x2a0>)
 80009d2:	9201      	str	r2, [sp, #4]
 80009d4:	4a80      	ldr	r2, [pc, #512]	; (8000bd8 <opcodeRelayControl+0x2a4>)
 80009d6:	9200      	str	r2, [sp, #0]
 80009d8:	4a82      	ldr	r2, [pc, #520]	; (8000be4 <opcodeRelayControl+0x2b0>)
 80009da:	497f      	ldr	r1, [pc, #508]	; (8000bd8 <opcodeRelayControl+0x2a4>)
 80009dc:	2005      	movs	r0, #5
 80009de:	f002 f8d7 	bl	8002b90 <stm_log_write>
    ADC_READ_LIGHTSENSOR();
 80009e2:	4881      	ldr	r0, [pc, #516]	; (8000be8 <opcodeRelayControl+0x2b4>)
 80009e4:	f002 fb84 	bl	80030f0 <HAL_ADC_Start_IT>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f000 80ca 	beq.w	8000b84 <opcodeRelayControl+0x250>
 80009f0:	f002 f9e6 	bl	8002dc0 <HAL_GetTick>
 80009f4:	4604      	mov	r4, r0
 80009f6:	487c      	ldr	r0, [pc, #496]	; (8000be8 <opcodeRelayControl+0x2b4>)
 80009f8:	f002 fb7a 	bl	80030f0 <HAL_ADC_Start_IT>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d009      	beq.n	8000a16 <opcodeRelayControl+0xe2>
 8000a02:	4879      	ldr	r0, [pc, #484]	; (8000be8 <opcodeRelayControl+0x2b4>)
 8000a04:	f002 fb74 	bl	80030f0 <HAL_ADC_Start_IT>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d101      	bne.n	8000a12 <opcodeRelayControl+0xde>
 8000a0e:	4b77      	ldr	r3, [pc, #476]	; (8000bec <opcodeRelayControl+0x2b8>)
 8000a10:	e002      	b.n	8000a18 <opcodeRelayControl+0xe4>
 8000a12:	4b77      	ldr	r3, [pc, #476]	; (8000bf0 <opcodeRelayControl+0x2bc>)
 8000a14:	e000      	b.n	8000a18 <opcodeRelayControl+0xe4>
 8000a16:	4b77      	ldr	r3, [pc, #476]	; (8000bf4 <opcodeRelayControl+0x2c0>)
 8000a18:	9303      	str	r3, [sp, #12]
 8000a1a:	f44f 73bf 	mov.w	r3, #382	; 0x17e
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	4b6c      	ldr	r3, [pc, #432]	; (8000bd4 <opcodeRelayControl+0x2a0>)
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	4b74      	ldr	r3, [pc, #464]	; (8000bf8 <opcodeRelayControl+0x2c4>)
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	4623      	mov	r3, r4
 8000a2a:	4a74      	ldr	r2, [pc, #464]	; (8000bfc <opcodeRelayControl+0x2c8>)
 8000a2c:	4972      	ldr	r1, [pc, #456]	; (8000bf8 <opcodeRelayControl+0x2c4>)
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f002 f8ae 	bl	8002b90 <stm_log_write>
    while (isChecking && ++countCheck <= 70) {
 8000a34:	e0a6      	b.n	8000b84 <opcodeRelayControl+0x250>
      STM_LOGD("Consumer", "adcLightSensor: %d - count: %d", adcLightSensor, countCheck);
 8000a36:	f002 f9c3 	bl	8002dc0 <HAL_GetTick>
 8000a3a:	4601      	mov	r1, r0
 8000a3c:	4b70      	ldr	r3, [pc, #448]	; (8000c00 <opcodeRelayControl+0x2cc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	7dfa      	ldrb	r2, [r7, #23]
 8000a42:	9204      	str	r2, [sp, #16]
 8000a44:	9303      	str	r3, [sp, #12]
 8000a46:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a4a:	9302      	str	r3, [sp, #8]
 8000a4c:	4b61      	ldr	r3, [pc, #388]	; (8000bd4 <opcodeRelayControl+0x2a0>)
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	4b61      	ldr	r3, [pc, #388]	; (8000bd8 <opcodeRelayControl+0x2a4>)
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	460b      	mov	r3, r1
 8000a56:	4a6b      	ldr	r2, [pc, #428]	; (8000c04 <opcodeRelayControl+0x2d0>)
 8000a58:	495f      	ldr	r1, [pc, #380]	; (8000bd8 <opcodeRelayControl+0x2a4>)
 8000a5a:	2004      	movs	r0, #4
 8000a5c:	f002 f898 	bl	8002b90 <stm_log_write>

      if (((adcLightSensor < LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_ON)) ||
 8000a60:	4b67      	ldr	r3, [pc, #412]	; (8000c00 <opcodeRelayControl+0x2cc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a68:	d203      	bcs.n	8000a72 <opcodeRelayControl+0x13e>
 8000a6a:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000a6c:	789b      	ldrb	r3, [r3, #2]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d008      	beq.n	8000a84 <opcodeRelayControl+0x150>
        ((adcLightSensor >= LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_OFF)))
 8000a72:	4b63      	ldr	r3, [pc, #396]	; (8000c00 <opcodeRelayControl+0x2cc>)
 8000a74:	681b      	ldr	r3, [r3, #0]
      if (((adcLightSensor < LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_ON)) ||
 8000a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a7a:	d31a      	bcc.n	8000ab2 <opcodeRelayControl+0x17e>
        ((adcLightSensor >= LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_OFF)))
 8000a7c:	4b51      	ldr	r3, [pc, #324]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d116      	bne.n	8000ab2 <opcodeRelayControl+0x17e>
      {
        isChecking = false;
 8000a84:	2300      	movs	r3, #0
 8000a86:	757b      	strb	r3, [r7, #21]
        isAck = true;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	75bb      	strb	r3, [r7, #22]
        thisNode.errCode = ERR_CODE_NONE;
 8000a8c:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	70da      	strb	r2, [r3, #3]
        STM_LOGD("Consumer", "----> check ok ");
 8000a92:	f002 f995 	bl	8002dc0 <HAL_GetTick>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000a9c:	9202      	str	r2, [sp, #8]
 8000a9e:	4a4d      	ldr	r2, [pc, #308]	; (8000bd4 <opcodeRelayControl+0x2a0>)
 8000aa0:	9201      	str	r2, [sp, #4]
 8000aa2:	4a4d      	ldr	r2, [pc, #308]	; (8000bd8 <opcodeRelayControl+0x2a4>)
 8000aa4:	9200      	str	r2, [sp, #0]
 8000aa6:	4a58      	ldr	r2, [pc, #352]	; (8000c08 <opcodeRelayControl+0x2d4>)
 8000aa8:	494b      	ldr	r1, [pc, #300]	; (8000bd8 <opcodeRelayControl+0x2a4>)
 8000aaa:	2004      	movs	r0, #4
 8000aac:	f002 f870 	bl	8002b90 <stm_log_write>
 8000ab0:	e068      	b.n	8000b84 <opcodeRelayControl+0x250>
      }
      else if (countCheck == 70) {
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
 8000ab4:	2b46      	cmp	r3, #70	; 0x46
 8000ab6:	d12b      	bne.n	8000b10 <opcodeRelayControl+0x1dc>
        STM_LOGE("Consumer", "----> check failed");
 8000ab8:	f002 f982 	bl	8002dc0 <HAL_GetTick>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f240 128b 	movw	r2, #395	; 0x18b
 8000ac2:	9202      	str	r2, [sp, #8]
 8000ac4:	4a43      	ldr	r2, [pc, #268]	; (8000bd4 <opcodeRelayControl+0x2a0>)
 8000ac6:	9201      	str	r2, [sp, #4]
 8000ac8:	4a43      	ldr	r2, [pc, #268]	; (8000bd8 <opcodeRelayControl+0x2a4>)
 8000aca:	9200      	str	r2, [sp, #0]
 8000acc:	4a4f      	ldr	r2, [pc, #316]	; (8000c0c <opcodeRelayControl+0x2d8>)
 8000ace:	4942      	ldr	r1, [pc, #264]	; (8000bd8 <opcodeRelayControl+0x2a4>)
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f002 f85d 	bl	8002b90 <stm_log_write>
        isAck = false;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	75bb      	strb	r3, [r7, #22]
        thisNode.errCode = (thisNode.relayState == RELAY_STATE_ON) ? ERR_CODE_LIGHT_ON_FAILED : ERR_CODE_LIGHT_OFF_FAILED;
 8000ada:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000adc:	789b      	ldrb	r3, [r3, #2]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d101      	bne.n	8000ae6 <opcodeRelayControl+0x1b2>
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	e000      	b.n	8000ae8 <opcodeRelayControl+0x1b4>
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000aea:	70da      	strb	r2, [r3, #3]
        thisNode.relayState = !thisNode.relayState;
 8000aec:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000aee:	789b      	ldrb	r3, [r3, #2]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf0c      	ite	eq
 8000af4:	2301      	moveq	r3, #1
 8000af6:	2300      	movne	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000afe:	709a      	strb	r2, [r3, #2]
        RELAY_CONTROL(thisNode.relayState);
 8000b00:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	461a      	mov	r2, r3
 8000b06:	2102      	movs	r1, #2
 8000b08:	4835      	ldr	r0, [pc, #212]	; (8000be0 <opcodeRelayControl+0x2ac>)
 8000b0a:	f003 fd85 	bl	8004618 <HAL_GPIO_WritePin>
 8000b0e:	e039      	b.n	8000b84 <opcodeRelayControl+0x250>
      }
      else {
        ADC_READ_LIGHTSENSOR();
 8000b10:	4835      	ldr	r0, [pc, #212]	; (8000be8 <opcodeRelayControl+0x2b4>)
 8000b12:	f002 faed 	bl	80030f0 <HAL_ADC_Start_IT>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d021      	beq.n	8000b60 <opcodeRelayControl+0x22c>
 8000b1c:	f002 f950 	bl	8002dc0 <HAL_GetTick>
 8000b20:	4604      	mov	r4, r0
 8000b22:	4831      	ldr	r0, [pc, #196]	; (8000be8 <opcodeRelayControl+0x2b4>)
 8000b24:	f002 fae4 	bl	80030f0 <HAL_ADC_Start_IT>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d009      	beq.n	8000b42 <opcodeRelayControl+0x20e>
 8000b2e:	482e      	ldr	r0, [pc, #184]	; (8000be8 <opcodeRelayControl+0x2b4>)
 8000b30:	f002 fade 	bl	80030f0 <HAL_ADC_Start_IT>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d101      	bne.n	8000b3e <opcodeRelayControl+0x20a>
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <opcodeRelayControl+0x2b8>)
 8000b3c:	e002      	b.n	8000b44 <opcodeRelayControl+0x210>
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <opcodeRelayControl+0x2bc>)
 8000b40:	e000      	b.n	8000b44 <opcodeRelayControl+0x210>
 8000b42:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <opcodeRelayControl+0x2c0>)
 8000b44:	9303      	str	r3, [sp, #12]
 8000b46:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <opcodeRelayControl+0x2a0>)
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <opcodeRelayControl+0x2c4>)
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	4623      	mov	r3, r4
 8000b56:	4a29      	ldr	r2, [pc, #164]	; (8000bfc <opcodeRelayControl+0x2c8>)
 8000b58:	4927      	ldr	r1, [pc, #156]	; (8000bf8 <opcodeRelayControl+0x2c4>)
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f002 f818 	bl	8002b90 <stm_log_write>
        osDelay(10);
 8000b60:	200a      	movs	r0, #10
 8000b62:	f006 fa0b 	bl	8006f7c <osDelay>
        STM_LOGD("Consumer", "----> check again");
 8000b66:	f002 f92b 	bl	8002dc0 <HAL_GetTick>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8000b70:	9202      	str	r2, [sp, #8]
 8000b72:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <opcodeRelayControl+0x2a0>)
 8000b74:	9201      	str	r2, [sp, #4]
 8000b76:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <opcodeRelayControl+0x2a4>)
 8000b78:	9200      	str	r2, [sp, #0]
 8000b7a:	4a25      	ldr	r2, [pc, #148]	; (8000c10 <opcodeRelayControl+0x2dc>)
 8000b7c:	4916      	ldr	r1, [pc, #88]	; (8000bd8 <opcodeRelayControl+0x2a4>)
 8000b7e:	2004      	movs	r0, #4
 8000b80:	f002 f806 	bl	8002b90 <stm_log_write>
    while (isChecking && ++countCheck <= 70) {
 8000b84:	7d7b      	ldrb	r3, [r7, #21]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d053      	beq.n	8000c32 <opcodeRelayControl+0x2fe>
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	75fb      	strb	r3, [r7, #23]
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	2b46      	cmp	r3, #70	; 0x46
 8000b94:	f67f af4f 	bls.w	8000a36 <opcodeRelayControl+0x102>
 8000b98:	e04b      	b.n	8000c32 <opcodeRelayControl+0x2fe>
      }
    }
  }
  else
  {
    isAck = true;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	75bb      	strb	r3, [r7, #22]
    thisNode.errCode = ERR_CODE_NONE;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	70da      	strb	r2, [r3, #3]
    STM_LOGV("Consumer", "----> already %s", WHICH_RELAY(thisNode.relayState));
 8000ba4:	f002 f90c 	bl	8002dc0 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000bac:	789b      	ldrb	r3, [r3, #2]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d030      	beq.n	8000c14 <opcodeRelayControl+0x2e0>
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <opcodeRelayControl+0x290>)
 8000bb4:	789b      	ldrb	r3, [r3, #2]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d101      	bne.n	8000bbe <opcodeRelayControl+0x28a>
 8000bba:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <opcodeRelayControl+0x294>)
 8000bbc:	e02b      	b.n	8000c16 <opcodeRelayControl+0x2e2>
 8000bbe:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <opcodeRelayControl+0x298>)
 8000bc0:	e029      	b.n	8000c16 <opcodeRelayControl+0x2e2>
 8000bc2:	bf00      	nop
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	0800bfb0 	.word	0x0800bfb0
 8000bcc:	0800bfbc 	.word	0x0800bfbc
 8000bd0:	0800bfcc 	.word	0x0800bfcc
 8000bd4:	0800cf08 	.word	0x0800cf08
 8000bd8:	0800bf30 	.word	0x0800bf30
 8000bdc:	0800bfd8 	.word	0x0800bfd8
 8000be0:	40010800 	.word	0x40010800
 8000be4:	0800c018 	.word	0x0800c018
 8000be8:	200039e8 	.word	0x200039e8
 8000bec:	0800c048 	.word	0x0800c048
 8000bf0:	0800c054 	.word	0x0800c054
 8000bf4:	0800c060 	.word	0x0800c060
 8000bf8:	0800c09c 	.word	0x0800c09c
 8000bfc:	0800c06c 	.word	0x0800c06c
 8000c00:	20003ad8 	.word	0x20003ad8
 8000c04:	0800c0ac 	.word	0x0800c0ac
 8000c08:	0800c0f0 	.word	0x0800c0f0
 8000c0c:	0800c124 	.word	0x0800c124
 8000c10:	0800c15c 	.word	0x0800c15c
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <opcodeRelayControl+0x380>)
 8000c16:	9303      	str	r3, [sp, #12]
 8000c18:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <opcodeRelayControl+0x384>)
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <opcodeRelayControl+0x388>)
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	4613      	mov	r3, r2
 8000c28:	4a25      	ldr	r2, [pc, #148]	; (8000cc0 <opcodeRelayControl+0x38c>)
 8000c2a:	4924      	ldr	r1, [pc, #144]	; (8000cbc <opcodeRelayControl+0x388>)
 8000c2c:	2005      	movs	r0, #5
 8000c2e:	f001 ffaf 	bl	8002b90 <stm_log_write>
  }

  if (isAck) {
 8000c32:	7dbb      	ldrb	r3, [r7, #22]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d018      	beq.n	8000c6a <opcodeRelayControl+0x336>
    PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_OK, seqID, OPCODE_RESPOSNE_RELAY_CONTROL);
 8000c38:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <opcodeRelayControl+0x390>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	723b      	strb	r3, [r7, #8]
 8000c3e:	23ff      	movs	r3, #255	; 0xff
 8000c40:	727b      	strb	r3, [r7, #9]
 8000c42:	2301      	movs	r3, #1
 8000c44:	72bb      	strb	r3, [r7, #10]
 8000c46:	2301      	movs	r3, #1
 8000c48:	72fb      	strb	r3, [r7, #11]
 8000c4a:	79bb      	ldrb	r3, [r7, #6]
 8000c4c:	733b      	strb	r3, [r7, #12]
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <opcodeRelayControl+0x390>)
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	737b      	strb	r3, [r7, #13]
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <opcodeRelayControl+0x390>)
 8000c56:	789b      	ldrb	r3, [r3, #2]
 8000c58:	73bb      	strb	r3, [r7, #14]
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <opcodeRelayControl+0x390>)
 8000c5c:	78db      	ldrb	r3, [r3, #3]
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	2366      	movs	r3, #102	; 0x66
 8000c62:	743b      	strb	r3, [r7, #16]
 8000c64:	2300      	movs	r3, #0
 8000c66:	747b      	strb	r3, [r7, #17]
 8000c68:	e017      	b.n	8000c9a <opcodeRelayControl+0x366>
  }
  else {
    PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_FAILED, seqID, OPCODE_RESPOSNE_RELAY_CONTROL);
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <opcodeRelayControl+0x390>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	723b      	strb	r3, [r7, #8]
 8000c70:	23ff      	movs	r3, #255	; 0xff
 8000c72:	727b      	strb	r3, [r7, #9]
 8000c74:	2301      	movs	r3, #1
 8000c76:	72bb      	strb	r3, [r7, #10]
 8000c78:	2302      	movs	r3, #2
 8000c7a:	72fb      	strb	r3, [r7, #11]
 8000c7c:	79bb      	ldrb	r3, [r7, #6]
 8000c7e:	733b      	strb	r3, [r7, #12]
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <opcodeRelayControl+0x390>)
 8000c82:	785b      	ldrb	r3, [r3, #1]
 8000c84:	737b      	strb	r3, [r7, #13]
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <opcodeRelayControl+0x390>)
 8000c88:	789b      	ldrb	r3, [r3, #2]
 8000c8a:	73bb      	strb	r3, [r7, #14]
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <opcodeRelayControl+0x390>)
 8000c8e:	78db      	ldrb	r3, [r3, #3]
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	2366      	movs	r3, #102	; 0x66
 8000c94:	743b      	strb	r3, [r7, #16]
 8000c96:	2300      	movs	r3, #0
 8000c98:	747b      	strb	r3, [r7, #17]
  }
  LoRaTransmit(msg, PAYLOAD_LENGTH, LORA_DELAY);
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca2:	210a      	movs	r1, #10
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fe67 	bl	8001978 <LoRaTransmit>
}
 8000caa:	bf00      	nop
 8000cac:	371c      	adds	r7, #28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	0800bfcc 	.word	0x0800bfcc
 8000cb8:	0800cf08 	.word	0x0800cf08
 8000cbc:	0800bf30 	.word	0x0800bf30
 8000cc0:	0800c194 	.word	0x0800c194
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <opcodeMcuReset>:

static void opcodeMcuReset(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af04      	add	r7, sp, #16
  STM_LOGV("Consumer", "Perform self reset");
 8000cce:	f002 f877 	bl	8002dc0 <HAL_GetTick>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8000cd8:	9202      	str	r2, [sp, #8]
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <opcodeMcuReset+0x28>)
 8000cdc:	9201      	str	r2, [sp, #4]
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <opcodeMcuReset+0x2c>)
 8000ce0:	9200      	str	r2, [sp, #0]
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <opcodeMcuReset+0x30>)
 8000ce4:	4903      	ldr	r1, [pc, #12]	; (8000cf4 <opcodeMcuReset+0x2c>)
 8000ce6:	2005      	movs	r0, #5
 8000ce8:	f001 ff52 	bl	8002b90 <stm_log_write>
  NVIC_SystemReset();
 8000cec:	f7ff fb58 	bl	80003a0 <__NVIC_SystemReset>
 8000cf0:	0800cf1c 	.word	0x0800cf1c
 8000cf4:	0800bf30 	.word	0x0800bf30
 8000cf8:	0800c1c4 	.word	0x0800c1c4

08000cfc <opcodeLocationUpdate>:
}

static void opcodeLocationUpdate(uint8_t newLocation, uint8_t seqID)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af04      	add	r7, sp, #16
 8000d02:	4603      	mov	r3, r0
 8000d04:	460a      	mov	r2, r1
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	71bb      	strb	r3, [r7, #6]
  uint8_t msg[10];
  if (newLocation != LOCATION_NONE)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d02d      	beq.n	8000d6e <opcodeLocationUpdate+0x72>
  {
    thisNode.location = newLocation;
 8000d12:	4a32      	ldr	r2, [pc, #200]	; (8000ddc <opcodeLocationUpdate+0xe0>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	7053      	strb	r3, [r2, #1]
    STM_LOGV("Consumer", "----> Update location %d", newLocation);
 8000d18:	f002 f852 	bl	8002dc0 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	9303      	str	r3, [sp, #12]
 8000d22:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 8000d26:	9302      	str	r3, [sp, #8]
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <opcodeLocationUpdate+0xe4>)
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <opcodeLocationUpdate+0xe8>)
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	4613      	mov	r3, r2
 8000d32:	4a2d      	ldr	r2, [pc, #180]	; (8000de8 <opcodeLocationUpdate+0xec>)
 8000d34:	492b      	ldr	r1, [pc, #172]	; (8000de4 <opcodeLocationUpdate+0xe8>)
 8000d36:	2005      	movs	r0, #5
 8000d38:	f001 ff2a 	bl	8002b90 <stm_log_write>
    PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_OK, seqID, OPCODE_RESPOSNE_LOCATION_UPDATE);
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <opcodeLocationUpdate+0xe0>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	733b      	strb	r3, [r7, #12]
 8000d42:	23ff      	movs	r3, #255	; 0xff
 8000d44:	737b      	strb	r3, [r7, #13]
 8000d46:	2301      	movs	r3, #1
 8000d48:	73bb      	strb	r3, [r7, #14]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	79bb      	ldrb	r3, [r7, #6]
 8000d50:	743b      	strb	r3, [r7, #16]
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <opcodeLocationUpdate+0xe0>)
 8000d54:	785b      	ldrb	r3, [r3, #1]
 8000d56:	747b      	strb	r3, [r7, #17]
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <opcodeLocationUpdate+0xe0>)
 8000d5a:	789b      	ldrb	r3, [r3, #2]
 8000d5c:	74bb      	strb	r3, [r7, #18]
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <opcodeLocationUpdate+0xe0>)
 8000d60:	78db      	ldrb	r3, [r3, #3]
 8000d62:	74fb      	strb	r3, [r7, #19]
 8000d64:	2368      	movs	r3, #104	; 0x68
 8000d66:	753b      	strb	r3, [r7, #20]
 8000d68:	2300      	movs	r3, #0
 8000d6a:	757b      	strb	r3, [r7, #21]
 8000d6c:	e029      	b.n	8000dc2 <opcodeLocationUpdate+0xc6>
  }
  else
  {
    STM_LOGV("Consumer", "Invalid data %d", newLocation);
 8000d6e:	f002 f827 	bl	8002dc0 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	9303      	str	r3, [sp, #12]
 8000d78:	f240 13b9 	movw	r3, #441	; 0x1b9
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <opcodeLocationUpdate+0xe4>)
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <opcodeLocationUpdate+0xe8>)
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	4613      	mov	r3, r2
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <opcodeLocationUpdate+0xf0>)
 8000d8a:	4916      	ldr	r1, [pc, #88]	; (8000de4 <opcodeLocationUpdate+0xe8>)
 8000d8c:	2005      	movs	r0, #5
 8000d8e:	f001 feff 	bl	8002b90 <stm_log_write>
    PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_FAILED, seqID, OPCODE_RESPOSNE_LOCATION_UPDATE);
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <opcodeLocationUpdate+0xe0>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	733b      	strb	r3, [r7, #12]
 8000d98:	23ff      	movs	r3, #255	; 0xff
 8000d9a:	737b      	strb	r3, [r7, #13]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73bb      	strb	r3, [r7, #14]
 8000da0:	2302      	movs	r3, #2
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	743b      	strb	r3, [r7, #16]
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <opcodeLocationUpdate+0xe0>)
 8000daa:	785b      	ldrb	r3, [r3, #1]
 8000dac:	747b      	strb	r3, [r7, #17]
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <opcodeLocationUpdate+0xe0>)
 8000db0:	789b      	ldrb	r3, [r3, #2]
 8000db2:	74bb      	strb	r3, [r7, #18]
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <opcodeLocationUpdate+0xe0>)
 8000db6:	78db      	ldrb	r3, [r3, #3]
 8000db8:	74fb      	strb	r3, [r7, #19]
 8000dba:	2368      	movs	r3, #104	; 0x68
 8000dbc:	753b      	strb	r3, [r7, #20]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	757b      	strb	r3, [r7, #21]
  }
  LoRaTransmit(msg, PAYLOAD_LENGTH, LORA_DELAY);
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dca:	210a      	movs	r1, #10
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fdd3 	bl	8001978 <LoRaTransmit>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	0800cf2c 	.word	0x0800cf2c
 8000de4:	0800bf30 	.word	0x0800bf30
 8000de8:	0800c1f4 	.word	0x0800c1f4
 8000dec:	0800c22c 	.word	0x0800c22c

08000df0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e04:	4b4f      	ldr	r3, [pc, #316]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a4e      	ldr	r2, [pc, #312]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b4c      	ldr	r3, [pc, #304]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1c:	4b49      	ldr	r3, [pc, #292]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a48      	ldr	r2, [pc, #288]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e22:	f043 0320 	orr.w	r3, r3, #32
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b46      	ldr	r3, [pc, #280]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0320 	and.w	r3, r3, #32
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b43      	ldr	r3, [pc, #268]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a42      	ldr	r2, [pc, #264]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4c:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a3c      	ldr	r2, [pc, #240]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <MX_GPIO_Init+0x154>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_OUTPUT_GPIO_Port, RELAY_OUTPUT_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2102      	movs	r1, #2
 8000e68:	4837      	ldr	r0, [pc, #220]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000e6a:	f003 fbd5 	bl	8004618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2110      	movs	r1, #16
 8000e72:	4835      	ldr	r0, [pc, #212]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000e74:	f003 fbd0 	bl	8004618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4833      	ldr	r0, [pc, #204]	; (8000f4c <MX_GPIO_Init+0x15c>)
 8000e7e:	f003 fbcb 	bl	8004618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e82:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	482f      	ldr	r0, [pc, #188]	; (8000f50 <MX_GPIO_Init+0x160>)
 8000e94:	f003 f950 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RELAY_OUTPUT_Pin|SPI1_NSS_Pin;
 8000e98:	2312      	movs	r3, #18
 8000e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4826      	ldr	r0, [pc, #152]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000eb0:	f003 f942 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4820      	ldr	r0, [pc, #128]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000ec8:	f003 f936 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTERRUPT_LORA_Pin;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <MX_GPIO_Init+0x164>)
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERRUPT_LORA_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	481a      	ldr	r0, [pc, #104]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000ee0:	f003 f92a 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OUTPUT_Pin;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <MX_GPIO_Init+0x15c>)
 8000efc:	f003 f91c 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000f00:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000f04:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480e      	ldr	r0, [pc, #56]	; (8000f4c <MX_GPIO_Init+0x15c>)
 8000f12:	f003 f911 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8000f16:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 8000f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	4808      	ldr	r0, [pc, #32]	; (8000f48 <MX_GPIO_Init+0x158>)
 8000f28:	f003 f906 	bl	8004138 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2105      	movs	r1, #5
 8000f30:	2009      	movs	r0, #9
 8000f32:	f002 fde5 	bl	8003b00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f36:	2009      	movs	r0, #9
 8000f38:	f002 fe0e 	bl	8003b58 <HAL_NVIC_EnableIRQ>

}
 8000f3c:	bf00      	nop
 8000f3e:	3720      	adds	r7, #32
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010800 	.word	0x40010800
 8000f4c:	40010c00 	.word	0x40010c00
 8000f50:	40011000 	.word	0x40011000
 8000f54:	10110000 	.word	0x10110000

08000f58 <vSpi1Write>:
  * @param ucData: Data need write into registers or fifo of Lora
  * @retval None
  */

void vSpi1Write(uint8_t ucAddress, uint8_t ucData)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af04      	add	r7, sp, #16
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
  uint8_t ucDataMatrix[2];
  ucAddress |= SPI1_WRITE; /* A wnr bit, which is 1 for write access and 0 for read access */
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f6e:	71fb      	strb	r3, [r7, #7]
  ucDataMatrix[0] = ucAddress;
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	733b      	strb	r3, [r7, #12]
  ucDataMatrix[1] = ucData;
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4822      	ldr	r0, [pc, #136]	; (8001008 <vSpi1Write+0xb0>)
 8000f7e:	f003 fb4b 	bl	8004618 <HAL_GPIO_WritePin>
  HAL_Delay(DELAY_SPI);
 8000f82:	2003      	movs	r0, #3
 8000f84:	f001 ff26 	bl	8002dd4 <HAL_Delay>
  ERROR_CHECK(HAL_SPI_Transmit(&hspi1, (uint8_t*)ucDataMatrix, sizeof(ucDataMatrix), 100));
 8000f88:	f107 010c 	add.w	r1, r7, #12
 8000f8c:	2364      	movs	r3, #100	; 0x64
 8000f8e:	2202      	movs	r2, #2
 8000f90:	481e      	ldr	r0, [pc, #120]	; (800100c <vSpi1Write+0xb4>)
 8000f92:	f004 fc2d 	bl	80057f0 <HAL_SPI_Transmit>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d028      	beq.n	8000fee <vSpi1Write+0x96>
 8000f9c:	f001 ff10 	bl	8002dc0 <HAL_GetTick>
 8000fa0:	4604      	mov	r4, r0
 8000fa2:	f107 010c 	add.w	r1, r7, #12
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	2202      	movs	r2, #2
 8000faa:	4818      	ldr	r0, [pc, #96]	; (800100c <vSpi1Write+0xb4>)
 8000fac:	f004 fc20 	bl	80057f0 <HAL_SPI_Transmit>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d00d      	beq.n	8000fd2 <vSpi1Write+0x7a>
 8000fb6:	f107 010c 	add.w	r1, r7, #12
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	4813      	ldr	r0, [pc, #76]	; (800100c <vSpi1Write+0xb4>)
 8000fc0:	f004 fc16 	bl	80057f0 <HAL_SPI_Transmit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d101      	bne.n	8000fce <vSpi1Write+0x76>
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <vSpi1Write+0xb8>)
 8000fcc:	e002      	b.n	8000fd4 <vSpi1Write+0x7c>
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <vSpi1Write+0xbc>)
 8000fd0:	e000      	b.n	8000fd4 <vSpi1Write+0x7c>
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <vSpi1Write+0xc0>)
 8000fd4:	9303      	str	r3, [sp, #12]
 8000fd6:	231f      	movs	r3, #31
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <vSpi1Write+0xc4>)
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <vSpi1Write+0xc8>)
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <vSpi1Write+0xcc>)
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <vSpi1Write+0xc8>)
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f001 fdd1 	bl	8002b90 <stm_log_write>
  HAL_Delay(DELAY_SPI);
 8000fee:	2003      	movs	r0, #3
 8000ff0:	f001 fef0 	bl	8002dd4 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <vSpi1Write+0xb0>)
 8000ffa:	f003 fb0d 	bl	8004618 <HAL_GPIO_WritePin>
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	bf00      	nop
 8001008:	40010800 	.word	0x40010800
 800100c:	20003a38 	.word	0x20003a38
 8001010:	0800c258 	.word	0x0800c258
 8001014:	0800c264 	.word	0x0800c264
 8001018:	0800c270 	.word	0x0800c270
 800101c:	0800cf44 	.word	0x0800cf44
 8001020:	0800c2ac 	.word	0x0800c2ac
 8001024:	0800c27c 	.word	0x0800c27c

08001028 <ucSpi1Read>:
  * @brief Read Data Function from Lora Module
  * @param ucAddress: Address registers or fifo of Lora Module
  * @retval ucData: Data contained in registers or fifo of Lora Module
  */
uint8_t ucSpi1Read(uint8_t ucAddress)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af04      	add	r7, sp, #16
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
  ucAddress &= SPI1_READ; /* A wnr bit, which is 1 for write access and 0 for read access */
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800103c:	b2db      	uxtb	r3, r3
 800103e:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	483a      	ldr	r0, [pc, #232]	; (8001130 <ucSpi1Read+0x108>)
 8001046:	f003 fae7 	bl	8004618 <HAL_GPIO_WritePin>
  HAL_Delay(DELAY_SPI);
 800104a:	2003      	movs	r0, #3
 800104c:	f001 fec2 	bl	8002dd4 <HAL_Delay>
  ERROR_CHECK(HAL_SPI_Transmit(&hspi1, (uint8_t*)&ucAddress, sizeof(ucAddress), 100));
 8001050:	1df9      	adds	r1, r7, #7
 8001052:	2364      	movs	r3, #100	; 0x64
 8001054:	2201      	movs	r2, #1
 8001056:	4837      	ldr	r0, [pc, #220]	; (8001134 <ucSpi1Read+0x10c>)
 8001058:	f004 fbca 	bl	80057f0 <HAL_SPI_Transmit>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d026      	beq.n	80010b0 <ucSpi1Read+0x88>
 8001062:	f001 fead 	bl	8002dc0 <HAL_GetTick>
 8001066:	4604      	mov	r4, r0
 8001068:	1df9      	adds	r1, r7, #7
 800106a:	2364      	movs	r3, #100	; 0x64
 800106c:	2201      	movs	r2, #1
 800106e:	4831      	ldr	r0, [pc, #196]	; (8001134 <ucSpi1Read+0x10c>)
 8001070:	f004 fbbe 	bl	80057f0 <HAL_SPI_Transmit>
 8001074:	4603      	mov	r3, r0
 8001076:	2b01      	cmp	r3, #1
 8001078:	d00c      	beq.n	8001094 <ucSpi1Read+0x6c>
 800107a:	1df9      	adds	r1, r7, #7
 800107c:	2364      	movs	r3, #100	; 0x64
 800107e:	2201      	movs	r2, #1
 8001080:	482c      	ldr	r0, [pc, #176]	; (8001134 <ucSpi1Read+0x10c>)
 8001082:	f004 fbb5 	bl	80057f0 <HAL_SPI_Transmit>
 8001086:	4603      	mov	r3, r0
 8001088:	2b02      	cmp	r3, #2
 800108a:	d101      	bne.n	8001090 <ucSpi1Read+0x68>
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <ucSpi1Read+0x110>)
 800108e:	e002      	b.n	8001096 <ucSpi1Read+0x6e>
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <ucSpi1Read+0x114>)
 8001092:	e000      	b.n	8001096 <ucSpi1Read+0x6e>
 8001094:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <ucSpi1Read+0x118>)
 8001096:	9303      	str	r3, [sp, #12]
 8001098:	232f      	movs	r3, #47	; 0x2f
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <ucSpi1Read+0x11c>)
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <ucSpi1Read+0x120>)
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4623      	mov	r3, r4
 80010a6:	4a29      	ldr	r2, [pc, #164]	; (800114c <ucSpi1Read+0x124>)
 80010a8:	4927      	ldr	r1, [pc, #156]	; (8001148 <ucSpi1Read+0x120>)
 80010aa:	2001      	movs	r0, #1
 80010ac:	f001 fd70 	bl	8002b90 <stm_log_write>
  ERROR_CHECK(HAL_SPI_Receive(&hspi1, (uint8_t*)&ucData, sizeof(ucData), 100));
 80010b0:	f107 010f 	add.w	r1, r7, #15
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	2201      	movs	r2, #1
 80010b8:	481e      	ldr	r0, [pc, #120]	; (8001134 <ucSpi1Read+0x10c>)
 80010ba:	f004 fce5 	bl	8005a88 <HAL_SPI_Receive>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d028      	beq.n	8001116 <ucSpi1Read+0xee>
 80010c4:	f001 fe7c 	bl	8002dc0 <HAL_GetTick>
 80010c8:	4604      	mov	r4, r0
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	2201      	movs	r2, #1
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <ucSpi1Read+0x10c>)
 80010d4:	f004 fcd8 	bl	8005a88 <HAL_SPI_Receive>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d00d      	beq.n	80010fa <ucSpi1Read+0xd2>
 80010de:	f107 010f 	add.w	r1, r7, #15
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	2201      	movs	r2, #1
 80010e6:	4813      	ldr	r0, [pc, #76]	; (8001134 <ucSpi1Read+0x10c>)
 80010e8:	f004 fcce 	bl	8005a88 <HAL_SPI_Receive>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d101      	bne.n	80010f6 <ucSpi1Read+0xce>
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <ucSpi1Read+0x110>)
 80010f4:	e002      	b.n	80010fc <ucSpi1Read+0xd4>
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <ucSpi1Read+0x114>)
 80010f8:	e000      	b.n	80010fc <ucSpi1Read+0xd4>
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <ucSpi1Read+0x118>)
 80010fc:	9303      	str	r3, [sp, #12]
 80010fe:	2330      	movs	r3, #48	; 0x30
 8001100:	9302      	str	r3, [sp, #8]
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <ucSpi1Read+0x11c>)
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <ucSpi1Read+0x120>)
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4623      	mov	r3, r4
 800110c:	4a0f      	ldr	r2, [pc, #60]	; (800114c <ucSpi1Read+0x124>)
 800110e:	490e      	ldr	r1, [pc, #56]	; (8001148 <ucSpi1Read+0x120>)
 8001110:	2001      	movs	r0, #1
 8001112:	f001 fd3d 	bl	8002b90 <stm_log_write>
  HAL_Delay(DELAY_SPI);
 8001116:	2003      	movs	r0, #3
 8001118:	f001 fe5c 	bl	8002dd4 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2110      	movs	r1, #16
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <ucSpi1Read+0x108>)
 8001122:	f003 fa79 	bl	8004618 <HAL_GPIO_WritePin>
  return ucData;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	40010800 	.word	0x40010800
 8001134:	20003a38 	.word	0x20003a38
 8001138:	0800c258 	.word	0x0800c258
 800113c:	0800c264 	.word	0x0800c264
 8001140:	0800c270 	.word	0x0800c270
 8001144:	0800cf50 	.word	0x0800cf50
 8001148:	0800c2ac 	.word	0x0800c2ac
 800114c:	0800c27c 	.word	0x0800c27c

08001150 <vLongRangeModeInit>:
  * @brief Mode Initialization LoraTM or FSK/OOK
  * @param ucMode: Value of mode: LoraTM if 1, FSK/OOK if 0
  * @retval None
  */
void vLongRangeModeInit(uint8_t ucLongRangeMode)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  vModeInit(SLEEP_MODE);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f870 	bl	8001240 <vModeInit>
  uint8_t ucData = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8001164:	2001      	movs	r0, #1
 8001166:	f7ff ff5f 	bl	8001028 <ucSpi1Read>
 800116a:	4603      	mov	r3, r0
 800116c:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x7F;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001174:	73fb      	strb	r3, [r7, #15]
  if (ucLongRangeMode == 0u || ucLongRangeMode == 1u)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <vLongRangeModeInit+0x32>
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d10c      	bne.n	800119c <vLongRangeModeInit+0x4c>
  {
    ucData |= (ucLongRangeMode << 7);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	01db      	lsls	r3, r3, #7
 8001186:	b25a      	sxtb	r2, r3
 8001188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118c:	4313      	orrs	r3, r2
 800118e:	b25b      	sxtb	r3, r3
 8001190:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	4619      	mov	r1, r3
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff fede 	bl	8000f58 <vSpi1Write>
  }
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <vAccessSharedRegInit>:
  * @brief Access Low Frequency Mode Initialization
  * @param ucAccessSharedReg: Value of mode
  * @retval None
  */
void vAccessSharedRegInit(uint8_t ucAccessSharedReg)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff ff38 	bl	8001028 <ucSpi1Read>
 80011b8:	4603      	mov	r3, r0
 80011ba:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xBF;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011c2:	73fb      	strb	r3, [r7, #15]
  if (ucAccessSharedReg == 0u || ucAccessSharedReg == 1u)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <vAccessSharedRegInit+0x2c>
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d10c      	bne.n	80011ea <vAccessSharedRegInit+0x46>
  {
    ucData |= (ucAccessSharedReg << 6);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	019b      	lsls	r3, r3, #6
 80011d4:	b25a      	sxtb	r2, r3
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	4313      	orrs	r3, r2
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	4619      	mov	r1, r3
 80011e4:	2001      	movs	r0, #1
 80011e6:	f7ff feb7 	bl	8000f58 <vSpi1Write>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <vLowFrequencyModeOnInit>:
  * @brief Access Low Frequency Mode Initialization
  * @param ucLowFrequencyModeOn: Value of mode
  * @retval None
  */
void vLowFrequencyModeOnInit(uint8_t ucLowFrequencyModeOn)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff ff11 	bl	8001028 <ucSpi1Read>
 8001206:	4603      	mov	r3, r0
 8001208:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF7;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	f023 0308 	bic.w	r3, r3, #8
 8001210:	73fb      	strb	r3, [r7, #15]
  if (ucLowFrequencyModeOn == 0u || ucLowFrequencyModeOn == 1u)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <vLowFrequencyModeOnInit+0x2c>
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d10c      	bne.n	8001238 <vLowFrequencyModeOnInit+0x46>
  {
    ucData |= (ucLowFrequencyModeOn << 3);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	b25a      	sxtb	r2, r3
 8001224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001228:	4313      	orrs	r3, r2
 800122a:	b25b      	sxtb	r3, r3
 800122c:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	4619      	mov	r1, r3
 8001232:	2001      	movs	r0, #1
 8001234:	f7ff fe90 	bl	8000f58 <vSpi1Write>
  }
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <vModeInit>:
  * @brief Device Modes Initialization
  * @param ucDeviceMode: Value of mode
  * @retval None
  */
void vModeInit(uint8_t ucMode)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af04      	add	r7, sp, #16
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  STM_LOGD("LoRa", "LoRa -> %s", WHICH_MODE(ucMode));
 800124a:	f001 fdb9 	bl	8002dc0 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d010      	beq.n	8001278 <vModeInit+0x38>
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d00b      	beq.n	8001274 <vModeInit+0x34>
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d006      	beq.n	8001270 <vModeInit+0x30>
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b05      	cmp	r3, #5
 8001266:	d101      	bne.n	800126c <vModeInit+0x2c>
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <vModeInit+0x8c>)
 800126a:	e006      	b.n	800127a <vModeInit+0x3a>
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <vModeInit+0x90>)
 800126e:	e004      	b.n	800127a <vModeInit+0x3a>
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <vModeInit+0x94>)
 8001272:	e002      	b.n	800127a <vModeInit+0x3a>
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <vModeInit+0x98>)
 8001276:	e000      	b.n	800127a <vModeInit+0x3a>
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <vModeInit+0x9c>)
 800127a:	9303      	str	r3, [sp, #12]
 800127c:	2371      	movs	r3, #113	; 0x71
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <vModeInit+0xa0>)
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <vModeInit+0xa4>)
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	4613      	mov	r3, r2
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <vModeInit+0xa8>)
 800128c:	4915      	ldr	r1, [pc, #84]	; (80012e4 <vModeInit+0xa4>)
 800128e:	2004      	movs	r0, #4
 8001290:	f001 fc7e 	bl	8002b90 <stm_log_write>
  uint8_t ucData = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff fec5 	bl	8001028 <ucSpi1Read>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f023 0307 	bic.w	r3, r3, #7
 80012a8:	73fb      	strb	r3, [r7, #15]
  if (ucMode >= 0u && ucMode <= 7u)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b07      	cmp	r3, #7
 80012ae:	d808      	bhi.n	80012c2 <vModeInit+0x82>
  {
    ucData |= ucMode;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	4619      	mov	r1, r3
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff fe4b 	bl	8000f58 <vSpi1Write>
  }
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	0800c2bc 	.word	0x0800c2bc
 80012d0:	0800c2c4 	.word	0x0800c2c4
 80012d4:	0800c2cc 	.word	0x0800c2cc
 80012d8:	0800c2d0 	.word	0x0800c2d0
 80012dc:	0800c2d8 	.word	0x0800c2d8
 80012e0:	0800cf5c 	.word	0x0800cf5c
 80012e4:	0800c310 	.word	0x0800c310
 80012e8:	0800c2e0 	.word	0x0800c2e0

080012ec <vFrfInit>:
  * @brief RF carrier frequency Initialization
  * @param uiFrf: Value of RF carrier frequency
  * @retval None
  */
void vFrfInit(unsigned int uiFrf)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  vSpi1Write(RegFrfMsb, (uint8_t)(uiFrf >> 16));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	0c1b      	lsrs	r3, r3, #16
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	2006      	movs	r0, #6
 80012fe:	f7ff fe2b 	bl	8000f58 <vSpi1Write>
  vSpi1Write(RegFrfMid, (uint8_t)(uiFrf >> 8));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4619      	mov	r1, r3
 800130a:	2007      	movs	r0, #7
 800130c:	f7ff fe24 	bl	8000f58 <vSpi1Write>
  vSpi1Write(RegFrfLsb, (uint8_t)uiFrf);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4619      	mov	r1, r3
 8001316:	2008      	movs	r0, #8
 8001318:	f7ff fe1e 	bl	8000f58 <vSpi1Write>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <vPaSelectInit>:
  * @brief Power Amplifier Initialization
  * @param ucPaSelect: Power Amplifier Value
  * @retval None
  */
void vPaSelectInit(uint8_t ucPaSelect)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaConfig);
 8001332:	2009      	movs	r0, #9
 8001334:	f7ff fe78 	bl	8001028 <ucSpi1Read>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x7F;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001342:	73fb      	strb	r3, [r7, #15]
  if (ucPaSelect == 0u || ucPaSelect == 1u)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <vPaSelectInit+0x2c>
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d10c      	bne.n	800136a <vPaSelectInit+0x46>
  {
    ucData |= (ucPaSelect << 7);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	01db      	lsls	r3, r3, #7
 8001354:	b25a      	sxtb	r2, r3
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4313      	orrs	r3, r2
 800135c:	b25b      	sxtb	r3, r3
 800135e:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaConfig, ucData);
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	4619      	mov	r1, r3
 8001364:	2009      	movs	r0, #9
 8001366:	f7ff fdf7 	bl	8000f58 <vSpi1Write>
  }
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <vOutputPowerInit>:
  * @brief Output Power Initialization
  * @param ucOutputPower: Output Power Value
  * @retval None
  */
void vOutputPowerInit(uint8_t ucOutputPower)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaConfig);
 8001380:	2009      	movs	r0, #9
 8001382:	f7ff fe51 	bl	8001028 <ucSpi1Read>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF0;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	f023 030f 	bic.w	r3, r3, #15
 8001390:	73fb      	strb	r3, [r7, #15]
  if (ucOutputPower >= 0u && ucOutputPower <= 15u)
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d808      	bhi.n	80013aa <vOutputPowerInit+0x38>
  {
    ucData |= ucOutputPower;
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4313      	orrs	r3, r2
 800139e:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaConfig, ucData);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	4619      	mov	r1, r3
 80013a4:	2009      	movs	r0, #9
 80013a6:	f7ff fdd7 	bl	8000f58 <vSpi1Write>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <vPaRampInit>:
  * @brief Rise/Fall time of ramp up/down in FSK Initialization
  * @param ucPaRamp: Ramp Value
  * @retval None
  */
void vPaRampInit(uint8_t ucPaRamp)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaRamp);
 80013c0:	200a      	movs	r0, #10
 80013c2:	f7ff fe31 	bl	8001028 <ucSpi1Read>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF0;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	f023 030f 	bic.w	r3, r3, #15
 80013d0:	73fb      	strb	r3, [r7, #15]
  if (ucPaRamp >= 0u && ucPaRamp <= 15u)
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	d808      	bhi.n	80013ea <vPaRampInit+0x38>
  {
    ucData |= ucPaRamp;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4313      	orrs	r3, r2
 80013de:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaRamp, ucData);
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	4619      	mov	r1, r3
 80013e4:	200a      	movs	r0, #10
 80013e6:	f7ff fdb7 	bl	8000f58 <vSpi1Write>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <vOcpTrimInit>:
  * @brief  Overload Current Protection Initialization
  * @param ucOcpTrim: OcpTrim Value
  * @retval None
  */
void vOcpTrimInit(uint8_t ucOcpTrim)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOcp);
 8001400:	200b      	movs	r0, #11
 8001402:	f7ff fe11 	bl	8001028 <ucSpi1Read>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xE0;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	f023 031f 	bic.w	r3, r3, #31
 8001410:	73fb      	strb	r3, [r7, #15]
  if (ucOcpTrim >= 0u && ucOcpTrim <= 31u)
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b1f      	cmp	r3, #31
 8001416:	d808      	bhi.n	800142a <vOcpTrimInit+0x38>
  {
    ucData |= ucOcpTrim;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4313      	orrs	r3, r2
 800141e:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOcp, ucData);
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	4619      	mov	r1, r3
 8001424:	200b      	movs	r0, #11
 8001426:	f7ff fd97 	bl	8000f58 <vSpi1Write>
  }
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <vFifoTxBaseAddrInit>:
  * @brief Base address in FIFO data buffer for TX modulator Initialization
  * @param ucFifoTxBaseAddr: Base Address Value for Tx
  * @retval None
  */
void vFifoTxBaseAddrInit(uint8_t ucFifoTxBaseAddr)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegFifoTxBaseAddr, ucFifoTxBaseAddr);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4619      	mov	r1, r3
 8001440:	200e      	movs	r0, #14
 8001442:	f7ff fd89 	bl	8000f58 <vSpi1Write>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <vFifoRxBaseAddrInit>:
  * @brief Base address in FIFO data buffer for RX modulator Initialization
  * @param ucFifoRxBaseAddr: Base Address Value for Rx
  * @retval None
  */
void vFifoRxBaseAddrInit(uint8_t ucFifoRxBaseAddr)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegFifoRxBaseAddr, ucFifoRxBaseAddr);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	4619      	mov	r1, r3
 800145c:	200f      	movs	r0, #15
 800145e:	f7ff fd7b 	bl	8000f58 <vSpi1Write>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <vBandWidthInit>:
  * @brief Signal bandwidth Initialization
  * @param ucBandWidth: BandWidth Value
  * @retval None
  */
void vBandWidthInit(uint8_t ucBandWidth)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b084      	sub	sp, #16
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig1);
 8001478:	201d      	movs	r0, #29
 800147a:	f7ff fdd5 	bl	8001028 <ucSpi1Read>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x0F;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	73fb      	strb	r3, [r7, #15]
  if (ucBandWidth >= 0u && ucBandWidth <= 9u)
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b09      	cmp	r3, #9
 800148e:	d80c      	bhi.n	80014aa <vBandWidthInit+0x40>
  {
    ucData |= (ucBandWidth << 4);
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	b25a      	sxtb	r2, r3
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4313      	orrs	r3, r2
 800149c:	b25b      	sxtb	r3, r3
 800149e:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig1, ucData);
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	4619      	mov	r1, r3
 80014a4:	201d      	movs	r0, #29
 80014a6:	f7ff fd57 	bl	8000f58 <vSpi1Write>
  }
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <vCodingRateInit>:
  * @brief Error coding rate Initialization
  * @param ucCodingRate: Error coding rate Value
  * @retval None
  */
void vCodingRateInit(uint8_t ucCodingRate)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig1);
 80014c0:	201d      	movs	r0, #29
 80014c2:	f7ff fdb1 	bl	8001028 <ucSpi1Read>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF1;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	f023 030e 	bic.w	r3, r3, #14
 80014d0:	73fb      	strb	r3, [r7, #15]
  if (ucCodingRate >= 1u && ucCodingRate <= 4u)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00f      	beq.n	80014f8 <vCodingRateInit+0x46>
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d80c      	bhi.n	80014f8 <vCodingRateInit+0x46>
  {
    ucData |= (ucCodingRate << 1);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig1, ucData);
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	4619      	mov	r1, r3
 80014f2:	201d      	movs	r0, #29
 80014f4:	f7ff fd30 	bl	8000f58 <vSpi1Write>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <vImplicitHeaderModeOnInit>:
  * @brief Explicit or Implicit Header mode Initialization
  * @param ucHeaderMode: Error coding rate Value
  * @retval None
  */
void vImplicitHeaderModeOnInit(uint8_t ucHeaderMode)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig1);
 800150e:	201d      	movs	r0, #29
 8001510:	f7ff fd8a 	bl	8001028 <ucSpi1Read>
 8001514:	4603      	mov	r3, r0
 8001516:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xFE;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
  if (ucHeaderMode == 0u || ucHeaderMode == 1u)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <vImplicitHeaderModeOnInit+0x2c>
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d108      	bne.n	800153e <vImplicitHeaderModeOnInit+0x3e>
  {
    ucData |= ucHeaderMode;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4313      	orrs	r3, r2
 8001532:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig1, ucData);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	4619      	mov	r1, r3
 8001538:	201d      	movs	r0, #29
 800153a:	f7ff fd0d 	bl	8000f58 <vSpi1Write>
  }
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <vSpreadingFactorInit>:
  * @brief Spreading Factor rate Initialization
  * @param ucSpreadingFactor: Spreading Factor Value
  * @retval None
  */
void vSpreadingFactorInit(uint8_t ucSpreadingFactor)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig2);
 8001554:	201e      	movs	r0, #30
 8001556:	f7ff fd67 	bl	8001028 <ucSpi1Read>
 800155a:	4603      	mov	r3, r0
 800155c:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x0F;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	73fb      	strb	r3, [r7, #15]
  if (ucSpreadingFactor >= 6u && ucSpreadingFactor <= 12u)
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b05      	cmp	r3, #5
 800156a:	d90f      	bls.n	800158c <vSpreadingFactorInit+0x46>
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b0c      	cmp	r3, #12
 8001570:	d80c      	bhi.n	800158c <vSpreadingFactorInit+0x46>
  {
    ucData |= (ucSpreadingFactor << 4);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	b25a      	sxtb	r2, r3
 8001578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157c:	4313      	orrs	r3, r2
 800157e:	b25b      	sxtb	r3, r3
 8001580:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig2, ucData);
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	4619      	mov	r1, r3
 8001586:	201e      	movs	r0, #30
 8001588:	f7ff fce6 	bl	8000f58 <vSpi1Write>
  }
}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <vRxPayloadCrcOnInit>:
  * @brief CRC generation and check on payload Initialization
  * @param ucRxPayloadCrcOn: CRCON Value
  * @retval None
  */
void vRxPayloadCrcOnInit(uint8_t ucRxPayloadCrcOn)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig2);
 80015a2:	201e      	movs	r0, #30
 80015a4:	f7ff fd40 	bl	8001028 <ucSpi1Read>
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xFB;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	f023 0304 	bic.w	r3, r3, #4
 80015b2:	73fb      	strb	r3, [r7, #15]
  if (ucRxPayloadCrcOn == 0u || ucRxPayloadCrcOn == 1u)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <vRxPayloadCrcOnInit+0x2c>
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d10c      	bne.n	80015da <vRxPayloadCrcOnInit+0x46>
  {
    ucData |= (ucRxPayloadCrcOn << 2);
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	b25a      	sxtb	r2, r3
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig2, ucData);
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	4619      	mov	r1, r3
 80015d4:	201e      	movs	r0, #30
 80015d6:	f7ff fcbf 	bl	8000f58 <vSpi1Write>
  }
}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <vPreambleLengthInit>:
  * @brief Preamble Length Initialization
  * @param ucPreambleLength: Preamble Length Value
  * @retval None
  */
void vPreambleLengthInit(uint16_t ucPreambleLength)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	80fb      	strh	r3, [r7, #6]
  vSpi1Write(RegPreambleMsb, (uint8_t)(ucPreambleLength >> 8));
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	4619      	mov	r1, r3
 80015f6:	2020      	movs	r0, #32
 80015f8:	f7ff fcae 	bl	8000f58 <vSpi1Write>
  vSpi1Write(RegPreambleLsb, (uint8_t)(ucPreambleLength));
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4619      	mov	r1, r3
 8001602:	2021      	movs	r0, #33	; 0x21
 8001604:	f7ff fca8 	bl	8000f58 <vSpi1Write>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <vPayloadLengthInit>:
  * @brief Payload Length Initialization
  * @param ucPayloadLength: Payload Length Value
  * @retval None
  */
void vPayloadLengthInit(uint8_t ucPayloadLength)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegPayloadLength, ucPayloadLength);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	4619      	mov	r1, r3
 800161e:	2022      	movs	r0, #34	; 0x22
 8001620:	f7ff fc9a 	bl	8000f58 <vSpi1Write>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <vLowDataRateOptimizeInit>:
  * @brief Low Data Rate Optimize Initialization
  * @param ucLowDataRateOptimize: Low Data Rate Optimize Value to Disable or Enable
  * @retval None
  */
void vLowDataRateOptimizeInit(uint8_t ucLowDataRateOptimize)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig3);
 800163a:	2026      	movs	r0, #38	; 0x26
 800163c:	f7ff fcf4 	bl	8001028 <ucSpi1Read>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF7;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	f023 0308 	bic.w	r3, r3, #8
 800164a:	73fb      	strb	r3, [r7, #15]
  if (ucLowDataRateOptimize == 0u || ucLowDataRateOptimize == 1u)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <vLowDataRateOptimizeInit+0x2c>
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d10c      	bne.n	8001672 <vLowDataRateOptimizeInit+0x46>
  {
    ucData |= (ucLowDataRateOptimize << 3);
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	b25a      	sxtb	r2, r3
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4313      	orrs	r3, r2
 8001664:	b25b      	sxtb	r3, r3
 8001666:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig3, ucData);
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	4619      	mov	r1, r3
 800166c:	2026      	movs	r0, #38	; 0x26
 800166e:	f7ff fc73 	bl	8000f58 <vSpi1Write>
  }
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <vDetectionOptimizeInit>:
  * @brief  LoRa Detection Optimize Initialization
  * @param ucDetectionOptimize: Detection Optimize Value
  * @retval None
  */
void vDetectionOptimizeInit(uint8_t ucDetectionOptimize)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegDetectOptimize);
 8001688:	2031      	movs	r0, #49	; 0x31
 800168a:	f7ff fccd 	bl	8001028 <ucSpi1Read>
 800168e:	4603      	mov	r3, r0
 8001690:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	f023 0307 	bic.w	r3, r3, #7
 8001698:	73fb      	strb	r3, [r7, #15]
  if (ucDetectionOptimize == 3u || ucDetectionOptimize == 5u)
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d002      	beq.n	80016a6 <vDetectionOptimizeInit+0x2c>
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d108      	bne.n	80016b8 <vDetectionOptimizeInit+0x3e>
  {
    ucData |= ucDetectionOptimize;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegDetectOptimize, ucData);
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	4619      	mov	r1, r3
 80016b2:	2031      	movs	r0, #49	; 0x31
 80016b4:	f7ff fc50 	bl	8000f58 <vSpi1Write>
  }
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <vDetectionThresholdInit>:
  * @brief LoRa detection threshold Initialization
  * @param ucDetectionThreshold: LoRa detection threshold Value
  * @retval None
  */
void vDetectionThresholdInit(uint8_t ucDetectionThreshold)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  if (ucDetectionThreshold == 0x0A || ucDetectionThreshold == 0x0C)
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b0a      	cmp	r3, #10
 80016ce:	d002      	beq.n	80016d6 <vDetectionThresholdInit+0x16>
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b0c      	cmp	r3, #12
 80016d4:	d104      	bne.n	80016e0 <vDetectionThresholdInit+0x20>
  {
    vSpi1Write(RegDetectionThreshold, ucDetectionThreshold);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	4619      	mov	r1, r3
 80016da:	2037      	movs	r0, #55	; 0x37
 80016dc:	f7ff fc3c 	bl	8000f58 <vSpi1Write>
  }
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <vTcxoInputOnInit>:
  * @brief Controls the crystal oscillator Initialization
  * @param ucTcxoInputOn: Tcxo Input On Value
  * @retval None
  */
void vTcxoInputOnInit(uint8_t ucTcxoInputOn)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegTcxo);
 80016f6:	204b      	movs	r0, #75	; 0x4b
 80016f8:	f7ff fc96 	bl	8001028 <ucSpi1Read>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xEF;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	f023 0310 	bic.w	r3, r3, #16
 8001706:	73fb      	strb	r3, [r7, #15]
  if (ucTcxoInputOn == 0u || ucTcxoInputOn == 1u)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <vTcxoInputOnInit+0x2c>
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d10c      	bne.n	800172e <vTcxoInputOnInit+0x46>
  {
    ucData |= (ucTcxoInputOn << 4);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	b25a      	sxtb	r2, r3
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegTcxo, ucData);
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	4619      	mov	r1, r3
 8001728:	204b      	movs	r0, #75	; 0x4b
 800172a:	f7ff fc15 	bl	8000f58 <vSpi1Write>
  }
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <vPaDacInit>:
  * @brief Enables the +20dBm option on PA_BOOST pin Initialization
  * @param ucPaDac: Pa Dac Value
  * @retval None
  */
void vPaDacInit(uint8_t ucPaDac)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaDac);
 8001744:	204d      	movs	r0, #77	; 0x4d
 8001746:	f7ff fc6f 	bl	8001028 <ucSpi1Read>
 800174a:	4603      	mov	r3, r0
 800174c:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	f023 0307 	bic.w	r3, r3, #7
 8001754:	73fb      	strb	r3, [r7, #15]
  if (ucPaDac == 4u || ucPaDac == 7u)
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b04      	cmp	r3, #4
 800175a:	d002      	beq.n	8001762 <vPaDacInit+0x2c>
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b07      	cmp	r3, #7
 8001760:	d108      	bne.n	8001774 <vPaDacInit+0x3e>
  {
    ucData |= ucPaDac;
 8001762:	7bfa      	ldrb	r2, [r7, #15]
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4313      	orrs	r3, r2
 8001768:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaDac, ucData);
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	4619      	mov	r1, r3
 800176e:	204d      	movs	r0, #77	; 0x4d
 8001770:	f7ff fbf2 	bl	8000f58 <vSpi1Write>
  }
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <vLoraInit>:
  * @brief Lora Module Initialization
  * @param: None
  * @retval: None
  */
void vLoraInit(LoraConf_t* LoraInit)
{
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	b095      	sub	sp, #84	; 0x54
 8001780:	af0e      	add	r7, sp, #56	; 0x38
 8001782:	60f8      	str	r0, [r7, #12]

  STM_LOGD("LoRa", "LoRa init");
 8001784:	f001 fb1c 	bl	8002dc0 <HAL_GetTick>
 8001788:	4603      	mov	r3, r0
 800178a:	f240 424b 	movw	r2, #1099	; 0x44b
 800178e:	9202      	str	r2, [sp, #8]
 8001790:	4a73      	ldr	r2, [pc, #460]	; (8001960 <vLoraInit+0x1e4>)
 8001792:	9201      	str	r2, [sp, #4]
 8001794:	4a73      	ldr	r2, [pc, #460]	; (8001964 <vLoraInit+0x1e8>)
 8001796:	9200      	str	r2, [sp, #0]
 8001798:	4a73      	ldr	r2, [pc, #460]	; (8001968 <vLoraInit+0x1ec>)
 800179a:	4972      	ldr	r1, [pc, #456]	; (8001964 <vLoraInit+0x1e8>)
 800179c:	2004      	movs	r0, #4
 800179e:	f001 f9f7 	bl	8002b90 <stm_log_write>

  vLongRangeModeInit(LORA_MODE); /*  Init Module Lora into Lora TM Mode */
 80017a2:	2001      	movs	r0, #1
 80017a4:	f7ff fcd4 	bl	8001150 <vLongRangeModeInit>
  // LORA_GET_REGISTER(RegOpMode);

  vModeInit(STDBY_MODE);                              /* Init Module Lora into Standby Mode */
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7ff fd49 	bl	8001240 <vModeInit>
  vAccessSharedRegInit(LoraInit->Access_Shared_Reg);        /* Access LoRa registers page 0x0D: 0x3F */
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fcf6 	bl	80011a4 <vAccessSharedRegInit>
  vLowFrequencyModeOnInit(LoraInit->Access_Frequence_Mode); /* Access Low Frequency Mode registers */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	785b      	ldrb	r3, [r3, #1]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fd18 	bl	80011f2 <vLowFrequencyModeOnInit>
  // LORA_GET_REGISTER(RegOpMode);

  vFrfInit(LoraInit->Rf_Frequency); /*  Init RF carrier frequency */
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fd90 	bl	80012ec <vFrfInit>
  // LORA_GET_REGISTER(RegFrfMsb);
  // LORA_GET_REGISTER(RegFrfMid);
  // LORA_GET_REGISTER(RegFrfLsb);

  vPaSelectInit(LoraInit->Pa_Select); /* Output power is limited to +20 dBm */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	7a1b      	ldrb	r3, [r3, #8]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fda7 	bl	8001324 <vPaSelectInit>
  // vMaxPowerInit(MAX_POWER);
  vOutputPowerInit(LoraInit->Output_Power); /* Pout=17-(15-OutputPower) */
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	7a5b      	ldrb	r3, [r3, #9]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fdc9 	bl	8001372 <vOutputPowerInit>
  // LORA_GET_REGISTER(RegPaConfig);

  vPaRampInit(PA_RAMP);
 80017e0:	2008      	movs	r0, #8
 80017e2:	f7ff fde6 	bl	80013b2 <vPaRampInit>
  // LORA_GET_REGISTER(RegPaRamp);

  // vOcpOnInit(OCP_ON); /* OCP enabled */
  vOcpTrimInit(LoraInit->Ocp_Strim); /* Trimming of OCP current: Imax = 240mA */
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	7a9b      	ldrb	r3, [r3, #10]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fe01 	bl	80013f2 <vOcpTrimInit>
  // LORA_GET_REGISTER(RegLna);
  // vLnaBoostLfInit(LNA_BOOST_LF); /* Low Frequency (RFI_LF) LNA current adjustment Default LNA current */
  // vLnaBoostHfInit(LNA_BOOST_HF); /* High Frequency (RFI_HF) LNA current adjustment Boost on, 150% LNA current */
  // LORA_GET_REGISTER(RegLna);

  vFifoTxBaseAddrInit(LoraInit->Fifo_Tx_Base_Addr); /* Write base address in FIFO data buffer for TX modulator */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	7adb      	ldrb	r3, [r3, #11]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe1c 	bl	8001432 <vFifoTxBaseAddrInit>
  // LORA_GET_REGISTER(RegFifoTxBaseAddr);

  vFifoRxBaseAddrInit(LoraInit->Fifo_Rx_Base_Addr); /* Read base address in FIFO data buffer for RX demodulator */
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	7b1b      	ldrb	r3, [r3, #12]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fe25 	bl	800144e <vFifoRxBaseAddrInit>

  // vIrqFlagsMaskInit(IRQ_FLAGS_MASK); /* Disable all interrupts mask */
  // LORA_GET_REGISTER(RegIrqFlagsMask);

  // vBandWidthInit(BANDWIDTH_125K); /*  Signal bandwidth: BANDWIDTH_125K */
  vCodingRateInit(LoraInit->Coding_Rate); /* ANCHOR Error coding rate 4/5 */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	7b5b      	ldrb	r3, [r3, #13]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fe52 	bl	80014b2 <vCodingRateInit>

  vBandWidthInit(LoraInit->Band_Width);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	7b9b      	ldrb	r3, [r3, #14]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fe29 	bl	800146a <vBandWidthInit>
  // vCodingRateInit(CODING_RATE_4_5);
  vImplicitHeaderModeOnInit(LoraInit->Header_Mode); /* ANCHOR Init Implicit Header mode */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	7bdb      	ldrb	r3, [r3, #15]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe6f 	bl	8001500 <vImplicitHeaderModeOnInit>
  // LORA_GET_REGISTER(RegModemConfig1);

  vSpreadingFactorInit(LoraInit->Spreading_Factor); /* ANCHOR SF rate 64 chips / symbol */
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	7c1b      	ldrb	r3, [r3, #16]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fe8d 	bl	8001546 <vSpreadingFactorInit>
  // LORA_GET_REGISTER(RegModemConfig2);
  // vTxContinuousModeInit(TX_SINGLE); /* ANCHOR Normal mode, a single packet is sent */
  vRxPayloadCrcOnInit(LoraInit->Rx_Payload_Crc); /* ANCHOR Enable CRC generation and check on payload */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	7c5b      	ldrb	r3, [r3, #17]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff feaf 	bl	8001594 <vRxPayloadCrcOnInit>

  // vSymbTimeoutInit(RX_TIMEOUT); /* ANCHOR RX operation time-out */
  // // LORA_GET_REGISTER(RegModemConfig2);
  // // LORA_GET_REGISTER(RegSymbTimeoutLsb);

  vPreambleLengthInit(LoraInit->Preamble_Length); /* ANCHOR Preamble length = PreambleLength + 4.25 Symbols */
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8a5b      	ldrh	r3, [r3, #18]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fed1 	bl	80015e2 <vPreambleLengthInit>
  // // LORA_GET_REGISTER(RegPreambleMsb);
  // // LORA_GET_REGISTER(RegPreambleLsb);

  vPayloadLengthInit(LoraInit->Payload_Length); /*  Init Payload length */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	7d1b      	ldrb	r3, [r3, #20]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fee3 	bl	8001610 <vPayloadLengthInit>
  // // LORA_GET_REGISTER(RegMaxPayloadLength);

  // vFreqHoppingPeriodInit(FREQ_HOPPING_PERIOD); /* Symbol periods between frequency hops */
  // // LORA_GET_REGISTER(RegHopPeriod);

  vLowDataRateOptimizeInit(LOW_DATA_RATE_OPTIMIZE); /* Enabled; mandated for when the symbol length exceeds16ms */
 800184a:	2001      	movs	r0, #1
 800184c:	f7ff feee 	bl	800162c <vLowDataRateOptimizeInit>





  vDetectionOptimizeInit(LoraInit->Detection_Optimize); /* LoRa Detection Optimize 0x03 -> SF7 to SF12; 0x05 -> SF6 */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	7d5b      	ldrb	r3, [r3, #21]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff10 	bl	800167a <vDetectionOptimizeInit>





  vDetectionThresholdInit(LoraInit->Detection_Threshold); /* ANCHOR LoRa detection threshold 0x0A -> SF7 to SF12; 0x0C -> SF6 */
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	7d9b      	ldrb	r3, [r3, #22]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff2e 	bl	80016c0 <vDetectionThresholdInit>

  // vMapPreambleDetect(PREAMBBLE_DETECT_INTERRUPT);
  // // LORA_GET_REGISTER(RegTcxo);
  // printf("RegTcxo = 0x%x\r\n", ucData);

  vTcxoInputOnInit(LoraInit->Crystal_Oscillator); /* ANCHOR Controls the crystal oscillator */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	7ddb      	ldrb	r3, [r3, #23]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff3d 	bl	80016e8 <vTcxoInputOnInit>
  // LORA_GET_REGISTER(RegTcxo);

  vPaDacInit(LoraInit->Pa_Dac); /* Enables the +20dBm option on PA_BOOST pin */
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	7e1b      	ldrb	r3, [r3, #24]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff5f 	bl	8001736 <vPaDacInit>
  // LORA_GET_REGISTER(RegPaDac);
  // LORA_GET_REGISTER(RegLna);
  // LORA_GET_REGISTER(RegVersion);
  // LORA_GET_REGISTER(RegOpMode);
  LORA_GET_REGISTER(RegVersion);
 8001878:	2042      	movs	r0, #66	; 0x42
 800187a:	f7ff fbd5 	bl	8001028 <ucSpi1Read>
 800187e:	4603      	mov	r3, r0
 8001880:	75fb      	strb	r3, [r7, #23]
 8001882:	f001 fa9d 	bl	8002dc0 <HAL_GetTick>
 8001886:	4686      	mov	lr, r0
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001890:	2a00      	cmp	r2, #0
 8001892:	da01      	bge.n	8001898 <vLoraInit+0x11c>
 8001894:	2231      	movs	r2, #49	; 0x31
 8001896:	e000      	b.n	800189a <vLoraInit+0x11e>
 8001898:	2230      	movs	r2, #48	; 0x30
 800189a:	7df9      	ldrb	r1, [r7, #23]
 800189c:	f001 0140 	and.w	r1, r1, #64	; 0x40
 80018a0:	2900      	cmp	r1, #0
 80018a2:	d001      	beq.n	80018a8 <vLoraInit+0x12c>
 80018a4:	2131      	movs	r1, #49	; 0x31
 80018a6:	e000      	b.n	80018aa <vLoraInit+0x12e>
 80018a8:	2130      	movs	r1, #48	; 0x30
 80018aa:	7df8      	ldrb	r0, [r7, #23]
 80018ac:	f000 0020 	and.w	r0, r0, #32
 80018b0:	2800      	cmp	r0, #0
 80018b2:	d001      	beq.n	80018b8 <vLoraInit+0x13c>
 80018b4:	2031      	movs	r0, #49	; 0x31
 80018b6:	e000      	b.n	80018ba <vLoraInit+0x13e>
 80018b8:	2030      	movs	r0, #48	; 0x30
 80018ba:	7dfc      	ldrb	r4, [r7, #23]
 80018bc:	f004 0410 	and.w	r4, r4, #16
 80018c0:	2c00      	cmp	r4, #0
 80018c2:	d001      	beq.n	80018c8 <vLoraInit+0x14c>
 80018c4:	2431      	movs	r4, #49	; 0x31
 80018c6:	e000      	b.n	80018ca <vLoraInit+0x14e>
 80018c8:	2430      	movs	r4, #48	; 0x30
 80018ca:	7dfd      	ldrb	r5, [r7, #23]
 80018cc:	f005 0508 	and.w	r5, r5, #8
 80018d0:	2d00      	cmp	r5, #0
 80018d2:	d001      	beq.n	80018d8 <vLoraInit+0x15c>
 80018d4:	2531      	movs	r5, #49	; 0x31
 80018d6:	e000      	b.n	80018da <vLoraInit+0x15e>
 80018d8:	2530      	movs	r5, #48	; 0x30
 80018da:	7dfe      	ldrb	r6, [r7, #23]
 80018dc:	f006 0604 	and.w	r6, r6, #4
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d001      	beq.n	80018e8 <vLoraInit+0x16c>
 80018e4:	2631      	movs	r6, #49	; 0x31
 80018e6:	e000      	b.n	80018ea <vLoraInit+0x16e>
 80018e8:	2630      	movs	r6, #48	; 0x30
 80018ea:	f897 c017 	ldrb.w	ip, [r7, #23]
 80018ee:	f00c 0c02 	and.w	ip, ip, #2
 80018f2:	f1bc 0f00 	cmp.w	ip, #0
 80018f6:	d002      	beq.n	80018fe <vLoraInit+0x182>
 80018f8:	2331      	movs	r3, #49	; 0x31
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	e001      	b.n	8001902 <vLoraInit+0x186>
 80018fe:	2330      	movs	r3, #48	; 0x30
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	f897 c017 	ldrb.w	ip, [r7, #23]
 8001906:	f00c 0c01 	and.w	ip, ip, #1
 800190a:	f1bc 0f00 	cmp.w	ip, #0
 800190e:	d001      	beq.n	8001914 <vLoraInit+0x198>
 8001910:	2331      	movs	r3, #49	; 0x31
 8001912:	e000      	b.n	8001916 <vLoraInit+0x19a>
 8001914:	2330      	movs	r3, #48	; 0x30
 8001916:	930c      	str	r3, [sp, #48]	; 0x30
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	930b      	str	r3, [sp, #44]	; 0x2c
 800191c:	960a      	str	r6, [sp, #40]	; 0x28
 800191e:	9509      	str	r5, [sp, #36]	; 0x24
 8001920:	9408      	str	r4, [sp, #32]
 8001922:	9007      	str	r0, [sp, #28]
 8001924:	9106      	str	r1, [sp, #24]
 8001926:	9205      	str	r2, [sp, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	9304      	str	r3, [sp, #16]
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <vLoraInit+0x1f0>)
 800192e:	9303      	str	r3, [sp, #12]
 8001930:	f240 43d5 	movw	r3, #1237	; 0x4d5
 8001934:	9302      	str	r3, [sp, #8]
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <vLoraInit+0x1e4>)
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <vLoraInit+0x1f4>)
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	4673      	mov	r3, lr
 8001940:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <vLoraInit+0x1f8>)
 8001942:	490b      	ldr	r1, [pc, #44]	; (8001970 <vLoraInit+0x1f4>)
 8001944:	2005      	movs	r0, #5
 8001946:	f001 f923 	bl	8002b90 <stm_log_write>
  // LORA_GET_REGISTER(0x3B);
  // vSpi1Write(0x3B, 0xAA);
  // LORA_GET_REGISTER(0x3B);
  /* Reset Rx Pointer */
  vModeInit(STDBY_MODE);
 800194a:	2001      	movs	r0, #1
 800194c:	f7ff fc78 	bl	8001240 <vModeInit>
  vModeInit(RXCONTINUOUS_MODE);
 8001950:	2005      	movs	r0, #5
 8001952:	f7ff fc75 	bl	8001240 <vModeInit>
  // LORA_GET_REGISTER(RegOpMode);

}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195e:	bf00      	nop
 8001960:	0800cf68 	.word	0x0800cf68
 8001964:	0800c310 	.word	0x0800c310
 8001968:	0800c36c 	.word	0x0800c36c
 800196c:	0800c3e0 	.word	0x0800c3e0
 8001970:	0800c3d8 	.word	0x0800c3d8
 8001974:	0800c39c 	.word	0x0800c39c

08001978 <LoRaTransmit>:
{
  return (ucSpi1Read(RegModemConfig2) & SPREADING_FACTOR_Msk) >> SPREADING_FACTOR_MskPos;
}

void LoRaTransmit(uint8_t* data, uint8_t size, uint32_t timeoutMs)
{
 8001978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197a:	b09b      	sub	sp, #108	; 0x6c
 800197c:	af0e      	add	r7, sp, #56	; 0x38
 800197e:	6178      	str	r0, [r7, #20]
 8001980:	460b      	mov	r3, r1
 8001982:	60fa      	str	r2, [r7, #12]
 8001984:	74fb      	strb	r3, [r7, #19]
  bool isTransmitOk = true;
 8001986:	2301      	movs	r3, #1
 8001988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  vModeInit(STDBY_MODE);
 800198c:	2001      	movs	r0, #1
 800198e:	f7ff fc57 	bl	8001240 <vModeInit>
LORA_GET_REGISTER(RegOpMode);
 8001992:	2001      	movs	r0, #1
 8001994:	f7ff fb48 	bl	8001028 <ucSpi1Read>
 8001998:	4603      	mov	r3, r0
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800199e:	f001 fa0f 	bl	8002dc0 <HAL_GetTick>
 80019a2:	4686      	mov	lr, r0
 80019a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 80019ae:	2a00      	cmp	r2, #0
 80019b0:	da01      	bge.n	80019b6 <LoRaTransmit+0x3e>
 80019b2:	2231      	movs	r2, #49	; 0x31
 80019b4:	e000      	b.n	80019b8 <LoRaTransmit+0x40>
 80019b6:	2230      	movs	r2, #48	; 0x30
 80019b8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80019bc:	f001 0140 	and.w	r1, r1, #64	; 0x40
 80019c0:	2900      	cmp	r1, #0
 80019c2:	d001      	beq.n	80019c8 <LoRaTransmit+0x50>
 80019c4:	2131      	movs	r1, #49	; 0x31
 80019c6:	e000      	b.n	80019ca <LoRaTransmit+0x52>
 80019c8:	2130      	movs	r1, #48	; 0x30
 80019ca:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 80019ce:	f000 0020 	and.w	r0, r0, #32
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d001      	beq.n	80019da <LoRaTransmit+0x62>
 80019d6:	2031      	movs	r0, #49	; 0x31
 80019d8:	e000      	b.n	80019dc <LoRaTransmit+0x64>
 80019da:	2030      	movs	r0, #48	; 0x30
 80019dc:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80019e0:	f004 0410 	and.w	r4, r4, #16
 80019e4:	2c00      	cmp	r4, #0
 80019e6:	d001      	beq.n	80019ec <LoRaTransmit+0x74>
 80019e8:	2431      	movs	r4, #49	; 0x31
 80019ea:	e000      	b.n	80019ee <LoRaTransmit+0x76>
 80019ec:	2430      	movs	r4, #48	; 0x30
 80019ee:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 80019f2:	f005 0508 	and.w	r5, r5, #8
 80019f6:	2d00      	cmp	r5, #0
 80019f8:	d001      	beq.n	80019fe <LoRaTransmit+0x86>
 80019fa:	2531      	movs	r5, #49	; 0x31
 80019fc:	e000      	b.n	8001a00 <LoRaTransmit+0x88>
 80019fe:	2530      	movs	r5, #48	; 0x30
 8001a00:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8001a04:	f006 0604 	and.w	r6, r6, #4
 8001a08:	2e00      	cmp	r6, #0
 8001a0a:	d001      	beq.n	8001a10 <LoRaTransmit+0x98>
 8001a0c:	2631      	movs	r6, #49	; 0x31
 8001a0e:	e000      	b.n	8001a12 <LoRaTransmit+0x9a>
 8001a10:	2630      	movs	r6, #48	; 0x30
 8001a12:	f897 c027 	ldrb.w	ip, [r7, #39]	; 0x27
 8001a16:	f00c 0c02 	and.w	ip, ip, #2
 8001a1a:	f1bc 0f00 	cmp.w	ip, #0
 8001a1e:	d002      	beq.n	8001a26 <LoRaTransmit+0xae>
 8001a20:	2331      	movs	r3, #49	; 0x31
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	e001      	b.n	8001a2a <LoRaTransmit+0xb2>
 8001a26:	2330      	movs	r3, #48	; 0x30
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	f897 c027 	ldrb.w	ip, [r7, #39]	; 0x27
 8001a2e:	f00c 0c01 	and.w	ip, ip, #1
 8001a32:	f1bc 0f00 	cmp.w	ip, #0
 8001a36:	d001      	beq.n	8001a3c <LoRaTransmit+0xc4>
 8001a38:	2331      	movs	r3, #49	; 0x31
 8001a3a:	e000      	b.n	8001a3e <LoRaTransmit+0xc6>
 8001a3c:	2330      	movs	r3, #48	; 0x30
 8001a3e:	930c      	str	r3, [sp, #48]	; 0x30
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a44:	960a      	str	r6, [sp, #40]	; 0x28
 8001a46:	9509      	str	r5, [sp, #36]	; 0x24
 8001a48:	9408      	str	r4, [sp, #32]
 8001a4a:	9007      	str	r0, [sp, #28]
 8001a4c:	9106      	str	r1, [sp, #24]
 8001a4e:	9205      	str	r2, [sp, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	9304      	str	r3, [sp, #16]
 8001a54:	4b9f      	ldr	r3, [pc, #636]	; (8001cd4 <LoRaTransmit+0x35c>)
 8001a56:	9303      	str	r3, [sp, #12]
 8001a58:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8001a5c:	9302      	str	r3, [sp, #8]
 8001a5e:	4b9e      	ldr	r3, [pc, #632]	; (8001cd8 <LoRaTransmit+0x360>)
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	4b9e      	ldr	r3, [pc, #632]	; (8001cdc <LoRaTransmit+0x364>)
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4673      	mov	r3, lr
 8001a68:	4a9d      	ldr	r2, [pc, #628]	; (8001ce0 <LoRaTransmit+0x368>)
 8001a6a:	499c      	ldr	r1, [pc, #624]	; (8001cdc <LoRaTransmit+0x364>)
 8001a6c:	2005      	movs	r0, #5
 8001a6e:	f001 f88f 	bl	8002b90 <stm_log_write>

  /* STANDBY MODE */
  vSpi1Write(RegFifoAddrPtr, FIFO_TX_BASE_ADDR); /* Set FifoPtrAddr to FifoTxPtrBase */
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	200d      	movs	r0, #13
 8001a76:	f7ff fa6f 	bl	8000f58 <vSpi1Write>
  /* WRITE DATA FIFO */
  for (size_t i = 0u; i < size; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a7e:	e0c9      	b.n	8001c14 <LoRaTransmit+0x29c>
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	3b02      	subs	r3, #2
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	f200 80a3 	bhi.w	8001bd0 <LoRaTransmit+0x258>
 8001a8a:	a201      	add	r2, pc, #4	; (adr r2, 8001a90 <LoRaTransmit+0x118>)
 8001a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a90:	08001aa9 	.word	0x08001aa9
 8001a94:	08001af3 	.word	0x08001af3
 8001a98:	08001bd1 	.word	0x08001bd1
 8001a9c:	08001bd1 	.word	0x08001bd1
 8001aa0:	08001b3d 	.word	0x08001b3d
 8001aa4:	08001b87 	.word	0x08001b87
  {
    switch (i) {
    case INDEX_MSG_TYPE:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_MSG_TYPE(*(data + i)));
 8001aa8:	f001 f98a 	bl	8002dc0 <HAL_GetTick>
 8001aac:	4601      	mov	r1, r0
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <LoRaTransmit+0x156>
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abe:	4413      	add	r3, r2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <LoRaTransmit+0x152>
 8001ac6:	4b87      	ldr	r3, [pc, #540]	; (8001ce4 <LoRaTransmit+0x36c>)
 8001ac8:	e002      	b.n	8001ad0 <LoRaTransmit+0x158>
 8001aca:	4b87      	ldr	r3, [pc, #540]	; (8001ce8 <LoRaTransmit+0x370>)
 8001acc:	e000      	b.n	8001ad0 <LoRaTransmit+0x158>
 8001ace:	4b87      	ldr	r3, [pc, #540]	; (8001cec <LoRaTransmit+0x374>)
 8001ad0:	9304      	str	r3, [sp, #16]
 8001ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad4:	9303      	str	r3, [sp, #12]
 8001ad6:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 8001ada:	9302      	str	r3, [sp, #8]
 8001adc:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <LoRaTransmit+0x360>)
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	4b83      	ldr	r3, [pc, #524]	; (8001cf0 <LoRaTransmit+0x378>)
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4a83      	ldr	r2, [pc, #524]	; (8001cf4 <LoRaTransmit+0x37c>)
 8001ae8:	4981      	ldr	r1, [pc, #516]	; (8001cf0 <LoRaTransmit+0x378>)
 8001aea:	2005      	movs	r0, #5
 8001aec:	f001 f850 	bl	8002b90 <stm_log_write>
      break;
 8001af0:	e085      	b.n	8001bfe <LoRaTransmit+0x286>
    case INDEX_MSG_STATUS:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_MSG_STS(*(data + i)));
 8001af2:	f001 f965 	bl	8002dc0 <HAL_GetTick>
 8001af6:	4601      	mov	r1, r0
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afc:	4413      	add	r3, r2
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d009      	beq.n	8001b18 <LoRaTransmit+0x1a0>
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <LoRaTransmit+0x19c>
 8001b10:	4b79      	ldr	r3, [pc, #484]	; (8001cf8 <LoRaTransmit+0x380>)
 8001b12:	e002      	b.n	8001b1a <LoRaTransmit+0x1a2>
 8001b14:	4b79      	ldr	r3, [pc, #484]	; (8001cfc <LoRaTransmit+0x384>)
 8001b16:	e000      	b.n	8001b1a <LoRaTransmit+0x1a2>
 8001b18:	4b79      	ldr	r3, [pc, #484]	; (8001d00 <LoRaTransmit+0x388>)
 8001b1a:	9304      	str	r3, [sp, #16]
 8001b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1e:	9303      	str	r3, [sp, #12]
 8001b20:	f240 530b 	movw	r3, #1291	; 0x50b
 8001b24:	9302      	str	r3, [sp, #8]
 8001b26:	4b6c      	ldr	r3, [pc, #432]	; (8001cd8 <LoRaTransmit+0x360>)
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	4b71      	ldr	r3, [pc, #452]	; (8001cf0 <LoRaTransmit+0x378>)
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4a70      	ldr	r2, [pc, #448]	; (8001cf4 <LoRaTransmit+0x37c>)
 8001b32:	496f      	ldr	r1, [pc, #444]	; (8001cf0 <LoRaTransmit+0x378>)
 8001b34:	2005      	movs	r0, #5
 8001b36:	f001 f82b 	bl	8002b90 <stm_log_write>
      break;
 8001b3a:	e060      	b.n	8001bfe <LoRaTransmit+0x286>
    case INDEX_DATA_RELAY_STATE:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_RELAY(*(data + i)));
 8001b3c:	f001 f940 	bl	8002dc0 <HAL_GetTick>
 8001b40:	4601      	mov	r1, r0
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b46:	4413      	add	r3, r2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <LoRaTransmit+0x1ea>
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <LoRaTransmit+0x1e6>
 8001b5a:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <LoRaTransmit+0x38c>)
 8001b5c:	e002      	b.n	8001b64 <LoRaTransmit+0x1ec>
 8001b5e:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <LoRaTransmit+0x390>)
 8001b60:	e000      	b.n	8001b64 <LoRaTransmit+0x1ec>
 8001b62:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <LoRaTransmit+0x394>)
 8001b64:	9304      	str	r3, [sp, #16]
 8001b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b68:	9303      	str	r3, [sp, #12]
 8001b6a:	f240 530e 	movw	r3, #1294	; 0x50e
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <LoRaTransmit+0x360>)
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	4b5e      	ldr	r3, [pc, #376]	; (8001cf0 <LoRaTransmit+0x378>)
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4a5e      	ldr	r2, [pc, #376]	; (8001cf4 <LoRaTransmit+0x37c>)
 8001b7c:	495c      	ldr	r1, [pc, #368]	; (8001cf0 <LoRaTransmit+0x378>)
 8001b7e:	2005      	movs	r0, #5
 8001b80:	f001 f806 	bl	8002b90 <stm_log_write>
      break;
 8001b84:	e03b      	b.n	8001bfe <LoRaTransmit+0x286>
    case INDEX_DATA_ERR_CODE:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_RELAY_ERR(*(data + i)));
 8001b86:	f001 f91b 	bl	8002dc0 <HAL_GetTick>
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <LoRaTransmit+0x234>
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <LoRaTransmit+0x230>
 8001ba4:	4b5a      	ldr	r3, [pc, #360]	; (8001d10 <LoRaTransmit+0x398>)
 8001ba6:	e002      	b.n	8001bae <LoRaTransmit+0x236>
 8001ba8:	4b5a      	ldr	r3, [pc, #360]	; (8001d14 <LoRaTransmit+0x39c>)
 8001baa:	e000      	b.n	8001bae <LoRaTransmit+0x236>
 8001bac:	4b5a      	ldr	r3, [pc, #360]	; (8001d18 <LoRaTransmit+0x3a0>)
 8001bae:	9304      	str	r3, [sp, #16]
 8001bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb2:	9303      	str	r3, [sp, #12]
 8001bb4:	f240 5311 	movw	r3, #1297	; 0x511
 8001bb8:	9302      	str	r3, [sp, #8]
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <LoRaTransmit+0x360>)
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <LoRaTransmit+0x378>)
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4a4b      	ldr	r2, [pc, #300]	; (8001cf4 <LoRaTransmit+0x37c>)
 8001bc6:	494a      	ldr	r1, [pc, #296]	; (8001cf0 <LoRaTransmit+0x378>)
 8001bc8:	2005      	movs	r0, #5
 8001bca:	f000 ffe1 	bl	8002b90 <stm_log_write>
      break;
 8001bce:	e016      	b.n	8001bfe <LoRaTransmit+0x286>
    default:
      STM_LOGV("LoRaTX", "data transmit[%d]: %d", i, *(data + i));
 8001bd0:	f001 f8f6 	bl	8002dc0 <HAL_GetTick>
 8001bd4:	4601      	mov	r1, r0
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	9304      	str	r3, [sp, #16]
 8001be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be2:	9303      	str	r3, [sp, #12]
 8001be4:	f240 5314 	movw	r3, #1300	; 0x514
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <LoRaTransmit+0x360>)
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <LoRaTransmit+0x378>)
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4a49      	ldr	r2, [pc, #292]	; (8001d1c <LoRaTransmit+0x3a4>)
 8001bf6:	493e      	ldr	r1, [pc, #248]	; (8001cf0 <LoRaTransmit+0x378>)
 8001bf8:	2005      	movs	r0, #5
 8001bfa:	f000 ffc9 	bl	8002b90 <stm_log_write>
    }

    vSpi1Write(RegFifo, *(data + i));
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c02:	4413      	add	r3, r2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4619      	mov	r1, r3
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f7ff f9a5 	bl	8000f58 <vSpi1Write>
  for (size_t i = 0u; i < size; i++)
 8001c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c10:	3301      	adds	r3, #1
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c14:	7cfb      	ldrb	r3, [r7, #19]
 8001c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f4ff af31 	bcc.w	8001a80 <LoRaTransmit+0x108>
  }
  /* MODE REQUEST TX */
  HAL_Delay(10);
 8001c1e:	200a      	movs	r0, #10
 8001c20:	f001 f8d8 	bl	8002dd4 <HAL_Delay>
  vModeInit(TX_MODE);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f7ff fb0b 	bl	8001240 <vModeInit>
  LORA_GET_REGISTER(RegOpMode);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff f9fc 	bl	8001028 <ucSpi1Read>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c36:	f001 f8c3 	bl	8002dc0 <HAL_GetTick>
 8001c3a:	4686      	mov	lr, r0
 8001c3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 8001c46:	2a00      	cmp	r2, #0
 8001c48:	da01      	bge.n	8001c4e <LoRaTransmit+0x2d6>
 8001c4a:	2231      	movs	r2, #49	; 0x31
 8001c4c:	e000      	b.n	8001c50 <LoRaTransmit+0x2d8>
 8001c4e:	2230      	movs	r2, #48	; 0x30
 8001c50:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001c54:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8001c58:	2900      	cmp	r1, #0
 8001c5a:	d001      	beq.n	8001c60 <LoRaTransmit+0x2e8>
 8001c5c:	2131      	movs	r1, #49	; 0x31
 8001c5e:	e000      	b.n	8001c62 <LoRaTransmit+0x2ea>
 8001c60:	2130      	movs	r1, #48	; 0x30
 8001c62:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001c66:	f000 0020 	and.w	r0, r0, #32
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	d001      	beq.n	8001c72 <LoRaTransmit+0x2fa>
 8001c6e:	2031      	movs	r0, #49	; 0x31
 8001c70:	e000      	b.n	8001c74 <LoRaTransmit+0x2fc>
 8001c72:	2030      	movs	r0, #48	; 0x30
 8001c74:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8001c78:	f004 0410 	and.w	r4, r4, #16
 8001c7c:	2c00      	cmp	r4, #0
 8001c7e:	d001      	beq.n	8001c84 <LoRaTransmit+0x30c>
 8001c80:	2431      	movs	r4, #49	; 0x31
 8001c82:	e000      	b.n	8001c86 <LoRaTransmit+0x30e>
 8001c84:	2430      	movs	r4, #48	; 0x30
 8001c86:	f897 5026 	ldrb.w	r5, [r7, #38]	; 0x26
 8001c8a:	f005 0508 	and.w	r5, r5, #8
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	d001      	beq.n	8001c96 <LoRaTransmit+0x31e>
 8001c92:	2531      	movs	r5, #49	; 0x31
 8001c94:	e000      	b.n	8001c98 <LoRaTransmit+0x320>
 8001c96:	2530      	movs	r5, #48	; 0x30
 8001c98:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
 8001c9c:	f006 0604 	and.w	r6, r6, #4
 8001ca0:	2e00      	cmp	r6, #0
 8001ca2:	d001      	beq.n	8001ca8 <LoRaTransmit+0x330>
 8001ca4:	2631      	movs	r6, #49	; 0x31
 8001ca6:	e000      	b.n	8001caa <LoRaTransmit+0x332>
 8001ca8:	2630      	movs	r6, #48	; 0x30
 8001caa:	f897 c026 	ldrb.w	ip, [r7, #38]	; 0x26
 8001cae:	f00c 0c02 	and.w	ip, ip, #2
 8001cb2:	f1bc 0f00 	cmp.w	ip, #0
 8001cb6:	d002      	beq.n	8001cbe <LoRaTransmit+0x346>
 8001cb8:	2331      	movs	r3, #49	; 0x31
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	e001      	b.n	8001cc2 <LoRaTransmit+0x34a>
 8001cbe:	2330      	movs	r3, #48	; 0x30
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	f897 c026 	ldrb.w	ip, [r7, #38]	; 0x26
 8001cc6:	f00c 0c01 	and.w	ip, ip, #1
 8001cca:	f1bc 0f00 	cmp.w	ip, #0
 8001cce:	d027      	beq.n	8001d20 <LoRaTransmit+0x3a8>
 8001cd0:	2331      	movs	r3, #49	; 0x31
 8001cd2:	e026      	b.n	8001d22 <LoRaTransmit+0x3aa>
 8001cd4:	0800c3ec 	.word	0x0800c3ec
 8001cd8:	0800cf74 	.word	0x0800cf74
 8001cdc:	0800c3d8 	.word	0x0800c3d8
 8001ce0:	0800c39c 	.word	0x0800c39c
 8001ce4:	0800c3f8 	.word	0x0800c3f8
 8001ce8:	0800c404 	.word	0x0800c404
 8001cec:	0800c40c 	.word	0x0800c40c
 8001cf0:	0800c448 	.word	0x0800c448
 8001cf4:	0800c414 	.word	0x0800c414
 8001cf8:	0800c450 	.word	0x0800c450
 8001cfc:	0800c460 	.word	0x0800c460
 8001d00:	0800c470 	.word	0x0800c470
 8001d04:	0800c47c 	.word	0x0800c47c
 8001d08:	0800c488 	.word	0x0800c488
 8001d0c:	0800c498 	.word	0x0800c498
 8001d10:	0800c4a4 	.word	0x0800c4a4
 8001d14:	0800c4b0 	.word	0x0800c4b0
 8001d18:	0800c4bc 	.word	0x0800c4bc
 8001d1c:	0800c4c8 	.word	0x0800c4c8
 8001d20:	2330      	movs	r3, #48	; 0x30
 8001d22:	930c      	str	r3, [sp, #48]	; 0x30
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d28:	960a      	str	r6, [sp, #40]	; 0x28
 8001d2a:	9509      	str	r5, [sp, #36]	; 0x24
 8001d2c:	9408      	str	r4, [sp, #32]
 8001d2e:	9007      	str	r0, [sp, #28]
 8001d30:	9106      	str	r1, [sp, #24]
 8001d32:	9205      	str	r2, [sp, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	9304      	str	r3, [sp, #16]
 8001d38:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <LoRaTransmit+0x55c>)
 8001d3a:	9303      	str	r3, [sp, #12]
 8001d3c:	f240 531c 	movw	r3, #1308	; 0x51c
 8001d40:	9302      	str	r3, [sp, #8]
 8001d42:	4b65      	ldr	r3, [pc, #404]	; (8001ed8 <LoRaTransmit+0x560>)
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	4b65      	ldr	r3, [pc, #404]	; (8001edc <LoRaTransmit+0x564>)
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4673      	mov	r3, lr
 8001d4c:	4a64      	ldr	r2, [pc, #400]	; (8001ee0 <LoRaTransmit+0x568>)
 8001d4e:	4963      	ldr	r1, [pc, #396]	; (8001edc <LoRaTransmit+0x564>)
 8001d50:	2005      	movs	r0, #5
 8001d52:	f000 ff1d 	bl	8002b90 <stm_log_write>
  uint32_t startTick = HAL_GetTick();
 8001d56:	f001 f833 	bl	8002dc0 <HAL_GetTick>
 8001d5a:	6238      	str	r0, [r7, #32]
  STM_LOGV("LoRaTX", "Wait for TX_DONE ...\r\n");
 8001d5c:	f001 f830 	bl	8002dc0 <HAL_GetTick>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f240 521e 	movw	r2, #1310	; 0x51e
 8001d66:	9202      	str	r2, [sp, #8]
 8001d68:	4a5b      	ldr	r2, [pc, #364]	; (8001ed8 <LoRaTransmit+0x560>)
 8001d6a:	9201      	str	r2, [sp, #4]
 8001d6c:	4a5d      	ldr	r2, [pc, #372]	; (8001ee4 <LoRaTransmit+0x56c>)
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	4a5d      	ldr	r2, [pc, #372]	; (8001ee8 <LoRaTransmit+0x570>)
 8001d72:	495c      	ldr	r1, [pc, #368]	; (8001ee4 <LoRaTransmit+0x56c>)
 8001d74:	2005      	movs	r0, #5
 8001d76:	f000 ff0b 	bl	8002b90 <stm_log_write>
  while ((ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos == 0u)
 8001d7a:	e083      	b.n	8001e84 <LoRaTransmit+0x50c>
  {
    if (HAL_GetTick() - startTick >= timeoutMs)
 8001d7c:	f001 f820 	bl	8002dc0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d87b      	bhi.n	8001e84 <LoRaTransmit+0x50c>
    {
      LORA_GET_REGISTER(RegIrqFlags);
 8001d8c:	2012      	movs	r0, #18
 8001d8e:	f7ff f94b 	bl	8001028 <ucSpi1Read>
 8001d92:	4603      	mov	r3, r0
 8001d94:	77fb      	strb	r3, [r7, #31]
 8001d96:	f001 f813 	bl	8002dc0 <HAL_GetTick>
 8001d9a:	4686      	mov	lr, r0
 8001d9c:	7ffb      	ldrb	r3, [r7, #31]
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001da4:	2a00      	cmp	r2, #0
 8001da6:	da01      	bge.n	8001dac <LoRaTransmit+0x434>
 8001da8:	2231      	movs	r2, #49	; 0x31
 8001daa:	e000      	b.n	8001dae <LoRaTransmit+0x436>
 8001dac:	2230      	movs	r2, #48	; 0x30
 8001dae:	7ff9      	ldrb	r1, [r7, #31]
 8001db0:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8001db4:	2900      	cmp	r1, #0
 8001db6:	d001      	beq.n	8001dbc <LoRaTransmit+0x444>
 8001db8:	2131      	movs	r1, #49	; 0x31
 8001dba:	e000      	b.n	8001dbe <LoRaTransmit+0x446>
 8001dbc:	2130      	movs	r1, #48	; 0x30
 8001dbe:	7ff8      	ldrb	r0, [r7, #31]
 8001dc0:	f000 0020 	and.w	r0, r0, #32
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d001      	beq.n	8001dcc <LoRaTransmit+0x454>
 8001dc8:	2031      	movs	r0, #49	; 0x31
 8001dca:	e000      	b.n	8001dce <LoRaTransmit+0x456>
 8001dcc:	2030      	movs	r0, #48	; 0x30
 8001dce:	7ffc      	ldrb	r4, [r7, #31]
 8001dd0:	f004 0410 	and.w	r4, r4, #16
 8001dd4:	2c00      	cmp	r4, #0
 8001dd6:	d001      	beq.n	8001ddc <LoRaTransmit+0x464>
 8001dd8:	2431      	movs	r4, #49	; 0x31
 8001dda:	e000      	b.n	8001dde <LoRaTransmit+0x466>
 8001ddc:	2430      	movs	r4, #48	; 0x30
 8001dde:	7ffd      	ldrb	r5, [r7, #31]
 8001de0:	f005 0508 	and.w	r5, r5, #8
 8001de4:	2d00      	cmp	r5, #0
 8001de6:	d001      	beq.n	8001dec <LoRaTransmit+0x474>
 8001de8:	2531      	movs	r5, #49	; 0x31
 8001dea:	e000      	b.n	8001dee <LoRaTransmit+0x476>
 8001dec:	2530      	movs	r5, #48	; 0x30
 8001dee:	7ffe      	ldrb	r6, [r7, #31]
 8001df0:	f006 0604 	and.w	r6, r6, #4
 8001df4:	2e00      	cmp	r6, #0
 8001df6:	d001      	beq.n	8001dfc <LoRaTransmit+0x484>
 8001df8:	2631      	movs	r6, #49	; 0x31
 8001dfa:	e000      	b.n	8001dfe <LoRaTransmit+0x486>
 8001dfc:	2630      	movs	r6, #48	; 0x30
 8001dfe:	f897 c01f 	ldrb.w	ip, [r7, #31]
 8001e02:	f00c 0c02 	and.w	ip, ip, #2
 8001e06:	f1bc 0f00 	cmp.w	ip, #0
 8001e0a:	d002      	beq.n	8001e12 <LoRaTransmit+0x49a>
 8001e0c:	2331      	movs	r3, #49	; 0x31
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	e001      	b.n	8001e16 <LoRaTransmit+0x49e>
 8001e12:	2330      	movs	r3, #48	; 0x30
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	f897 c01f 	ldrb.w	ip, [r7, #31]
 8001e1a:	f00c 0c01 	and.w	ip, ip, #1
 8001e1e:	f1bc 0f00 	cmp.w	ip, #0
 8001e22:	d001      	beq.n	8001e28 <LoRaTransmit+0x4b0>
 8001e24:	2331      	movs	r3, #49	; 0x31
 8001e26:	e000      	b.n	8001e2a <LoRaTransmit+0x4b2>
 8001e28:	2330      	movs	r3, #48	; 0x30
 8001e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e30:	960a      	str	r6, [sp, #40]	; 0x28
 8001e32:	9509      	str	r5, [sp, #36]	; 0x24
 8001e34:	9408      	str	r4, [sp, #32]
 8001e36:	9007      	str	r0, [sp, #28]
 8001e38:	9106      	str	r1, [sp, #24]
 8001e3a:	9205      	str	r2, [sp, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	9304      	str	r3, [sp, #16]
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <LoRaTransmit+0x574>)
 8001e42:	9303      	str	r3, [sp, #12]
 8001e44:	f240 5323 	movw	r3, #1315	; 0x523
 8001e48:	9302      	str	r3, [sp, #8]
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <LoRaTransmit+0x560>)
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <LoRaTransmit+0x564>)
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4673      	mov	r3, lr
 8001e54:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <LoRaTransmit+0x568>)
 8001e56:	4921      	ldr	r1, [pc, #132]	; (8001edc <LoRaTransmit+0x564>)
 8001e58:	2005      	movs	r0, #5
 8001e5a:	f000 fe99 	bl	8002b90 <stm_log_write>
      STM_LOGE("LoRaTX", "TX_TIMEOUT");
 8001e5e:	f000 ffaf 	bl	8002dc0 <HAL_GetTick>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f240 5224 	movw	r2, #1316	; 0x524
 8001e68:	9202      	str	r2, [sp, #8]
 8001e6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <LoRaTransmit+0x560>)
 8001e6c:	9201      	str	r2, [sp, #4]
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <LoRaTransmit+0x56c>)
 8001e70:	9200      	str	r2, [sp, #0]
 8001e72:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <LoRaTransmit+0x578>)
 8001e74:	491b      	ldr	r1, [pc, #108]	; (8001ee4 <LoRaTransmit+0x56c>)
 8001e76:	2001      	movs	r0, #1
 8001e78:	f000 fe8a 	bl	8002b90 <stm_log_write>
      isTransmitOk = false;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 8001e82:	e009      	b.n	8001e98 <LoRaTransmit+0x520>
  while ((ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos == 0u)
 8001e84:	2012      	movs	r0, #18
 8001e86:	f7ff f8cf 	bl	8001028 <ucSpi1Read>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	10db      	asrs	r3, r3, #3
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f43f af72 	beq.w	8001d7c <LoRaTransmit+0x404>
    }
  }
  if (isTransmitOk)
 8001e98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <LoRaTransmit+0x546>
    STM_LOGD("LoRaTX", "Send msg to GW success");
 8001ea0:	f000 ff8e 	bl	8002dc0 <HAL_GetTick>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f240 522a 	movw	r2, #1322	; 0x52a
 8001eaa:	9202      	str	r2, [sp, #8]
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <LoRaTransmit+0x560>)
 8001eae:	9201      	str	r2, [sp, #4]
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <LoRaTransmit+0x56c>)
 8001eb2:	9200      	str	r2, [sp, #0]
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	; (8001ef4 <LoRaTransmit+0x57c>)
 8001eb6:	490b      	ldr	r1, [pc, #44]	; (8001ee4 <LoRaTransmit+0x56c>)
 8001eb8:	2004      	movs	r0, #4
 8001eba:	f000 fe69 	bl	8002b90 <stm_log_write>
  /* Clear TxDone Flag */
  LoRaClearITFlag(TX_DONE_Msk);
 8001ebe:	2008      	movs	r0, #8
 8001ec0:	f000 f864 	bl	8001f8c <LoRaClearITFlag>
  vModeInit(RXCONTINUOUS_MODE);
 8001ec4:	2005      	movs	r0, #5
 8001ec6:	f7ff f9bb 	bl	8001240 <vModeInit>
}
 8001eca:	bf00      	nop
 8001ecc:	3734      	adds	r7, #52	; 0x34
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	0800c3ec 	.word	0x0800c3ec
 8001ed8:	0800cf74 	.word	0x0800cf74
 8001edc:	0800c3d8 	.word	0x0800c3d8
 8001ee0:	0800c39c 	.word	0x0800c39c
 8001ee4:	0800c448 	.word	0x0800c448
 8001ee8:	0800c4fc 	.word	0x0800c4fc
 8001eec:	0800c530 	.word	0x0800c530
 8001ef0:	0800c53c 	.word	0x0800c53c
 8001ef4:	0800c56c 	.word	0x0800c56c

08001ef8 <LoRaGetITFlag>:
  vSpi1Write(RegIrqFlags, RX_DONE_Msk | PAYLOAD_CRC_ERROR_Msk);
  // LORA_GET_REGISTER(RegIrqFlags);
}

uint8_t LoRaGetITFlag(uint8_t irqFlag)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if (irqFlag < 0 || irqFlag > 7)
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	2b07      	cmp	r3, #7
 8001f06:	d901      	bls.n	8001f0c <LoRaGetITFlag+0x14>
    return -1;
 8001f08:	23ff      	movs	r3, #255	; 0xff
 8001f0a:	e03a      	b.n	8001f82 <LoRaGetITFlag+0x8a>

  switch (irqFlag)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	3b03      	subs	r3, #3
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d835      	bhi.n	8001f80 <LoRaGetITFlag+0x88>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <LoRaGetITFlag+0x24>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f6d 	.word	0x08001f6d
 8001f20:	08001f81 	.word	0x08001f81
 8001f24:	08001f45 	.word	0x08001f45
 8001f28:	08001f31 	.word	0x08001f31
 8001f2c:	08001f59 	.word	0x08001f59
  {
  case RX_DONE_MskPos:
    return (ucSpi1Read(RegIrqFlags) & RX_DONE_Msk) >> RX_DONE_MskPos;
 8001f30:	2012      	movs	r0, #18
 8001f32:	f7ff f879 	bl	8001028 <ucSpi1Read>
 8001f36:	4603      	mov	r3, r0
 8001f38:	119b      	asrs	r3, r3, #6
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	e01e      	b.n	8001f82 <LoRaGetITFlag+0x8a>
  case PAYLOAD_CRC_ERROR_MskPos:
    return (ucSpi1Read(RegIrqFlags) & PAYLOAD_CRC_ERROR_Msk) >> PAYLOAD_CRC_ERROR_MskPos;
 8001f44:	2012      	movs	r0, #18
 8001f46:	f7ff f86f 	bl	8001028 <ucSpi1Read>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	115b      	asrs	r3, r3, #5
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	e014      	b.n	8001f82 <LoRaGetITFlag+0x8a>
  case RX_TIMEOUT_MskPos:
    return (ucSpi1Read(RegIrqFlags) & RX_TIMEOUT_Msk) >> RX_TIMEOUT_MskPos;
 8001f58:	2012      	movs	r0, #18
 8001f5a:	f7ff f865 	bl	8001028 <ucSpi1Read>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	11db      	asrs	r3, r3, #7
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	e00a      	b.n	8001f82 <LoRaGetITFlag+0x8a>
  case TX_DONE_MskPos:
    return (ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos;
 8001f6c:	2012      	movs	r0, #18
 8001f6e:	f7ff f85b 	bl	8001028 <ucSpi1Read>
 8001f72:	4603      	mov	r3, r0
 8001f74:	10db      	asrs	r3, r3, #3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e000      	b.n	8001f82 <LoRaGetITFlag+0x8a>
    // case FHSS_CHANGE_CHANNEL_MskPos:
    //   return (ucSpi1Read(RegIrqFlags) & FHSS_CHANGE_CHANNEL_Msk) >> FHSS_CHANGE_CHANNEL_MskPos;
    // case CAD_DONE_MskPos:
    //   return (ucSpi1Read(RegIrqFlags) & CAD_DONE_Msk) >> CAD_DONE_MskPos;
  default:
    return -1;
 8001f80:	23ff      	movs	r3, #255	; 0xff
  }
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop

08001f8c <LoRaClearITFlag>:

void LoRaClearITFlag(uint8_t flag)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af04      	add	r7, sp, #16
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegIrqFlags, flag);
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	2012      	movs	r0, #18
 8001f9c:	f7fe ffdc 	bl	8000f58 <vSpi1Write>
  if (flag & RX_DONE_Msk) {
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00e      	beq.n	8001fc8 <LoRaClearITFlag+0x3c>
    STM_LOGV("LoRa", "Clear RX_DONE_IT_FLAG");
 8001faa:	f000 ff09 	bl	8002dc0 <HAL_GetTick>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f240 5291 	movw	r2, #1425	; 0x591
 8001fb4:	9202      	str	r2, [sp, #8]
 8001fb6:	4a24      	ldr	r2, [pc, #144]	; (8002048 <LoRaClearITFlag+0xbc>)
 8001fb8:	9201      	str	r2, [sp, #4]
 8001fba:	4a24      	ldr	r2, [pc, #144]	; (800204c <LoRaClearITFlag+0xc0>)
 8001fbc:	9200      	str	r2, [sp, #0]
 8001fbe:	4a24      	ldr	r2, [pc, #144]	; (8002050 <LoRaClearITFlag+0xc4>)
 8001fc0:	4922      	ldr	r1, [pc, #136]	; (800204c <LoRaClearITFlag+0xc0>)
 8001fc2:	2005      	movs	r0, #5
 8001fc4:	f000 fde4 	bl	8002b90 <stm_log_write>
  }
  if (flag & PAYLOAD_CRC_ERROR_Msk) {
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00e      	beq.n	8001ff0 <LoRaClearITFlag+0x64>
    STM_LOGV("LoRa", "Clear PAYLOAD_CRC_ERROR_IT_FLAG");
 8001fd2:	f000 fef5 	bl	8002dc0 <HAL_GetTick>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f240 5294 	movw	r2, #1428	; 0x594
 8001fdc:	9202      	str	r2, [sp, #8]
 8001fde:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <LoRaClearITFlag+0xbc>)
 8001fe0:	9201      	str	r2, [sp, #4]
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <LoRaClearITFlag+0xc0>)
 8001fe4:	9200      	str	r2, [sp, #0]
 8001fe6:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <LoRaClearITFlag+0xc8>)
 8001fe8:	4918      	ldr	r1, [pc, #96]	; (800204c <LoRaClearITFlag+0xc0>)
 8001fea:	2005      	movs	r0, #5
 8001fec:	f000 fdd0 	bl	8002b90 <stm_log_write>
  }
  if (flag & RX_TIMEOUT_Msk) {
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da0e      	bge.n	8002016 <LoRaClearITFlag+0x8a>
    STM_LOGV("LoRa", "Clear RX_TIMEOUT_IT_FLAG");
 8001ff8:	f000 fee2 	bl	8002dc0 <HAL_GetTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f240 5297 	movw	r2, #1431	; 0x597
 8002002:	9202      	str	r2, [sp, #8]
 8002004:	4a10      	ldr	r2, [pc, #64]	; (8002048 <LoRaClearITFlag+0xbc>)
 8002006:	9201      	str	r2, [sp, #4]
 8002008:	4a10      	ldr	r2, [pc, #64]	; (800204c <LoRaClearITFlag+0xc0>)
 800200a:	9200      	str	r2, [sp, #0]
 800200c:	4a12      	ldr	r2, [pc, #72]	; (8002058 <LoRaClearITFlag+0xcc>)
 800200e:	490f      	ldr	r1, [pc, #60]	; (800204c <LoRaClearITFlag+0xc0>)
 8002010:	2005      	movs	r0, #5
 8002012:	f000 fdbd 	bl	8002b90 <stm_log_write>
  }
  if (flag & TX_DONE_Msk) {
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00e      	beq.n	800203e <LoRaClearITFlag+0xb2>
    STM_LOGV("LoRa", "Clear TX_DONE_IT_FLAG");
 8002020:	f000 fece 	bl	8002dc0 <HAL_GetTick>
 8002024:	4603      	mov	r3, r0
 8002026:	f240 529a 	movw	r2, #1434	; 0x59a
 800202a:	9202      	str	r2, [sp, #8]
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <LoRaClearITFlag+0xbc>)
 800202e:	9201      	str	r2, [sp, #4]
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <LoRaClearITFlag+0xc0>)
 8002032:	9200      	str	r2, [sp, #0]
 8002034:	4a09      	ldr	r2, [pc, #36]	; (800205c <LoRaClearITFlag+0xd0>)
 8002036:	4905      	ldr	r1, [pc, #20]	; (800204c <LoRaClearITFlag+0xc0>)
 8002038:	2005      	movs	r0, #5
 800203a:	f000 fda9 	bl	8002b90 <stm_log_write>
  //   STM_LOGV("LoRa", "Clear FHSS_CHANGE_CHANNEL_IT_FLAG");
  // }
  // if (flag & CAD_DONE_Msk) {
  //   STM_LOGV("LoRa", "Clear CAD_DONE_IT_FLAG");
  // }
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	0800cf84 	.word	0x0800cf84
 800204c:	0800c310 	.word	0x0800c310
 8002050:	0800c668 	.word	0x0800c668
 8002054:	0800c69c 	.word	0x0800c69c
 8002058:	0800c6d8 	.word	0x0800c6d8
 800205c:	0800c710 	.word	0x0800c710

08002060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b087      	sub	sp, #28
 8002064:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002066:	f000 fe83 	bl	8002d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206a:	f000 f8b1 	bl	80021d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800206e:	f7fe febf 	bl	8000df0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002072:	f7fe f86d 	bl	8000150 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002076:	f000 fbed 	bl	8002854 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800207a:	f000 fddb 	bl	8002c34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  vLoraInit();
  LED_OFF();
 800207e:	2201      	movs	r2, #1
 8002080:	2101      	movs	r1, #1
 8002082:	4843      	ldr	r0, [pc, #268]	; (8002190 <main+0x130>)
 8002084:	f002 fac8 	bl	8004618 <HAL_GPIO_WritePin>
  vLoraInit(&LoraInit);
 8002088:	4842      	ldr	r0, [pc, #264]	; (8002194 <main+0x134>)
 800208a:	f7ff fb77 	bl	800177c <vLoraInit>
  reset_cause_t resetCause = resetCauseGet();
 800208e:	f000 fa87 	bl	80025a0 <resetCauseGet>
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  STM_LOGI("Main", "Reset cause:  {%s}", resetCauseGetName(resetCause));
 8002096:	f000 fe93 	bl	8002dc0 <HAL_GetTick>
 800209a:	4604      	mov	r4, r0
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fac4 	bl	800262c <resetCauseGetName>
 80020a4:	4603      	mov	r3, r0
 80020a6:	9303      	str	r3, [sp, #12]
 80020a8:	2387      	movs	r3, #135	; 0x87
 80020aa:	9302      	str	r3, [sp, #8]
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <main+0x138>)
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	4b3a      	ldr	r3, [pc, #232]	; (800219c <main+0x13c>)
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	4623      	mov	r3, r4
 80020b6:	4a3a      	ldr	r2, [pc, #232]	; (80021a0 <main+0x140>)
 80020b8:	4938      	ldr	r1, [pc, #224]	; (800219c <main+0x13c>)
 80020ba:	2003      	movs	r0, #3
 80020bc:	f000 fd68 	bl	8002b90 <stm_log_write>
  // STM_LOGI("Main", "Watchdog Init {%ums}", iwdgInit(&hiwdg, WATCHDOG_TIME));

  /* Retrieve old state from FLASH */
  thisNodeInit(resetCause);
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f8e0 	bl	8002288 <thisNodeInit>
  STM_LOGV("Main", "NodeID:   {%d}", thisNode.nodeID);
 80020c8:	f000 fe7a 	bl	8002dc0 <HAL_GetTick>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4a35      	ldr	r2, [pc, #212]	; (80021a4 <main+0x144>)
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	9203      	str	r2, [sp, #12]
 80020d4:	228c      	movs	r2, #140	; 0x8c
 80020d6:	9202      	str	r2, [sp, #8]
 80020d8:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <main+0x138>)
 80020da:	9201      	str	r2, [sp, #4]
 80020dc:	4a2f      	ldr	r2, [pc, #188]	; (800219c <main+0x13c>)
 80020de:	9200      	str	r2, [sp, #0]
 80020e0:	4a31      	ldr	r2, [pc, #196]	; (80021a8 <main+0x148>)
 80020e2:	492e      	ldr	r1, [pc, #184]	; (800219c <main+0x13c>)
 80020e4:	2005      	movs	r0, #5
 80020e6:	f000 fd53 	bl	8002b90 <stm_log_write>
  STM_LOGV("Main", "Relay:    {%s}", WHICH_RELAY(thisNode.relayState));
 80020ea:	f000 fe69 	bl	8002dc0 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <main+0x144>)
 80020f2:	789b      	ldrb	r3, [r3, #2]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <main+0xa8>
 80020f8:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <main+0x144>)
 80020fa:	789b      	ldrb	r3, [r3, #2]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <main+0xa4>
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <main+0x14c>)
 8002102:	e002      	b.n	800210a <main+0xaa>
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <main+0x150>)
 8002106:	e000      	b.n	800210a <main+0xaa>
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <main+0x154>)
 800210a:	9303      	str	r3, [sp, #12]
 800210c:	238d      	movs	r3, #141	; 0x8d
 800210e:	9302      	str	r3, [sp, #8]
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <main+0x138>)
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <main+0x13c>)
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	4a27      	ldr	r2, [pc, #156]	; (80021b8 <main+0x158>)
 800211c:	491f      	ldr	r1, [pc, #124]	; (800219c <main+0x13c>)
 800211e:	2005      	movs	r0, #5
 8002120:	f000 fd36 	bl	8002b90 <stm_log_write>
  STM_LOGV("Main", "Location: {%d}", thisNode.location);
 8002124:	f000 fe4c 	bl	8002dc0 <HAL_GetTick>
 8002128:	4603      	mov	r3, r0
 800212a:	4a1e      	ldr	r2, [pc, #120]	; (80021a4 <main+0x144>)
 800212c:	7852      	ldrb	r2, [r2, #1]
 800212e:	9203      	str	r2, [sp, #12]
 8002130:	228e      	movs	r2, #142	; 0x8e
 8002132:	9202      	str	r2, [sp, #8]
 8002134:	4a18      	ldr	r2, [pc, #96]	; (8002198 <main+0x138>)
 8002136:	9201      	str	r2, [sp, #4]
 8002138:	4a18      	ldr	r2, [pc, #96]	; (800219c <main+0x13c>)
 800213a:	9200      	str	r2, [sp, #0]
 800213c:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <main+0x15c>)
 800213e:	4917      	ldr	r1, [pc, #92]	; (800219c <main+0x13c>)
 8002140:	2005      	movs	r0, #5
 8002142:	f000 fd25 	bl	8002b90 <stm_log_write>
  STM_LOGV("Main", "Error:    {%s}", WHICH_RELAY_ERR(thisNode.errCode));
 8002146:	f000 fe3b 	bl	8002dc0 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <main+0x144>)
 800214e:	78db      	ldrb	r3, [r3, #3]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <main+0x104>
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <main+0x144>)
 8002156:	78db      	ldrb	r3, [r3, #3]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <main+0x100>
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <main+0x160>)
 800215e:	e002      	b.n	8002166 <main+0x106>
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <main+0x164>)
 8002162:	e000      	b.n	8002166 <main+0x106>
 8002164:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <main+0x168>)
 8002166:	9303      	str	r3, [sp, #12]
 8002168:	238f      	movs	r3, #143	; 0x8f
 800216a:	9302      	str	r3, [sp, #8]
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <main+0x138>)
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <main+0x13c>)
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	4a15      	ldr	r2, [pc, #84]	; (80021cc <main+0x16c>)
 8002178:	4908      	ldr	r1, [pc, #32]	; (800219c <main+0x13c>)
 800217a:	2005      	movs	r0, #5
 800217c:	f000 fd08 	bl	8002b90 <stm_log_write>
  
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002180:	f004 fdec 	bl	8006d5c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002184:	f7fe f930 	bl	80003e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002188:	f004 fe1a 	bl	8006dc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800218c:	e7fe      	b.n	800218c <main+0x12c>
 800218e:	bf00      	nop
 8002190:	40010c00 	.word	0x40010c00
 8002194:	20000004 	.word	0x20000004
 8002198:	0800cf94 	.word	0x0800cf94
 800219c:	0800c77c 	.word	0x0800c77c
 80021a0:	0800c744 	.word	0x0800c744
 80021a4:	20000000 	.word	0x20000000
 80021a8:	0800c784 	.word	0x0800c784
 80021ac:	0800c7b0 	.word	0x0800c7b0
 80021b0:	0800c7bc 	.word	0x0800c7bc
 80021b4:	0800c7cc 	.word	0x0800c7cc
 80021b8:	0800c7d8 	.word	0x0800c7d8
 80021bc:	0800c804 	.word	0x0800c804
 80021c0:	0800c830 	.word	0x0800c830
 80021c4:	0800c83c 	.word	0x0800c83c
 80021c8:	0800c848 	.word	0x0800c848
 80021cc:	0800c854 	.word	0x0800c854

080021d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b094      	sub	sp, #80	; 0x50
 80021d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021da:	2228      	movs	r2, #40	; 0x28
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f008 fb9c 	bl	800a91c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002200:	2309      	movs	r3, #9
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800220a:	2300      	movs	r3, #0
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800220e:	2301      	movs	r3, #1
 8002210:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002212:	2301      	movs	r3, #1
 8002214:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002216:	2302      	movs	r3, #2
 8002218:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800221a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800221e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002220:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002224:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800222a:	4618      	mov	r0, r3
 800222c:	f002 fa66 	bl	80046fc <HAL_RCC_OscConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002236:	f000 f9a3 	bl	8002580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223a:	230f      	movs	r3, #15
 800223c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	2102      	movs	r1, #2
 8002254:	4618      	mov	r0, r3
 8002256:	f002 fdc1 	bl	8004ddc <HAL_RCC_ClockConfig>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002260:	f000 f98e 	bl	8002580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002264:	2302      	movs	r3, #2
 8002266:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8002268:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800226c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	4618      	mov	r0, r3
 8002272:	f003 f835 	bl	80052e0 <HAL_RCCEx_PeriphCLKConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800227c:	f000 f980 	bl	8002580 <Error_Handler>
  }
}
 8002280:	bf00      	nop
 8002282:	3750      	adds	r7, #80	; 0x50
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <thisNodeInit>:

/* USER CODE BEGIN 4 */
static void thisNodeInit(reset_cause_t resetCause) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af04      	add	r7, sp, #16
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
  if (Flash_ReadAddress(ADDR_RELAY_STATE) == FLASH_EMPTY)
 8002292:	4833      	ldr	r0, [pc, #204]	; (8002360 <thisNodeInit+0xd8>)
 8002294:	f7fe f836 	bl	8000304 <Flash_ReadAddress>
 8002298:	4603      	mov	r3, r0
 800229a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229e:	d110      	bne.n	80022c2 <thisNodeInit+0x3a>
  {
    STM_LOGV("Main", "data not found, write relay data to flash");
 80022a0:	f000 fd8e 	bl	8002dc0 <HAL_GetTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	22d7      	movs	r2, #215	; 0xd7
 80022a8:	9202      	str	r2, [sp, #8]
 80022aa:	4a2e      	ldr	r2, [pc, #184]	; (8002364 <thisNodeInit+0xdc>)
 80022ac:	9201      	str	r2, [sp, #4]
 80022ae:	4a2e      	ldr	r2, [pc, #184]	; (8002368 <thisNodeInit+0xe0>)
 80022b0:	9200      	str	r2, [sp, #0]
 80022b2:	4a2e      	ldr	r2, [pc, #184]	; (800236c <thisNodeInit+0xe4>)
 80022b4:	492c      	ldr	r1, [pc, #176]	; (8002368 <thisNodeInit+0xe0>)
 80022b6:	2005      	movs	r0, #5
 80022b8:	f000 fc6a 	bl	8002b90 <stm_log_write>
    updateDataToFlash();
 80022bc:	f000 f862 	bl	8002384 <updateDataToFlash>
 80022c0:	e029      	b.n	8002316 <thisNodeInit+0x8e>
  }
  else
  {
    STM_LOGV("Main", "detect flash data, restore old state ...");
 80022c2:	f000 fd7d 	bl	8002dc0 <HAL_GetTick>
 80022c6:	4603      	mov	r3, r0
 80022c8:	22dc      	movs	r2, #220	; 0xdc
 80022ca:	9202      	str	r2, [sp, #8]
 80022cc:	4a25      	ldr	r2, [pc, #148]	; (8002364 <thisNodeInit+0xdc>)
 80022ce:	9201      	str	r2, [sp, #4]
 80022d0:	4a25      	ldr	r2, [pc, #148]	; (8002368 <thisNodeInit+0xe0>)
 80022d2:	9200      	str	r2, [sp, #0]
 80022d4:	4a26      	ldr	r2, [pc, #152]	; (8002370 <thisNodeInit+0xe8>)
 80022d6:	4924      	ldr	r1, [pc, #144]	; (8002368 <thisNodeInit+0xe0>)
 80022d8:	2005      	movs	r0, #5
 80022da:	f000 fc59 	bl	8002b90 <stm_log_write>
    thisNode.relayState = Flash_ReadAddress(ADDR_RELAY_STATE);
 80022de:	4820      	ldr	r0, [pc, #128]	; (8002360 <thisNodeInit+0xd8>)
 80022e0:	f7fe f810 	bl	8000304 <Flash_ReadAddress>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <thisNodeInit+0xec>)
 80022ea:	709a      	strb	r2, [r3, #2]
    thisNode.location = Flash_ReadAddress(ADDR_LOCATION);
 80022ec:	4822      	ldr	r0, [pc, #136]	; (8002378 <thisNodeInit+0xf0>)
 80022ee:	f7fe f809 	bl	8000304 <Flash_ReadAddress>
 80022f2:	4603      	mov	r3, r0
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <thisNodeInit+0xec>)
 80022f8:	705a      	strb	r2, [r3, #1]
    thisNode.errCode = Flash_ReadAddress(ADDR_ERROR_CODE);
 80022fa:	4820      	ldr	r0, [pc, #128]	; (800237c <thisNodeInit+0xf4>)
 80022fc:	f7fe f802 	bl	8000304 <Flash_ReadAddress>
 8002300:	4603      	mov	r3, r0
 8002302:	b2da      	uxtb	r2, r3
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <thisNodeInit+0xec>)
 8002306:	70da      	strb	r2, [r3, #3]
    RELAY_CONTROL(thisNode.relayState);
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <thisNodeInit+0xec>)
 800230a:	789b      	ldrb	r3, [r3, #2]
 800230c:	461a      	mov	r2, r3
 800230e:	2102      	movs	r1, #2
 8002310:	481b      	ldr	r0, [pc, #108]	; (8002380 <thisNodeInit+0xf8>)
 8002312:	f002 f981 	bl	8004618 <HAL_GPIO_WritePin>
  }

  /* Send notif gw after power on */
  uint8_t notifData[PAYLOAD_LENGTH];
  PACK_NOTIF_MSG(notifData, thisNode, resetCause);
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <thisNodeInit+0xec>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	733b      	strb	r3, [r7, #12]
 800231c:	23ff      	movs	r3, #255	; 0xff
 800231e:	737b      	strb	r3, [r7, #13]
 8002320:	2302      	movs	r3, #2
 8002322:	73bb      	strb	r3, [r7, #14]
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	23ff      	movs	r3, #255	; 0xff
 800232a:	743b      	strb	r3, [r7, #16]
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <thisNodeInit+0xec>)
 800232e:	785b      	ldrb	r3, [r3, #1]
 8002330:	747b      	strb	r3, [r7, #17]
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <thisNodeInit+0xec>)
 8002334:	789b      	ldrb	r3, [r3, #2]
 8002336:	74bb      	strb	r3, [r7, #18]
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <thisNodeInit+0xec>)
 800233a:	78db      	ldrb	r3, [r3, #3]
 800233c:	74fb      	strb	r3, [r7, #19]
 800233e:	2300      	movs	r3, #0
 8002340:	753b      	strb	r3, [r7, #20]
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	757b      	strb	r3, [r7, #21]
  LoRaTransmit(notifData, PAYLOAD_LENGTH, LORA_DELAY);
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	f04f 32ff 	mov.w	r2, #4294967295
 800234e:	210a      	movs	r1, #10
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fb11 	bl	8001978 <LoRaTransmit>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	0800dc00 	.word	0x0800dc00
 8002364:	0800cf9c 	.word	0x0800cf9c
 8002368:	0800c77c 	.word	0x0800c77c
 800236c:	0800c880 	.word	0x0800c880
 8002370:	0800c8c8 	.word	0x0800c8c8
 8002374:	20000000 	.word	0x20000000
 8002378:	0800dc04 	.word	0x0800dc04
 800237c:	0800dc08 	.word	0x0800dc08
 8002380:	40010800 	.word	0x40010800

08002384 <updateDataToFlash>:

void updateDataToFlash(void)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b085      	sub	sp, #20
 8002388:	af04      	add	r7, sp, #16
  taskENTER_CRITICAL();
 800238a:	f007 ffb7 	bl	800a2fc <vPortEnterCritical>
  ERROR_CHECK(Flash_ErasePage(ADDR_RELAY_STATE, 1));
 800238e:	2101      	movs	r1, #1
 8002390:	4866      	ldr	r0, [pc, #408]	; (800252c <updateDataToFlash+0x1a8>)
 8002392:	f7fd ffc3 	bl	800031c <Flash_ErasePage>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d022      	beq.n	80023e2 <updateDataToFlash+0x5e>
 800239c:	f000 fd10 	bl	8002dc0 <HAL_GetTick>
 80023a0:	4604      	mov	r4, r0
 80023a2:	2101      	movs	r1, #1
 80023a4:	4861      	ldr	r0, [pc, #388]	; (800252c <updateDataToFlash+0x1a8>)
 80023a6:	f7fd ffb9 	bl	800031c <Flash_ErasePage>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d00a      	beq.n	80023c6 <updateDataToFlash+0x42>
 80023b0:	2101      	movs	r1, #1
 80023b2:	485e      	ldr	r0, [pc, #376]	; (800252c <updateDataToFlash+0x1a8>)
 80023b4:	f7fd ffb2 	bl	800031c <Flash_ErasePage>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d101      	bne.n	80023c2 <updateDataToFlash+0x3e>
 80023be:	4b5c      	ldr	r3, [pc, #368]	; (8002530 <updateDataToFlash+0x1ac>)
 80023c0:	e002      	b.n	80023c8 <updateDataToFlash+0x44>
 80023c2:	4b5c      	ldr	r3, [pc, #368]	; (8002534 <updateDataToFlash+0x1b0>)
 80023c4:	e000      	b.n	80023c8 <updateDataToFlash+0x44>
 80023c6:	4b5c      	ldr	r3, [pc, #368]	; (8002538 <updateDataToFlash+0x1b4>)
 80023c8:	9303      	str	r3, [sp, #12]
 80023ca:	23ec      	movs	r3, #236	; 0xec
 80023cc:	9302      	str	r3, [sp, #8]
 80023ce:	4b5b      	ldr	r3, [pc, #364]	; (800253c <updateDataToFlash+0x1b8>)
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	4b5b      	ldr	r3, [pc, #364]	; (8002540 <updateDataToFlash+0x1bc>)
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	4623      	mov	r3, r4
 80023d8:	4a5a      	ldr	r2, [pc, #360]	; (8002544 <updateDataToFlash+0x1c0>)
 80023da:	4959      	ldr	r1, [pc, #356]	; (8002540 <updateDataToFlash+0x1bc>)
 80023dc:	2001      	movs	r0, #1
 80023de:	f000 fbd7 	bl	8002b90 <stm_log_write>
  ERROR_CHECK(Flash_WriteWord(ADDR_RELAY_STATE, (uint32_t)thisNode.relayState));
 80023e2:	4b59      	ldr	r3, [pc, #356]	; (8002548 <updateDataToFlash+0x1c4>)
 80023e4:	789b      	ldrb	r3, [r3, #2]
 80023e6:	4619      	mov	r1, r3
 80023e8:	4850      	ldr	r0, [pc, #320]	; (800252c <updateDataToFlash+0x1a8>)
 80023ea:	f7fd ff33 	bl	8000254 <Flash_WriteWord>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d026      	beq.n	8002442 <updateDataToFlash+0xbe>
 80023f4:	f000 fce4 	bl	8002dc0 <HAL_GetTick>
 80023f8:	4604      	mov	r4, r0
 80023fa:	4b53      	ldr	r3, [pc, #332]	; (8002548 <updateDataToFlash+0x1c4>)
 80023fc:	789b      	ldrb	r3, [r3, #2]
 80023fe:	4619      	mov	r1, r3
 8002400:	484a      	ldr	r0, [pc, #296]	; (800252c <updateDataToFlash+0x1a8>)
 8002402:	f7fd ff27 	bl	8000254 <Flash_WriteWord>
 8002406:	4603      	mov	r3, r0
 8002408:	2b01      	cmp	r3, #1
 800240a:	d00c      	beq.n	8002426 <updateDataToFlash+0xa2>
 800240c:	4b4e      	ldr	r3, [pc, #312]	; (8002548 <updateDataToFlash+0x1c4>)
 800240e:	789b      	ldrb	r3, [r3, #2]
 8002410:	4619      	mov	r1, r3
 8002412:	4846      	ldr	r0, [pc, #280]	; (800252c <updateDataToFlash+0x1a8>)
 8002414:	f7fd ff1e 	bl	8000254 <Flash_WriteWord>
 8002418:	4603      	mov	r3, r0
 800241a:	2b02      	cmp	r3, #2
 800241c:	d101      	bne.n	8002422 <updateDataToFlash+0x9e>
 800241e:	4b44      	ldr	r3, [pc, #272]	; (8002530 <updateDataToFlash+0x1ac>)
 8002420:	e002      	b.n	8002428 <updateDataToFlash+0xa4>
 8002422:	4b44      	ldr	r3, [pc, #272]	; (8002534 <updateDataToFlash+0x1b0>)
 8002424:	e000      	b.n	8002428 <updateDataToFlash+0xa4>
 8002426:	4b44      	ldr	r3, [pc, #272]	; (8002538 <updateDataToFlash+0x1b4>)
 8002428:	9303      	str	r3, [sp, #12]
 800242a:	23ed      	movs	r3, #237	; 0xed
 800242c:	9302      	str	r3, [sp, #8]
 800242e:	4b43      	ldr	r3, [pc, #268]	; (800253c <updateDataToFlash+0x1b8>)
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	4b43      	ldr	r3, [pc, #268]	; (8002540 <updateDataToFlash+0x1bc>)
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	4623      	mov	r3, r4
 8002438:	4a42      	ldr	r2, [pc, #264]	; (8002544 <updateDataToFlash+0x1c0>)
 800243a:	4941      	ldr	r1, [pc, #260]	; (8002540 <updateDataToFlash+0x1bc>)
 800243c:	2001      	movs	r0, #1
 800243e:	f000 fba7 	bl	8002b90 <stm_log_write>
  ERROR_CHECK(Flash_WriteWord(ADDR_LOCATION, (uint32_t)thisNode.location));
 8002442:	4b41      	ldr	r3, [pc, #260]	; (8002548 <updateDataToFlash+0x1c4>)
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	4619      	mov	r1, r3
 8002448:	4840      	ldr	r0, [pc, #256]	; (800254c <updateDataToFlash+0x1c8>)
 800244a:	f7fd ff03 	bl	8000254 <Flash_WriteWord>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d026      	beq.n	80024a2 <updateDataToFlash+0x11e>
 8002454:	f000 fcb4 	bl	8002dc0 <HAL_GetTick>
 8002458:	4604      	mov	r4, r0
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <updateDataToFlash+0x1c4>)
 800245c:	785b      	ldrb	r3, [r3, #1]
 800245e:	4619      	mov	r1, r3
 8002460:	483a      	ldr	r0, [pc, #232]	; (800254c <updateDataToFlash+0x1c8>)
 8002462:	f7fd fef7 	bl	8000254 <Flash_WriteWord>
 8002466:	4603      	mov	r3, r0
 8002468:	2b01      	cmp	r3, #1
 800246a:	d00c      	beq.n	8002486 <updateDataToFlash+0x102>
 800246c:	4b36      	ldr	r3, [pc, #216]	; (8002548 <updateDataToFlash+0x1c4>)
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	4619      	mov	r1, r3
 8002472:	4836      	ldr	r0, [pc, #216]	; (800254c <updateDataToFlash+0x1c8>)
 8002474:	f7fd feee 	bl	8000254 <Flash_WriteWord>
 8002478:	4603      	mov	r3, r0
 800247a:	2b02      	cmp	r3, #2
 800247c:	d101      	bne.n	8002482 <updateDataToFlash+0xfe>
 800247e:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <updateDataToFlash+0x1ac>)
 8002480:	e002      	b.n	8002488 <updateDataToFlash+0x104>
 8002482:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <updateDataToFlash+0x1b0>)
 8002484:	e000      	b.n	8002488 <updateDataToFlash+0x104>
 8002486:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <updateDataToFlash+0x1b4>)
 8002488:	9303      	str	r3, [sp, #12]
 800248a:	23ee      	movs	r3, #238	; 0xee
 800248c:	9302      	str	r3, [sp, #8]
 800248e:	4b2b      	ldr	r3, [pc, #172]	; (800253c <updateDataToFlash+0x1b8>)
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <updateDataToFlash+0x1bc>)
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	4623      	mov	r3, r4
 8002498:	4a2a      	ldr	r2, [pc, #168]	; (8002544 <updateDataToFlash+0x1c0>)
 800249a:	4929      	ldr	r1, [pc, #164]	; (8002540 <updateDataToFlash+0x1bc>)
 800249c:	2001      	movs	r0, #1
 800249e:	f000 fb77 	bl	8002b90 <stm_log_write>
  ERROR_CHECK(Flash_WriteWord(ADDR_ERROR_CODE, (uint32_t)thisNode.errCode));
 80024a2:	4b29      	ldr	r3, [pc, #164]	; (8002548 <updateDataToFlash+0x1c4>)
 80024a4:	78db      	ldrb	r3, [r3, #3]
 80024a6:	4619      	mov	r1, r3
 80024a8:	4829      	ldr	r0, [pc, #164]	; (8002550 <updateDataToFlash+0x1cc>)
 80024aa:	f7fd fed3 	bl	8000254 <Flash_WriteWord>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d026      	beq.n	8002502 <updateDataToFlash+0x17e>
 80024b4:	f000 fc84 	bl	8002dc0 <HAL_GetTick>
 80024b8:	4604      	mov	r4, r0
 80024ba:	4b23      	ldr	r3, [pc, #140]	; (8002548 <updateDataToFlash+0x1c4>)
 80024bc:	78db      	ldrb	r3, [r3, #3]
 80024be:	4619      	mov	r1, r3
 80024c0:	4823      	ldr	r0, [pc, #140]	; (8002550 <updateDataToFlash+0x1cc>)
 80024c2:	f7fd fec7 	bl	8000254 <Flash_WriteWord>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d00c      	beq.n	80024e6 <updateDataToFlash+0x162>
 80024cc:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <updateDataToFlash+0x1c4>)
 80024ce:	78db      	ldrb	r3, [r3, #3]
 80024d0:	4619      	mov	r1, r3
 80024d2:	481f      	ldr	r0, [pc, #124]	; (8002550 <updateDataToFlash+0x1cc>)
 80024d4:	f7fd febe 	bl	8000254 <Flash_WriteWord>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d101      	bne.n	80024e2 <updateDataToFlash+0x15e>
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <updateDataToFlash+0x1ac>)
 80024e0:	e002      	b.n	80024e8 <updateDataToFlash+0x164>
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <updateDataToFlash+0x1b0>)
 80024e4:	e000      	b.n	80024e8 <updateDataToFlash+0x164>
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <updateDataToFlash+0x1b4>)
 80024e8:	9303      	str	r3, [sp, #12]
 80024ea:	23ef      	movs	r3, #239	; 0xef
 80024ec:	9302      	str	r3, [sp, #8]
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <updateDataToFlash+0x1b8>)
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <updateDataToFlash+0x1bc>)
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	4623      	mov	r3, r4
 80024f8:	4a12      	ldr	r2, [pc, #72]	; (8002544 <updateDataToFlash+0x1c0>)
 80024fa:	4911      	ldr	r1, [pc, #68]	; (8002540 <updateDataToFlash+0x1bc>)
 80024fc:	2001      	movs	r0, #1
 80024fe:	f000 fb47 	bl	8002b90 <stm_log_write>
  taskEXIT_CRITICAL();
 8002502:	f007 ff2b 	bl	800a35c <vPortExitCritical>
  STM_LOGD("Main", "update data to flash");
 8002506:	f000 fc5b 	bl	8002dc0 <HAL_GetTick>
 800250a:	4603      	mov	r3, r0
 800250c:	22f1      	movs	r2, #241	; 0xf1
 800250e:	9202      	str	r2, [sp, #8]
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <updateDataToFlash+0x1b8>)
 8002512:	9201      	str	r2, [sp, #4]
 8002514:	4a0f      	ldr	r2, [pc, #60]	; (8002554 <updateDataToFlash+0x1d0>)
 8002516:	9200      	str	r2, [sp, #0]
 8002518:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <updateDataToFlash+0x1d4>)
 800251a:	490e      	ldr	r1, [pc, #56]	; (8002554 <updateDataToFlash+0x1d0>)
 800251c:	2004      	movs	r0, #4
 800251e:	f000 fb37 	bl	8002b90 <stm_log_write>
}
 8002522:	bf00      	nop
 8002524:	3704      	adds	r7, #4
 8002526:	46bd      	mov	sp, r7
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	bf00      	nop
 800252c:	0800dc00 	.word	0x0800dc00
 8002530:	0800c910 	.word	0x0800c910
 8002534:	0800c91c 	.word	0x0800c91c
 8002538:	0800c928 	.word	0x0800c928
 800253c:	0800cfac 	.word	0x0800cfac
 8002540:	0800c964 	.word	0x0800c964
 8002544:	0800c934 	.word	0x0800c934
 8002548:	20000000 	.word	0x20000000
 800254c:	0800dc04 	.word	0x0800dc04
 8002550:	0800dc08 	.word	0x0800dc08
 8002554:	0800c77c 	.word	0x0800c77c
 8002558:	0800c974 	.word	0x0800c974

0800255c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800256e:	f000 fc15 	bl	8002d9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40000800 	.word	0x40000800

08002580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002584:	b672      	cpsid	i
}
 8002586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002588:	e7fe      	b.n	8002588 <Error_Handler+0x8>

0800258a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
	...

080025a0 <resetCauseGet>:
#include "misc.h"
#include "stm_log.h"

reset_cause_t resetCauseGet(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
		RCC_FLAG_WWDGRST: Window watchdog reset flag
		RCC_FLAG_LPWRRST: Low power reset flag 
	*/
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <resetCauseGet+0x84>)
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da02      	bge.n	80025b4 <resetCauseGet+0x14>
    {
        reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 80025ae:	2301      	movs	r3, #1
 80025b0:	71fb      	strb	r3, [r7, #7]
 80025b2:	e02e      	b.n	8002612 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <resetCauseGet+0x84>)
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <resetCauseGet+0x26>
    {
        reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 80025c0:	2302      	movs	r3, #2
 80025c2:	71fb      	strb	r3, [r7, #7]
 80025c4:	e025      	b.n	8002612 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <resetCauseGet+0x84>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <resetCauseGet+0x38>
    {
        reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 80025d2:	2303      	movs	r3, #3
 80025d4:	71fb      	strb	r3, [r7, #7]
 80025d6:	e01c      	b.n	8002612 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <resetCauseGet+0x84>)
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <resetCauseGet+0x4a>
    {
        reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 80025e4:	2304      	movs	r3, #4
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	e013      	b.n	8002612 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <resetCauseGet+0x84>)
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <resetCauseGet+0x5c>
    {
        reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 80025f6:	2305      	movs	r3, #5
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	e00a      	b.n	8002612 <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <resetCauseGet+0x84>)
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <resetCauseGet+0x6e>
    {
        reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8002608:	2306      	movs	r3, #6
 800260a:	71fb      	strb	r3, [r7, #7]
 800260c:	e001      	b.n	8002612 <resetCauseGet+0x72>
    }
    else
    {
        reset_cause = eRESET_CAUSE_UNKNOWN;
 800260e:	2300      	movs	r3, #0
 8002610:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_RCC_CLEAR_RESET_FLAGS();
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <resetCauseGet+0x88>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

    return reset_cause;
 8002618:	79fb      	ldrb	r3, [r7, #7]
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	40021000 	.word	0x40021000
 8002628:	424204e0 	.word	0x424204e0

0800262c <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
    const char *reset_cause_name = "";
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <resetCauseGetName+0x78>)
 8002638:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	2b07      	cmp	r3, #7
 800263e:	d82b      	bhi.n	8002698 <resetCauseGetName+0x6c>
 8002640:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <resetCauseGetName+0x1c>)
 8002642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002646:	bf00      	nop
 8002648:	08002669 	.word	0x08002669
 800264c:	0800266f 	.word	0x0800266f
 8002650:	08002675 	.word	0x08002675
 8002654:	0800267b 	.word	0x0800267b
 8002658:	08002681 	.word	0x08002681
 800265c:	08002687 	.word	0x08002687
 8002660:	0800268d 	.word	0x0800268d
 8002664:	08002693 	.word	0x08002693
    {
    case eRESET_CAUSE_UNKNOWN:
        reset_cause_name = "UNKNOWN";
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <resetCauseGetName+0x7c>)
 800266a:	60fb      	str	r3, [r7, #12]
        break;
 800266c:	e014      	b.n	8002698 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_LOW_POWER_RESET:
        reset_cause_name = "LOW_POWER_RESET";
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <resetCauseGetName+0x80>)
 8002670:	60fb      	str	r3, [r7, #12]
        break;
 8002672:	e011      	b.n	8002698 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
        reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <resetCauseGetName+0x84>)
 8002676:	60fb      	str	r3, [r7, #12]
        break;
 8002678:	e00e      	b.n	8002698 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
        reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <resetCauseGetName+0x88>)
 800267c:	60fb      	str	r3, [r7, #12]
        break;
 800267e:	e00b      	b.n	8002698 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_SOFTWARE_RESET:
        reset_cause_name = "SOFTWARE_RESET";
 8002680:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <resetCauseGetName+0x8c>)
 8002682:	60fb      	str	r3, [r7, #12]
        break;
 8002684:	e008      	b.n	8002698 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
        reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <resetCauseGetName+0x90>)
 8002688:	60fb      	str	r3, [r7, #12]
        break;
 800268a:	e005      	b.n	8002698 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
        reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <resetCauseGetName+0x94>)
 800268e:	60fb      	str	r3, [r7, #12]
        break;
 8002690:	e002      	b.n	8002698 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_BROWNOUT_RESET:
        reset_cause_name = "BROWNOUT_RESET (BOR)";
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <resetCauseGetName+0x98>)
 8002694:	60fb      	str	r3, [r7, #12]
        break;
 8002696:	bf00      	nop
    }
    return reset_cause_name;
 8002698:	68fb      	ldr	r3, [r7, #12]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	0800c9ac 	.word	0x0800c9ac
 80026a8:	0800c9b0 	.word	0x0800c9b0
 80026ac:	0800c9b8 	.word	0x0800c9b8
 80026b0:	0800c9c8 	.word	0x0800c9c8
 80026b4:	0800c9e0 	.word	0x0800c9e0
 80026b8:	0800c9fc 	.word	0x0800c9fc
 80026bc:	0800ca0c 	.word	0x0800ca0c
 80026c0:	0800ca3c 	.word	0x0800ca3c
 80026c4:	0800ca58 	.word	0x0800ca58

080026c8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80026d0:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <RetargetInit+0x28>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <RetargetInit+0x2c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6898      	ldr	r0, [r3, #8]
 80026dc:	2300      	movs	r3, #0
 80026de:	2202      	movs	r2, #2
 80026e0:	2100      	movs	r1, #0
 80026e2:	f008 f999 	bl	800aa18 <setvbuf>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20003a34 	.word	0x20003a34
 80026f4:	20000030 	.word	0x20000030

080026f8 <_isatty>:

int _isatty(int fd) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db04      	blt.n	8002710 <_isatty+0x18>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b02      	cmp	r3, #2
 800270a:	dc01      	bgt.n	8002710 <_isatty+0x18>
    return 1;
 800270c:	2301      	movs	r3, #1
 800270e:	e005      	b.n	800271c <_isatty+0x24>

  errno = EBADF;
 8002710:	f008 f8cc 	bl	800a8ac <__errno>
 8002714:	4603      	mov	r3, r0
 8002716:	2209      	movs	r2, #9
 8002718:	601a      	str	r2, [r3, #0]
  return 0;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <_write>:

int _write(int fd, char* ptr, int len) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d002      	beq.n	800273c <_write+0x18>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d111      	bne.n	8002760 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <_write+0x54>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	b29a      	uxth	r2, r3
 8002744:	f04f 33ff 	mov.w	r3, #4294967295
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	f004 f8bd 	bl	80068c8 <HAL_UART_Transmit>
 800274e:	4603      	mov	r3, r0
 8002750:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <_write+0x38>
      return len;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	e008      	b.n	800276e <_write+0x4a>
    else
      return EIO;
 800275c:	2305      	movs	r3, #5
 800275e:	e006      	b.n	800276e <_write+0x4a>
  }
  errno = EBADF;
 8002760:	f008 f8a4 	bl	800a8ac <__errno>
 8002764:	4603      	mov	r3, r0
 8002766:	2209      	movs	r2, #9
 8002768:	601a      	str	r2, [r3, #0]
  return -1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20003a34 	.word	0x20003a34

0800277c <_close>:

int _close(int fd) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db04      	blt.n	8002794 <_close+0x18>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b02      	cmp	r3, #2
 800278e:	dc01      	bgt.n	8002794 <_close+0x18>
    return 0;
 8002790:	2300      	movs	r3, #0
 8002792:	e006      	b.n	80027a2 <_close+0x26>

  errno = EBADF;
 8002794:	f008 f88a 	bl	800a8ac <__errno>
 8002798:	4603      	mov	r3, r0
 800279a:	2209      	movs	r2, #9
 800279c:	601a      	str	r2, [r3, #0]
  return -1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80027b6:	f008 f879 	bl	800a8ac <__errno>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2209      	movs	r2, #9
 80027be:	601a      	str	r2, [r3, #0]
  return -1;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_read>:

int _read(int fd, char* ptr, int len) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d110      	bne.n	8002800 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <_read+0x4c>)
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	2201      	movs	r2, #1
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	f004 f8ff 	bl	80069ec <HAL_UART_Receive>
 80027ee:	4603      	mov	r3, r0
 80027f0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <_read+0x30>
      return 1;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e008      	b.n	800280e <_read+0x42>
    else
      return EIO;
 80027fc:	2305      	movs	r3, #5
 80027fe:	e006      	b.n	800280e <_read+0x42>
  }
  errno = EBADF;
 8002800:	f008 f854 	bl	800a8ac <__errno>
 8002804:	4603      	mov	r3, r0
 8002806:	2209      	movs	r2, #9
 8002808:	601a      	str	r2, [r3, #0]
  return -1;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20003a34 	.word	0x20003a34

0800281c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	db08      	blt.n	800283e <_fstat+0x22>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b02      	cmp	r3, #2
 8002830:	dc05      	bgt.n	800283e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002838:	605a      	str	r2, [r3, #4]
    return 0;
 800283a:	2300      	movs	r3, #0
 800283c:	e005      	b.n	800284a <_fstat+0x2e>
  }

  errno = EBADF;
 800283e:	f008 f835 	bl	800a8ac <__errno>
 8002842:	4603      	mov	r3, r0
 8002844:	2209      	movs	r2, #9
 8002846:	601a      	str	r2, [r3, #0]
  return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002858:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <MX_SPI1_Init+0x64>)
 800285a:	4a18      	ldr	r2, [pc, #96]	; (80028bc <MX_SPI1_Init+0x68>)
 800285c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800285e:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <MX_SPI1_Init+0x64>)
 8002860:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002864:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <MX_SPI1_Init+0x64>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <MX_SPI1_Init+0x64>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <MX_SPI1_Init+0x64>)
 8002874:	2200      	movs	r2, #0
 8002876:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <MX_SPI1_Init+0x64>)
 800287a:	2200      	movs	r2, #0
 800287c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <MX_SPI1_Init+0x64>)
 8002880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002884:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <MX_SPI1_Init+0x64>)
 8002888:	2200      	movs	r2, #0
 800288a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <MX_SPI1_Init+0x64>)
 800288e:	2200      	movs	r2, #0
 8002890:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <MX_SPI1_Init+0x64>)
 8002894:	2200      	movs	r2, #0
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <MX_SPI1_Init+0x64>)
 800289a:	2200      	movs	r2, #0
 800289c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <MX_SPI1_Init+0x64>)
 80028a0:	220a      	movs	r2, #10
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028a4:	4804      	ldr	r0, [pc, #16]	; (80028b8 <MX_SPI1_Init+0x64>)
 80028a6:	f002 fe25 	bl	80054f4 <HAL_SPI_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028b0:	f7ff fe66 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20003a38 	.word	0x20003a38
 80028bc:	40013000 	.word	0x40013000

080028c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <HAL_SPI_MspInit+0x88>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d12f      	bne.n	8002940 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <HAL_SPI_MspInit+0x8c>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a19      	ldr	r2, [pc, #100]	; (800294c <HAL_SPI_MspInit+0x8c>)
 80028e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <HAL_SPI_MspInit+0x8c>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_SPI_MspInit+0x8c>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a13      	ldr	r2, [pc, #76]	; (800294c <HAL_SPI_MspInit+0x8c>)
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_SPI_MspInit+0x8c>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002910:	23a0      	movs	r3, #160	; 0xa0
 8002912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	4619      	mov	r1, r3
 8002922:	480b      	ldr	r0, [pc, #44]	; (8002950 <HAL_SPI_MspInit+0x90>)
 8002924:	f001 fc08 	bl	8004138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002928:	2340      	movs	r3, #64	; 0x40
 800292a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4619      	mov	r1, r3
 800293a:	4805      	ldr	r0, [pc, #20]	; (8002950 <HAL_SPI_MspInit+0x90>)
 800293c:	f001 fbfc 	bl	8004138 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002940:	bf00      	nop
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40013000 	.word	0x40013000
 800294c:	40021000 	.word	0x40021000
 8002950:	40010800 	.word	0x40010800

08002954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800295a:	4b18      	ldr	r3, [pc, #96]	; (80029bc <HAL_MspInit+0x68>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_MspInit+0x68>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6193      	str	r3, [r2, #24]
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_MspInit+0x68>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_MspInit+0x68>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	4a11      	ldr	r2, [pc, #68]	; (80029bc <HAL_MspInit+0x68>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297c:	61d3      	str	r3, [r2, #28]
 800297e:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_MspInit+0x68>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	210f      	movs	r1, #15
 800298e:	f06f 0001 	mvn.w	r0, #1
 8002992:	f001 f8b5 	bl	8003b00 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_MspInit+0x6c>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <HAL_MspInit+0x6c>)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010000 	.word	0x40010000

080029c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08c      	sub	sp, #48	; 0x30
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	201e      	movs	r0, #30
 80029da:	f001 f891 	bl	8003b00 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029de:	201e      	movs	r0, #30
 80029e0:	f001 f8ba 	bl	8003b58 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80029e4:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <HAL_InitTick+0x9c>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <HAL_InitTick+0x9c>)
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	61d3      	str	r3, [r2, #28]
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_InitTick+0x9c>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029fc:	f107 0210 	add.w	r2, r7, #16
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fc0a 	bl	8005220 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a0c:	f002 fbe0 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 8002a10:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <HAL_InitTick+0xa0>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0c9b      	lsrs	r3, r3, #18
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <HAL_InitTick+0xa8>)
 8002a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a2c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002a2e:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002a40:	4809      	ldr	r0, [pc, #36]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a42:	f003 fbd9 	bl	80061f8 <HAL_TIM_Base_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002a4c:	4806      	ldr	r0, [pc, #24]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a4e:	f003 fc87 	bl	8006360 <HAL_TIM_Base_Start_IT>
 8002a52:	4603      	mov	r3, r0
 8002a54:	e000      	b.n	8002a58 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3730      	adds	r7, #48	; 0x30
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	431bde83 	.word	0x431bde83
 8002a68:	20003a90 	.word	0x20003a90
 8002a6c:	40000800 	.word	0x40000800

08002a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <NMI_Handler+0x4>

08002a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <HardFault_Handler+0x4>

08002a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <MemManage_Handler+0x4>

08002a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a86:	e7fe      	b.n	8002a86 <BusFault_Handler+0x4>

08002a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <UsageFault_Handler+0x4>

08002a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002a9e:	2008      	movs	r0, #8
 8002aa0:	f001 fe14 	bl	80046cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <ADC1_2_IRQHandler+0x10>)
 8002aae:	f000 fc07 	bl	80032c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200039e8 	.word	0x200039e8

08002abc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <TIM4_IRQHandler+0x10>)
 8002ac2:	f003 fcb9 	bl	8006438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20003a90 	.word	0x20003a90

08002ad0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af04      	add	r7, sp, #16
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == INTERRUPT_LORA_Pin)
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d119      	bne.n	8002b14 <HAL_GPIO_EXTI_Callback+0x44>
  {
    osStatus_t err = osSemaphoreRelease(rxDoneSemaphoreHandle);
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <HAL_GPIO_EXTI_Callback+0x4c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 fc13 	bl	8007310 <osSemaphoreRelease>
 8002aea:	60f8      	str	r0, [r7, #12]
    if (!err) {
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d110      	bne.n	8002b14 <HAL_GPIO_EXTI_Callback+0x44>
      printf("\r\n");
 8002af2:	480b      	ldr	r0, [pc, #44]	; (8002b20 <HAL_GPIO_EXTI_Callback+0x50>)
 8002af4:	f007 ff88 	bl	800aa08 <puts>
      STM_LOGD("EXTI_ISR", "release rxDoneSemaphore ok");
 8002af8:	f000 f962 	bl	8002dc0 <HAL_GetTick>
 8002afc:	4603      	mov	r3, r0
 8002afe:	22de      	movs	r2, #222	; 0xde
 8002b00:	9202      	str	r2, [sp, #8]
 8002b02:	4a08      	ldr	r2, [pc, #32]	; (8002b24 <HAL_GPIO_EXTI_Callback+0x54>)
 8002b04:	9201      	str	r2, [sp, #4]
 8002b06:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <HAL_GPIO_EXTI_Callback+0x58>)
 8002b08:	9200      	str	r2, [sp, #0]
 8002b0a:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b0c:	4906      	ldr	r1, [pc, #24]	; (8002b28 <HAL_GPIO_EXTI_Callback+0x58>)
 8002b0e:	2004      	movs	r0, #4
 8002b10:	f000 f83e 	bl	8002b90 <stm_log_write>
    }
  }
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20003a1c 	.word	0x20003a1c
 8002b20:	0800cab0 	.word	0x0800cab0
 8002b24:	0800cfc0 	.word	0x0800cfc0
 8002b28:	0800caf4 	.word	0x0800caf4
 8002b2c:	0800cab4 	.word	0x0800cab4

08002b30 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af04      	add	r7, sp, #16
 8002b36:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == hadc1.Instance)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <HAL_ADC_ConvCpltCallback+0x4c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d117      	bne.n	8002b74 <HAL_ADC_ConvCpltCallback+0x44>
  {
    adcLightSensor = HAL_ADC_GetValue(hadc);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fb9b 	bl	8003280 <HAL_ADC_GetValue>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <HAL_ADC_ConvCpltCallback+0x50>)
 8002b4e:	6013      	str	r3, [r2, #0]
    STM_LOGI("ADC_ISR", "lightSensor: %d", adcLightSensor);
 8002b50:	f000 f936 	bl	8002dc0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_ADC_ConvCpltCallback+0x50>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	9303      	str	r3, [sp, #12]
 8002b5c:	23e8      	movs	r3, #232	; 0xe8
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_ADC_ConvCpltCallback+0x54>)
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_ADC_ConvCpltCallback+0x58>)
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <HAL_ADC_ConvCpltCallback+0x5c>)
 8002b6c:	4906      	ldr	r1, [pc, #24]	; (8002b88 <HAL_ADC_ConvCpltCallback+0x58>)
 8002b6e:	2003      	movs	r0, #3
 8002b70:	f000 f80e 	bl	8002b90 <stm_log_write>
  }
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	200039e8 	.word	0x200039e8
 8002b80:	20003ad8 	.word	0x20003ad8
 8002b84:	0800cfd8 	.word	0x0800cfd8
 8002b88:	0800cb34 	.word	0x0800cb34
 8002b8c:	0800cb00 	.word	0x0800cb00

08002b90 <stm_log_write>:
#include <stdarg.h>

void stm_log_write(stm_log_level_t level,
                   const char *tag,
                   const char *format, ...)
{
 8002b90:	b40c      	push	{r2, r3}
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	6039      	str	r1, [r7, #0]
 8002b9c:	71fb      	strb	r3, [r7, #7]
    va_list arg;
    va_start(arg, format);
 8002b9e:	f107 031c 	add.w	r3, r7, #28
 8002ba2:	60fb      	str	r3, [r7, #12]
    vprintf(format, arg);
 8002ba4:	68f9      	ldr	r1, [r7, #12]
 8002ba6:	69b8      	ldr	r0, [r7, #24]
 8002ba8:	f007 fffc 	bl	800aba4 <viprintf>
    va_end(arg);
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bb6:	b002      	add	sp, #8
 8002bb8:	4770      	bx	lr
	...

08002bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc4:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <_sbrk+0x5c>)
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <_sbrk+0x60>)
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <_sbrk+0x64>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd8:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <_sbrk+0x64>)
 8002bda:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <_sbrk+0x68>)
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <_sbrk+0x64>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d207      	bcs.n	8002bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bec:	f007 fe5e 	bl	800a8ac <__errno>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	e009      	b.n	8002c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <_sbrk+0x64>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <_sbrk+0x64>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <_sbrk+0x64>)
 8002c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20005000 	.word	0x20005000
 8002c1c:	00000400 	.word	0x00000400
 8002c20:	200000c4 	.word	0x200000c4
 8002c24:	20003b90 	.word	0x20003b90

08002c28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <MX_USART1_UART_Init+0x50>)
 8002c3a:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <MX_USART1_UART_Init+0x54>)
 8002c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <MX_USART1_UART_Init+0x50>)
 8002c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <MX_USART1_UART_Init+0x50>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <MX_USART1_UART_Init+0x50>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <MX_USART1_UART_Init+0x50>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <MX_USART1_UART_Init+0x50>)
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <MX_USART1_UART_Init+0x50>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c64:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <MX_USART1_UART_Init+0x50>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c6a:	4806      	ldr	r0, [pc, #24]	; (8002c84 <MX_USART1_UART_Init+0x50>)
 8002c6c:	f003 fd84 	bl	8006778 <HAL_UART_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c76:	f7ff fc83 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  RetargetInit(&huart1);
 8002c7a:	4802      	ldr	r0, [pc, #8]	; (8002c84 <MX_USART1_UART_Init+0x50>)
 8002c7c:	f7ff fd24 	bl	80026c8 <RetargetInit>
  /* USER CODE END USART1_Init 2 */

}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20003adc 	.word	0x20003adc
 8002c88:	40013800 	.word	0x40013800

08002c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0310 	add.w	r3, r7, #16
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <HAL_UART_MspInit+0x8c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d131      	bne.n	8002d10 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_UART_MspInit+0x90>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	4a1a      	ldr	r2, [pc, #104]	; (8002d1c <HAL_UART_MspInit+0x90>)
 8002cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb6:	6193      	str	r3, [r2, #24]
 8002cb8:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <HAL_UART_MspInit+0x90>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_UART_MspInit+0x90>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_UART_MspInit+0x90>)
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	6193      	str	r3, [r2, #24]
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_UART_MspInit+0x90>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	4619      	mov	r1, r3
 8002cf0:	480b      	ldr	r0, [pc, #44]	; (8002d20 <HAL_UART_MspInit+0x94>)
 8002cf2:	f001 fa21 	bl	8004138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <HAL_UART_MspInit+0x94>)
 8002d0c:	f001 fa14 	bl	8004138 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d10:	bf00      	nop
 8002d12:	3720      	adds	r7, #32
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40013800 	.word	0x40013800
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40010800 	.word	0x40010800

08002d24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d26:	e003      	b.n	8002d30 <LoopCopyDataInit>

08002d28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d2e:	3104      	adds	r1, #4

08002d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d30:	480a      	ldr	r0, [pc, #40]	; (8002d5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d38:	d3f6      	bcc.n	8002d28 <CopyDataInit>
  ldr r2, =_sbss
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d3c:	e002      	b.n	8002d44 <LoopFillZerobss>

08002d3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d40:	f842 3b04 	str.w	r3, [r2], #4

08002d44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d48:	d3f9      	bcc.n	8002d3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d4a:	f7ff ff6d 	bl	8002c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d4e:	f007 fdb3 	bl	800a8b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d52:	f7ff f985 	bl	8002060 <main>
  bx lr
 8002d56:	4770      	bx	lr
  ldr r3, =_sidata
 8002d58:	0800d0ac 	.word	0x0800d0ac
  ldr r0, =_sdata
 8002d5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d60:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 8002d64:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 8002d68:	20003b90 	.word	0x20003b90

08002d6c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d6c:	e7fe      	b.n	8002d6c <CAN1_RX1_IRQHandler>
	...

08002d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_Init+0x28>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <HAL_Init+0x28>)
 8002d7a:	f043 0310 	orr.w	r3, r3, #16
 8002d7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d80:	2003      	movs	r0, #3
 8002d82:	f000 fe9d 	bl	8003ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7ff fe1c 	bl	80029c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d8c:	f7ff fde2 	bl	8002954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40022000 	.word	0x40022000

08002d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_IncTick+0x1c>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_IncTick+0x20>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <HAL_IncTick+0x20>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	20000028 	.word	0x20000028
 8002dbc:	20003b1c 	.word	0x20003b1c

08002dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc4:	4b02      	ldr	r3, [pc, #8]	; (8002dd0 <HAL_GetTick+0x10>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	20003b1c 	.word	0x20003b1c

08002dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff fff0 	bl	8002dc0 <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d005      	beq.n	8002dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_Delay+0x44>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dfa:	bf00      	nop
 8002dfc:	f7ff ffe0 	bl	8002dc0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d8f7      	bhi.n	8002dfc <HAL_Delay+0x28>
  {
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000028 	.word	0x20000028

08002e1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e153      	b.n	80030e6 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a9f      	ldr	r2, [pc, #636]	; (80030c0 <HAL_ADC_Init+0x2a4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d009      	beq.n	8002e5c <HAL_ADC_Init+0x40>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a9d      	ldr	r2, [pc, #628]	; (80030c4 <HAL_ADC_Init+0x2a8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d004      	beq.n	8002e5c <HAL_ADC_Init+0x40>
 8002e52:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002e56:	489c      	ldr	r0, [pc, #624]	; (80030c8 <HAL_ADC_Init+0x2ac>)
 8002e58:	f7ff fb97 	bl	800258a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d009      	beq.n	8002e78 <HAL_ADC_Init+0x5c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6c:	d004      	beq.n	8002e78 <HAL_ADC_Init+0x5c>
 8002e6e:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002e72:	4895      	ldr	r0, [pc, #596]	; (80030c8 <HAL_ADC_Init+0x2ac>)
 8002e74:	f7ff fb89 	bl	800258a <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d009      	beq.n	8002e94 <HAL_ADC_Init+0x78>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e88:	d004      	beq.n	8002e94 <HAL_ADC_Init+0x78>
 8002e8a:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002e8e:	488e      	ldr	r0, [pc, #568]	; (80030c8 <HAL_ADC_Init+0x2ac>)
 8002e90:	f7ff fb7b 	bl	800258a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7b1b      	ldrb	r3, [r3, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_ADC_Init+0x92>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7b1b      	ldrb	r3, [r3, #12]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d004      	beq.n	8002eae <HAL_ADC_Init+0x92>
 8002ea4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002ea8:	4887      	ldr	r0, [pc, #540]	; (80030c8 <HAL_ADC_Init+0x2ac>)
 8002eaa:	f7ff fb6e 	bl	800258a <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d022      	beq.n	8002efc <HAL_ADC_Init+0xe0>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ebe:	d01d      	beq.n	8002efc <HAL_ADC_Init+0xe0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002ec8:	d018      	beq.n	8002efc <HAL_ADC_Init+0xe0>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ed2:	d013      	beq.n	8002efc <HAL_ADC_Init+0xe0>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002edc:	d00e      	beq.n	8002efc <HAL_ADC_Init+0xe0>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ee6:	d009      	beq.n	8002efc <HAL_ADC_Init+0xe0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ef0:	d004      	beq.n	8002efc <HAL_ADC_Init+0xe0>
 8002ef2:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002ef6:	4874      	ldr	r0, [pc, #464]	; (80030c8 <HAL_ADC_Init+0x2ac>)
 8002ef8:	f7ff fb47 	bl	800258a <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d02a      	beq.n	8002f5a <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_ADC_Init+0xf8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d904      	bls.n	8002f1e <HAL_ADC_Init+0x102>
 8002f14:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002f18:	486b      	ldr	r0, [pc, #428]	; (80030c8 <HAL_ADC_Init+0x2ac>)
 8002f1a:	f7ff fb36 	bl	800258a <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	7d1b      	ldrb	r3, [r3, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_ADC_Init+0x11c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7d1b      	ldrb	r3, [r3, #20]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d004      	beq.n	8002f38 <HAL_ADC_Init+0x11c>
 8002f2e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002f32:	4865      	ldr	r0, [pc, #404]	; (80030c8 <HAL_ADC_Init+0x2ac>)
 8002f34:	f7ff fb29 	bl	800258a <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7d1b      	ldrb	r3, [r3, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00c      	beq.n	8002f5a <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_ADC_Init+0x134>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d904      	bls.n	8002f5a <HAL_ADC_Init+0x13e>
 8002f50:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002f54:	485c      	ldr	r0, [pc, #368]	; (80030c8 <HAL_ADC_Init+0x2ac>)
 8002f56:	f7ff fb18 	bl	800258a <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7fd f92b 	bl	80001cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fcb4 	bl	80038e4 <ADC_ConversionStop_Disable>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f040 80a3 	bne.w	80030d4 <HAL_ADC_Init+0x2b8>
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 809f 	bne.w	80030d4 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f9e:	f023 0302 	bic.w	r3, r3, #2
 8002fa2:	f043 0202 	orr.w	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fb2:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7b1b      	ldrb	r3, [r3, #12]
 8002fb8:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fba:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fca:	d003      	beq.n	8002fd4 <HAL_ADC_Init+0x1b8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HAL_ADC_Init+0x1be>
 8002fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fd8:	e000      	b.n	8002fdc <HAL_ADC_Init+0x1c0>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7d1b      	ldrb	r3, [r3, #20]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d119      	bne.n	800301e <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7b1b      	ldrb	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	035a      	lsls	r2, r3, #13
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	e00b      	b.n	800301e <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_ADC_Init+0x2b0>)
 800303a:	4013      	ands	r3, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	430b      	orrs	r3, r1
 8003044:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304e:	d003      	beq.n	8003058 <HAL_ADC_Init+0x23c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d104      	bne.n	8003062 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	3b01      	subs	r3, #1
 800305e:	051b      	lsls	r3, r3, #20
 8003060:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	430a      	orrs	r2, r1
 8003074:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <HAL_ADC_Init+0x2b4>)
 800307e:	4013      	ands	r3, r2
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	d10b      	bne.n	800309e <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	f023 0303 	bic.w	r3, r3, #3
 8003094:	f043 0201 	orr.w	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800309c:	e022      	b.n	80030e4 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	f023 0312 	bic.w	r3, r3, #18
 80030a6:	f043 0210 	orr.w	r2, r3, #16
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	f043 0201 	orr.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030be:	e011      	b.n	80030e4 <HAL_ADC_Init+0x2c8>
 80030c0:	40012400 	.word	0x40012400
 80030c4:	40012800 	.word	0x40012800
 80030c8:	0800cb3c 	.word	0x0800cb3c
 80030cc:	ffe1f7fd 	.word	0xffe1f7fd
 80030d0:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	f043 0210 	orr.w	r2, r3, #16
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop

080030f0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a5c      	ldr	r2, [pc, #368]	; (8003274 <HAL_ADC_Start_IT+0x184>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_ADC_Start_IT+0x2a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a5b      	ldr	r2, [pc, #364]	; (8003278 <HAL_ADC_Start_IT+0x188>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_ADC_Start_IT+0x2a>
 8003110:	f240 516c 	movw	r1, #1388	; 0x56c
 8003114:	4859      	ldr	r0, [pc, #356]	; (800327c <HAL_ADC_Start_IT+0x18c>)
 8003116:	f7ff fa38 	bl	800258a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_ADC_Start_IT+0x38>
 8003124:	2302      	movs	r3, #2
 8003126:	e0a0      	b.n	800326a <HAL_ADC_Start_IT+0x17a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fb85 	bl	8003840 <ADC_Enable>
 8003136:	4603      	mov	r3, r0
 8003138:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f040 808f 	bne.w	8003260 <HAL_ADC_Start_IT+0x170>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a47      	ldr	r2, [pc, #284]	; (8003278 <HAL_ADC_Start_IT+0x188>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d105      	bne.n	800316c <HAL_ADC_Start_IT+0x7c>
 8003160:	4b44      	ldr	r3, [pc, #272]	; (8003274 <HAL_ADC_Start_IT+0x184>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d115      	bne.n	8003198 <HAL_ADC_Start_IT+0xa8>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003182:	2b00      	cmp	r3, #0
 8003184:	d026      	beq.n	80031d4 <HAL_ADC_Start_IT+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800318e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003196:	e01d      	b.n	80031d4 <HAL_ADC_Start_IT+0xe4>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a32      	ldr	r2, [pc, #200]	; (8003274 <HAL_ADC_Start_IT+0x184>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d004      	beq.n	80031b8 <HAL_ADC_Start_IT+0xc8>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a31      	ldr	r2, [pc, #196]	; (8003278 <HAL_ADC_Start_IT+0x188>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d10d      	bne.n	80031d4 <HAL_ADC_Start_IT+0xe4>
 80031b8:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <HAL_ADC_Start_IT+0x184>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <HAL_ADC_Start_IT+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <HAL_ADC_Start_IT+0xfe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	f023 0206 	bic.w	r2, r3, #6
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80031ec:	e002      	b.n	80031f4 <HAL_ADC_Start_IT+0x104>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0202 	mvn.w	r2, #2
 8003204:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0220 	orr.w	r2, r2, #32
 8003214:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003220:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003224:	d113      	bne.n	800324e <HAL_ADC_Start_IT+0x15e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800322a:	4a13      	ldr	r2, [pc, #76]	; (8003278 <HAL_ADC_Start_IT+0x188>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d105      	bne.n	800323c <HAL_ADC_Start_IT+0x14c>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003230:	4b10      	ldr	r3, [pc, #64]	; (8003274 <HAL_ADC_Start_IT+0x184>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003238:	2b00      	cmp	r3, #0
 800323a:	d108      	bne.n	800324e <HAL_ADC_Start_IT+0x15e>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	e00c      	b.n	8003268 <HAL_ADC_Start_IT+0x178>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800325c:	609a      	str	r2, [r3, #8]
 800325e:	e003      	b.n	8003268 <HAL_ADC_Start_IT+0x178>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40012400 	.word	0x40012400
 8003278:	40012800 	.word	0x40012800
 800327c:	0800cb3c 	.word	0x0800cb3c

08003280 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <HAL_ADC_GetValue+0x34>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d009      	beq.n	80032a6 <HAL_ADC_GetValue+0x26>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a08      	ldr	r2, [pc, #32]	; (80032b8 <HAL_ADC_GetValue+0x38>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d004      	beq.n	80032a6 <HAL_ADC_GetValue+0x26>
 800329c:	f240 61e3 	movw	r1, #1763	; 0x6e3
 80032a0:	4806      	ldr	r0, [pc, #24]	; (80032bc <HAL_ADC_GetValue+0x3c>)
 80032a2:	f7ff f972 	bl	800258a <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40012400 	.word	0x40012400
 80032b8:	40012800 	.word	0x40012800
 80032bc:	0800cb3c 	.word	0x0800cb3c

080032c0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a72      	ldr	r2, [pc, #456]	; (8003498 <HAL_ADC_IRQHandler+0x1d8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d009      	beq.n	80032e6 <HAL_ADC_IRQHandler+0x26>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a71      	ldr	r2, [pc, #452]	; (800349c <HAL_ADC_IRQHandler+0x1dc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_ADC_IRQHandler+0x26>
 80032dc:	f240 61f4 	movw	r1, #1780	; 0x6f4
 80032e0:	486f      	ldr	r0, [pc, #444]	; (80034a0 <HAL_ADC_IRQHandler+0x1e0>)
 80032e2:	f7ff f952 	bl	800258a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7b1b      	ldrb	r3, [r3, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_ADC_IRQHandler+0x40>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7b1b      	ldrb	r3, [r3, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d004      	beq.n	8003300 <HAL_ADC_IRQHandler+0x40>
 80032f6:	f240 61f5 	movw	r1, #1781	; 0x6f5
 80032fa:	4869      	ldr	r0, [pc, #420]	; (80034a0 <HAL_ADC_IRQHandler+0x1e0>)
 80032fc:	f7ff f945 	bl	800258a <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_ADC_IRQHandler+0x50>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b10      	cmp	r3, #16
 800330e:	d904      	bls.n	800331a <HAL_ADC_IRQHandler+0x5a>
 8003310:	f240 61f6 	movw	r1, #1782	; 0x6f6
 8003314:	4862      	ldr	r0, [pc, #392]	; (80034a0 <HAL_ADC_IRQHandler+0x1e0>)
 8003316:	f7ff f938 	bl	800258a <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b20      	cmp	r3, #32
 8003326:	d140      	bne.n	80033aa <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d139      	bne.n	80033aa <HAL_ADC_IRQHandler+0xea>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d105      	bne.n	800334e <HAL_ADC_IRQHandler+0x8e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003358:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800335c:	d11d      	bne.n	800339a <HAL_ADC_IRQHandler+0xda>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003362:	2b00      	cmp	r3, #0
 8003364:	d119      	bne.n	800339a <HAL_ADC_IRQHandler+0xda>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0220 	bic.w	r2, r2, #32
 8003374:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d105      	bne.n	800339a <HAL_ADC_IRQHandler+0xda>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff fbc8 	bl	8002b30 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0212 	mvn.w	r2, #18
 80033a8:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d14f      	bne.n	8003458 <HAL_ADC_IRQHandler+0x198>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d148      	bne.n	8003458 <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d105      	bne.n	80033de <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80033e8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80033ec:	d012      	beq.n	8003414 <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d125      	bne.n	8003448 <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003406:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800340a:	d11d      	bne.n	8003448 <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003410:	2b00      	cmp	r3, #0
 8003412:	d119      	bne.n	8003448 <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003422:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	f043 0201 	orr.w	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fa85 	bl	8003958 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f06f 020c 	mvn.w	r2, #12
 8003456:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d114      	bne.n	8003490 <HAL_ADC_IRQHandler+0x1d0>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d10d      	bne.n	8003490 <HAL_ADC_IRQHandler+0x1d0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f80f 	bl	80034a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f06f 0201 	mvn.w	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40012400 	.word	0x40012400
 800349c:	40012800 	.word	0x40012800
 80034a0:	0800cb3c 	.word	0x0800cb3c

080034a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a88      	ldr	r2, [pc, #544]	; (80036f0 <HAL_ADC_ConfigChannel+0x238>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d009      	beq.n	80034e8 <HAL_ADC_ConfigChannel+0x30>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a86      	ldr	r2, [pc, #536]	; (80036f4 <HAL_ADC_ConfigChannel+0x23c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_ADC_ConfigChannel+0x30>
 80034de:	f240 71d1 	movw	r1, #2001	; 0x7d1
 80034e2:	4885      	ldr	r0, [pc, #532]	; (80036f8 <HAL_ADC_ConfigChannel+0x240>)
 80034e4:	f7ff f851 	bl	800258a <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d048      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d044      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d040      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d03c      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d038      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b05      	cmp	r3, #5
 8003516:	d034      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b06      	cmp	r3, #6
 800351e:	d030      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b07      	cmp	r3, #7
 8003526:	d02c      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d028      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b09      	cmp	r3, #9
 8003536:	d024      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b0a      	cmp	r3, #10
 800353e:	d020      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b0b      	cmp	r3, #11
 8003546:	d01c      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b0c      	cmp	r3, #12
 800354e:	d018      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b0d      	cmp	r3, #13
 8003556:	d014      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b0e      	cmp	r3, #14
 800355e:	d010      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b0f      	cmp	r3, #15
 8003566:	d00c      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b10      	cmp	r3, #16
 800356e:	d008      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b11      	cmp	r3, #17
 8003576:	d004      	beq.n	8003582 <HAL_ADC_ConfigChannel+0xca>
 8003578:	f240 71d2 	movw	r1, #2002	; 0x7d2
 800357c:	485e      	ldr	r0, [pc, #376]	; (80036f8 <HAL_ADC_ConfigChannel+0x240>)
 800357e:	f7ff f804 	bl	800258a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d040      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d03c      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d038      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d034      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d030      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d02c      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b07      	cmp	r3, #7
 80035b8:	d028      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d024      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b09      	cmp	r3, #9
 80035c8:	d020      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b0a      	cmp	r3, #10
 80035d0:	d01c      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b0b      	cmp	r3, #11
 80035d8:	d018      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d014      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b0d      	cmp	r3, #13
 80035e8:	d010      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b0e      	cmp	r3, #14
 80035f0:	d00c      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	d008      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d004      	beq.n	800360c <HAL_ADC_ConfigChannel+0x154>
 8003602:	f240 71d3 	movw	r1, #2003	; 0x7d3
 8003606:	483c      	ldr	r0, [pc, #240]	; (80036f8 <HAL_ADC_ConfigChannel+0x240>)
 8003608:	f7fe ffbf 	bl	800258a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x19e>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d01c      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x19e>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d018      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x19e>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b03      	cmp	r3, #3
 800362a:	d014      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x19e>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d010      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x19e>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b05      	cmp	r3, #5
 800363a:	d00c      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x19e>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b06      	cmp	r3, #6
 8003642:	d008      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x19e>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b07      	cmp	r3, #7
 800364a:	d004      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x19e>
 800364c:	f240 71d4 	movw	r1, #2004	; 0x7d4
 8003650:	4829      	ldr	r0, [pc, #164]	; (80036f8 <HAL_ADC_ConfigChannel+0x240>)
 8003652:	f7fe ff9a 	bl	800258a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x1ac>
 8003660:	2302      	movs	r3, #2
 8003662:	e0e2      	b.n	800382a <HAL_ADC_ConfigChannel+0x372>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d81c      	bhi.n	80036ae <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	3b05      	subs	r3, #5
 8003686:	221f      	movs	r2, #31
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	4019      	ands	r1, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	3b05      	subs	r3, #5
 80036a0:	fa00 f203 	lsl.w	r2, r0, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	635a      	str	r2, [r3, #52]	; 0x34
 80036ac:	e042      	b.n	8003734 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d822      	bhi.n	80036fc <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	3b23      	subs	r3, #35	; 0x23
 80036c8:	221f      	movs	r2, #31
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	4019      	ands	r1, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	3b23      	subs	r3, #35	; 0x23
 80036e2:	fa00 f203 	lsl.w	r2, r0, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
 80036ee:	e021      	b.n	8003734 <HAL_ADC_ConfigChannel+0x27c>
 80036f0:	40012400 	.word	0x40012400
 80036f4:	40012800 	.word	0x40012800
 80036f8:	0800cb3c 	.word	0x0800cb3c
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	3b41      	subs	r3, #65	; 0x41
 800370e:	221f      	movs	r2, #31
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	4019      	ands	r1, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	3b41      	subs	r3, #65	; 0x41
 8003728:	fa00 f203 	lsl.w	r2, r0, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b09      	cmp	r3, #9
 800373a:	d91c      	bls.n	8003776 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68d9      	ldr	r1, [r3, #12]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4413      	add	r3, r2
 800374c:	3b1e      	subs	r3, #30
 800374e:	2207      	movs	r2, #7
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	4019      	ands	r1, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	6898      	ldr	r0, [r3, #8]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	3b1e      	subs	r3, #30
 8003768:	fa00 f203 	lsl.w	r2, r0, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	60da      	str	r2, [r3, #12]
 8003774:	e019      	b.n	80037aa <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6919      	ldr	r1, [r3, #16]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	2207      	movs	r2, #7
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	4019      	ands	r1, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6898      	ldr	r0, [r3, #8]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	fa00 f203 	lsl.w	r2, r0, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d003      	beq.n	80037ba <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037b6:	2b11      	cmp	r3, #17
 80037b8:	d132      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <HAL_ADC_ConfigChannel+0x37c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d125      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d126      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80037e0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d11a      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_ADC_ConfigChannel+0x380>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a13      	ldr	r2, [pc, #76]	; (800383c <HAL_ADC_ConfigChannel+0x384>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	0c9a      	lsrs	r2, r3, #18
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003800:	e002      	b.n	8003808 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3b01      	subs	r3, #1
 8003806:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f9      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x34a>
 800380e:	e007      	b.n	8003820 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40012400 	.word	0x40012400
 8003838:	20000020 	.word	0x20000020
 800383c:	431bde83 	.word	0x431bde83

08003840 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b01      	cmp	r3, #1
 800385c:	d039      	beq.n	80038d2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800386e:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <ADC_Enable+0x9c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <ADC_Enable+0xa0>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	0c9b      	lsrs	r3, r3, #18
 800387a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800387c:	e002      	b.n	8003884 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3b01      	subs	r3, #1
 8003882:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f9      	bne.n	800387e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800388a:	f7ff fa99 	bl	8002dc0 <HAL_GetTick>
 800388e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003890:	e018      	b.n	80038c4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003892:	f7ff fa95 	bl	8002dc0 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d911      	bls.n	80038c4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	f043 0210 	orr.w	r2, r3, #16
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	f043 0201 	orr.w	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e007      	b.n	80038d4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d1df      	bne.n	8003892 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20000020 	.word	0x20000020
 80038e0:	431bde83 	.word	0x431bde83

080038e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d127      	bne.n	800394e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800390e:	f7ff fa57 	bl	8002dc0 <HAL_GetTick>
 8003912:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003914:	e014      	b.n	8003940 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003916:	f7ff fa53 	bl	8002dc0 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d90d      	bls.n	8003940 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	f043 0210 	orr.w	r2, r3, #16
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e007      	b.n	8003950 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d0e3      	beq.n	8003916 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
	...

0800396c <__NVIC_SetPriorityGrouping>:
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <__NVIC_SetPriorityGrouping+0x44>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003988:	4013      	ands	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800399e:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <__NVIC_SetPriorityGrouping+0x44>)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	60d3      	str	r3, [r2, #12]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <__NVIC_GetPriorityGrouping>:
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <__NVIC_GetPriorityGrouping+0x18>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	f003 0307 	and.w	r3, r3, #7
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <__NVIC_EnableIRQ>:
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	db0b      	blt.n	80039fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	f003 021f 	and.w	r2, r3, #31
 80039e8:	4906      	ldr	r1, [pc, #24]	; (8003a04 <__NVIC_EnableIRQ+0x34>)
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2001      	movs	r0, #1
 80039f2:	fa00 f202 	lsl.w	r2, r0, r2
 80039f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	e000e100 	.word	0xe000e100

08003a08 <__NVIC_SetPriority>:
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	6039      	str	r1, [r7, #0]
 8003a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	db0a      	blt.n	8003a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	490c      	ldr	r1, [pc, #48]	; (8003a54 <__NVIC_SetPriority+0x4c>)
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	0112      	lsls	r2, r2, #4
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a30:	e00a      	b.n	8003a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	4908      	ldr	r1, [pc, #32]	; (8003a58 <__NVIC_SetPriority+0x50>)
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	3b04      	subs	r3, #4
 8003a40:	0112      	lsls	r2, r2, #4
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	440b      	add	r3, r1
 8003a46:	761a      	strb	r2, [r3, #24]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	e000e100 	.word	0xe000e100
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <NVIC_EncodePriority>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b089      	sub	sp, #36	; 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f1c3 0307 	rsb	r3, r3, #7
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	bf28      	it	cs
 8003a7a:	2304      	movcs	r3, #4
 8003a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3304      	adds	r3, #4
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d902      	bls.n	8003a8c <NVIC_EncodePriority+0x30>
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3b03      	subs	r3, #3
 8003a8a:	e000      	b.n	8003a8e <NVIC_EncodePriority+0x32>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a90:	f04f 32ff 	mov.w	r2, #4294967295
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003aae:	43d9      	mvns	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab4:	4313      	orrs	r3, r2
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3724      	adds	r7, #36	; 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b07      	cmp	r3, #7
 8003acc:	d00f      	beq.n	8003aee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b06      	cmp	r3, #6
 8003ad2:	d00c      	beq.n	8003aee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d009      	beq.n	8003aee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d006      	beq.n	8003aee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d003      	beq.n	8003aee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003ae6:	2192      	movs	r1, #146	; 0x92
 8003ae8:	4804      	ldr	r0, [pc, #16]	; (8003afc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003aea:	f7fe fd4e 	bl	800258a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff ff3c 	bl	800396c <__NVIC_SetPriorityGrouping>
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	0800cb74 	.word	0x0800cb74

08003b00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b0f      	cmp	r3, #15
 8003b16:	d903      	bls.n	8003b20 <HAL_NVIC_SetPriority+0x20>
 8003b18:	21aa      	movs	r1, #170	; 0xaa
 8003b1a:	480e      	ldr	r0, [pc, #56]	; (8003b54 <HAL_NVIC_SetPriority+0x54>)
 8003b1c:	f7fe fd35 	bl	800258a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b0f      	cmp	r3, #15
 8003b24:	d903      	bls.n	8003b2e <HAL_NVIC_SetPriority+0x2e>
 8003b26:	21ab      	movs	r1, #171	; 0xab
 8003b28:	480a      	ldr	r0, [pc, #40]	; (8003b54 <HAL_NVIC_SetPriority+0x54>)
 8003b2a:	f7fe fd2e 	bl	800258a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b2e:	f7ff ff41 	bl	80039b4 <__NVIC_GetPriorityGrouping>
 8003b32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	6978      	ldr	r0, [r7, #20]
 8003b3a:	f7ff ff8f 	bl	8003a5c <NVIC_EncodePriority>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff ff5e 	bl	8003a08 <__NVIC_SetPriority>
}
 8003b4c:	bf00      	nop
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	0800cb74 	.word	0x0800cb74

08003b58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	da03      	bge.n	8003b72 <HAL_NVIC_EnableIRQ+0x1a>
 8003b6a:	21be      	movs	r1, #190	; 0xbe
 8003b6c:	4805      	ldr	r0, [pc, #20]	; (8003b84 <HAL_NVIC_EnableIRQ+0x2c>)
 8003b6e:	f7fe fd0c 	bl	800258a <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff ff2a 	bl	80039d0 <__NVIC_EnableIRQ>
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	0800cb74 	.word	0x0800cb74

08003b88 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003ba2:	4b49      	ldr	r3, [pc, #292]	; (8003cc8 <HAL_FLASH_Program+0x140>)
 8003ba4:	7e1b      	ldrb	r3, [r3, #24]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_FLASH_Program+0x26>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e088      	b.n	8003cc0 <HAL_FLASH_Program+0x138>
 8003bae:	4b46      	ldr	r3, [pc, #280]	; (8003cc8 <HAL_FLASH_Program+0x140>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d009      	beq.n	8003bce <HAL_FLASH_Program+0x46>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d006      	beq.n	8003bce <HAL_FLASH_Program+0x46>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d003      	beq.n	8003bce <HAL_FLASH_Program+0x46>
 8003bc6:	21b2      	movs	r1, #178	; 0xb2
 8003bc8:	4840      	ldr	r0, [pc, #256]	; (8003ccc <HAL_FLASH_Program+0x144>)
 8003bca:	f7fe fcde 	bl	800258a <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd4:	d31e      	bcc.n	8003c14 <HAL_FLASH_Program+0x8c>
 8003bd6:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <HAL_FLASH_Program+0x148>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	2b80      	cmp	r3, #128	; 0x80
 8003bdc:	d104      	bne.n	8003be8 <HAL_FLASH_Program+0x60>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4a3c      	ldr	r2, [pc, #240]	; (8003cd4 <HAL_FLASH_Program+0x14c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d816      	bhi.n	8003c14 <HAL_FLASH_Program+0x8c>
 8003be6:	e019      	b.n	8003c1c <HAL_FLASH_Program+0x94>
 8003be8:	4b39      	ldr	r3, [pc, #228]	; (8003cd0 <HAL_FLASH_Program+0x148>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d104      	bne.n	8003bfa <HAL_FLASH_Program+0x72>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4a39      	ldr	r2, [pc, #228]	; (8003cd8 <HAL_FLASH_Program+0x150>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d80d      	bhi.n	8003c14 <HAL_FLASH_Program+0x8c>
 8003bf8:	e010      	b.n	8003c1c <HAL_FLASH_Program+0x94>
 8003bfa:	4b35      	ldr	r3, [pc, #212]	; (8003cd0 <HAL_FLASH_Program+0x148>)
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d104      	bne.n	8003c0c <HAL_FLASH_Program+0x84>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4a35      	ldr	r2, [pc, #212]	; (8003cdc <HAL_FLASH_Program+0x154>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d204      	bcs.n	8003c14 <HAL_FLASH_Program+0x8c>
 8003c0a:	e007      	b.n	8003c1c <HAL_FLASH_Program+0x94>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4a34      	ldr	r2, [pc, #208]	; (8003ce0 <HAL_FLASH_Program+0x158>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d303      	bcc.n	8003c1c <HAL_FLASH_Program+0x94>
 8003c14:	21b3      	movs	r1, #179	; 0xb3
 8003c16:	482d      	ldr	r0, [pc, #180]	; (8003ccc <HAL_FLASH_Program+0x144>)
 8003c18:	f7fe fcb7 	bl	800258a <assert_failed>
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c20:	f000 f8b4 	bl	8003d8c <FLASH_WaitForLastOperation>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d144      	bne.n	8003cb8 <HAL_FLASH_Program+0x130>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d102      	bne.n	8003c3a <HAL_FLASH_Program+0xb2>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003c34:	2301      	movs	r3, #1
 8003c36:	757b      	strb	r3, [r7, #21]
 8003c38:	e007      	b.n	8003c4a <HAL_FLASH_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d102      	bne.n	8003c46 <HAL_FLASH_Program+0xbe>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003c40:	2302      	movs	r3, #2
 8003c42:	757b      	strb	r3, [r7, #21]
 8003c44:	e001      	b.n	8003c4a <HAL_FLASH_Program+0xc2>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003c46:	2304      	movs	r3, #4
 8003c48:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75bb      	strb	r3, [r7, #22]
 8003c4e:	e02d      	b.n	8003cac <HAL_FLASH_Program+0x124>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003c50:	7dbb      	ldrb	r3, [r7, #22]
 8003c52:	005a      	lsls	r2, r3, #1
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	eb02 0c03 	add.w	ip, r2, r3
 8003c5a:	7dbb      	ldrb	r3, [r7, #22]
 8003c5c:	0119      	lsls	r1, r3, #4
 8003c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c62:	f1c1 0620 	rsb	r6, r1, #32
 8003c66:	f1a1 0020 	sub.w	r0, r1, #32
 8003c6a:	fa22 f401 	lsr.w	r4, r2, r1
 8003c6e:	fa03 f606 	lsl.w	r6, r3, r6
 8003c72:	4334      	orrs	r4, r6
 8003c74:	fa23 f000 	lsr.w	r0, r3, r0
 8003c78:	4304      	orrs	r4, r0
 8003c7a:	fa23 f501 	lsr.w	r5, r3, r1
 8003c7e:	b2a3      	uxth	r3, r4
 8003c80:	4619      	mov	r1, r3
 8003c82:	4660      	mov	r0, ip
 8003c84:	f000 f866 	bl	8003d54 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c8c:	f000 f87e 	bl	8003d8c <FLASH_WaitForLastOperation>
 8003c90:	4603      	mov	r3, r0
 8003c92:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_FLASH_Program+0x15c>)
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	4a12      	ldr	r2, [pc, #72]	; (8003ce4 <HAL_FLASH_Program+0x15c>)
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <HAL_FLASH_Program+0x12e>
    for (index = 0U; index < nbiterations; index++)
 8003ca6:	7dbb      	ldrb	r3, [r7, #22]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	75bb      	strb	r3, [r7, #22]
 8003cac:	7dba      	ldrb	r2, [r7, #22]
 8003cae:	7d7b      	ldrb	r3, [r7, #21]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3cd      	bcc.n	8003c50 <HAL_FLASH_Program+0xc8>
 8003cb4:	e000      	b.n	8003cb8 <HAL_FLASH_Program+0x130>
      {
        break;
 8003cb6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003cb8:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <HAL_FLASH_Program+0x140>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	761a      	strb	r2, [r3, #24]

  return status;
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc8:	20003b20 	.word	0x20003b20
 8003ccc:	0800cbb0 	.word	0x0800cbb0
 8003cd0:	1ffff7e0 	.word	0x1ffff7e0
 8003cd4:	0801ffff 	.word	0x0801ffff
 8003cd8:	0800ffff 	.word	0x0800ffff
 8003cdc:	08008000 	.word	0x08008000
 8003ce0:	08004000 	.word	0x08004000
 8003ce4:	40022000 	.word	0x40022000

08003ce8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_FLASH_Unlock+0x40>)
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_FLASH_Unlock+0x40>)
 8003d00:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <HAL_FLASH_Unlock+0x44>)
 8003d02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <HAL_FLASH_Unlock+0x40>)
 8003d06:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <HAL_FLASH_Unlock+0x48>)
 8003d08:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003d0a:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <HAL_FLASH_Unlock+0x40>)
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40022000 	.word	0x40022000
 8003d2c:	45670123 	.word	0x45670123
 8003d30:	cdef89ab 	.word	0xcdef89ab

08003d34 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_FLASH_Lock+0x1c>)
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	4a04      	ldr	r2, [pc, #16]	; (8003d50 <HAL_FLASH_Lock+0x1c>)
 8003d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d42:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40022000 	.word	0x40022000

08003d54 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <FLASH_Program_HalfWord+0x30>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <FLASH_Program_HalfWord+0x34>)
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <FLASH_Program_HalfWord+0x34>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	887a      	ldrh	r2, [r7, #2]
 8003d76:	801a      	strh	r2, [r3, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20003b20 	.word	0x20003b20
 8003d88:	40022000 	.word	0x40022000

08003d8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003d94:	f7ff f814 	bl	8002dc0 <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003d9a:	e010      	b.n	8003dbe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d00c      	beq.n	8003dbe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <FLASH_WaitForLastOperation+0x2e>
 8003daa:	f7ff f809 	bl	8002dc0 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d201      	bcs.n	8003dbe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e025      	b.n	8003e0a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <FLASH_WaitForLastOperation+0x88>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e8      	bne.n	8003d9c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <FLASH_WaitForLastOperation+0x88>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <FLASH_WaitForLastOperation+0x88>)
 8003dd8:	2220      	movs	r2, #32
 8003dda:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <FLASH_WaitForLastOperation+0x88>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10b      	bne.n	8003e00 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <FLASH_WaitForLastOperation+0x88>)
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003df4:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <FLASH_WaitForLastOperation+0x88>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003e00:	f000 f80a 	bl	8003e18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40022000 	.word	0x40022000

08003e18 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003e22:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <FLASH_SetErrorCode+0x98>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003e2e:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <FLASH_SetErrorCode+0x9c>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f043 0302 	orr.w	r3, r3, #2
 8003e36:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <FLASH_SetErrorCode+0x9c>)
 8003e38:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f043 0310 	orr.w	r3, r3, #16
 8003e40:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <FLASH_SetErrorCode+0x98>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003e4e:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <FLASH_SetErrorCode+0x9c>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <FLASH_SetErrorCode+0x9c>)
 8003e58:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f043 0304 	orr.w	r3, r3, #4
 8003e60:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003e62:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <FLASH_SetErrorCode+0x98>)
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00b      	beq.n	8003e86 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003e6e:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <FLASH_SetErrorCode+0x9c>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f043 0304 	orr.w	r3, r3, #4
 8003e76:	4a0f      	ldr	r2, [pc, #60]	; (8003eb4 <FLASH_SetErrorCode+0x9c>)
 8003e78:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <FLASH_SetErrorCode+0x98>)
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	4a0c      	ldr	r2, [pc, #48]	; (8003eb0 <FLASH_SetErrorCode+0x98>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f240 1201 	movw	r2, #257	; 0x101
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d106      	bne.n	8003e9e <FLASH_SetErrorCode+0x86>
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <FLASH_SetErrorCode+0x98>)
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	4a06      	ldr	r2, [pc, #24]	; (8003eb0 <FLASH_SetErrorCode+0x98>)
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	61d3      	str	r3, [r2, #28]
}  
 8003e9c:	e002      	b.n	8003ea4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003e9e:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <FLASH_SetErrorCode+0x98>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	60d3      	str	r3, [r2, #12]
}  
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40022000 	.word	0x40022000
 8003eb4:	20003b20 	.word	0x20003b20

08003eb8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003eca:	4b70      	ldr	r3, [pc, #448]	; (800408c <HAL_FLASHEx_Erase+0x1d4>)
 8003ecc:	7e1b      	ldrb	r3, [r3, #24]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_FLASHEx_Erase+0x1e>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e0d5      	b.n	8004082 <HAL_FLASHEx_Erase+0x1ca>
 8003ed6:	4b6d      	ldr	r3, [pc, #436]	; (800408c <HAL_FLASHEx_Erase+0x1d4>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <HAL_FLASHEx_Erase+0x3c>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d003      	beq.n	8003ef4 <HAL_FLASHEx_Erase+0x3c>
 8003eec:	21a8      	movs	r1, #168	; 0xa8
 8003eee:	4868      	ldr	r0, [pc, #416]	; (8004090 <HAL_FLASHEx_Erase+0x1d8>)
 8003ef0:	f7fe fb4b 	bl	800258a <assert_failed>

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d117      	bne.n	8003f2c <HAL_FLASHEx_Erase+0x74>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003efc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f00:	f7ff ff44 	bl	8003d8c <FLASH_WaitForLastOperation>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 80b7 	bne.w	800407a <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f000 f8cd 	bl	80040ac <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f16:	f7ff ff39 	bl	8003d8c <FLASH_WaitForLastOperation>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003f1e:	4b5d      	ldr	r3, [pc, #372]	; (8004094 <HAL_FLASHEx_Erase+0x1dc>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	4a5c      	ldr	r2, [pc, #368]	; (8004094 <HAL_FLASHEx_Erase+0x1dc>)
 8003f24:	f023 0304 	bic.w	r3, r3, #4
 8003f28:	6113      	str	r3, [r2, #16]
 8003f2a:	e0a6      	b.n	800407a <HAL_FLASHEx_Erase+0x1c2>
  }
  else
  {
    /* Page Erase is requested */
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f34:	d322      	bcc.n	8003f7c <HAL_FLASHEx_Erase+0xc4>
 8003f36:	4b58      	ldr	r3, [pc, #352]	; (8004098 <HAL_FLASHEx_Erase+0x1e0>)
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	2b80      	cmp	r3, #128	; 0x80
 8003f3c:	d105      	bne.n	8003f4a <HAL_FLASHEx_Erase+0x92>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	4a56      	ldr	r2, [pc, #344]	; (800409c <HAL_FLASHEx_Erase+0x1e4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d819      	bhi.n	8003f7c <HAL_FLASHEx_Erase+0xc4>
 8003f48:	e01c      	b.n	8003f84 <HAL_FLASHEx_Erase+0xcc>
 8003f4a:	4b53      	ldr	r3, [pc, #332]	; (8004098 <HAL_FLASHEx_Erase+0x1e0>)
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	d105      	bne.n	8003f5e <HAL_FLASHEx_Erase+0xa6>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	4a52      	ldr	r2, [pc, #328]	; (80040a0 <HAL_FLASHEx_Erase+0x1e8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d80f      	bhi.n	8003f7c <HAL_FLASHEx_Erase+0xc4>
 8003f5c:	e012      	b.n	8003f84 <HAL_FLASHEx_Erase+0xcc>
 8003f5e:	4b4e      	ldr	r3, [pc, #312]	; (8004098 <HAL_FLASHEx_Erase+0x1e0>)
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d105      	bne.n	8003f72 <HAL_FLASHEx_Erase+0xba>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4a4e      	ldr	r2, [pc, #312]	; (80040a4 <HAL_FLASHEx_Erase+0x1ec>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d205      	bcs.n	8003f7c <HAL_FLASHEx_Erase+0xc4>
 8003f70:	e008      	b.n	8003f84 <HAL_FLASHEx_Erase+0xcc>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	4a4c      	ldr	r2, [pc, #304]	; (80040a8 <HAL_FLASHEx_Erase+0x1f0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d303      	bcc.n	8003f84 <HAL_FLASHEx_Erase+0xcc>
 8003f7c:	21e9      	movs	r1, #233	; 0xe9
 8003f7e:	4844      	ldr	r0, [pc, #272]	; (8004090 <HAL_FLASHEx_Erase+0x1d8>)
 8003f80:	f7fe fb03 	bl	800258a <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 8003f84:	4b44      	ldr	r3, [pc, #272]	; (8004098 <HAL_FLASHEx_Erase+0x1e0>)
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d10d      	bne.n	8003fa8 <HAL_FLASHEx_Erase+0xf0>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	029b      	lsls	r3, r3, #10
 8003f96:	4413      	add	r3, r2
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	4a40      	ldr	r2, [pc, #256]	; (800409c <HAL_FLASHEx_Erase+0x1e4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	bf94      	ite	ls
 8003fa0:	2301      	movls	r3, #1
 8003fa2:	2300      	movhi	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	e030      	b.n	800400a <HAL_FLASHEx_Erase+0x152>
 8003fa8:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <HAL_FLASHEx_Erase+0x1e0>)
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d10d      	bne.n	8003fcc <HAL_FLASHEx_Erase+0x114>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	029b      	lsls	r3, r3, #10
 8003fba:	4413      	add	r3, r2
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	4a38      	ldr	r2, [pc, #224]	; (80040a0 <HAL_FLASHEx_Erase+0x1e8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	bf94      	ite	ls
 8003fc4:	2301      	movls	r3, #1
 8003fc6:	2300      	movhi	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	e01e      	b.n	800400a <HAL_FLASHEx_Erase+0x152>
 8003fcc:	4b32      	ldr	r3, [pc, #200]	; (8004098 <HAL_FLASHEx_Erase+0x1e0>)
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d10d      	bne.n	8003ff0 <HAL_FLASHEx_Erase+0x138>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	029b      	lsls	r3, r3, #10
 8003fde:	4413      	add	r3, r2
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	4a30      	ldr	r2, [pc, #192]	; (80040a4 <HAL_FLASHEx_Erase+0x1ec>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	bf34      	ite	cc
 8003fe8:	2301      	movcc	r3, #1
 8003fea:	2300      	movcs	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e00c      	b.n	800400a <HAL_FLASHEx_Erase+0x152>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	029b      	lsls	r3, r3, #10
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	4a2a      	ldr	r2, [pc, #168]	; (80040a8 <HAL_FLASHEx_Erase+0x1f0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	bf34      	ite	cc
 8004004:	2301      	movcc	r3, #1
 8004006:	2300      	movcs	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <HAL_FLASHEx_Erase+0x15e>
 800400e:	21ea      	movs	r1, #234	; 0xea
 8004010:	481f      	ldr	r0, [pc, #124]	; (8004090 <HAL_FLASHEx_Erase+0x1d8>)
 8004012:	f7fe faba 	bl	800258a <assert_failed>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004016:	f24c 3050 	movw	r0, #50000	; 0xc350
 800401a:	f7ff feb7 	bl	8003d8c <FLASH_WaitForLastOperation>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d12a      	bne.n	800407a <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	f04f 32ff 	mov.w	r2, #4294967295
 800402a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	e019      	b.n	8004068 <HAL_FLASHEx_Erase+0x1b0>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004034:	68b8      	ldr	r0, [r7, #8]
 8004036:	f000 f85f 	bl	80040f8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800403a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800403e:	f7ff fea5 	bl	8003d8c <FLASH_WaitForLastOperation>
 8004042:	4603      	mov	r3, r0
 8004044:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004046:	4b13      	ldr	r3, [pc, #76]	; (8004094 <HAL_FLASHEx_Erase+0x1dc>)
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	4a12      	ldr	r2, [pc, #72]	; (8004094 <HAL_FLASHEx_Erase+0x1dc>)
 800404c:	f023 0302 	bic.w	r3, r3, #2
 8004050:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_FLASHEx_Erase+0x1a8>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	601a      	str	r2, [r3, #0]
            break;
 800405e:	e00c      	b.n	800407a <HAL_FLASHEx_Erase+0x1c2>
            address += FLASH_PAGE_SIZE)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004066:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	029a      	lsls	r2, r3, #10
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	429a      	cmp	r2, r3
 8004078:	d3dc      	bcc.n	8004034 <HAL_FLASHEx_Erase+0x17c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800407a:	4b04      	ldr	r3, [pc, #16]	; (800408c <HAL_FLASHEx_Erase+0x1d4>)
 800407c:	2200      	movs	r2, #0
 800407e:	761a      	strb	r2, [r3, #24]

  return status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20003b20 	.word	0x20003b20
 8004090:	0800cbec 	.word	0x0800cbec
 8004094:	40022000 	.word	0x40022000
 8004098:	1ffff7e0 	.word	0x1ffff7e0
 800409c:	0801ffff 	.word	0x0801ffff
 80040a0:	0800ffff 	.word	0x0800ffff
 80040a4:	08008000 	.word	0x08008000
 80040a8:	08004000 	.word	0x08004000

080040ac <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d004      	beq.n	80040c4 <FLASH_MassErase+0x18>
 80040ba:	f240 2156 	movw	r1, #598	; 0x256
 80040be:	480b      	ldr	r0, [pc, #44]	; (80040ec <FLASH_MassErase+0x40>)
 80040c0:	f7fe fa63 	bl	800258a <assert_failed>

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <FLASH_MassErase+0x44>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <FLASH_MassErase+0x48>)
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <FLASH_MassErase+0x48>)
 80040d0:	f043 0304 	orr.w	r3, r3, #4
 80040d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <FLASH_MassErase+0x48>)
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	4a06      	ldr	r2, [pc, #24]	; (80040f4 <FLASH_MassErase+0x48>)
 80040dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	0800cbec 	.word	0x0800cbec
 80040f0:	20003b20 	.word	0x20003b20
 80040f4:	40022000 	.word	0x40022000

080040f8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <FLASH_PageErase+0x38>)
 8004102:	2200      	movs	r2, #0
 8004104:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <FLASH_PageErase+0x3c>)
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <FLASH_PageErase+0x3c>)
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004112:	4a08      	ldr	r2, [pc, #32]	; (8004134 <FLASH_PageErase+0x3c>)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <FLASH_PageErase+0x3c>)
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	4a05      	ldr	r2, [pc, #20]	; (8004134 <FLASH_PageErase+0x3c>)
 800411e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004122:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20003b20 	.word	0x20003b20
 8004134:	40022000 	.word	0x40022000

08004138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004142:	2300      	movs	r3, #0
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004146:	2300      	movs	r3, #0
 8004148:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4aa1      	ldr	r2, [pc, #644]	; (80043d4 <HAL_GPIO_Init+0x29c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_GPIO_Init+0x42>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4aa0      	ldr	r2, [pc, #640]	; (80043d8 <HAL_GPIO_Init+0x2a0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00f      	beq.n	800417a <HAL_GPIO_Init+0x42>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a9f      	ldr	r2, [pc, #636]	; (80043dc <HAL_GPIO_Init+0x2a4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00b      	beq.n	800417a <HAL_GPIO_Init+0x42>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a9e      	ldr	r2, [pc, #632]	; (80043e0 <HAL_GPIO_Init+0x2a8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d007      	beq.n	800417a <HAL_GPIO_Init+0x42>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a9d      	ldr	r2, [pc, #628]	; (80043e4 <HAL_GPIO_Init+0x2ac>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x42>
 8004172:	21bd      	movs	r1, #189	; 0xbd
 8004174:	489c      	ldr	r0, [pc, #624]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004176:	f7fe fa08 	bl	800258a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_GPIO_Init+0x58>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	0c1b      	lsrs	r3, r3, #16
 800418a:	041b      	lsls	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_GPIO_Init+0x60>
 8004190:	21be      	movs	r1, #190	; 0xbe
 8004192:	4895      	ldr	r0, [pc, #596]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004194:	f7fe f9f9 	bl	800258a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 821d 	beq.w	80045dc <HAL_GPIO_Init+0x4a4>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	f000 8218 	beq.w	80045dc <HAL_GPIO_Init+0x4a4>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b11      	cmp	r3, #17
 80041b2:	f000 8213 	beq.w	80045dc <HAL_GPIO_Init+0x4a4>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	f000 820e 	beq.w	80045dc <HAL_GPIO_Init+0x4a4>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b12      	cmp	r3, #18
 80041c6:	f000 8209 	beq.w	80045dc <HAL_GPIO_Init+0x4a4>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4a87      	ldr	r2, [pc, #540]	; (80043ec <HAL_GPIO_Init+0x2b4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	f000 8203 	beq.w	80045dc <HAL_GPIO_Init+0x4a4>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4a85      	ldr	r2, [pc, #532]	; (80043f0 <HAL_GPIO_Init+0x2b8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	f000 81fd 	beq.w	80045dc <HAL_GPIO_Init+0x4a4>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4a83      	ldr	r2, [pc, #524]	; (80043f4 <HAL_GPIO_Init+0x2bc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	f000 81f7 	beq.w	80045dc <HAL_GPIO_Init+0x4a4>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4a81      	ldr	r2, [pc, #516]	; (80043f8 <HAL_GPIO_Init+0x2c0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	f000 81f1 	beq.w	80045dc <HAL_GPIO_Init+0x4a4>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4a7f      	ldr	r2, [pc, #508]	; (80043fc <HAL_GPIO_Init+0x2c4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	f000 81eb 	beq.w	80045dc <HAL_GPIO_Init+0x4a4>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4a7d      	ldr	r2, [pc, #500]	; (8004400 <HAL_GPIO_Init+0x2c8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	f000 81e5 	beq.w	80045dc <HAL_GPIO_Init+0x4a4>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b03      	cmp	r3, #3
 8004218:	f000 81e0 	beq.w	80045dc <HAL_GPIO_Init+0x4a4>
 800421c:	21bf      	movs	r1, #191	; 0xbf
 800421e:	4872      	ldr	r0, [pc, #456]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004220:	f7fe f9b3 	bl	800258a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004224:	e1da      	b.n	80045dc <HAL_GPIO_Init+0x4a4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004226:	2201      	movs	r2, #1
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	4013      	ands	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	429a      	cmp	r2, r3
 8004240:	f040 81c9 	bne.w	80045d6 <HAL_GPIO_Init+0x49e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a63      	ldr	r2, [pc, #396]	; (80043d4 <HAL_GPIO_Init+0x29c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d013      	beq.n	8004274 <HAL_GPIO_Init+0x13c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a62      	ldr	r2, [pc, #392]	; (80043d8 <HAL_GPIO_Init+0x2a0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00f      	beq.n	8004274 <HAL_GPIO_Init+0x13c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a61      	ldr	r2, [pc, #388]	; (80043dc <HAL_GPIO_Init+0x2a4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00b      	beq.n	8004274 <HAL_GPIO_Init+0x13c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a60      	ldr	r2, [pc, #384]	; (80043e0 <HAL_GPIO_Init+0x2a8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d007      	beq.n	8004274 <HAL_GPIO_Init+0x13c>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a5f      	ldr	r2, [pc, #380]	; (80043e4 <HAL_GPIO_Init+0x2ac>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <HAL_GPIO_Init+0x13c>
 800426c:	21cd      	movs	r1, #205	; 0xcd
 800426e:	485e      	ldr	r0, [pc, #376]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004270:	f7fe f98b 	bl	800258a <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4a61      	ldr	r2, [pc, #388]	; (8004400 <HAL_GPIO_Init+0x2c8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	f000 80c2 	beq.w	8004404 <HAL_GPIO_Init+0x2cc>
 8004280:	4a5f      	ldr	r2, [pc, #380]	; (8004400 <HAL_GPIO_Init+0x2c8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	f200 80e8 	bhi.w	8004458 <HAL_GPIO_Init+0x320>
 8004288:	4a5a      	ldr	r2, [pc, #360]	; (80043f4 <HAL_GPIO_Init+0x2bc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	f000 80ba 	beq.w	8004404 <HAL_GPIO_Init+0x2cc>
 8004290:	4a58      	ldr	r2, [pc, #352]	; (80043f4 <HAL_GPIO_Init+0x2bc>)
 8004292:	4293      	cmp	r3, r2
 8004294:	f200 80e0 	bhi.w	8004458 <HAL_GPIO_Init+0x320>
 8004298:	4a58      	ldr	r2, [pc, #352]	; (80043fc <HAL_GPIO_Init+0x2c4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	f000 80b2 	beq.w	8004404 <HAL_GPIO_Init+0x2cc>
 80042a0:	4a56      	ldr	r2, [pc, #344]	; (80043fc <HAL_GPIO_Init+0x2c4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	f200 80d8 	bhi.w	8004458 <HAL_GPIO_Init+0x320>
 80042a8:	4a51      	ldr	r2, [pc, #324]	; (80043f0 <HAL_GPIO_Init+0x2b8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	f000 80aa 	beq.w	8004404 <HAL_GPIO_Init+0x2cc>
 80042b0:	4a4f      	ldr	r2, [pc, #316]	; (80043f0 <HAL_GPIO_Init+0x2b8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	f200 80d0 	bhi.w	8004458 <HAL_GPIO_Init+0x320>
 80042b8:	4a4f      	ldr	r2, [pc, #316]	; (80043f8 <HAL_GPIO_Init+0x2c0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	f000 80a2 	beq.w	8004404 <HAL_GPIO_Init+0x2cc>
 80042c0:	4a4d      	ldr	r2, [pc, #308]	; (80043f8 <HAL_GPIO_Init+0x2c0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	f200 80c8 	bhi.w	8004458 <HAL_GPIO_Init+0x320>
 80042c8:	2b12      	cmp	r3, #18
 80042ca:	d82b      	bhi.n	8004324 <HAL_GPIO_Init+0x1ec>
 80042cc:	2b12      	cmp	r3, #18
 80042ce:	f200 80c3 	bhi.w	8004458 <HAL_GPIO_Init+0x320>
 80042d2:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <HAL_GPIO_Init+0x1a0>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	08004405 	.word	0x08004405
 80042dc:	0800432d 	.word	0x0800432d
 80042e0:	0800437f 	.word	0x0800437f
 80042e4:	08004453 	.word	0x08004453
 80042e8:	08004459 	.word	0x08004459
 80042ec:	08004459 	.word	0x08004459
 80042f0:	08004459 	.word	0x08004459
 80042f4:	08004459 	.word	0x08004459
 80042f8:	08004459 	.word	0x08004459
 80042fc:	08004459 	.word	0x08004459
 8004300:	08004459 	.word	0x08004459
 8004304:	08004459 	.word	0x08004459
 8004308:	08004459 	.word	0x08004459
 800430c:	08004459 	.word	0x08004459
 8004310:	08004459 	.word	0x08004459
 8004314:	08004459 	.word	0x08004459
 8004318:	08004459 	.word	0x08004459
 800431c:	08004355 	.word	0x08004355
 8004320:	080043a9 	.word	0x080043a9
 8004324:	4a31      	ldr	r2, [pc, #196]	; (80043ec <HAL_GPIO_Init+0x2b4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d06c      	beq.n	8004404 <HAL_GPIO_Init+0x2cc>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800432a:	e095      	b.n	8004458 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d00b      	beq.n	800434c <HAL_GPIO_Init+0x214>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d007      	beq.n	800434c <HAL_GPIO_Init+0x214>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d003      	beq.n	800434c <HAL_GPIO_Init+0x214>
 8004344:	21d5      	movs	r1, #213	; 0xd5
 8004346:	4828      	ldr	r0, [pc, #160]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004348:	f7fe f91f 	bl	800258a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	623b      	str	r3, [r7, #32]
          break;
 8004352:	e082      	b.n	800445a <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d00b      	beq.n	8004374 <HAL_GPIO_Init+0x23c>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d007      	beq.n	8004374 <HAL_GPIO_Init+0x23c>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b03      	cmp	r3, #3
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x23c>
 800436c:	21dc      	movs	r1, #220	; 0xdc
 800436e:	481e      	ldr	r0, [pc, #120]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004370:	f7fe f90b 	bl	800258a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	3304      	adds	r3, #4
 800437a:	623b      	str	r3, [r7, #32]
          break;
 800437c:	e06d      	b.n	800445a <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d00b      	beq.n	800439e <HAL_GPIO_Init+0x266>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d007      	beq.n	800439e <HAL_GPIO_Init+0x266>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d003      	beq.n	800439e <HAL_GPIO_Init+0x266>
 8004396:	21e3      	movs	r1, #227	; 0xe3
 8004398:	4813      	ldr	r0, [pc, #76]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 800439a:	f7fe f8f6 	bl	800258a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	3308      	adds	r3, #8
 80043a4:	623b      	str	r3, [r7, #32]
          break;
 80043a6:	e058      	b.n	800445a <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d00b      	beq.n	80043c8 <HAL_GPIO_Init+0x290>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d007      	beq.n	80043c8 <HAL_GPIO_Init+0x290>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d003      	beq.n	80043c8 <HAL_GPIO_Init+0x290>
 80043c0:	21ea      	movs	r1, #234	; 0xea
 80043c2:	4809      	ldr	r0, [pc, #36]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 80043c4:	f7fe f8e1 	bl	800258a <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	330c      	adds	r3, #12
 80043ce:	623b      	str	r3, [r7, #32]
          break;
 80043d0:	e043      	b.n	800445a <HAL_GPIO_Init+0x322>
 80043d2:	bf00      	nop
 80043d4:	40010800 	.word	0x40010800
 80043d8:	40010c00 	.word	0x40010c00
 80043dc:	40011000 	.word	0x40011000
 80043e0:	40011400 	.word	0x40011400
 80043e4:	40011800 	.word	0x40011800
 80043e8:	0800cc2c 	.word	0x0800cc2c
 80043ec:	10110000 	.word	0x10110000
 80043f0:	10210000 	.word	0x10210000
 80043f4:	10310000 	.word	0x10310000
 80043f8:	10120000 	.word	0x10120000
 80043fc:	10220000 	.word	0x10220000
 8004400:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00b      	beq.n	8004424 <HAL_GPIO_Init+0x2ec>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d007      	beq.n	8004424 <HAL_GPIO_Init+0x2ec>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d003      	beq.n	8004424 <HAL_GPIO_Init+0x2ec>
 800441c:	21f7      	movs	r1, #247	; 0xf7
 800441e:	4876      	ldr	r0, [pc, #472]	; (80045f8 <HAL_GPIO_Init+0x4c0>)
 8004420:	f7fe f8b3 	bl	800258a <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <HAL_GPIO_Init+0x2fa>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800442c:	2304      	movs	r3, #4
 800442e:	623b      	str	r3, [r7, #32]
          break;
 8004430:	e013      	b.n	800445a <HAL_GPIO_Init+0x322>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d105      	bne.n	8004446 <HAL_GPIO_Init+0x30e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800443a:	2308      	movs	r3, #8
 800443c:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	611a      	str	r2, [r3, #16]
          break;
 8004444:	e009      	b.n	800445a <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004446:	2308      	movs	r3, #8
 8004448:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	615a      	str	r2, [r3, #20]
          break;
 8004450:	e003      	b.n	800445a <HAL_GPIO_Init+0x322>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004452:	2300      	movs	r3, #0
 8004454:	623b      	str	r3, [r7, #32]
          break;
 8004456:	e000      	b.n	800445a <HAL_GPIO_Init+0x322>
          break;
 8004458:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2bff      	cmp	r3, #255	; 0xff
 800445e:	d801      	bhi.n	8004464 <HAL_GPIO_Init+0x32c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	e001      	b.n	8004468 <HAL_GPIO_Init+0x330>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2bff      	cmp	r3, #255	; 0xff
 800446e:	d802      	bhi.n	8004476 <HAL_GPIO_Init+0x33e>
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	e002      	b.n	800447c <HAL_GPIO_Init+0x344>
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	3b08      	subs	r3, #8
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	210f      	movs	r1, #15
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	fa01 f303 	lsl.w	r3, r1, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	401a      	ands	r2, r3
 800448e:	6a39      	ldr	r1, [r7, #32]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	fa01 f303 	lsl.w	r3, r1, r3
 8004496:	431a      	orrs	r2, r3
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 8096 	beq.w	80045d6 <HAL_GPIO_Init+0x49e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044aa:	4b54      	ldr	r3, [pc, #336]	; (80045fc <HAL_GPIO_Init+0x4c4>)
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	4a53      	ldr	r2, [pc, #332]	; (80045fc <HAL_GPIO_Init+0x4c4>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	6193      	str	r3, [r2, #24]
 80044b6:	4b51      	ldr	r3, [pc, #324]	; (80045fc <HAL_GPIO_Init+0x4c4>)
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044c2:	4a4f      	ldr	r2, [pc, #316]	; (8004600 <HAL_GPIO_Init+0x4c8>)
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	3302      	adds	r3, #2
 80044ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	220f      	movs	r2, #15
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4013      	ands	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a46      	ldr	r2, [pc, #280]	; (8004604 <HAL_GPIO_Init+0x4cc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_GPIO_Init+0x3de>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a45      	ldr	r2, [pc, #276]	; (8004608 <HAL_GPIO_Init+0x4d0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00d      	beq.n	8004512 <HAL_GPIO_Init+0x3da>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a44      	ldr	r2, [pc, #272]	; (800460c <HAL_GPIO_Init+0x4d4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d007      	beq.n	800450e <HAL_GPIO_Init+0x3d6>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a43      	ldr	r2, [pc, #268]	; (8004610 <HAL_GPIO_Init+0x4d8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <HAL_GPIO_Init+0x3d2>
 8004506:	2303      	movs	r3, #3
 8004508:	e006      	b.n	8004518 <HAL_GPIO_Init+0x3e0>
 800450a:	2304      	movs	r3, #4
 800450c:	e004      	b.n	8004518 <HAL_GPIO_Init+0x3e0>
 800450e:	2302      	movs	r3, #2
 8004510:	e002      	b.n	8004518 <HAL_GPIO_Init+0x3e0>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <HAL_GPIO_Init+0x3e0>
 8004516:	2300      	movs	r3, #0
 8004518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451a:	f002 0203 	and.w	r2, r2, #3
 800451e:	0092      	lsls	r2, r2, #2
 8004520:	4093      	lsls	r3, r2
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004528:	4935      	ldr	r1, [pc, #212]	; (8004600 <HAL_GPIO_Init+0x4c8>)
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	3302      	adds	r3, #2
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d006      	beq.n	8004550 <HAL_GPIO_Init+0x418>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004542:	4b34      	ldr	r3, [pc, #208]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4933      	ldr	r1, [pc, #204]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
 800454e:	e006      	b.n	800455e <HAL_GPIO_Init+0x426>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004550:	4b30      	ldr	r3, [pc, #192]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	43db      	mvns	r3, r3
 8004558:	492e      	ldr	r1, [pc, #184]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 800455a:	4013      	ands	r3, r2
 800455c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d006      	beq.n	8004578 <HAL_GPIO_Init+0x440>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800456a:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	4929      	ldr	r1, [pc, #164]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]
 8004576:	e006      	b.n	8004586 <HAL_GPIO_Init+0x44e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004578:	4b26      	ldr	r3, [pc, #152]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	43db      	mvns	r3, r3
 8004580:	4924      	ldr	r1, [pc, #144]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 8004582:	4013      	ands	r3, r2
 8004584:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <HAL_GPIO_Init+0x468>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	491f      	ldr	r1, [pc, #124]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	608b      	str	r3, [r1, #8]
 800459e:	e006      	b.n	80045ae <HAL_GPIO_Init+0x476>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80045a0:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	491a      	ldr	r1, [pc, #104]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d006      	beq.n	80045c8 <HAL_GPIO_Init+0x490>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80045ba:	4b16      	ldr	r3, [pc, #88]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	4915      	ldr	r1, [pc, #84]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60cb      	str	r3, [r1, #12]
 80045c6:	e006      	b.n	80045d6 <HAL_GPIO_Init+0x49e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80045c8:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	43db      	mvns	r3, r3
 80045d0:	4910      	ldr	r1, [pc, #64]	; (8004614 <HAL_GPIO_Init+0x4dc>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	3301      	adds	r3, #1
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	fa22 f303 	lsr.w	r3, r2, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f47f ae1d 	bne.w	8004226 <HAL_GPIO_Init+0xee>
  }
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	3728      	adds	r7, #40	; 0x28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	0800cc2c 	.word	0x0800cc2c
 80045fc:	40021000 	.word	0x40021000
 8004600:	40010000 	.word	0x40010000
 8004604:	40010800 	.word	0x40010800
 8004608:	40010c00 	.word	0x40010c00
 800460c:	40011000 	.word	0x40011000
 8004610:	40011400 	.word	0x40011400
 8004614:	40010400 	.word	0x40010400

08004618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	807b      	strh	r3, [r7, #2]
 8004624:	4613      	mov	r3, r2
 8004626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004628:	887b      	ldrh	r3, [r7, #2]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d004      	beq.n	8004638 <HAL_GPIO_WritePin+0x20>
 800462e:	887b      	ldrh	r3, [r7, #2]
 8004630:	0c1b      	lsrs	r3, r3, #16
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <HAL_GPIO_WritePin+0x2a>
 8004638:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800463c:	480e      	ldr	r0, [pc, #56]	; (8004678 <HAL_GPIO_WritePin+0x60>)
 800463e:	f7fd ffa4 	bl	800258a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004642:	787b      	ldrb	r3, [r7, #1]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_GPIO_WritePin+0x40>
 8004648:	787b      	ldrb	r3, [r7, #1]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d004      	beq.n	8004658 <HAL_GPIO_WritePin+0x40>
 800464e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8004652:	4809      	ldr	r0, [pc, #36]	; (8004678 <HAL_GPIO_WritePin+0x60>)
 8004654:	f7fd ff99 	bl	800258a <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004658:	787b      	ldrb	r3, [r7, #1]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004664:	e003      	b.n	800466e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004666:	887b      	ldrh	r3, [r7, #2]
 8004668:	041a      	lsls	r2, r3, #16
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	611a      	str	r2, [r3, #16]
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	0800cc2c 	.word	0x0800cc2c

0800467c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004688:	887b      	ldrh	r3, [r7, #2]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <HAL_GPIO_TogglePin+0x1c>
 800468e:	887b      	ldrh	r3, [r7, #2]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	041b      	lsls	r3, r3, #16
 8004694:	2b00      	cmp	r3, #0
 8004696:	d004      	beq.n	80046a2 <HAL_GPIO_TogglePin+0x26>
 8004698:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800469c:	480a      	ldr	r0, [pc, #40]	; (80046c8 <HAL_GPIO_TogglePin+0x4c>)
 800469e:	f7fd ff74 	bl	800258a <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046a8:	887a      	ldrh	r2, [r7, #2]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4013      	ands	r3, r2
 80046ae:	041a      	lsls	r2, r3, #16
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	43d9      	mvns	r1, r3
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	400b      	ands	r3, r1
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	611a      	str	r2, [r3, #16]
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	0800cc2c 	.word	0x0800cc2c

080046cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046d6:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	4013      	ands	r3, r2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d006      	beq.n	80046f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046e2:	4a05      	ldr	r2, [pc, #20]	; (80046f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe f9f0 	bl	8002ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40010400 	.word	0x40010400

080046fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e35c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01c      	beq.n	8004750 <HAL_RCC_OscConfig+0x54>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d116      	bne.n	8004750 <HAL_RCC_OscConfig+0x54>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d110      	bne.n	8004750 <HAL_RCC_OscConfig+0x54>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <HAL_RCC_OscConfig+0x54>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <HAL_RCC_OscConfig+0x54>
 8004746:	f240 1167 	movw	r1, #359	; 0x167
 800474a:	48a5      	ldr	r0, [pc, #660]	; (80049e0 <HAL_RCC_OscConfig+0x2e4>)
 800474c:	f7fd ff1d 	bl	800258a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 809a 	beq.w	8004892 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00e      	beq.n	8004784 <HAL_RCC_OscConfig+0x88>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476e:	d009      	beq.n	8004784 <HAL_RCC_OscConfig+0x88>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004778:	d004      	beq.n	8004784 <HAL_RCC_OscConfig+0x88>
 800477a:	f240 116d 	movw	r1, #365	; 0x16d
 800477e:	4898      	ldr	r0, [pc, #608]	; (80049e0 <HAL_RCC_OscConfig+0x2e4>)
 8004780:	f7fd ff03 	bl	800258a <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004784:	4b97      	ldr	r3, [pc, #604]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b04      	cmp	r3, #4
 800478e:	d00c      	beq.n	80047aa <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004790:	4b94      	ldr	r3, [pc, #592]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	2b08      	cmp	r3, #8
 800479a:	d112      	bne.n	80047c2 <HAL_RCC_OscConfig+0xc6>
 800479c:	4b91      	ldr	r3, [pc, #580]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a8:	d10b      	bne.n	80047c2 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047aa:	4b8e      	ldr	r3, [pc, #568]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d06c      	beq.n	8004890 <HAL_RCC_OscConfig+0x194>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d168      	bne.n	8004890 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e302      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ca:	d106      	bne.n	80047da <HAL_RCC_OscConfig+0xde>
 80047cc:	4b85      	ldr	r3, [pc, #532]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a84      	ldr	r2, [pc, #528]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 80047d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	e02e      	b.n	8004838 <HAL_RCC_OscConfig+0x13c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10c      	bne.n	80047fc <HAL_RCC_OscConfig+0x100>
 80047e2:	4b80      	ldr	r3, [pc, #512]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7f      	ldr	r2, [pc, #508]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 80047e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	4b7d      	ldr	r3, [pc, #500]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a7c      	ldr	r2, [pc, #496]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 80047f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e01d      	b.n	8004838 <HAL_RCC_OscConfig+0x13c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x124>
 8004806:	4b77      	ldr	r3, [pc, #476]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a76      	ldr	r2, [pc, #472]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 800480c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4b74      	ldr	r3, [pc, #464]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a73      	ldr	r2, [pc, #460]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0x13c>
 8004820:	4b70      	ldr	r3, [pc, #448]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a6f      	ldr	r2, [pc, #444]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b6d      	ldr	r3, [pc, #436]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a6c      	ldr	r2, [pc, #432]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d013      	beq.n	8004868 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fe fabe 	bl	8002dc0 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004848:	f7fe faba 	bl	8002dc0 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	; 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e2b6      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	4b62      	ldr	r3, [pc, #392]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x14c>
 8004866:	e014      	b.n	8004892 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fe faaa 	bl	8002dc0 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004870:	f7fe faa6 	bl	8002dc0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	; 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e2a2      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004882:	4b58      	ldr	r3, [pc, #352]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x174>
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d079      	beq.n	8004992 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d008      	beq.n	80048b8 <HAL_RCC_OscConfig+0x1bc>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d004      	beq.n	80048b8 <HAL_RCC_OscConfig+0x1bc>
 80048ae:	f240 11a1 	movw	r1, #417	; 0x1a1
 80048b2:	484b      	ldr	r0, [pc, #300]	; (80049e0 <HAL_RCC_OscConfig+0x2e4>)
 80048b4:	f7fd fe69 	bl	800258a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	2b1f      	cmp	r3, #31
 80048be:	d904      	bls.n	80048ca <HAL_RCC_OscConfig+0x1ce>
 80048c0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80048c4:	4846      	ldr	r0, [pc, #280]	; (80049e0 <HAL_RCC_OscConfig+0x2e4>)
 80048c6:	f7fd fe60 	bl	800258a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048ca:	4b46      	ldr	r3, [pc, #280]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048d6:	4b43      	ldr	r3, [pc, #268]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d11c      	bne.n	800491c <HAL_RCC_OscConfig+0x220>
 80048e2:	4b40      	ldr	r3, [pc, #256]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d116      	bne.n	800491c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ee:	4b3d      	ldr	r3, [pc, #244]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_RCC_OscConfig+0x20a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d001      	beq.n	8004906 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e260      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004906:	4b37      	ldr	r3, [pc, #220]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4933      	ldr	r1, [pc, #204]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491a:	e03a      	b.n	8004992 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d020      	beq.n	8004966 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004924:	4b30      	ldr	r3, [pc, #192]	; (80049e8 <HAL_RCC_OscConfig+0x2ec>)
 8004926:	2201      	movs	r2, #1
 8004928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492a:	f7fe fa49 	bl	8002dc0 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004932:	f7fe fa45 	bl	8002dc0 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e241      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004944:	4b27      	ldr	r3, [pc, #156]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004950:	4b24      	ldr	r3, [pc, #144]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4921      	ldr	r1, [pc, #132]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]
 8004964:	e015      	b.n	8004992 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004966:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <HAL_RCC_OscConfig+0x2ec>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fe fa28 	bl	8002dc0 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004974:	f7fe fa24 	bl	8002dc0 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e220      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004986:	4b17      	ldr	r3, [pc, #92]	; (80049e4 <HAL_RCC_OscConfig+0x2e8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d048      	beq.n	8004a30 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_RCC_OscConfig+0x2bc>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d004      	beq.n	80049b8 <HAL_RCC_OscConfig+0x2bc>
 80049ae:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80049b2:	480b      	ldr	r0, [pc, #44]	; (80049e0 <HAL_RCC_OscConfig+0x2e4>)
 80049b4:	f7fd fde9 	bl	800258a <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d021      	beq.n	8004a04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <HAL_RCC_OscConfig+0x2f0>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c6:	f7fe f9fb 	bl	8002dc0 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049cc:	e010      	b.n	80049f0 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ce:	f7fe f9f7 	bl	8002dc0 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d909      	bls.n	80049f0 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e1f3      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
 80049e0:	0800cc68 	.word	0x0800cc68
 80049e4:	40021000 	.word	0x40021000
 80049e8:	42420000 	.word	0x42420000
 80049ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f0:	4b67      	ldr	r3, [pc, #412]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0e8      	beq.n	80049ce <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049fc:	2001      	movs	r0, #1
 80049fe:	f000 fc51 	bl	80052a4 <RCC_Delay>
 8004a02:	e015      	b.n	8004a30 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a04:	4b63      	ldr	r3, [pc, #396]	; (8004b94 <HAL_RCC_OscConfig+0x498>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a0a:	f7fe f9d9 	bl	8002dc0 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a12:	f7fe f9d5 	bl	8002dc0 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e1d1      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a24:	4b5a      	ldr	r3, [pc, #360]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80c0 	beq.w	8004bbe <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00c      	beq.n	8004a64 <HAL_RCC_OscConfig+0x368>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d008      	beq.n	8004a64 <HAL_RCC_OscConfig+0x368>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b05      	cmp	r3, #5
 8004a58:	d004      	beq.n	8004a64 <HAL_RCC_OscConfig+0x368>
 8004a5a:	f240 2111 	movw	r1, #529	; 0x211
 8004a5e:	484e      	ldr	r0, [pc, #312]	; (8004b98 <HAL_RCC_OscConfig+0x49c>)
 8004a60:	f7fd fd93 	bl	800258a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a64:	4b4a      	ldr	r3, [pc, #296]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10d      	bne.n	8004a8c <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a70:	4b47      	ldr	r3, [pc, #284]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	4a46      	ldr	r2, [pc, #280]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	61d3      	str	r3, [r2, #28]
 8004a7c:	4b44      	ldr	r3, [pc, #272]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8c:	4b43      	ldr	r3, [pc, #268]	; (8004b9c <HAL_RCC_OscConfig+0x4a0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d118      	bne.n	8004aca <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a98:	4b40      	ldr	r3, [pc, #256]	; (8004b9c <HAL_RCC_OscConfig+0x4a0>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a3f      	ldr	r2, [pc, #252]	; (8004b9c <HAL_RCC_OscConfig+0x4a0>)
 8004a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa4:	f7fe f98c 	bl	8002dc0 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aac:	f7fe f988 	bl	8002dc0 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e184      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abe:	4b37      	ldr	r3, [pc, #220]	; (8004b9c <HAL_RCC_OscConfig+0x4a0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d106      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x3e4>
 8004ad2:	4b2f      	ldr	r3, [pc, #188]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	4a2e      	ldr	r2, [pc, #184]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	6213      	str	r3, [r2, #32]
 8004ade:	e02d      	b.n	8004b3c <HAL_RCC_OscConfig+0x440>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10c      	bne.n	8004b02 <HAL_RCC_OscConfig+0x406>
 8004ae8:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	4a28      	ldr	r2, [pc, #160]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	6213      	str	r3, [r2, #32]
 8004af4:	4b26      	ldr	r3, [pc, #152]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	4a25      	ldr	r2, [pc, #148]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004afa:	f023 0304 	bic.w	r3, r3, #4
 8004afe:	6213      	str	r3, [r2, #32]
 8004b00:	e01c      	b.n	8004b3c <HAL_RCC_OscConfig+0x440>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCC_OscConfig+0x428>
 8004b0a:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	4a20      	ldr	r2, [pc, #128]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004b10:	f043 0304 	orr.w	r3, r3, #4
 8004b14:	6213      	str	r3, [r2, #32]
 8004b16:	4b1e      	ldr	r3, [pc, #120]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	4a1d      	ldr	r2, [pc, #116]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	6213      	str	r3, [r2, #32]
 8004b22:	e00b      	b.n	8004b3c <HAL_RCC_OscConfig+0x440>
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	4a19      	ldr	r2, [pc, #100]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	6213      	str	r3, [r2, #32]
 8004b30:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	4a16      	ldr	r2, [pc, #88]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004b36:	f023 0304 	bic.w	r3, r3, #4
 8004b3a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b44:	f7fe f93c 	bl	8002dc0 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4c:	f7fe f938 	bl	8002dc0 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e132      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <HAL_RCC_OscConfig+0x494>)
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0ee      	beq.n	8004b4c <HAL_RCC_OscConfig+0x450>
 8004b6e:	e01d      	b.n	8004bac <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b70:	f7fe f926 	bl	8002dc0 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b76:	e013      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b78:	f7fe f922 	bl	8002dc0 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d90a      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e11c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
 8004b8e:	bf00      	nop
 8004b90:	40021000 	.word	0x40021000
 8004b94:	42420480 	.word	0x42420480
 8004b98:	0800cc68 	.word	0x0800cc68
 8004b9c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba0:	4b8b      	ldr	r3, [pc, #556]	; (8004dd0 <HAL_RCC_OscConfig+0x6d4>)
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e5      	bne.n	8004b78 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d105      	bne.n	8004bbe <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb2:	4b87      	ldr	r3, [pc, #540]	; (8004dd0 <HAL_RCC_OscConfig+0x6d4>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4a86      	ldr	r2, [pc, #536]	; (8004dd0 <HAL_RCC_OscConfig+0x6d4>)
 8004bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00c      	beq.n	8004be0 <HAL_RCC_OscConfig+0x4e4>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d008      	beq.n	8004be0 <HAL_RCC_OscConfig+0x4e4>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d004      	beq.n	8004be0 <HAL_RCC_OscConfig+0x4e4>
 8004bd6:	f240 21af 	movw	r1, #687	; 0x2af
 8004bda:	487e      	ldr	r0, [pc, #504]	; (8004dd4 <HAL_RCC_OscConfig+0x6d8>)
 8004bdc:	f7fd fcd5 	bl	800258a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80ee 	beq.w	8004dc6 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bea:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <HAL_RCC_OscConfig+0x6d4>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	f000 80ce 	beq.w	8004d94 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	f040 80b2 	bne.w	8004d66 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <HAL_RCC_OscConfig+0x522>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c12:	d004      	beq.n	8004c1e <HAL_RCC_OscConfig+0x522>
 8004c14:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8004c18:	486e      	ldr	r0, [pc, #440]	; (8004dd4 <HAL_RCC_OscConfig+0x6d8>)
 8004c1a:	f7fd fcb6 	bl	800258a <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d04a      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c2e:	d045      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c38:	d040      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c42:	d03b      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c4c:	d036      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c56:	d031      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c60:	d02c      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c6a:	d027      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c74:	d022      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c7e:	d01d      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c88:	d018      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c92:	d013      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c9c:	d00e      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8004ca6:	d009      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004cb0:	d004      	beq.n	8004cbc <HAL_RCC_OscConfig+0x5c0>
 8004cb2:	f240 21b9 	movw	r1, #697	; 0x2b9
 8004cb6:	4847      	ldr	r0, [pc, #284]	; (8004dd4 <HAL_RCC_OscConfig+0x6d8>)
 8004cb8:	f7fd fc67 	bl	800258a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cbc:	4b46      	ldr	r3, [pc, #280]	; (8004dd8 <HAL_RCC_OscConfig+0x6dc>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc2:	f7fe f87d 	bl	8002dc0 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fe f879 	bl	8002dc0 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e075      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cdc:	4b3c      	ldr	r3, [pc, #240]	; (8004dd0 <HAL_RCC_OscConfig+0x6d4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f0      	bne.n	8004cca <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf0:	d116      	bne.n	8004d20 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_RCC_OscConfig+0x612>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d02:	d004      	beq.n	8004d0e <HAL_RCC_OscConfig+0x612>
 8004d04:	f240 21cf 	movw	r1, #719	; 0x2cf
 8004d08:	4832      	ldr	r0, [pc, #200]	; (8004dd4 <HAL_RCC_OscConfig+0x6d8>)
 8004d0a:	f7fd fc3e 	bl	800258a <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d0e:	4b30      	ldr	r3, [pc, #192]	; (8004dd0 <HAL_RCC_OscConfig+0x6d4>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	492d      	ldr	r1, [pc, #180]	; (8004dd0 <HAL_RCC_OscConfig+0x6d4>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d20:	4b2b      	ldr	r3, [pc, #172]	; (8004dd0 <HAL_RCC_OscConfig+0x6d4>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a19      	ldr	r1, [r3, #32]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	430b      	orrs	r3, r1
 8004d32:	4927      	ldr	r1, [pc, #156]	; (8004dd0 <HAL_RCC_OscConfig+0x6d4>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d38:	4b27      	ldr	r3, [pc, #156]	; (8004dd8 <HAL_RCC_OscConfig+0x6dc>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3e:	f7fe f83f 	bl	8002dc0 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d46:	f7fe f83b 	bl	8002dc0 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e037      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d58:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <HAL_RCC_OscConfig+0x6d4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0f0      	beq.n	8004d46 <HAL_RCC_OscConfig+0x64a>
 8004d64:	e02f      	b.n	8004dc6 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d66:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <HAL_RCC_OscConfig+0x6dc>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fe f828 	bl	8002dc0 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fe f824 	bl	8002dc0 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e020      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d86:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <HAL_RCC_OscConfig+0x6d4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x678>
 8004d92:	e018      	b.n	8004dc6 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e013      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_OscConfig+0x6d4>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d106      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d001      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	0800cc68 	.word	0x0800cc68
 8004dd8:	42420060 	.word	0x42420060

08004ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e176      	b.n	80050de <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d116      	bne.n	8004e2a <HAL_RCC_ClockConfig+0x4e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d110      	bne.n	8004e2a <HAL_RCC_ClockConfig+0x4e>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <HAL_RCC_ClockConfig+0x4e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d104      	bne.n	8004e2a <HAL_RCC_ClockConfig+0x4e>
 8004e20:	f44f 714e 	mov.w	r1, #824	; 0x338
 8004e24:	4874      	ldr	r0, [pc, #464]	; (8004ff8 <HAL_RCC_ClockConfig+0x21c>)
 8004e26:	f7fd fbb0 	bl	800258a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x6a>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d007      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x6a>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d004      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x6a>
 8004e3c:	f240 3139 	movw	r1, #825	; 0x339
 8004e40:	486d      	ldr	r0, [pc, #436]	; (8004ff8 <HAL_RCC_ClockConfig+0x21c>)
 8004e42:	f7fd fba2 	bl	800258a <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e46:	4b6d      	ldr	r3, [pc, #436]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d910      	bls.n	8004e76 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e54:	4b69      	ldr	r3, [pc, #420]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f023 0207 	bic.w	r2, r3, #7
 8004e5c:	4967      	ldr	r1, [pc, #412]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e64:	4b65      	ldr	r3, [pc, #404]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d001      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e133      	b.n	80050de <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d049      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e8e:	4b5c      	ldr	r3, [pc, #368]	; (8005000 <HAL_RCC_ClockConfig+0x224>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4a5b      	ldr	r2, [pc, #364]	; (8005000 <HAL_RCC_ClockConfig+0x224>)
 8004e94:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e98:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ea6:	4b56      	ldr	r3, [pc, #344]	; (8005000 <HAL_RCC_ClockConfig+0x224>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4a55      	ldr	r2, [pc, #340]	; (8005000 <HAL_RCC_ClockConfig+0x224>)
 8004eac:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004eb0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d024      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x128>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b80      	cmp	r3, #128	; 0x80
 8004ec0:	d020      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x128>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b90      	cmp	r3, #144	; 0x90
 8004ec8:	d01c      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x128>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2ba0      	cmp	r3, #160	; 0xa0
 8004ed0:	d018      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x128>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2bb0      	cmp	r3, #176	; 0xb0
 8004ed8:	d014      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x128>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2bc0      	cmp	r3, #192	; 0xc0
 8004ee0:	d010      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x128>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2bd0      	cmp	r3, #208	; 0xd0
 8004ee8:	d00c      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x128>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2be0      	cmp	r3, #224	; 0xe0
 8004ef0:	d008      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x128>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2bf0      	cmp	r3, #240	; 0xf0
 8004ef8:	d004      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x128>
 8004efa:	f240 315f 	movw	r1, #863	; 0x35f
 8004efe:	483e      	ldr	r0, [pc, #248]	; (8004ff8 <HAL_RCC_ClockConfig+0x21c>)
 8004f00:	f7fd fb43 	bl	800258a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f04:	4b3e      	ldr	r3, [pc, #248]	; (8005000 <HAL_RCC_ClockConfig+0x224>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	493b      	ldr	r1, [pc, #236]	; (8005000 <HAL_RCC_ClockConfig+0x224>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d051      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00c      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x168>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d008      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x168>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d004      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x168>
 8004f3a:	f240 3166 	movw	r1, #870	; 0x366
 8004f3e:	482e      	ldr	r0, [pc, #184]	; (8004ff8 <HAL_RCC_ClockConfig+0x21c>)
 8004f40:	f7fd fb23 	bl	800258a <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d107      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4c:	4b2c      	ldr	r3, [pc, #176]	; (8005000 <HAL_RCC_ClockConfig+0x224>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d115      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0c0      	b.n	80050de <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d107      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f64:	4b26      	ldr	r3, [pc, #152]	; (8005000 <HAL_RCC_ClockConfig+0x224>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0b4      	b.n	80050de <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f74:	4b22      	ldr	r3, [pc, #136]	; (8005000 <HAL_RCC_ClockConfig+0x224>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0ac      	b.n	80050de <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f84:	4b1e      	ldr	r3, [pc, #120]	; (8005000 <HAL_RCC_ClockConfig+0x224>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f023 0203 	bic.w	r2, r3, #3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	491b      	ldr	r1, [pc, #108]	; (8005000 <HAL_RCC_ClockConfig+0x224>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f96:	f7fd ff13 	bl	8002dc0 <HAL_GetTick>
 8004f9a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9e:	f7fd ff0f 	bl	8002dc0 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e094      	b.n	80050de <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb4:	4b12      	ldr	r3, [pc, #72]	; (8005000 <HAL_RCC_ClockConfig+0x224>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 020c 	and.w	r2, r3, #12
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d1eb      	bne.n	8004f9e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d217      	bcs.n	8005004 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f023 0207 	bic.w	r2, r3, #7
 8004fdc:	4907      	ldr	r1, [pc, #28]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCC_ClockConfig+0x220>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d008      	beq.n	8005004 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e073      	b.n	80050de <HAL_RCC_ClockConfig+0x302>
 8004ff6:	bf00      	nop
 8004ff8:	0800cc68 	.word	0x0800cc68
 8004ffc:	40022000 	.word	0x40022000
 8005000:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d025      	beq.n	800505c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d018      	beq.n	800504a <HAL_RCC_ClockConfig+0x26e>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005020:	d013      	beq.n	800504a <HAL_RCC_ClockConfig+0x26e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800502a:	d00e      	beq.n	800504a <HAL_RCC_ClockConfig+0x26e>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005034:	d009      	beq.n	800504a <HAL_RCC_ClockConfig+0x26e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800503e:	d004      	beq.n	800504a <HAL_RCC_ClockConfig+0x26e>
 8005040:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8005044:	4828      	ldr	r0, [pc, #160]	; (80050e8 <HAL_RCC_ClockConfig+0x30c>)
 8005046:	f7fd faa0 	bl	800258a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800504a:	4b28      	ldr	r3, [pc, #160]	; (80050ec <HAL_RCC_ClockConfig+0x310>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	4925      	ldr	r1, [pc, #148]	; (80050ec <HAL_RCC_ClockConfig+0x310>)
 8005058:	4313      	orrs	r3, r2
 800505a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d026      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d018      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x2c6>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005078:	d013      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x2c6>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005082:	d00e      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x2c6>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800508c:	d009      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x2c6>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005096:	d004      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x2c6>
 8005098:	f240 31ab 	movw	r1, #939	; 0x3ab
 800509c:	4812      	ldr	r0, [pc, #72]	; (80050e8 <HAL_RCC_ClockConfig+0x30c>)
 800509e:	f7fd fa74 	bl	800258a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <HAL_RCC_ClockConfig+0x310>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	490e      	ldr	r1, [pc, #56]	; (80050ec <HAL_RCC_ClockConfig+0x310>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050b6:	f000 f821 	bl	80050fc <HAL_RCC_GetSysClockFreq>
 80050ba:	4602      	mov	r2, r0
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_RCC_ClockConfig+0x310>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	490a      	ldr	r1, [pc, #40]	; (80050f0 <HAL_RCC_ClockConfig+0x314>)
 80050c8:	5ccb      	ldrb	r3, [r1, r3]
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <HAL_RCC_ClockConfig+0x318>)
 80050d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <HAL_RCC_ClockConfig+0x31c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fd fc74 	bl	80029c4 <HAL_InitTick>

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	0800cc68 	.word	0x0800cc68
 80050ec:	40021000 	.word	0x40021000
 80050f0:	0800cff4 	.word	0x0800cff4
 80050f4:	20000020 	.word	0x20000020
 80050f8:	20000024 	.word	0x20000024

080050fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050fc:	b490      	push	{r4, r7}
 80050fe:	b08a      	sub	sp, #40	; 0x28
 8005100:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005102:	4b2a      	ldr	r3, [pc, #168]	; (80051ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8005104:	1d3c      	adds	r4, r7, #4
 8005106:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800510c:	f240 2301 	movw	r3, #513	; 0x201
 8005110:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	2300      	movs	r3, #0
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005126:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b04      	cmp	r3, #4
 8005134:	d002      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0x40>
 8005136:	2b08      	cmp	r3, #8
 8005138:	d003      	beq.n	8005142 <HAL_RCC_GetSysClockFreq+0x46>
 800513a:	e02d      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800513c:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800513e:	623b      	str	r3, [r7, #32]
      break;
 8005140:	e02d      	b.n	800519e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	0c9b      	lsrs	r3, r3, #18
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800514e:	4413      	add	r3, r2
 8005150:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005154:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d013      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005160:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	0c5b      	lsrs	r3, r3, #17
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800516e:	4413      	add	r3, r2
 8005170:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005174:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4a0e      	ldr	r2, [pc, #56]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800517a:	fb02 f203 	mul.w	r2, r2, r3
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
 8005186:	e004      	b.n	8005192 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	4a0b      	ldr	r2, [pc, #44]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800518c:	fb02 f303 	mul.w	r3, r2, r3
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	623b      	str	r3, [r7, #32]
      break;
 8005196:	e002      	b.n	800519e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800519a:	623b      	str	r3, [r7, #32]
      break;
 800519c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800519e:	6a3b      	ldr	r3, [r7, #32]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3728      	adds	r7, #40	; 0x28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc90      	pop	{r4, r7}
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	0800cca0 	.word	0x0800cca0
 80051b0:	40021000 	.word	0x40021000
 80051b4:	007a1200 	.word	0x007a1200
 80051b8:	003d0900 	.word	0x003d0900

080051bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c0:	4b02      	ldr	r3, [pc, #8]	; (80051cc <HAL_RCC_GetHCLKFreq+0x10>)
 80051c2:	681b      	ldr	r3, [r3, #0]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	20000020 	.word	0x20000020

080051d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051d4:	f7ff fff2 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4903      	ldr	r1, [pc, #12]	; (80051f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40021000 	.word	0x40021000
 80051f4:	0800d004 	.word	0x0800d004

080051f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051fc:	f7ff ffde 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	0adb      	lsrs	r3, r3, #11
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4903      	ldr	r1, [pc, #12]	; (800521c <HAL_RCC_GetPCLK2Freq+0x24>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40021000 	.word	0x40021000
 800521c:	0800d004 	.word	0x0800d004

08005220 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d104      	bne.n	800523a <HAL_RCC_GetClockConfig+0x1a>
 8005230:	f240 5123 	movw	r1, #1315	; 0x523
 8005234:	4818      	ldr	r0, [pc, #96]	; (8005298 <HAL_RCC_GetClockConfig+0x78>)
 8005236:	f7fd f9a8 	bl	800258a <assert_failed>
  assert_param(pFLatency != NULL);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d104      	bne.n	800524a <HAL_RCC_GetClockConfig+0x2a>
 8005240:	f240 5124 	movw	r1, #1316	; 0x524
 8005244:	4814      	ldr	r0, [pc, #80]	; (8005298 <HAL_RCC_GetClockConfig+0x78>)
 8005246:	f7fd f9a0 	bl	800258a <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	220f      	movs	r2, #15
 800524e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005250:	4b12      	ldr	r3, [pc, #72]	; (800529c <HAL_RCC_GetClockConfig+0x7c>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f003 0203 	and.w	r2, r3, #3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <HAL_RCC_GetClockConfig+0x7c>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005268:	4b0c      	ldr	r3, [pc, #48]	; (800529c <HAL_RCC_GetClockConfig+0x7c>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005274:	4b09      	ldr	r3, [pc, #36]	; (800529c <HAL_RCC_GetClockConfig+0x7c>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	08db      	lsrs	r3, r3, #3
 800527a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005282:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <HAL_RCC_GetClockConfig+0x80>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0207 	and.w	r2, r3, #7
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	0800cc68 	.word	0x0800cc68
 800529c:	40021000 	.word	0x40021000
 80052a0:	40022000 	.word	0x40022000

080052a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <RCC_Delay+0x34>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <RCC_Delay+0x38>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	0a5b      	lsrs	r3, r3, #9
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
 80052be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052c0:	bf00      	nop
  }
  while (Delay --);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1e5a      	subs	r2, r3, #1
 80052c6:	60fa      	str	r2, [r7, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f9      	bne.n	80052c0 <RCC_Delay+0x1c>
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	20000020 	.word	0x20000020
 80052dc:	10624dd3 	.word	0x10624dd3

080052e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10f      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d109      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	d103      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005314:	216c      	movs	r1, #108	; 0x6c
 8005316:	4873      	ldr	r0, [pc, #460]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005318:	f7fd f937 	bl	800258a <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8095 	beq.w	8005454 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d012      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533a:	d00d      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005344:	d008      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800534e:	d003      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005350:	2172      	movs	r1, #114	; 0x72
 8005352:	4864      	ldr	r0, [pc, #400]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005354:	f7fd f919 	bl	800258a <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8005358:	2300      	movs	r3, #0
 800535a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800535c:	4b62      	ldr	r3, [pc, #392]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10d      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005368:	4b5f      	ldr	r3, [pc, #380]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	4a5e      	ldr	r2, [pc, #376]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800536e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005372:	61d3      	str	r3, [r2, #28]
 8005374:	4b5c      	ldr	r3, [pc, #368]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005380:	2301      	movs	r3, #1
 8005382:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005384:	4b59      	ldr	r3, [pc, #356]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538c:	2b00      	cmp	r3, #0
 800538e:	d118      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005390:	4b56      	ldr	r3, [pc, #344]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a55      	ldr	r2, [pc, #340]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800539c:	f7fd fd10 	bl	8002dc0 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a2:	e008      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a4:	f7fd fd0c 	bl	8002dc0 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	; 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e092      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b6:	4b4d      	ldr	r3, [pc, #308]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053c2:	4b49      	ldr	r3, [pc, #292]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d02e      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d027      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053e0:	4b41      	ldr	r3, [pc, #260]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053ea:	4b41      	ldr	r3, [pc, #260]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053f0:	4b3f      	ldr	r3, [pc, #252]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053f6:	4a3c      	ldr	r2, [pc, #240]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d014      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005406:	f7fd fcdb 	bl	8002dc0 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540c:	e00a      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540e:	f7fd fcd7 	bl	8002dc0 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f241 3288 	movw	r2, #5000	; 0x1388
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e05b      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005424:	4b30      	ldr	r3, [pc, #192]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0ee      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005430:	4b2d      	ldr	r3, [pc, #180]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	492a      	ldr	r1, [pc, #168]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800543e:	4313      	orrs	r3, r2
 8005440:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005442:	7dfb      	ldrb	r3, [r7, #23]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d105      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005448:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	4a26      	ldr	r2, [pc, #152]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800544e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005452:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01f      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d012      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005470:	d00d      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800547a:	d008      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005484:	d003      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005486:	21b9      	movs	r1, #185	; 0xb9
 8005488:	4816      	ldr	r0, [pc, #88]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800548a:	f7fd f87e 	bl	800258a <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800548e:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	4913      	ldr	r1, [pc, #76]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800549c:	4313      	orrs	r3, r2
 800549e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d016      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b4:	d008      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80054be:	f240 1115 	movw	r1, #277	; 0x115
 80054c2:	4808      	ldr	r0, [pc, #32]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80054c4:	f7fd f861 	bl	800258a <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054c8:	4b07      	ldr	r3, [pc, #28]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4904      	ldr	r1, [pc, #16]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	0800ccb0 	.word	0x0800ccb0
 80054e8:	40021000 	.word	0x40021000
 80054ec:	40007000 	.word	0x40007000
 80054f0:	42420440 	.word	0x42420440

080054f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e16d      	b.n	80057e2 <HAL_SPI_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a6b      	ldr	r2, [pc, #428]	; (80056b8 <HAL_SPI_Init+0x1c4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d009      	beq.n	8005524 <HAL_SPI_Init+0x30>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a69      	ldr	r2, [pc, #420]	; (80056bc <HAL_SPI_Init+0x1c8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_SPI_Init+0x30>
 800551a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800551e:	4868      	ldr	r0, [pc, #416]	; (80056c0 <HAL_SPI_Init+0x1cc>)
 8005520:	f7fd f833 	bl	800258a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d009      	beq.n	8005540 <HAL_SPI_Init+0x4c>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005534:	d004      	beq.n	8005540 <HAL_SPI_Init+0x4c>
 8005536:	f240 1159 	movw	r1, #345	; 0x159
 800553a:	4861      	ldr	r0, [pc, #388]	; (80056c0 <HAL_SPI_Init+0x1cc>)
 800553c:	f7fd f825 	bl	800258a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00e      	beq.n	8005566 <HAL_SPI_Init+0x72>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005550:	d009      	beq.n	8005566 <HAL_SPI_Init+0x72>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555a:	d004      	beq.n	8005566 <HAL_SPI_Init+0x72>
 800555c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8005560:	4857      	ldr	r0, [pc, #348]	; (80056c0 <HAL_SPI_Init+0x1cc>)
 8005562:	f7fd f812 	bl	800258a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556e:	d008      	beq.n	8005582 <HAL_SPI_Init+0x8e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d004      	beq.n	8005582 <HAL_SPI_Init+0x8e>
 8005578:	f240 115b 	movw	r1, #347	; 0x15b
 800557c:	4850      	ldr	r0, [pc, #320]	; (80056c0 <HAL_SPI_Init+0x1cc>)
 800557e:	f7fd f804 	bl	800258a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800558a:	d00d      	beq.n	80055a8 <HAL_SPI_Init+0xb4>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d009      	beq.n	80055a8 <HAL_SPI_Init+0xb4>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800559c:	d004      	beq.n	80055a8 <HAL_SPI_Init+0xb4>
 800559e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80055a2:	4847      	ldr	r0, [pc, #284]	; (80056c0 <HAL_SPI_Init+0x1cc>)
 80055a4:	f7fc fff1 	bl	800258a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d020      	beq.n	80055f2 <HAL_SPI_Init+0xfe>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d01c      	beq.n	80055f2 <HAL_SPI_Init+0xfe>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d018      	beq.n	80055f2 <HAL_SPI_Init+0xfe>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	2b18      	cmp	r3, #24
 80055c6:	d014      	beq.n	80055f2 <HAL_SPI_Init+0xfe>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d010      	beq.n	80055f2 <HAL_SPI_Init+0xfe>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	2b28      	cmp	r3, #40	; 0x28
 80055d6:	d00c      	beq.n	80055f2 <HAL_SPI_Init+0xfe>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	2b30      	cmp	r3, #48	; 0x30
 80055de:	d008      	beq.n	80055f2 <HAL_SPI_Init+0xfe>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	2b38      	cmp	r3, #56	; 0x38
 80055e6:	d004      	beq.n	80055f2 <HAL_SPI_Init+0xfe>
 80055e8:	f240 115d 	movw	r1, #349	; 0x15d
 80055ec:	4834      	ldr	r0, [pc, #208]	; (80056c0 <HAL_SPI_Init+0x1cc>)
 80055ee:	f7fc ffcc 	bl	800258a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <HAL_SPI_Init+0x118>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	2b80      	cmp	r3, #128	; 0x80
 8005600:	d004      	beq.n	800560c <HAL_SPI_Init+0x118>
 8005602:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005606:	482e      	ldr	r0, [pc, #184]	; (80056c0 <HAL_SPI_Init+0x1cc>)
 8005608:	f7fc ffbf 	bl	800258a <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d004      	beq.n	800561e <HAL_SPI_Init+0x12a>
 8005614:	f240 1161 	movw	r1, #353	; 0x161
 8005618:	4829      	ldr	r0, [pc, #164]	; (80056c0 <HAL_SPI_Init+0x1cc>)
 800561a:	f7fc ffb6 	bl	800258a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d14e      	bne.n	80056c4 <HAL_SPI_Init+0x1d0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d008      	beq.n	8005640 <HAL_SPI_Init+0x14c>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d004      	beq.n	8005640 <HAL_SPI_Init+0x14c>
 8005636:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800563a:	4821      	ldr	r0, [pc, #132]	; (80056c0 <HAL_SPI_Init+0x1cc>)
 800563c:	f7fc ffa5 	bl	800258a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_SPI_Init+0x166>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d004      	beq.n	800565a <HAL_SPI_Init+0x166>
 8005650:	f240 1165 	movw	r1, #357	; 0x165
 8005654:	481a      	ldr	r0, [pc, #104]	; (80056c0 <HAL_SPI_Init+0x1cc>)
 8005656:	f7fc ff98 	bl	800258a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005662:	d125      	bne.n	80056b0 <HAL_SPI_Init+0x1bc>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d056      	beq.n	800571a <HAL_SPI_Init+0x226>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d052      	beq.n	800571a <HAL_SPI_Init+0x226>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	2b10      	cmp	r3, #16
 800567a:	d04e      	beq.n	800571a <HAL_SPI_Init+0x226>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	2b18      	cmp	r3, #24
 8005682:	d04a      	beq.n	800571a <HAL_SPI_Init+0x226>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	2b20      	cmp	r3, #32
 800568a:	d046      	beq.n	800571a <HAL_SPI_Init+0x226>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	2b28      	cmp	r3, #40	; 0x28
 8005692:	d042      	beq.n	800571a <HAL_SPI_Init+0x226>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	2b30      	cmp	r3, #48	; 0x30
 800569a:	d03e      	beq.n	800571a <HAL_SPI_Init+0x226>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	2b38      	cmp	r3, #56	; 0x38
 80056a2:	d03a      	beq.n	800571a <HAL_SPI_Init+0x226>
 80056a4:	f240 1169 	movw	r1, #361	; 0x169
 80056a8:	4805      	ldr	r0, [pc, #20]	; (80056c0 <HAL_SPI_Init+0x1cc>)
 80056aa:	f7fc ff6e 	bl	800258a <assert_failed>
 80056ae:	e034      	b.n	800571a <HAL_SPI_Init+0x226>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	61da      	str	r2, [r3, #28]
 80056b6:	e030      	b.n	800571a <HAL_SPI_Init+0x226>
 80056b8:	40013000 	.word	0x40013000
 80056bc:	40003800 	.word	0x40003800
 80056c0:	0800ccfc 	.word	0x0800ccfc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d020      	beq.n	800570e <HAL_SPI_Init+0x21a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d01c      	beq.n	800570e <HAL_SPI_Init+0x21a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d018      	beq.n	800570e <HAL_SPI_Init+0x21a>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	2b18      	cmp	r3, #24
 80056e2:	d014      	beq.n	800570e <HAL_SPI_Init+0x21a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d010      	beq.n	800570e <HAL_SPI_Init+0x21a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	2b28      	cmp	r3, #40	; 0x28
 80056f2:	d00c      	beq.n	800570e <HAL_SPI_Init+0x21a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	2b30      	cmp	r3, #48	; 0x30
 80056fa:	d008      	beq.n	800570e <HAL_SPI_Init+0x21a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	2b38      	cmp	r3, #56	; 0x38
 8005702:	d004      	beq.n	800570e <HAL_SPI_Init+0x21a>
 8005704:	f240 1173 	movw	r1, #371	; 0x173
 8005708:	4838      	ldr	r0, [pc, #224]	; (80057ec <HAL_SPI_Init+0x2f8>)
 800570a:	f7fc ff3e 	bl	800258a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <HAL_SPI_Init+0x246>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fd f8c3 	bl	80028c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005750:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579e:	ea42 0103 	orr.w	r1, r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	0c1a      	lsrs	r2, r3, #16
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f002 0204 	and.w	r2, r2, #4
 80057c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	0800ccfc 	.word	0x0800ccfc

080057f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	4613      	mov	r3, r2
 80057fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_SPI_Transmit+0x30>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005814:	d004      	beq.n	8005820 <HAL_SPI_Transmit+0x30>
 8005816:	f240 3122 	movw	r1, #802	; 0x322
 800581a:	4893      	ldr	r0, [pc, #588]	; (8005a68 <HAL_SPI_Transmit+0x278>)
 800581c:	f7fc feb5 	bl	800258a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_SPI_Transmit+0x3e>
 800582a:	2302      	movs	r3, #2
 800582c:	e128      	b.n	8005a80 <HAL_SPI_Transmit+0x290>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005836:	f7fd fac3 	bl	8002dc0 <HAL_GetTick>
 800583a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	d002      	beq.n	8005852 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800584c:	2302      	movs	r3, #2
 800584e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005850:	e10d      	b.n	8005a6e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_SPI_Transmit+0x6e>
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d102      	bne.n	8005864 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005862:	e104      	b.n	8005a6e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2203      	movs	r2, #3
 8005868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	88fa      	ldrh	r2, [r7, #6]
 8005882:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058aa:	d10f      	bne.n	80058cc <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d6:	2b40      	cmp	r3, #64	; 0x40
 80058d8:	d007      	beq.n	80058ea <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f2:	d14b      	bne.n	800598c <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_SPI_Transmit+0x112>
 80058fc:	8afb      	ldrh	r3, [r7, #22]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d13e      	bne.n	8005980 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	881a      	ldrh	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	1c9a      	adds	r2, r3, #2
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005926:	e02b      	b.n	8005980 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b02      	cmp	r3, #2
 8005934:	d112      	bne.n	800595c <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	881a      	ldrh	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	1c9a      	adds	r2, r3, #2
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	86da      	strh	r2, [r3, #54]	; 0x36
 800595a:	e011      	b.n	8005980 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800595c:	f7fd fa30 	bl	8002dc0 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d803      	bhi.n	8005974 <HAL_SPI_Transmit+0x184>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d102      	bne.n	800597a <HAL_SPI_Transmit+0x18a>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d102      	bne.n	8005980 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800597e:	e076      	b.n	8005a6e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1ce      	bne.n	8005928 <HAL_SPI_Transmit+0x138>
 800598a:	e04c      	b.n	8005a26 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <HAL_SPI_Transmit+0x1aa>
 8005994:	8afb      	ldrh	r3, [r7, #22]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d140      	bne.n	8005a1c <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	330c      	adds	r3, #12
 80059a4:	7812      	ldrb	r2, [r2, #0]
 80059a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059c0:	e02c      	b.n	8005a1c <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d113      	bne.n	80059f8 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	330c      	adds	r3, #12
 80059da:	7812      	ldrb	r2, [r2, #0]
 80059dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80059f6:	e011      	b.n	8005a1c <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059f8:	f7fd f9e2 	bl	8002dc0 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d803      	bhi.n	8005a10 <HAL_SPI_Transmit+0x220>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d102      	bne.n	8005a16 <HAL_SPI_Transmit+0x226>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a1a:	e028      	b.n	8005a6e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1cd      	bne.n	80059c2 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fbc6 	bl	80061bc <SPI_EndRxTxTransaction>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10a      	bne.n	8005a5a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a44:	2300      	movs	r3, #0
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d004      	beq.n	8005a6c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	e002      	b.n	8005a6e <HAL_SPI_Transmit+0x27e>
 8005a68:	0800ccfc 	.word	0x0800ccfc
  }

error:
 8005a6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3720      	adds	r7, #32
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa4:	d112      	bne.n	8005acc <HAL_SPI_Receive+0x44>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10e      	bne.n	8005acc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f8f2 	bl	8005cac <HAL_SPI_TransmitReceive>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	e0ea      	b.n	8005ca2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_SPI_Receive+0x52>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e0e3      	b.n	8005ca2 <HAL_SPI_Receive+0x21a>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ae2:	f7fd f96d 	bl	8002dc0 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d002      	beq.n	8005afa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005af4:	2302      	movs	r3, #2
 8005af6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005af8:	e0ca      	b.n	8005c90 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <HAL_SPI_Receive+0x7e>
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d102      	bne.n	8005b0c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b0a:	e0c1      	b.n	8005c90 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2204      	movs	r2, #4
 8005b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	88fa      	ldrh	r2, [r7, #6]
 8005b24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	88fa      	ldrh	r2, [r7, #6]
 8005b2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b52:	d10f      	bne.n	8005b74 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b72:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7e:	2b40      	cmp	r3, #64	; 0x40
 8005b80:	d007      	beq.n	8005b92 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b90:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d162      	bne.n	8005c60 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b9a:	e02e      	b.n	8005bfa <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d115      	bne.n	8005bd6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f103 020c 	add.w	r2, r3, #12
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	7812      	ldrb	r2, [r2, #0]
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bd4:	e011      	b.n	8005bfa <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bd6:	f7fd f8f3 	bl	8002dc0 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d803      	bhi.n	8005bee <HAL_SPI_Receive+0x166>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d102      	bne.n	8005bf4 <HAL_SPI_Receive+0x16c>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d102      	bne.n	8005bfa <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bf8:	e04a      	b.n	8005c90 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1cb      	bne.n	8005b9c <HAL_SPI_Receive+0x114>
 8005c04:	e031      	b.n	8005c6a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d113      	bne.n	8005c3c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	b292      	uxth	r2, r2
 8005c20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	1c9a      	adds	r2, r3, #2
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c3a:	e011      	b.n	8005c60 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c3c:	f7fd f8c0 	bl	8002dc0 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d803      	bhi.n	8005c54 <HAL_SPI_Receive+0x1cc>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d102      	bne.n	8005c5a <HAL_SPI_Receive+0x1d2>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d102      	bne.n	8005c60 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c5e:	e017      	b.n	8005c90 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1cd      	bne.n	8005c06 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fa52 	bl	8006118 <SPI_EndRxTransaction>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
 8005c8c:	e000      	b.n	8005c90 <HAL_SPI_Receive+0x208>
  }

error :
 8005c8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08c      	sub	sp, #48	; 0x30
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <HAL_SPI_TransmitReceive+0x2a>
 8005ccc:	f240 419e 	movw	r1, #1182	; 0x49e
 8005cd0:	4884      	ldr	r0, [pc, #528]	; (8005ee4 <HAL_SPI_TransmitReceive+0x238>)
 8005cd2:	f7fc fc5a 	bl	800258a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_SPI_TransmitReceive+0x38>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e18d      	b.n	8006000 <HAL_SPI_TransmitReceive+0x354>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cec:	f7fd f868 	bl	8002dc0 <HAL_GetTick>
 8005cf0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d02:	887b      	ldrh	r3, [r7, #2]
 8005d04:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d00f      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x82>
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d14:	d107      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x7a>
 8005d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d003      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8005d26:	2302      	movs	r3, #2
 8005d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d2c:	e15e      	b.n	8005fec <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <HAL_SPI_TransmitReceive+0x94>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <HAL_SPI_TransmitReceive+0x94>
 8005d3a:	887b      	ldrh	r3, [r7, #2]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d46:	e151      	b.n	8005fec <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d003      	beq.n	8005d5c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2205      	movs	r2, #5
 8005d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	887a      	ldrh	r2, [r7, #2]
 8005d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	887a      	ldrh	r2, [r7, #2]
 8005d72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	887a      	ldrh	r2, [r7, #2]
 8005d7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	887a      	ldrh	r2, [r7, #2]
 8005d84:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b40      	cmp	r3, #64	; 0x40
 8005d9e:	d007      	beq.n	8005db0 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db8:	d178      	bne.n	8005eac <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x11c>
 8005dc2:	8b7b      	ldrh	r3, [r7, #26]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d166      	bne.n	8005e96 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dcc:	881a      	ldrh	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	1c9a      	adds	r2, r3, #2
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dec:	e053      	b.n	8005e96 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d11b      	bne.n	8005e34 <HAL_SPI_TransmitReceive+0x188>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d016      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0x188>
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d113      	bne.n	8005e34 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	881a      	ldrh	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	1c9a      	adds	r2, r3, #2
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d119      	bne.n	8005e76 <HAL_SPI_TransmitReceive+0x1ca>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d014      	beq.n	8005e76 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	b292      	uxth	r2, r2
 8005e58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	1c9a      	adds	r2, r3, #2
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e72:	2301      	movs	r3, #1
 8005e74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e76:	f7fc ffa3 	bl	8002dc0 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d807      	bhi.n	8005e96 <HAL_SPI_TransmitReceive+0x1ea>
 8005e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8c:	d003      	beq.n	8005e96 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005e94:	e0aa      	b.n	8005fec <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1a6      	bne.n	8005dee <HAL_SPI_TransmitReceive+0x142>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1a1      	bne.n	8005dee <HAL_SPI_TransmitReceive+0x142>
 8005eaa:	e07f      	b.n	8005fac <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <HAL_SPI_TransmitReceive+0x20e>
 8005eb4:	8b7b      	ldrh	r3, [r7, #26]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d16e      	bne.n	8005f98 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	330c      	adds	r3, #12
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ee0:	e05a      	b.n	8005f98 <HAL_SPI_TransmitReceive+0x2ec>
 8005ee2:	bf00      	nop
 8005ee4:	0800ccfc 	.word	0x0800ccfc
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d11c      	bne.n	8005f30 <HAL_SPI_TransmitReceive+0x284>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d017      	beq.n	8005f30 <HAL_SPI_TransmitReceive+0x284>
 8005f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d114      	bne.n	8005f30 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	330c      	adds	r3, #12
 8005f10:	7812      	ldrb	r2, [r2, #0]
 8005f12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d119      	bne.n	8005f72 <HAL_SPI_TransmitReceive+0x2c6>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d014      	beq.n	8005f72 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f72:	f7fc ff25 	bl	8002dc0 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d803      	bhi.n	8005f8a <HAL_SPI_TransmitReceive+0x2de>
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d102      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x2e4>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005f96:	e029      	b.n	8005fec <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1a2      	bne.n	8005ee8 <HAL_SPI_TransmitReceive+0x23c>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d19d      	bne.n	8005ee8 <HAL_SPI_TransmitReceive+0x23c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f903 	bl	80061bc <SPI_EndRxTxTransaction>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d006      	beq.n	8005fca <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005fc8:	e010      	b.n	8005fec <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	e000      	b.n	8005fec <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8005fea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ffc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006000:	4618      	mov	r0, r3
 8006002:	3730      	adds	r7, #48	; 0x30
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	603b      	str	r3, [r7, #0]
 8006014:	4613      	mov	r3, r2
 8006016:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006018:	f7fc fed2 	bl	8002dc0 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	1a9b      	subs	r3, r3, r2
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	4413      	add	r3, r2
 8006026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006028:	f7fc feca 	bl	8002dc0 <HAL_GetTick>
 800602c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800602e:	4b39      	ldr	r3, [pc, #228]	; (8006114 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	015b      	lsls	r3, r3, #5
 8006034:	0d1b      	lsrs	r3, r3, #20
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	fb02 f303 	mul.w	r3, r2, r3
 800603c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800603e:	e054      	b.n	80060ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	d050      	beq.n	80060ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006048:	f7fc feba 	bl	8002dc0 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	429a      	cmp	r2, r3
 8006056:	d902      	bls.n	800605e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d13d      	bne.n	80060da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800606c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006076:	d111      	bne.n	800609c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006080:	d004      	beq.n	800608c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608a:	d107      	bne.n	800609c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a4:	d10f      	bne.n	80060c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e017      	b.n	800610a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4013      	ands	r3, r2
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	bf0c      	ite	eq
 80060fa:	2301      	moveq	r3, #1
 80060fc:	2300      	movne	r3, #0
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	429a      	cmp	r2, r3
 8006106:	d19b      	bne.n	8006040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000020 	.word	0x20000020

08006118 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af02      	add	r7, sp, #8
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800612c:	d111      	bne.n	8006152 <SPI_EndRxTransaction+0x3a>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006136:	d004      	beq.n	8006142 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006140:	d107      	bne.n	8006152 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006150:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800615a:	d117      	bne.n	800618c <SPI_EndRxTransaction+0x74>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006164:	d112      	bne.n	800618c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2200      	movs	r2, #0
 800616e:	2101      	movs	r1, #1
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f7ff ff49 	bl	8006008 <SPI_WaitFlagStateUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01a      	beq.n	80061b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006180:	f043 0220 	orr.w	r2, r3, #32
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e013      	b.n	80061b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2200      	movs	r2, #0
 8006194:	2180      	movs	r1, #128	; 0x80
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f7ff ff36 	bl	8006008 <SPI_WaitFlagStateUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d007      	beq.n	80061b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e000      	b.n	80061b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2200      	movs	r2, #0
 80061d0:	2180      	movs	r1, #128	; 0x80
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7ff ff18 	bl	8006008 <SPI_WaitFlagStateUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e2:	f043 0220 	orr.w	r2, r3, #32
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e000      	b.n	80061f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e093      	b.n	8006332 <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a4b      	ldr	r2, [pc, #300]	; (800633c <HAL_TIM_Base_Init+0x144>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_TIM_Base_Init+0x44>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621c:	d00e      	beq.n	800623c <HAL_TIM_Base_Init+0x44>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a47      	ldr	r2, [pc, #284]	; (8006340 <HAL_TIM_Base_Init+0x148>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_TIM_Base_Init+0x44>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a45      	ldr	r2, [pc, #276]	; (8006344 <HAL_TIM_Base_Init+0x14c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_TIM_Base_Init+0x44>
 8006232:	f240 1113 	movw	r1, #275	; 0x113
 8006236:	4844      	ldr	r0, [pc, #272]	; (8006348 <HAL_TIM_Base_Init+0x150>)
 8006238:	f7fc f9a7 	bl	800258a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d014      	beq.n	800626e <HAL_TIM_Base_Init+0x76>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2b10      	cmp	r3, #16
 800624a:	d010      	beq.n	800626e <HAL_TIM_Base_Init+0x76>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b20      	cmp	r3, #32
 8006252:	d00c      	beq.n	800626e <HAL_TIM_Base_Init+0x76>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2b40      	cmp	r3, #64	; 0x40
 800625a:	d008      	beq.n	800626e <HAL_TIM_Base_Init+0x76>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b60      	cmp	r3, #96	; 0x60
 8006262:	d004      	beq.n	800626e <HAL_TIM_Base_Init+0x76>
 8006264:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006268:	4837      	ldr	r0, [pc, #220]	; (8006348 <HAL_TIM_Base_Init+0x150>)
 800626a:	f7fc f98e 	bl	800258a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00e      	beq.n	8006294 <HAL_TIM_Base_Init+0x9c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800627e:	d009      	beq.n	8006294 <HAL_TIM_Base_Init+0x9c>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006288:	d004      	beq.n	8006294 <HAL_TIM_Base_Init+0x9c>
 800628a:	f240 1115 	movw	r1, #277	; 0x115
 800628e:	482e      	ldr	r0, [pc, #184]	; (8006348 <HAL_TIM_Base_Init+0x150>)
 8006290:	f7fc f97b 	bl	800258a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <HAL_TIM_Base_Init+0xb6>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	2b80      	cmp	r3, #128	; 0x80
 80062a2:	d004      	beq.n	80062ae <HAL_TIM_Base_Init+0xb6>
 80062a4:	f44f 718b 	mov.w	r1, #278	; 0x116
 80062a8:	4827      	ldr	r0, [pc, #156]	; (8006348 <HAL_TIM_Base_Init+0x150>)
 80062aa:	f7fc f96e 	bl	800258a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f842 	bl	800634c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3304      	adds	r3, #4
 80062d8:	4619      	mov	r1, r3
 80062da:	4610      	mov	r0, r2
 80062dc:	f000 f9d8 	bl	8006690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	40012c00 	.word	0x40012c00
 8006340:	40000400 	.word	0x40000400
 8006344:	40000800 	.word	0x40000800
 8006348:	0800cd34 	.word	0x0800cd34

0800634c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr
	...

08006360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a2e      	ldr	r2, [pc, #184]	; (8006428 <HAL_TIM_Base_Start_IT+0xc8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <HAL_TIM_Base_Start_IT+0x3a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637a:	d00e      	beq.n	800639a <HAL_TIM_Base_Start_IT+0x3a>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a2a      	ldr	r2, [pc, #168]	; (800642c <HAL_TIM_Base_Start_IT+0xcc>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d009      	beq.n	800639a <HAL_TIM_Base_Start_IT+0x3a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a29      	ldr	r2, [pc, #164]	; (8006430 <HAL_TIM_Base_Start_IT+0xd0>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_TIM_Base_Start_IT+0x3a>
 8006390:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006394:	4827      	ldr	r0, [pc, #156]	; (8006434 <HAL_TIM_Base_Start_IT+0xd4>)
 8006396:	f7fc f8f8 	bl	800258a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d001      	beq.n	80063aa <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e03a      	b.n	8006420 <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2202      	movs	r2, #2
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0201 	orr.w	r2, r2, #1
 80063c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a18      	ldr	r2, [pc, #96]	; (8006428 <HAL_TIM_Base_Start_IT+0xc8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00e      	beq.n	80063ea <HAL_TIM_Base_Start_IT+0x8a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d4:	d009      	beq.n	80063ea <HAL_TIM_Base_Start_IT+0x8a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a14      	ldr	r2, [pc, #80]	; (800642c <HAL_TIM_Base_Start_IT+0xcc>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d004      	beq.n	80063ea <HAL_TIM_Base_Start_IT+0x8a>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a12      	ldr	r2, [pc, #72]	; (8006430 <HAL_TIM_Base_Start_IT+0xd0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d111      	bne.n	800640e <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b06      	cmp	r3, #6
 80063fa:	d010      	beq.n	800641e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0201 	orr.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640c:	e007      	b.n	800641e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0201 	orr.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40012c00 	.word	0x40012c00
 800642c:	40000400 	.word	0x40000400
 8006430:	40000800 	.word	0x40000800
 8006434:	0800cd34 	.word	0x0800cd34

08006438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b02      	cmp	r3, #2
 800644c:	d122      	bne.n	8006494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b02      	cmp	r3, #2
 800645a:	d11b      	bne.n	8006494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f06f 0202 	mvn.w	r2, #2
 8006464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f8ed 	bl	800665a <HAL_TIM_IC_CaptureCallback>
 8006480:	e005      	b.n	800648e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f8e0 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f8ef 	bl	800666c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d122      	bne.n	80064e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d11b      	bne.n	80064e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0204 	mvn.w	r2, #4
 80064b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2202      	movs	r2, #2
 80064be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f8c3 	bl	800665a <HAL_TIM_IC_CaptureCallback>
 80064d4:	e005      	b.n	80064e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f8b6 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f8c5 	bl	800666c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b08      	cmp	r3, #8
 80064f4:	d122      	bne.n	800653c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b08      	cmp	r3, #8
 8006502:	d11b      	bne.n	800653c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0208 	mvn.w	r2, #8
 800650c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2204      	movs	r2, #4
 8006512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f899 	bl	800665a <HAL_TIM_IC_CaptureCallback>
 8006528:	e005      	b.n	8006536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f88c 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f89b 	bl	800666c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0310 	and.w	r3, r3, #16
 8006546:	2b10      	cmp	r3, #16
 8006548:	d122      	bne.n	8006590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b10      	cmp	r3, #16
 8006556:	d11b      	bne.n	8006590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0210 	mvn.w	r2, #16
 8006560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2208      	movs	r2, #8
 8006566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f86f 	bl	800665a <HAL_TIM_IC_CaptureCallback>
 800657c:	e005      	b.n	800658a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f862 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f871 	bl	800666c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b01      	cmp	r3, #1
 800659c:	d10e      	bne.n	80065bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d107      	bne.n	80065bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0201 	mvn.w	r2, #1
 80065b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fb ffd0 	bl	800255c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c6:	2b80      	cmp	r3, #128	; 0x80
 80065c8:	d10e      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d4:	2b80      	cmp	r3, #128	; 0x80
 80065d6:	d107      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f8bf 	bl	8006766 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f2:	2b40      	cmp	r3, #64	; 0x40
 80065f4:	d10e      	bne.n	8006614 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006600:	2b40      	cmp	r3, #64	; 0x40
 8006602:	d107      	bne.n	8006614 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800660c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f835 	bl	800667e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b20      	cmp	r3, #32
 8006620:	d10e      	bne.n	8006640 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b20      	cmp	r3, #32
 800662e:	d107      	bne.n	8006640 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0220 	mvn.w	r2, #32
 8006638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f88a 	bl	8006754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr

0800665a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr

0800666c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	bc80      	pop	{r7}
 800667c:	4770      	bx	lr

0800667e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr

08006690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a29      	ldr	r2, [pc, #164]	; (8006748 <TIM_Base_SetConfig+0xb8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00b      	beq.n	80066c0 <TIM_Base_SetConfig+0x30>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ae:	d007      	beq.n	80066c0 <TIM_Base_SetConfig+0x30>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a26      	ldr	r2, [pc, #152]	; (800674c <TIM_Base_SetConfig+0xbc>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_Base_SetConfig+0x30>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a25      	ldr	r2, [pc, #148]	; (8006750 <TIM_Base_SetConfig+0xc0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d108      	bne.n	80066d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <TIM_Base_SetConfig+0xb8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00b      	beq.n	80066f2 <TIM_Base_SetConfig+0x62>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e0:	d007      	beq.n	80066f2 <TIM_Base_SetConfig+0x62>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a19      	ldr	r2, [pc, #100]	; (800674c <TIM_Base_SetConfig+0xbc>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d003      	beq.n	80066f2 <TIM_Base_SetConfig+0x62>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a18      	ldr	r2, [pc, #96]	; (8006750 <TIM_Base_SetConfig+0xc0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d108      	bne.n	8006704 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a07      	ldr	r2, [pc, #28]	; (8006748 <TIM_Base_SetConfig+0xb8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d103      	bne.n	8006738 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	615a      	str	r2, [r3, #20]
}
 800673e:	bf00      	nop
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr
 8006748:	40012c00 	.word	0x40012c00
 800674c:	40000400 	.word	0x40000400
 8006750:	40000800 	.word	0x40000800

08006754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr

08006766 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr

08006778 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e092      	b.n	80068b0 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d02c      	beq.n	80067ec <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a48      	ldr	r2, [pc, #288]	; (80068b8 <HAL_UART_Init+0x140>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00e      	beq.n	80067ba <HAL_UART_Init+0x42>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a46      	ldr	r2, [pc, #280]	; (80068bc <HAL_UART_Init+0x144>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d009      	beq.n	80067ba <HAL_UART_Init+0x42>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a45      	ldr	r2, [pc, #276]	; (80068c0 <HAL_UART_Init+0x148>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d004      	beq.n	80067ba <HAL_UART_Init+0x42>
 80067b0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80067b4:	4843      	ldr	r0, [pc, #268]	; (80068c4 <HAL_UART_Init+0x14c>)
 80067b6:	f7fb fee8 	bl	800258a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d028      	beq.n	8006814 <HAL_UART_Init+0x9c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ca:	d023      	beq.n	8006814 <HAL_UART_Init+0x9c>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d4:	d01e      	beq.n	8006814 <HAL_UART_Init+0x9c>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067de:	d019      	beq.n	8006814 <HAL_UART_Init+0x9c>
 80067e0:	f240 1147 	movw	r1, #327	; 0x147
 80067e4:	4837      	ldr	r0, [pc, #220]	; (80068c4 <HAL_UART_Init+0x14c>)
 80067e6:	f7fb fed0 	bl	800258a <assert_failed>
 80067ea:	e013      	b.n	8006814 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a31      	ldr	r2, [pc, #196]	; (80068b8 <HAL_UART_Init+0x140>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00e      	beq.n	8006814 <HAL_UART_Init+0x9c>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a30      	ldr	r2, [pc, #192]	; (80068bc <HAL_UART_Init+0x144>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d009      	beq.n	8006814 <HAL_UART_Init+0x9c>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a2e      	ldr	r2, [pc, #184]	; (80068c0 <HAL_UART_Init+0x148>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_UART_Init+0x9c>
 800680a:	f240 114b 	movw	r1, #331	; 0x14b
 800680e:	482d      	ldr	r0, [pc, #180]	; (80068c4 <HAL_UART_Init+0x14c>)
 8006810:	f7fb febb 	bl	800258a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d009      	beq.n	8006830 <HAL_UART_Init+0xb8>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006824:	d004      	beq.n	8006830 <HAL_UART_Init+0xb8>
 8006826:	f240 114d 	movw	r1, #333	; 0x14d
 800682a:	4826      	ldr	r0, [pc, #152]	; (80068c4 <HAL_UART_Init+0x14c>)
 800682c:	f7fb fead 	bl	800258a <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fc fa21 	bl	8002c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2224      	movs	r2, #36	; 0x24
 800684e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006860:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f9ac 	bl	8006bc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006876:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695a      	ldr	r2, [r3, #20]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006886:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68da      	ldr	r2, [r3, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006896:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40013800 	.word	0x40013800
 80068bc:	40004400 	.word	0x40004400
 80068c0:	40004800 	.word	0x40004800
 80068c4:	0800cd6c 	.word	0x0800cd6c

080068c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	; 0x28
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	d17c      	bne.n	80069e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <HAL_UART_Transmit+0x2c>
 80068ee:	88fb      	ldrh	r3, [r7, #6]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e075      	b.n	80069e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_UART_Transmit+0x3e>
 8006902:	2302      	movs	r3, #2
 8006904:	e06e      	b.n	80069e4 <HAL_UART_Transmit+0x11c>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2221      	movs	r2, #33	; 0x21
 8006918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800691c:	f7fc fa50 	bl	8002dc0 <HAL_GetTick>
 8006920:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	88fa      	ldrh	r2, [r7, #6]
 8006926:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006936:	d108      	bne.n	800694a <HAL_UART_Transmit+0x82>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006940:	2300      	movs	r3, #0
 8006942:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	e003      	b.n	8006952 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800694e:	2300      	movs	r3, #0
 8006950:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800695a:	e02a      	b.n	80069b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2200      	movs	r2, #0
 8006964:	2180      	movs	r1, #128	; 0x80
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f8df 	bl	8006b2a <UART_WaitOnFlagUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e036      	b.n	80069e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10b      	bne.n	8006994 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800698a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	3302      	adds	r3, #2
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	e007      	b.n	80069a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	781a      	ldrb	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	3301      	adds	r3, #1
 80069a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1cf      	bne.n	800695c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2200      	movs	r2, #0
 80069c4:	2140      	movs	r1, #64	; 0x40
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f8af 	bl	8006b2a <UART_WaitOnFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e006      	b.n	80069e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2220      	movs	r2, #32
 80069da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	e000      	b.n	80069e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069e2:	2302      	movs	r3, #2
  }
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3720      	adds	r7, #32
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08a      	sub	sp, #40	; 0x28
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	f040 8089 	bne.w	8006b20 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <HAL_UART_Receive+0x2e>
 8006a14:	88fb      	ldrh	r3, [r7, #6]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e081      	b.n	8006b22 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_UART_Receive+0x40>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e07a      	b.n	8006b22 <HAL_UART_Receive+0x136>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2222      	movs	r2, #34	; 0x22
 8006a3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006a42:	f7fc f9bd 	bl	8002dc0 <HAL_GetTick>
 8006a46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	88fa      	ldrh	r2, [r7, #6]
 8006a4c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	88fa      	ldrh	r2, [r7, #6]
 8006a52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5c:	d108      	bne.n	8006a70 <HAL_UART_Receive+0x84>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	e003      	b.n	8006a78 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a74:	2300      	movs	r3, #0
 8006a76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006a80:	e043      	b.n	8006b0a <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2120      	movs	r1, #32
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f84c 	bl	8006b2a <UART_WaitOnFlagUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e042      	b.n	8006b22 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10c      	bne.n	8006abc <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	e01f      	b.n	8006afc <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac4:	d007      	beq.n	8006ad6 <HAL_UART_Receive+0xea>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <HAL_UART_Receive+0xf8>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	e008      	b.n	8006af6 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	3301      	adds	r3, #1
 8006afa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1b6      	bne.n	8006a82 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e000      	b.n	8006b22 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006b20:	2302      	movs	r3, #2
  }
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3720      	adds	r7, #32
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	4613      	mov	r3, r2
 8006b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b3a:	e02c      	b.n	8006b96 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	d028      	beq.n	8006b96 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b4a:	f7fc f939 	bl	8002dc0 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d21d      	bcs.n	8006b96 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b68:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	695a      	ldr	r2, [r3, #20]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0201 	bic.w	r2, r2, #1
 8006b78:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e00f      	b.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	bf0c      	ite	eq
 8006ba6:	2301      	moveq	r3, #1
 8006ba8:	2300      	movne	r3, #0
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d0c3      	beq.n	8006b3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	4a5f      	ldr	r2, [pc, #380]	; (8006d4c <UART_SetConfig+0x18c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d904      	bls.n	8006bdc <UART_SetConfig+0x1c>
 8006bd2:	f640 31f6 	movw	r1, #3062	; 0xbf6
 8006bd6:	485e      	ldr	r0, [pc, #376]	; (8006d50 <UART_SetConfig+0x190>)
 8006bd8:	f7fb fcd7 	bl	800258a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d009      	beq.n	8006bf8 <UART_SetConfig+0x38>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bec:	d004      	beq.n	8006bf8 <UART_SetConfig+0x38>
 8006bee:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8006bf2:	4857      	ldr	r0, [pc, #348]	; (8006d50 <UART_SetConfig+0x190>)
 8006bf4:	f7fb fcc9 	bl	800258a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00e      	beq.n	8006c1e <UART_SetConfig+0x5e>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c08:	d009      	beq.n	8006c1e <UART_SetConfig+0x5e>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c12:	d004      	beq.n	8006c1e <UART_SetConfig+0x5e>
 8006c14:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8006c18:	484d      	ldr	r0, [pc, #308]	; (8006d50 <UART_SetConfig+0x190>)
 8006c1a:	f7fb fcb6 	bl	800258a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695a      	ldr	r2, [r3, #20]
 8006c22:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8006c26:	4013      	ands	r3, r2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d103      	bne.n	8006c34 <UART_SetConfig+0x74>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <UART_SetConfig+0x7e>
 8006c34:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8006c38:	4845      	ldr	r0, [pc, #276]	; (8006d50 <UART_SetConfig+0x190>)
 8006c3a:	f7fb fca6 	bl	800258a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c70:	f023 030c 	bic.w	r3, r3, #12
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6812      	ldr	r2, [r2, #0]
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	699a      	ldr	r2, [r3, #24]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a2e      	ldr	r2, [pc, #184]	; (8006d54 <UART_SetConfig+0x194>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d103      	bne.n	8006ca6 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c9e:	f7fe faab 	bl	80051f8 <HAL_RCC_GetPCLK2Freq>
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	e002      	b.n	8006cac <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ca6:	f7fe fa93 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 8006caa:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009a      	lsls	r2, r3, #2
 8006cb6:	441a      	add	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc2:	4a25      	ldr	r2, [pc, #148]	; (8006d58 <UART_SetConfig+0x198>)
 8006cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	0119      	lsls	r1, r3, #4
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009a      	lsls	r2, r3, #2
 8006cd6:	441a      	add	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ce2:	4b1d      	ldr	r3, [pc, #116]	; (8006d58 <UART_SetConfig+0x198>)
 8006ce4:	fba3 0302 	umull	r0, r3, r3, r2
 8006ce8:	095b      	lsrs	r3, r3, #5
 8006cea:	2064      	movs	r0, #100	; 0x64
 8006cec:	fb00 f303 	mul.w	r3, r0, r3
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	3332      	adds	r3, #50	; 0x32
 8006cf6:	4a18      	ldr	r2, [pc, #96]	; (8006d58 <UART_SetConfig+0x198>)
 8006cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfc:	095b      	lsrs	r3, r3, #5
 8006cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d02:	4419      	add	r1, r3
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	009a      	lsls	r2, r3, #2
 8006d0e:	441a      	add	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d1a:	4b0f      	ldr	r3, [pc, #60]	; (8006d58 <UART_SetConfig+0x198>)
 8006d1c:	fba3 0302 	umull	r0, r3, r3, r2
 8006d20:	095b      	lsrs	r3, r3, #5
 8006d22:	2064      	movs	r0, #100	; 0x64
 8006d24:	fb00 f303 	mul.w	r3, r0, r3
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	3332      	adds	r3, #50	; 0x32
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <UART_SetConfig+0x198>)
 8006d30:	fba2 2303 	umull	r2, r3, r2, r3
 8006d34:	095b      	lsrs	r3, r3, #5
 8006d36:	f003 020f 	and.w	r2, r3, #15
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	440a      	add	r2, r1
 8006d40:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	0044aa20 	.word	0x0044aa20
 8006d50:	0800cd6c 	.word	0x0800cd6c
 8006d54:	40013800 	.word	0x40013800
 8006d58:	51eb851f 	.word	0x51eb851f

08006d5c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d62:	f3ef 8305 	mrs	r3, IPSR
 8006d66:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10f      	bne.n	8006d8e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d72:	607b      	str	r3, [r7, #4]
  return(result);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <osKernelInitialize+0x32>
 8006d7a:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <osKernelInitialize+0x60>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d109      	bne.n	8006d96 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d82:	f3ef 8311 	mrs	r3, BASEPRI
 8006d86:	603b      	str	r3, [r7, #0]
  return(result);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006d8e:	f06f 0305 	mvn.w	r3, #5
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e00c      	b.n	8006db0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d96:	4b09      	ldr	r3, [pc, #36]	; (8006dbc <osKernelInitialize+0x60>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d105      	bne.n	8006daa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006d9e:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <osKernelInitialize+0x60>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	e002      	b.n	8006db0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006daa:	f04f 33ff 	mov.w	r3, #4294967295
 8006dae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006db0:	68fb      	ldr	r3, [r7, #12]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr
 8006dbc:	200000c8 	.word	0x200000c8

08006dc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dc6:	f3ef 8305 	mrs	r3, IPSR
 8006dca:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10f      	bne.n	8006df2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006dd6:	607b      	str	r3, [r7, #4]
  return(result);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d109      	bne.n	8006df2 <osKernelStart+0x32>
 8006dde:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <osKernelStart+0x64>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d109      	bne.n	8006dfa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006de6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dea:	603b      	str	r3, [r7, #0]
  return(result);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <osKernelStart+0x3a>
    stat = osErrorISR;
 8006df2:	f06f 0305 	mvn.w	r3, #5
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	e00e      	b.n	8006e18 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006dfa:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <osKernelStart+0x64>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d107      	bne.n	8006e12 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006e02:	4b08      	ldr	r3, [pc, #32]	; (8006e24 <osKernelStart+0x64>)
 8006e04:	2202      	movs	r2, #2
 8006e06:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006e08:	f002 f824 	bl	8008e54 <vTaskStartScheduler>
      stat = osOK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	e002      	b.n	8006e18 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006e12:	f04f 33ff 	mov.w	r3, #4294967295
 8006e16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006e18:	68fb      	ldr	r3, [r7, #12]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	200000c8 	.word	0x200000c8

08006e28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b092      	sub	sp, #72	; 0x48
 8006e2c:	af04      	add	r7, sp, #16
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e38:	f3ef 8305 	mrs	r3, IPSR
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f040 8094 	bne.w	8006f6e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e46:	f3ef 8310 	mrs	r3, PRIMASK
 8006e4a:	623b      	str	r3, [r7, #32]
  return(result);
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f040 808d 	bne.w	8006f6e <osThreadNew+0x146>
 8006e54:	4b48      	ldr	r3, [pc, #288]	; (8006f78 <osThreadNew+0x150>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d106      	bne.n	8006e6a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e60:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f040 8082 	bne.w	8006f6e <osThreadNew+0x146>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d07e      	beq.n	8006f6e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006e70:	2340      	movs	r3, #64	; 0x40
 8006e72:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006e74:	2318      	movs	r3, #24
 8006e76:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006e78:	2300      	movs	r3, #0
 8006e7a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006e7c:	f107 031b 	add.w	r3, r7, #27
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006e82:	f04f 33ff 	mov.w	r3, #4294967295
 8006e86:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d045      	beq.n	8006f1a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <osThreadNew+0x74>
        name = attr->name;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d008      	beq.n	8006ec2 <osThreadNew+0x9a>
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb2:	2b38      	cmp	r3, #56	; 0x38
 8006eb4:	d805      	bhi.n	8006ec2 <osThreadNew+0x9a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <osThreadNew+0x9e>
        return (NULL);
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e054      	b.n	8006f70 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	089b      	lsrs	r3, r3, #2
 8006ed4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00e      	beq.n	8006efc <osThreadNew+0xd4>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	2b6f      	cmp	r3, #111	; 0x6f
 8006ee4:	d90a      	bls.n	8006efc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d006      	beq.n	8006efc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <osThreadNew+0xd4>
        mem = 1;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006efa:	e010      	b.n	8006f1e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10c      	bne.n	8006f1e <osThreadNew+0xf6>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d108      	bne.n	8006f1e <osThreadNew+0xf6>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <osThreadNew+0xf6>
          mem = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f18:	e001      	b.n	8006f1e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d110      	bne.n	8006f46 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f2c:	9202      	str	r2, [sp, #8]
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f001 fdba 	bl	8008ab4 <xTaskCreateStatic>
 8006f40:	4603      	mov	r3, r0
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	e013      	b.n	8006f6e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d110      	bne.n	8006f6e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	f107 0314 	add.w	r3, r7, #20
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f001 fe04 	bl	8008b6c <xTaskCreate>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d001      	beq.n	8006f6e <osThreadNew+0x146>
          hTask = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f6e:	697b      	ldr	r3, [r7, #20]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3738      	adds	r7, #56	; 0x38
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	200000c8 	.word	0x200000c8

08006f7c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f84:	f3ef 8305 	mrs	r3, IPSR
 8006f88:	613b      	str	r3, [r7, #16]
  return(result);
 8006f8a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10f      	bne.n	8006fb0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f90:	f3ef 8310 	mrs	r3, PRIMASK
 8006f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d109      	bne.n	8006fb0 <osDelay+0x34>
 8006f9c:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <osDelay+0x58>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d109      	bne.n	8006fb8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <osDelay+0x3c>
    stat = osErrorISR;
 8006fb0:	f06f 0305 	mvn.w	r3, #5
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	e007      	b.n	8006fc8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f001 ff12 	bl	8008dec <vTaskDelay>
    }
  }

  return (stat);
 8006fc8:	697b      	ldr	r3, [r7, #20]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	200000c8 	.word	0x200000c8

08006fd8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	; 0x28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fe4:	f3ef 8305 	mrs	r3, IPSR
 8006fe8:	613b      	str	r3, [r7, #16]
  return(result);
 8006fea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f040 8085 	bne.w	80070fc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d17e      	bne.n	80070fc <osMutexNew+0x124>
 8006ffe:	4b42      	ldr	r3, [pc, #264]	; (8007108 <osMutexNew+0x130>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b02      	cmp	r3, #2
 8007004:	d105      	bne.n	8007012 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007006:	f3ef 8311 	mrs	r3, BASEPRI
 800700a:	60bb      	str	r3, [r7, #8]
  return(result);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d174      	bne.n	80070fc <osMutexNew+0x124>
    if (attr != NULL) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	623b      	str	r3, [r7, #32]
 800701e:	e001      	b.n	8007024 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <osMutexNew+0x5c>
      rmtx = 1U;
 800702e:	2301      	movs	r3, #1
 8007030:	61fb      	str	r3, [r7, #28]
 8007032:	e001      	b.n	8007038 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	f003 0308 	and.w	r3, r3, #8
 800703e:	2b00      	cmp	r3, #0
 8007040:	d15c      	bne.n	80070fc <osMutexNew+0x124>
      mem = -1;
 8007042:	f04f 33ff 	mov.w	r3, #4294967295
 8007046:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d015      	beq.n	800707a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d006      	beq.n	8007064 <osMutexNew+0x8c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	2b4f      	cmp	r3, #79	; 0x4f
 800705c:	d902      	bls.n	8007064 <osMutexNew+0x8c>
          mem = 1;
 800705e:	2301      	movs	r3, #1
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	e00c      	b.n	800707e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d108      	bne.n	800707e <osMutexNew+0xa6>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d104      	bne.n	800707e <osMutexNew+0xa6>
            mem = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	e001      	b.n	800707e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800707a:	2300      	movs	r3, #0
 800707c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d112      	bne.n	80070aa <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d007      	beq.n	800709a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	4619      	mov	r1, r3
 8007090:	2004      	movs	r0, #4
 8007092:	f000 fdcd 	bl	8007c30 <xQueueCreateMutexStatic>
 8007096:	6278      	str	r0, [r7, #36]	; 0x24
 8007098:	e016      	b.n	80070c8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	4619      	mov	r1, r3
 80070a0:	2001      	movs	r0, #1
 80070a2:	f000 fdc5 	bl	8007c30 <xQueueCreateMutexStatic>
 80070a6:	6278      	str	r0, [r7, #36]	; 0x24
 80070a8:	e00e      	b.n	80070c8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10b      	bne.n	80070c8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d004      	beq.n	80070c0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80070b6:	2004      	movs	r0, #4
 80070b8:	f000 fda2 	bl	8007c00 <xQueueCreateMutex>
 80070bc:	6278      	str	r0, [r7, #36]	; 0x24
 80070be:	e003      	b.n	80070c8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80070c0:	2001      	movs	r0, #1
 80070c2:	f000 fd9d 	bl	8007c00 <xQueueCreateMutex>
 80070c6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00c      	beq.n	80070e8 <osMutexNew+0x110>
        if (attr != NULL) {
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <osMutexNew+0x104>
          name = attr->name;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	e001      	b.n	80070e0 <osMutexNew+0x108>
        } else {
          name = NULL;
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80070e0:	6979      	ldr	r1, [r7, #20]
 80070e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070e4:	f001 fc60 	bl	80089a8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d006      	beq.n	80070fc <osMutexNew+0x124>
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3728      	adds	r7, #40	; 0x28
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	200000c8 	.word	0x200000c8

0800710c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800710c:	b580      	push	{r7, lr}
 800710e:	b08c      	sub	sp, #48	; 0x30
 8007110:	af02      	add	r7, sp, #8
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007118:	2300      	movs	r3, #0
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800711c:	f3ef 8305 	mrs	r3, IPSR
 8007120:	61bb      	str	r3, [r7, #24]
  return(result);
 8007122:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007124:	2b00      	cmp	r3, #0
 8007126:	f040 8086 	bne.w	8007236 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800712a:	f3ef 8310 	mrs	r3, PRIMASK
 800712e:	617b      	str	r3, [r7, #20]
  return(result);
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d17f      	bne.n	8007236 <osSemaphoreNew+0x12a>
 8007136:	4b42      	ldr	r3, [pc, #264]	; (8007240 <osSemaphoreNew+0x134>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d105      	bne.n	800714a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800713e:	f3ef 8311 	mrs	r3, BASEPRI
 8007142:	613b      	str	r3, [r7, #16]
  return(result);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d175      	bne.n	8007236 <osSemaphoreNew+0x12a>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d072      	beq.n	8007236 <osSemaphoreNew+0x12a>
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	429a      	cmp	r2, r3
 8007156:	d86e      	bhi.n	8007236 <osSemaphoreNew+0x12a>
    mem = -1;
 8007158:	f04f 33ff 	mov.w	r3, #4294967295
 800715c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d015      	beq.n	8007190 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d006      	beq.n	800717a <osSemaphoreNew+0x6e>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	2b4f      	cmp	r3, #79	; 0x4f
 8007172:	d902      	bls.n	800717a <osSemaphoreNew+0x6e>
        mem = 1;
 8007174:	2301      	movs	r3, #1
 8007176:	623b      	str	r3, [r7, #32]
 8007178:	e00c      	b.n	8007194 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d108      	bne.n	8007194 <osSemaphoreNew+0x88>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <osSemaphoreNew+0x88>
          mem = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	623b      	str	r3, [r7, #32]
 800718e:	e001      	b.n	8007194 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	d04c      	beq.n	8007236 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d128      	bne.n	80071f4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d10a      	bne.n	80071be <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	2203      	movs	r2, #3
 80071ae:	9200      	str	r2, [sp, #0]
 80071b0:	2200      	movs	r2, #0
 80071b2:	2100      	movs	r1, #0
 80071b4:	2001      	movs	r0, #1
 80071b6:	f000 fc31 	bl	8007a1c <xQueueGenericCreateStatic>
 80071ba:	6278      	str	r0, [r7, #36]	; 0x24
 80071bc:	e005      	b.n	80071ca <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80071be:	2203      	movs	r2, #3
 80071c0:	2100      	movs	r1, #0
 80071c2:	2001      	movs	r0, #1
 80071c4:	f000 fca1 	bl	8007b0a <xQueueGenericCreate>
 80071c8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d022      	beq.n	8007216 <osSemaphoreNew+0x10a>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d01f      	beq.n	8007216 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80071d6:	2300      	movs	r3, #0
 80071d8:	2200      	movs	r2, #0
 80071da:	2100      	movs	r1, #0
 80071dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071de:	f000 fdad 	bl	8007d3c <xQueueGenericSend>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d016      	beq.n	8007216 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80071e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071ea:	f001 fa93 	bl	8008714 <vQueueDelete>
            hSemaphore = NULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
 80071f2:	e010      	b.n	8007216 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d108      	bne.n	800720c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	461a      	mov	r2, r3
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 fd2f 	bl	8007c66 <xQueueCreateCountingSemaphoreStatic>
 8007208:	6278      	str	r0, [r7, #36]	; 0x24
 800720a:	e004      	b.n	8007216 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800720c:	68b9      	ldr	r1, [r7, #8]
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 fd60 	bl	8007cd4 <xQueueCreateCountingSemaphore>
 8007214:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00c      	beq.n	8007236 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <osSemaphoreNew+0x11e>
          name = attr->name;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	e001      	b.n	800722e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800722e:	69f9      	ldr	r1, [r7, #28]
 8007230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007232:	f001 fbb9 	bl	80089a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007238:	4618      	mov	r0, r3
 800723a:	3728      	adds	r7, #40	; 0x28
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	200000c8 	.word	0x200000c8

08007244 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800725c:	f06f 0303 	mvn.w	r3, #3
 8007260:	61fb      	str	r3, [r7, #28]
 8007262:	e04b      	b.n	80072fc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007264:	f3ef 8305 	mrs	r3, IPSR
 8007268:	617b      	str	r3, [r7, #20]
  return(result);
 800726a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10f      	bne.n	8007290 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007270:	f3ef 8310 	mrs	r3, PRIMASK
 8007274:	613b      	str	r3, [r7, #16]
  return(result);
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d109      	bne.n	8007290 <osSemaphoreAcquire+0x4c>
 800727c:	4b22      	ldr	r3, [pc, #136]	; (8007308 <osSemaphoreAcquire+0xc4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d128      	bne.n	80072d6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007284:	f3ef 8311 	mrs	r3, BASEPRI
 8007288:	60fb      	str	r3, [r7, #12]
  return(result);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d022      	beq.n	80072d6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007296:	f06f 0303 	mvn.w	r3, #3
 800729a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800729c:	e02d      	b.n	80072fa <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800729e:	2300      	movs	r3, #0
 80072a0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80072a2:	f107 0308 	add.w	r3, r7, #8
 80072a6:	461a      	mov	r2, r3
 80072a8:	2100      	movs	r1, #0
 80072aa:	69b8      	ldr	r0, [r7, #24]
 80072ac:	f001 f956 	bl	800855c <xQueueReceiveFromISR>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d003      	beq.n	80072be <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80072b6:	f06f 0302 	mvn.w	r3, #2
 80072ba:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80072bc:	e01d      	b.n	80072fa <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01a      	beq.n	80072fa <osSemaphoreAcquire+0xb6>
 80072c4:	4b11      	ldr	r3, [pc, #68]	; (800730c <osSemaphoreAcquire+0xc8>)
 80072c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80072d4:	e011      	b.n	80072fa <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	69b8      	ldr	r0, [r7, #24]
 80072da:	f001 f833 	bl	8008344 <xQueueSemaphoreTake>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d00b      	beq.n	80072fc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80072ea:	f06f 0301 	mvn.w	r3, #1
 80072ee:	61fb      	str	r3, [r7, #28]
 80072f0:	e004      	b.n	80072fc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80072f2:	f06f 0302 	mvn.w	r3, #2
 80072f6:	61fb      	str	r3, [r7, #28]
 80072f8:	e000      	b.n	80072fc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80072fa:	bf00      	nop
      }
    }
  }

  return (stat);
 80072fc:	69fb      	ldr	r3, [r7, #28]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	200000c8 	.word	0x200000c8
 800730c:	e000ed04 	.word	0xe000ed04

08007310 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800731c:	2300      	movs	r3, #0
 800731e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d103      	bne.n	800732e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007326:	f06f 0303 	mvn.w	r3, #3
 800732a:	61fb      	str	r3, [r7, #28]
 800732c:	e03e      	b.n	80073ac <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800732e:	f3ef 8305 	mrs	r3, IPSR
 8007332:	617b      	str	r3, [r7, #20]
  return(result);
 8007334:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10f      	bne.n	800735a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733a:	f3ef 8310 	mrs	r3, PRIMASK
 800733e:	613b      	str	r3, [r7, #16]
  return(result);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <osSemaphoreRelease+0x4a>
 8007346:	4b1c      	ldr	r3, [pc, #112]	; (80073b8 <osSemaphoreRelease+0xa8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d120      	bne.n	8007390 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800734e:	f3ef 8311 	mrs	r3, BASEPRI
 8007352:	60fb      	str	r3, [r7, #12]
  return(result);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01a      	beq.n	8007390 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800735e:	f107 0308 	add.w	r3, r7, #8
 8007362:	4619      	mov	r1, r3
 8007364:	69b8      	ldr	r0, [r7, #24]
 8007366:	f000 fe7f 	bl	8008068 <xQueueGiveFromISR>
 800736a:	4603      	mov	r3, r0
 800736c:	2b01      	cmp	r3, #1
 800736e:	d003      	beq.n	8007378 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007370:	f06f 0302 	mvn.w	r3, #2
 8007374:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007376:	e018      	b.n	80073aa <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d015      	beq.n	80073aa <osSemaphoreRelease+0x9a>
 800737e:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <osSemaphoreRelease+0xac>)
 8007380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800738e:	e00c      	b.n	80073aa <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007390:	2300      	movs	r3, #0
 8007392:	2200      	movs	r2, #0
 8007394:	2100      	movs	r1, #0
 8007396:	69b8      	ldr	r0, [r7, #24]
 8007398:	f000 fcd0 	bl	8007d3c <xQueueGenericSend>
 800739c:	4603      	mov	r3, r0
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d004      	beq.n	80073ac <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80073a2:	f06f 0302 	mvn.w	r3, #2
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	e000      	b.n	80073ac <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80073aa:	bf00      	nop
    }
  }

  return (stat);
 80073ac:	69fb      	ldr	r3, [r7, #28]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3720      	adds	r7, #32
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	200000c8 	.word	0x200000c8
 80073bc:	e000ed04 	.word	0xe000ed04

080073c0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08c      	sub	sp, #48	; 0x30
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80073cc:	2300      	movs	r3, #0
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073d0:	f3ef 8305 	mrs	r3, IPSR
 80073d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80073d6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d16f      	bne.n	80074bc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073dc:	f3ef 8310 	mrs	r3, PRIMASK
 80073e0:	617b      	str	r3, [r7, #20]
  return(result);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d169      	bne.n	80074bc <osMessageQueueNew+0xfc>
 80073e8:	4b37      	ldr	r3, [pc, #220]	; (80074c8 <osMessageQueueNew+0x108>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d105      	bne.n	80073fc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073f0:	f3ef 8311 	mrs	r3, BASEPRI
 80073f4:	613b      	str	r3, [r7, #16]
  return(result);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d15f      	bne.n	80074bc <osMessageQueueNew+0xfc>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d05c      	beq.n	80074bc <osMessageQueueNew+0xfc>
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d059      	beq.n	80074bc <osMessageQueueNew+0xfc>
    mem = -1;
 8007408:	f04f 33ff 	mov.w	r3, #4294967295
 800740c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d029      	beq.n	8007468 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d012      	beq.n	8007442 <osMessageQueueNew+0x82>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b4f      	cmp	r3, #79	; 0x4f
 8007422:	d90e      	bls.n	8007442 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00a      	beq.n	8007442 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	695a      	ldr	r2, [r3, #20]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	fb01 f303 	mul.w	r3, r1, r3
 8007438:	429a      	cmp	r2, r3
 800743a:	d302      	bcc.n	8007442 <osMessageQueueNew+0x82>
        mem = 1;
 800743c:	2301      	movs	r3, #1
 800743e:	623b      	str	r3, [r7, #32]
 8007440:	e014      	b.n	800746c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d110      	bne.n	800746c <osMessageQueueNew+0xac>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10c      	bne.n	800746c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007456:	2b00      	cmp	r3, #0
 8007458:	d108      	bne.n	800746c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d104      	bne.n	800746c <osMessageQueueNew+0xac>
          mem = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	623b      	str	r3, [r7, #32]
 8007466:	e001      	b.n	800746c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d10b      	bne.n	800748a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	2100      	movs	r1, #0
 800747c:	9100      	str	r1, [sp, #0]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 facb 	bl	8007a1c <xQueueGenericCreateStatic>
 8007486:	6278      	str	r0, [r7, #36]	; 0x24
 8007488:	e008      	b.n	800749c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d105      	bne.n	800749c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007490:	2200      	movs	r2, #0
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fb38 	bl	8007b0a <xQueueGenericCreate>
 800749a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00c      	beq.n	80074bc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <osMessageQueueNew+0xf0>
        name = attr->name;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	61fb      	str	r3, [r7, #28]
 80074ae:	e001      	b.n	80074b4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80074b4:	69f9      	ldr	r1, [r7, #28]
 80074b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074b8:	f001 fa76 	bl	80089a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3728      	adds	r7, #40	; 0x28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	200000c8 	.word	0x200000c8

080074cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08a      	sub	sp, #40	; 0x28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074e4:	f3ef 8305 	mrs	r3, IPSR
 80074e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80074ea:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10f      	bne.n	8007510 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f0:	f3ef 8310 	mrs	r3, PRIMASK
 80074f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d109      	bne.n	8007510 <osMessageQueuePut+0x44>
 80074fc:	4b2b      	ldr	r3, [pc, #172]	; (80075ac <osMessageQueuePut+0xe0>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d12e      	bne.n	8007562 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007504:	f3ef 8311 	mrs	r3, BASEPRI
 8007508:	617b      	str	r3, [r7, #20]
  return(result);
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d028      	beq.n	8007562 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d005      	beq.n	8007522 <osMessageQueuePut+0x56>
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <osMessageQueuePut+0x56>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007522:	f06f 0303 	mvn.w	r3, #3
 8007526:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007528:	e039      	b.n	800759e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800752a:	2300      	movs	r3, #0
 800752c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800752e:	f107 0210 	add.w	r2, r7, #16
 8007532:	2300      	movs	r3, #0
 8007534:	68b9      	ldr	r1, [r7, #8]
 8007536:	6a38      	ldr	r0, [r7, #32]
 8007538:	f000 fcfe 	bl	8007f38 <xQueueGenericSendFromISR>
 800753c:	4603      	mov	r3, r0
 800753e:	2b01      	cmp	r3, #1
 8007540:	d003      	beq.n	800754a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007542:	f06f 0302 	mvn.w	r3, #2
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007548:	e029      	b.n	800759e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d026      	beq.n	800759e <osMessageQueuePut+0xd2>
 8007550:	4b17      	ldr	r3, [pc, #92]	; (80075b0 <osMessageQueuePut+0xe4>)
 8007552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007560:	e01d      	b.n	800759e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <osMessageQueuePut+0xa2>
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800756e:	f06f 0303 	mvn.w	r3, #3
 8007572:	627b      	str	r3, [r7, #36]	; 0x24
 8007574:	e014      	b.n	80075a0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007576:	2300      	movs	r3, #0
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	68b9      	ldr	r1, [r7, #8]
 800757c:	6a38      	ldr	r0, [r7, #32]
 800757e:	f000 fbdd 	bl	8007d3c <xQueueGenericSend>
 8007582:	4603      	mov	r3, r0
 8007584:	2b01      	cmp	r3, #1
 8007586:	d00b      	beq.n	80075a0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800758e:	f06f 0301 	mvn.w	r3, #1
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
 8007594:	e004      	b.n	80075a0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007596:	f06f 0302 	mvn.w	r3, #2
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
 800759c:	e000      	b.n	80075a0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800759e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3728      	adds	r7, #40	; 0x28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	200000c8 	.word	0x200000c8
 80075b0:	e000ed04 	.word	0xe000ed04

080075b4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08a      	sub	sp, #40	; 0x28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ca:	f3ef 8305 	mrs	r3, IPSR
 80075ce:	61fb      	str	r3, [r7, #28]
  return(result);
 80075d0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10f      	bne.n	80075f6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d6:	f3ef 8310 	mrs	r3, PRIMASK
 80075da:	61bb      	str	r3, [r7, #24]
  return(result);
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <osMessageQueueGet+0x42>
 80075e2:	4b2b      	ldr	r3, [pc, #172]	; (8007690 <osMessageQueueGet+0xdc>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d12e      	bne.n	8007648 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075ea:	f3ef 8311 	mrs	r3, BASEPRI
 80075ee:	617b      	str	r3, [r7, #20]
  return(result);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d028      	beq.n	8007648 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <osMessageQueueGet+0x54>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <osMessageQueueGet+0x54>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007608:	f06f 0303 	mvn.w	r3, #3
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800760e:	e038      	b.n	8007682 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007610:	2300      	movs	r3, #0
 8007612:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007614:	f107 0310 	add.w	r3, r7, #16
 8007618:	461a      	mov	r2, r3
 800761a:	68b9      	ldr	r1, [r7, #8]
 800761c:	6a38      	ldr	r0, [r7, #32]
 800761e:	f000 ff9d 	bl	800855c <xQueueReceiveFromISR>
 8007622:	4603      	mov	r3, r0
 8007624:	2b01      	cmp	r3, #1
 8007626:	d003      	beq.n	8007630 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007628:	f06f 0302 	mvn.w	r3, #2
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800762e:	e028      	b.n	8007682 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d025      	beq.n	8007682 <osMessageQueueGet+0xce>
 8007636:	4b17      	ldr	r3, [pc, #92]	; (8007694 <osMessageQueueGet+0xe0>)
 8007638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007646:	e01c      	b.n	8007682 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <osMessageQueueGet+0xa0>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d103      	bne.n	800765c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007654:	f06f 0303 	mvn.w	r3, #3
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
 800765a:	e013      	b.n	8007684 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	6a38      	ldr	r0, [r7, #32]
 8007662:	f000 fd8f 	bl	8008184 <xQueueReceive>
 8007666:	4603      	mov	r3, r0
 8007668:	2b01      	cmp	r3, #1
 800766a:	d00b      	beq.n	8007684 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007672:	f06f 0301 	mvn.w	r3, #1
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
 8007678:	e004      	b.n	8007684 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800767a:	f06f 0302 	mvn.w	r3, #2
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
 8007680:	e000      	b.n	8007684 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007682:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007686:	4618      	mov	r0, r3
 8007688:	3728      	adds	r7, #40	; 0x28
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	200000c8 	.word	0x200000c8
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007698:	b580      	push	{r7, lr}
 800769a:	b088      	sub	sp, #32
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d102      	bne.n	80076b0 <osMessageQueueGetCount+0x18>
    count = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	61fb      	str	r3, [r7, #28]
 80076ae:	e01e      	b.n	80076ee <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076b0:	f3ef 8305 	mrs	r3, IPSR
 80076b4:	617b      	str	r3, [r7, #20]
  return(result);
 80076b6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10f      	bne.n	80076dc <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076bc:	f3ef 8310 	mrs	r3, PRIMASK
 80076c0:	613b      	str	r3, [r7, #16]
  return(result);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d109      	bne.n	80076dc <osMessageQueueGetCount+0x44>
 80076c8:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <osMessageQueueGetCount+0x60>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d10a      	bne.n	80076e6 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076d0:	f3ef 8311 	mrs	r3, BASEPRI
 80076d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d004      	beq.n	80076e6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80076dc:	69b8      	ldr	r0, [r7, #24]
 80076de:	f000 fffe 	bl	80086de <uxQueueMessagesWaitingFromISR>
 80076e2:	61f8      	str	r0, [r7, #28]
 80076e4:	e003      	b.n	80076ee <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80076e6:	69b8      	ldr	r0, [r7, #24]
 80076e8:	f000 ffb8 	bl	800865c <uxQueueMessagesWaiting>
 80076ec:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80076ee:	69fb      	ldr	r3, [r7, #28]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	200000c8 	.word	0x200000c8

080076fc <osMessageQueueGetSpace>:

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08c      	sub	sp, #48	; 0x30
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	2b00      	cmp	r3, #0
 800770c:	d102      	bne.n	8007714 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007712:	e034      	b.n	800777e <osMessageQueueGetSpace+0x82>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007714:	f3ef 8305 	mrs	r3, IPSR
 8007718:	623b      	str	r3, [r7, #32]
  return(result);
 800771a:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10f      	bne.n	8007740 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007720:	f3ef 8310 	mrs	r3, PRIMASK
 8007724:	61fb      	str	r3, [r7, #28]
  return(result);
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d109      	bne.n	8007740 <osMessageQueueGetSpace+0x44>
 800772c:	4b16      	ldr	r3, [pc, #88]	; (8007788 <osMessageQueueGetSpace+0x8c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d120      	bne.n	8007776 <osMessageQueueGetSpace+0x7a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007734:	f3ef 8311 	mrs	r3, BASEPRI
 8007738:	61bb      	str	r3, [r7, #24]
  return(result);
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01a      	beq.n	8007776 <osMessageQueueGetSpace+0x7a>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007740:	f3ef 8211 	mrs	r2, BASEPRI
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	613a      	str	r2, [r7, #16]
 8007756:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007758:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800775a:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007772:	bf00      	nop

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 8007774:	e003      	b.n	800777e <osMessageQueueGetSpace+0x82>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8007776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007778:	f000 ff8e 	bl	8008698 <uxQueueSpacesAvailable>
 800777c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007780:	4618      	mov	r0, r3
 8007782:	3730      	adds	r7, #48	; 0x30
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	200000c8 	.word	0x200000c8

0800778c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4a06      	ldr	r2, [pc, #24]	; (80077b4 <vApplicationGetIdleTaskMemory+0x28>)
 800779c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	4a05      	ldr	r2, [pc, #20]	; (80077b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80077a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2240      	movs	r2, #64	; 0x40
 80077a8:	601a      	str	r2, [r3, #0]
}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bc80      	pop	{r7}
 80077b2:	4770      	bx	lr
 80077b4:	200000cc 	.word	0x200000cc
 80077b8:	2000013c 	.word	0x2000013c

080077bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4a06      	ldr	r2, [pc, #24]	; (80077e4 <vApplicationGetTimerTaskMemory+0x28>)
 80077cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	4a05      	ldr	r2, [pc, #20]	; (80077e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80077d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2280      	movs	r2, #128	; 0x80
 80077d8:	601a      	str	r2, [r3, #0]
}
 80077da:	bf00      	nop
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	bc80      	pop	{r7}
 80077e2:	4770      	bx	lr
 80077e4:	2000023c 	.word	0x2000023c
 80077e8:	200002ac 	.word	0x200002ac

080077ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f103 0208 	add.w	r2, r3, #8
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f04f 32ff 	mov.w	r2, #4294967295
 8007804:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f103 0208 	add.w	r2, r3, #8
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f103 0208 	add.w	r2, r3, #8
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr

0800782a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr

08007842 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	601a      	str	r2, [r3, #0]
}
 800787e:	bf00      	nop
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr

08007888 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789e:	d103      	bne.n	80078a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	e00c      	b.n	80078c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3308      	adds	r3, #8
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	e002      	b.n	80078b6 <vListInsert+0x2e>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d2f6      	bcs.n	80078b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	601a      	str	r2, [r3, #0]
}
 80078ee:	bf00      	nop
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bc80      	pop	{r7}
 80078f6:	4770      	bx	lr

080078f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6892      	ldr	r2, [r2, #8]
 800790e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6852      	ldr	r2, [r2, #4]
 8007918:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d103      	bne.n	800792c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	1e5a      	subs	r2, r3, #1
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr
	...

0800794c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <xQueueGenericReset+0x2a>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60bb      	str	r3, [r7, #8]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007976:	f002 fcc1 	bl	800a2fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007982:	68f9      	ldr	r1, [r7, #12]
 8007984:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007986:	fb01 f303 	mul.w	r3, r1, r3
 800798a:	441a      	add	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a6:	3b01      	subs	r3, #1
 80079a8:	68f9      	ldr	r1, [r7, #12]
 80079aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079ac:	fb01 f303 	mul.w	r3, r1, r3
 80079b0:	441a      	add	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	22ff      	movs	r2, #255	; 0xff
 80079ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	22ff      	movs	r2, #255	; 0xff
 80079c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d114      	bne.n	80079f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d01a      	beq.n	8007a0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3310      	adds	r3, #16
 80079d8:	4618      	mov	r0, r3
 80079da:	f001 fce3 	bl	80093a4 <xTaskRemoveFromEventList>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d012      	beq.n	8007a0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079e4:	4b0c      	ldr	r3, [pc, #48]	; (8007a18 <xQueueGenericReset+0xcc>)
 80079e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	e009      	b.n	8007a0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3310      	adds	r3, #16
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fef6 	bl	80077ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3324      	adds	r3, #36	; 0x24
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7ff fef1 	bl	80077ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a0a:	f002 fca7 	bl	800a35c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a0e:	2301      	movs	r3, #1
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	e000ed04 	.word	0xe000ed04

08007a1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08e      	sub	sp, #56	; 0x38
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10a      	bne.n	8007a46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a42:	bf00      	nop
 8007a44:	e7fe      	b.n	8007a44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <xQueueGenericCreateStatic+0x52>
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <xQueueGenericCreateStatic+0x56>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <xQueueGenericCreateStatic+0x58>
 8007a72:	2300      	movs	r3, #0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	623b      	str	r3, [r7, #32]
}
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d102      	bne.n	8007a9a <xQueueGenericCreateStatic+0x7e>
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <xQueueGenericCreateStatic+0x82>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e000      	b.n	8007aa0 <xQueueGenericCreateStatic+0x84>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	61fb      	str	r3, [r7, #28]
}
 8007ab6:	bf00      	nop
 8007ab8:	e7fe      	b.n	8007ab8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007aba:	2350      	movs	r3, #80	; 0x50
 8007abc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2b50      	cmp	r3, #80	; 0x50
 8007ac2:	d00a      	beq.n	8007ada <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	61bb      	str	r3, [r7, #24]
}
 8007ad6:	bf00      	nop
 8007ad8:	e7fe      	b.n	8007ad8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00d      	beq.n	8007b00 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007aec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	4613      	mov	r3, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	68b9      	ldr	r1, [r7, #8]
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 f843 	bl	8007b86 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3730      	adds	r7, #48	; 0x30
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b08a      	sub	sp, #40	; 0x28
 8007b0e:	af02      	add	r7, sp, #8
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	4613      	mov	r3, r2
 8007b16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	613b      	str	r3, [r7, #16]
}
 8007b30:	bf00      	nop
 8007b32:	e7fe      	b.n	8007b32 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d102      	bne.n	8007b40 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
 8007b3e:	e004      	b.n	8007b4a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	fb02 f303 	mul.w	r3, r2, r3
 8007b48:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	3350      	adds	r3, #80	; 0x50
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f002 fcd4 	bl	800a4fc <pvPortMalloc>
 8007b54:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00f      	beq.n	8007b7c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	3350      	adds	r3, #80	; 0x50
 8007b60:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b6a:	79fa      	ldrb	r2, [r7, #7]
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	4613      	mov	r3, r2
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	68b9      	ldr	r1, [r7, #8]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 f805 	bl	8007b86 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007b7c:	69bb      	ldr	r3, [r7, #24]
	}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3720      	adds	r7, #32
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60f8      	str	r0, [r7, #12]
 8007b8e:	60b9      	str	r1, [r7, #8]
 8007b90:	607a      	str	r2, [r7, #4]
 8007b92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d103      	bne.n	8007ba2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	e002      	b.n	8007ba8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	69b8      	ldr	r0, [r7, #24]
 8007bb8:	f7ff fec8 	bl	800794c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	78fa      	ldrb	r2, [r7, #3]
 8007bc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007bc4:	bf00      	nop
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00e      	beq.n	8007bf8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007bec:	2300      	movs	r3, #0
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f8a2 	bl	8007d3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	461a      	mov	r2, r3
 8007c16:	6939      	ldr	r1, [r7, #16]
 8007c18:	6978      	ldr	r0, [r7, #20]
 8007c1a:	f7ff ff76 	bl	8007b0a <xQueueGenericCreate>
 8007c1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f7ff ffd3 	bl	8007bcc <prvInitialiseMutex>

		return pxNewQueue;
 8007c26:	68fb      	ldr	r3, [r7, #12]
	}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	4603      	mov	r3, r0
 8007c38:	6039      	str	r1, [r7, #0]
 8007c3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	2300      	movs	r3, #0
 8007c42:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	6939      	ldr	r1, [r7, #16]
 8007c4e:	6978      	ldr	r0, [r7, #20]
 8007c50:	f7ff fee4 	bl	8007a1c <xQueueGenericCreateStatic>
 8007c54:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff ffb8 	bl	8007bcc <prvInitialiseMutex>

		return pxNewQueue;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
	}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b08a      	sub	sp, #40	; 0x28
 8007c6a:	af02      	add	r7, sp, #8
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	61bb      	str	r3, [r7, #24]
}
 8007c8a:	bf00      	nop
 8007c8c:	e7fe      	b.n	8007c8c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d90a      	bls.n	8007cac <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	617b      	str	r3, [r7, #20]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007cac:	2302      	movs	r3, #2
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f7ff feb0 	bl	8007a1c <xQueueGenericCreateStatic>
 8007cbc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007cca:	69fb      	ldr	r3, [r7, #28]
	}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3720      	adds	r7, #32
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	613b      	str	r3, [r7, #16]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d90a      	bls.n	8007d18 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	60fb      	str	r3, [r7, #12]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d18:	2202      	movs	r2, #2
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff fef4 	bl	8007b0a <xQueueGenericCreate>
 8007d22:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d30:	697b      	ldr	r3, [r7, #20]
	}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3718      	adds	r7, #24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08e      	sub	sp, #56	; 0x38
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10a      	bne.n	8007d6e <xQueueGenericSend+0x32>
	__asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d6a:	bf00      	nop
 8007d6c:	e7fe      	b.n	8007d6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d103      	bne.n	8007d7c <xQueueGenericSend+0x40>
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <xQueueGenericSend+0x44>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <xQueueGenericSend+0x46>
 8007d80:	2300      	movs	r3, #0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <xQueueGenericSend+0x60>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d98:	bf00      	nop
 8007d9a:	e7fe      	b.n	8007d9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d103      	bne.n	8007daa <xQueueGenericSend+0x6e>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d101      	bne.n	8007dae <xQueueGenericSend+0x72>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e000      	b.n	8007db0 <xQueueGenericSend+0x74>
 8007dae:	2300      	movs	r3, #0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <xQueueGenericSend+0x8e>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	623b      	str	r3, [r7, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dca:	f001 fcad 	bl	8009728 <xTaskGetSchedulerState>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d102      	bne.n	8007dda <xQueueGenericSend+0x9e>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <xQueueGenericSend+0xa2>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <xQueueGenericSend+0xa4>
 8007dde:	2300      	movs	r3, #0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <xQueueGenericSend+0xbe>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	61fb      	str	r3, [r7, #28]
}
 8007df6:	bf00      	nop
 8007df8:	e7fe      	b.n	8007df8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dfa:	f002 fa7f 	bl	800a2fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d302      	bcc.n	8007e10 <xQueueGenericSend+0xd4>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d129      	bne.n	8007e64 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e16:	f000 fcb7 	bl	8008788 <prvCopyDataToQueue>
 8007e1a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d010      	beq.n	8007e46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	3324      	adds	r3, #36	; 0x24
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f001 fabb 	bl	80093a4 <xTaskRemoveFromEventList>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d013      	beq.n	8007e5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e34:	4b3f      	ldr	r3, [pc, #252]	; (8007f34 <xQueueGenericSend+0x1f8>)
 8007e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	e00a      	b.n	8007e5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d007      	beq.n	8007e5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e4c:	4b39      	ldr	r3, [pc, #228]	; (8007f34 <xQueueGenericSend+0x1f8>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e5c:	f002 fa7e 	bl	800a35c <vPortExitCritical>
				return pdPASS;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e063      	b.n	8007f2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d103      	bne.n	8007e72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e6a:	f002 fa77 	bl	800a35c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e05c      	b.n	8007f2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e78:	f107 0314 	add.w	r3, r7, #20
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 faf5 	bl	800946c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e82:	2301      	movs	r3, #1
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e86:	f002 fa69 	bl	800a35c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e8a:	f001 f84b 	bl	8008f24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e8e:	f002 fa35 	bl	800a2fc <vPortEnterCritical>
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e98:	b25b      	sxtb	r3, r3
 8007e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9e:	d103      	bne.n	8007ea8 <xQueueGenericSend+0x16c>
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eae:	b25b      	sxtb	r3, r3
 8007eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb4:	d103      	bne.n	8007ebe <xQueueGenericSend+0x182>
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ebe:	f002 fa4d 	bl	800a35c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ec2:	1d3a      	adds	r2, r7, #4
 8007ec4:	f107 0314 	add.w	r3, r7, #20
 8007ec8:	4611      	mov	r1, r2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 fae4 	bl	8009498 <xTaskCheckForTimeOut>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d124      	bne.n	8007f20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ed8:	f000 fd4e 	bl	8008978 <prvIsQueueFull>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d018      	beq.n	8007f14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	3310      	adds	r3, #16
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f001 fa0a 	bl	8009304 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ef2:	f000 fcd9 	bl	80088a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ef6:	f001 f823 	bl	8008f40 <xTaskResumeAll>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f47f af7c 	bne.w	8007dfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f02:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <xQueueGenericSend+0x1f8>)
 8007f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	e772      	b.n	8007dfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f16:	f000 fcc7 	bl	80088a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f1a:	f001 f811 	bl	8008f40 <xTaskResumeAll>
 8007f1e:	e76c      	b.n	8007dfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f22:	f000 fcc1 	bl	80088a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f26:	f001 f80b 	bl	8008f40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f2a:	2300      	movs	r3, #0
		}
	}
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3738      	adds	r7, #56	; 0x38
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	e000ed04 	.word	0xe000ed04

08007f38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08e      	sub	sp, #56	; 0x38
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10a      	bne.n	8007f66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <xQueueGenericSendFromISR+0x3c>
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <xQueueGenericSendFromISR+0x40>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e000      	b.n	8007f7a <xQueueGenericSendFromISR+0x42>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10a      	bne.n	8007f94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	623b      	str	r3, [r7, #32]
}
 8007f90:	bf00      	nop
 8007f92:	e7fe      	b.n	8007f92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d103      	bne.n	8007fa2 <xQueueGenericSendFromISR+0x6a>
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d101      	bne.n	8007fa6 <xQueueGenericSendFromISR+0x6e>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e000      	b.n	8007fa8 <xQueueGenericSendFromISR+0x70>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	61fb      	str	r3, [r7, #28]
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fc2:	f002 fa5d 	bl	800a480 <vPortValidateInterruptPriority>
	__asm volatile
 8007fc6:	f3ef 8211 	mrs	r2, BASEPRI
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	61ba      	str	r2, [r7, #24]
 8007fdc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007fde:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d302      	bcc.n	8007ff4 <xQueueGenericSendFromISR+0xbc>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d12c      	bne.n	800804e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	68b9      	ldr	r1, [r7, #8]
 8008002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008004:	f000 fbc0 	bl	8008788 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008008:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d112      	bne.n	8008038 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	2b00      	cmp	r3, #0
 8008018:	d016      	beq.n	8008048 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	3324      	adds	r3, #36	; 0x24
 800801e:	4618      	mov	r0, r3
 8008020:	f001 f9c0 	bl	80093a4 <xTaskRemoveFromEventList>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00e      	beq.n	8008048 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	e007      	b.n	8008048 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008038:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800803c:	3301      	adds	r3, #1
 800803e:	b2db      	uxtb	r3, r3
 8008040:	b25a      	sxtb	r2, r3
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008048:	2301      	movs	r3, #1
 800804a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800804c:	e001      	b.n	8008052 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800804e:	2300      	movs	r3, #0
 8008050:	637b      	str	r3, [r7, #52]	; 0x34
 8008052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008054:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f383 8811 	msr	BASEPRI, r3
}
 800805c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800805e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008060:	4618      	mov	r0, r3
 8008062:	3738      	adds	r7, #56	; 0x38
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08e      	sub	sp, #56	; 0x38
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	623b      	str	r3, [r7, #32]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	61fb      	str	r3, [r7, #28]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d103      	bne.n	80080c0 <xQueueGiveFromISR+0x58>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <xQueueGiveFromISR+0x5c>
 80080c0:	2301      	movs	r3, #1
 80080c2:	e000      	b.n	80080c6 <xQueueGiveFromISR+0x5e>
 80080c4:	2300      	movs	r3, #0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	61bb      	str	r3, [r7, #24]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080e0:	f002 f9ce 	bl	800a480 <vPortValidateInterruptPriority>
	__asm volatile
 80080e4:	f3ef 8211 	mrs	r2, BASEPRI
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	617a      	str	r2, [r7, #20]
 80080fa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80080fc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800810c:	429a      	cmp	r2, r3
 800810e:	d22b      	bcs.n	8008168 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008122:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812a:	d112      	bne.n	8008152 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	2b00      	cmp	r3, #0
 8008132:	d016      	beq.n	8008162 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008136:	3324      	adds	r3, #36	; 0x24
 8008138:	4618      	mov	r0, r3
 800813a:	f001 f933 	bl	80093a4 <xTaskRemoveFromEventList>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00e      	beq.n	8008162 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00b      	beq.n	8008162 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2201      	movs	r2, #1
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	e007      	b.n	8008162 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008156:	3301      	adds	r3, #1
 8008158:	b2db      	uxtb	r3, r3
 800815a:	b25a      	sxtb	r2, r3
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008162:	2301      	movs	r3, #1
 8008164:	637b      	str	r3, [r7, #52]	; 0x34
 8008166:	e001      	b.n	800816c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008168:	2300      	movs	r3, #0
 800816a:	637b      	str	r3, [r7, #52]	; 0x34
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f383 8811 	msr	BASEPRI, r3
}
 8008176:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800817a:	4618      	mov	r0, r3
 800817c:	3738      	adds	r7, #56	; 0x38
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08c      	sub	sp, #48	; 0x30
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008190:	2300      	movs	r3, #0
 8008192:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <xQueueReceive+0x30>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	623b      	str	r3, [r7, #32]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d103      	bne.n	80081c2 <xQueueReceive+0x3e>
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <xQueueReceive+0x42>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e000      	b.n	80081c8 <xQueueReceive+0x44>
 80081c6:	2300      	movs	r3, #0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <xQueueReceive+0x5e>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	61fb      	str	r3, [r7, #28]
}
 80081de:	bf00      	nop
 80081e0:	e7fe      	b.n	80081e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081e2:	f001 faa1 	bl	8009728 <xTaskGetSchedulerState>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d102      	bne.n	80081f2 <xQueueReceive+0x6e>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <xQueueReceive+0x72>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e000      	b.n	80081f8 <xQueueReceive+0x74>
 80081f6:	2300      	movs	r3, #0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <xQueueReceive+0x8e>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	61bb      	str	r3, [r7, #24]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008212:	f002 f873 	bl	800a2fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01f      	beq.n	8008262 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008222:	68b9      	ldr	r1, [r7, #8]
 8008224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008226:	f000 fb19 	bl	800885c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	1e5a      	subs	r2, r3, #1
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00f      	beq.n	800825a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	3310      	adds	r3, #16
 800823e:	4618      	mov	r0, r3
 8008240:	f001 f8b0 	bl	80093a4 <xTaskRemoveFromEventList>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800824a:	4b3d      	ldr	r3, [pc, #244]	; (8008340 <xQueueReceive+0x1bc>)
 800824c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800825a:	f002 f87f 	bl	800a35c <vPortExitCritical>
				return pdPASS;
 800825e:	2301      	movs	r3, #1
 8008260:	e069      	b.n	8008336 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d103      	bne.n	8008270 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008268:	f002 f878 	bl	800a35c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800826c:	2300      	movs	r3, #0
 800826e:	e062      	b.n	8008336 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d106      	bne.n	8008284 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008276:	f107 0310 	add.w	r3, r7, #16
 800827a:	4618      	mov	r0, r3
 800827c:	f001 f8f6 	bl	800946c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008280:	2301      	movs	r3, #1
 8008282:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008284:	f002 f86a 	bl	800a35c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008288:	f000 fe4c 	bl	8008f24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800828c:	f002 f836 	bl	800a2fc <vPortEnterCritical>
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008296:	b25b      	sxtb	r3, r3
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829c:	d103      	bne.n	80082a6 <xQueueReceive+0x122>
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ac:	b25b      	sxtb	r3, r3
 80082ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b2:	d103      	bne.n	80082bc <xQueueReceive+0x138>
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082bc:	f002 f84e 	bl	800a35c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082c0:	1d3a      	adds	r2, r7, #4
 80082c2:	f107 0310 	add.w	r3, r7, #16
 80082c6:	4611      	mov	r1, r2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 f8e5 	bl	8009498 <xTaskCheckForTimeOut>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d123      	bne.n	800831c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082d6:	f000 fb39 	bl	800894c <prvIsQueueEmpty>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d017      	beq.n	8008310 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	3324      	adds	r3, #36	; 0x24
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	4611      	mov	r1, r2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f001 f80b 	bl	8009304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082f0:	f000 fada 	bl	80088a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082f4:	f000 fe24 	bl	8008f40 <xTaskResumeAll>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d189      	bne.n	8008212 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80082fe:	4b10      	ldr	r3, [pc, #64]	; (8008340 <xQueueReceive+0x1bc>)
 8008300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	e780      	b.n	8008212 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008312:	f000 fac9 	bl	80088a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008316:	f000 fe13 	bl	8008f40 <xTaskResumeAll>
 800831a:	e77a      	b.n	8008212 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800831c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800831e:	f000 fac3 	bl	80088a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008322:	f000 fe0d 	bl	8008f40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008328:	f000 fb10 	bl	800894c <prvIsQueueEmpty>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	f43f af6f 	beq.w	8008212 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008334:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008336:	4618      	mov	r0, r3
 8008338:	3730      	adds	r7, #48	; 0x30
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	e000ed04 	.word	0xe000ed04

08008344 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08e      	sub	sp, #56	; 0x38
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800834e:	2300      	movs	r3, #0
 8008350:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008356:	2300      	movs	r3, #0
 8008358:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	623b      	str	r3, [r7, #32]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	61fb      	str	r3, [r7, #28]
}
 8008390:	bf00      	nop
 8008392:	e7fe      	b.n	8008392 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008394:	f001 f9c8 	bl	8009728 <xTaskGetSchedulerState>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d102      	bne.n	80083a4 <xQueueSemaphoreTake+0x60>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <xQueueSemaphoreTake+0x64>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e000      	b.n	80083aa <xQueueSemaphoreTake+0x66>
 80083a8:	2300      	movs	r3, #0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10a      	bne.n	80083c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	61bb      	str	r3, [r7, #24]
}
 80083c0:	bf00      	nop
 80083c2:	e7fe      	b.n	80083c2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80083c4:	f001 ff9a 	bl	800a2fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d024      	beq.n	800841e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	1e5a      	subs	r2, r3, #1
 80083d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d104      	bne.n	80083ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80083e4:	f001 fb20 	bl	8009a28 <pvTaskIncrementMutexHeldCount>
 80083e8:	4602      	mov	r2, r0
 80083ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ec:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00f      	beq.n	8008416 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	3310      	adds	r3, #16
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 ffd2 	bl	80093a4 <xTaskRemoveFromEventList>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d007      	beq.n	8008416 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008406:	4b54      	ldr	r3, [pc, #336]	; (8008558 <xQueueSemaphoreTake+0x214>)
 8008408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008416:	f001 ffa1 	bl	800a35c <vPortExitCritical>
				return pdPASS;
 800841a:	2301      	movs	r3, #1
 800841c:	e097      	b.n	800854e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d111      	bne.n	8008448 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	617b      	str	r3, [r7, #20]
}
 800843c:	bf00      	nop
 800843e:	e7fe      	b.n	800843e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008440:	f001 ff8c 	bl	800a35c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008444:	2300      	movs	r3, #0
 8008446:	e082      	b.n	800854e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800844e:	f107 030c 	add.w	r3, r7, #12
 8008452:	4618      	mov	r0, r3
 8008454:	f001 f80a 	bl	800946c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008458:	2301      	movs	r3, #1
 800845a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800845c:	f001 ff7e 	bl	800a35c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008460:	f000 fd60 	bl	8008f24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008464:	f001 ff4a 	bl	800a2fc <vPortEnterCritical>
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800846e:	b25b      	sxtb	r3, r3
 8008470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008474:	d103      	bne.n	800847e <xQueueSemaphoreTake+0x13a>
 8008476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008484:	b25b      	sxtb	r3, r3
 8008486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848a:	d103      	bne.n	8008494 <xQueueSemaphoreTake+0x150>
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008494:	f001 ff62 	bl	800a35c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008498:	463a      	mov	r2, r7
 800849a:	f107 030c 	add.w	r3, r7, #12
 800849e:	4611      	mov	r1, r2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fff9 	bl	8009498 <xTaskCheckForTimeOut>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d132      	bne.n	8008512 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084ae:	f000 fa4d 	bl	800894c <prvIsQueueEmpty>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d026      	beq.n	8008506 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d109      	bne.n	80084d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80084c0:	f001 ff1c 	bl	800a2fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 f94b 	bl	8009764 <xTaskPriorityInherit>
 80084ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80084d0:	f001 ff44 	bl	800a35c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	3324      	adds	r3, #36	; 0x24
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 ff11 	bl	8009304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084e4:	f000 f9e0 	bl	80088a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084e8:	f000 fd2a 	bl	8008f40 <xTaskResumeAll>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f47f af68 	bne.w	80083c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80084f4:	4b18      	ldr	r3, [pc, #96]	; (8008558 <xQueueSemaphoreTake+0x214>)
 80084f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	e75e      	b.n	80083c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008508:	f000 f9ce 	bl	80088a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800850c:	f000 fd18 	bl	8008f40 <xTaskResumeAll>
 8008510:	e758      	b.n	80083c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008514:	f000 f9c8 	bl	80088a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008518:	f000 fd12 	bl	8008f40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800851c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800851e:	f000 fa15 	bl	800894c <prvIsQueueEmpty>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	f43f af4d 	beq.w	80083c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00d      	beq.n	800854c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008530:	f001 fee4 	bl	800a2fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008536:	f000 f910 	bl	800875a <prvGetDisinheritPriorityAfterTimeout>
 800853a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008542:	4618      	mov	r0, r3
 8008544:	f001 f9ea 	bl	800991c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008548:	f001 ff08 	bl	800a35c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800854c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800854e:	4618      	mov	r0, r3
 8008550:	3738      	adds	r7, #56	; 0x38
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	e000ed04 	.word	0xe000ed04

0800855c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08e      	sub	sp, #56	; 0x38
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10a      	bne.n	8008588 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	623b      	str	r3, [r7, #32]
}
 8008584:	bf00      	nop
 8008586:	e7fe      	b.n	8008586 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d103      	bne.n	8008596 <xQueueReceiveFromISR+0x3a>
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <xQueueReceiveFromISR+0x3e>
 8008596:	2301      	movs	r3, #1
 8008598:	e000      	b.n	800859c <xQueueReceiveFromISR+0x40>
 800859a:	2300      	movs	r3, #0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	61fb      	str	r3, [r7, #28]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085b6:	f001 ff63 	bl	800a480 <vPortValidateInterruptPriority>
	__asm volatile
 80085ba:	f3ef 8211 	mrs	r2, BASEPRI
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	61ba      	str	r2, [r7, #24]
 80085d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80085d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d02f      	beq.n	8008642 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085f0:	f000 f934 	bl	800885c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	1e5a      	subs	r2, r3, #1
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80085fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008604:	d112      	bne.n	800862c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d016      	beq.n	800863c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	3310      	adds	r3, #16
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fec6 	bl	80093a4 <xTaskRemoveFromEventList>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00e      	beq.n	800863c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00b      	beq.n	800863c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	e007      	b.n	800863c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800862c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008630:	3301      	adds	r3, #1
 8008632:	b2db      	uxtb	r3, r3
 8008634:	b25a      	sxtb	r2, r3
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800863c:	2301      	movs	r3, #1
 800863e:	637b      	str	r3, [r7, #52]	; 0x34
 8008640:	e001      	b.n	8008646 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008642:	2300      	movs	r3, #0
 8008644:	637b      	str	r3, [r7, #52]	; 0x34
 8008646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008648:	613b      	str	r3, [r7, #16]
	__asm volatile
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f383 8811 	msr	BASEPRI, r3
}
 8008650:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008654:	4618      	mov	r0, r3
 8008656:	3738      	adds	r7, #56	; 0x38
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10a      	bne.n	8008680 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	60bb      	str	r3, [r7, #8]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008680:	f001 fe3c 	bl	800a2fc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800868a:	f001 fe67 	bl	800a35c <vPortExitCritical>

	return uxReturn;
 800868e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	60fb      	str	r3, [r7, #12]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80086c0:	f001 fe1c 	bl	800a2fc <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80086d0:	f001 fe44 	bl	800a35c <vPortExitCritical>

	return uxReturn;
 80086d4:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80086de:	b480      	push	{r7}
 80086e0:	b085      	sub	sp, #20
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10a      	bne.n	8008702 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	60bb      	str	r3, [r7, #8]
}
 80086fe:	bf00      	nop
 8008700:	e7fe      	b.n	8008700 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008706:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8008708:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr

08008714 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10a      	bne.n	800873c <vQueueDelete+0x28>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	60bb      	str	r3, [r7, #8]
}
 8008738:	bf00      	nop
 800873a:	e7fe      	b.n	800873a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f95b 	bl	80089f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008748:	2b00      	cmp	r3, #0
 800874a:	d102      	bne.n	8008752 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f001 ff99 	bl	800a684 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800875a:	b480      	push	{r7}
 800875c:	b085      	sub	sp, #20
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	2b00      	cmp	r3, #0
 8008768:	d006      	beq.n	8008778 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	e001      	b.n	800877c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800877c:	68fb      	ldr	r3, [r7, #12]
	}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr

08008788 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008794:	2300      	movs	r3, #0
 8008796:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10d      	bne.n	80087c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d14d      	bne.n	800884a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 f844 	bl	8009840 <xTaskPriorityDisinherit>
 80087b8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	605a      	str	r2, [r3, #4]
 80087c0:	e043      	b.n	800884a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d119      	bne.n	80087fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6898      	ldr	r0, [r3, #8]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d0:	461a      	mov	r2, r3
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	f002 f894 	bl	800a900 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e0:	441a      	add	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d32b      	bcc.n	800884a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	609a      	str	r2, [r3, #8]
 80087fa:	e026      	b.n	800884a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	68d8      	ldr	r0, [r3, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008804:	461a      	mov	r2, r3
 8008806:	68b9      	ldr	r1, [r7, #8]
 8008808:	f002 f87a 	bl	800a900 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68da      	ldr	r2, [r3, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008814:	425b      	negs	r3, r3
 8008816:	441a      	add	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d207      	bcs.n	8008838 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008830:	425b      	negs	r3, r3
 8008832:	441a      	add	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b02      	cmp	r3, #2
 800883c:	d105      	bne.n	800884a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	3b01      	subs	r3, #1
 8008848:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008852:	697b      	ldr	r3, [r7, #20]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	2b00      	cmp	r3, #0
 800886c:	d018      	beq.n	80088a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	441a      	add	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	429a      	cmp	r2, r3
 8008886:	d303      	bcc.n	8008890 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68d9      	ldr	r1, [r3, #12]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008898:	461a      	mov	r2, r3
 800889a:	6838      	ldr	r0, [r7, #0]
 800889c:	f002 f830 	bl	800a900 <memcpy>
	}
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088b0:	f001 fd24 	bl	800a2fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088bc:	e011      	b.n	80088e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d012      	beq.n	80088ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3324      	adds	r3, #36	; 0x24
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fd6a 	bl	80093a4 <xTaskRemoveFromEventList>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088d6:	f000 fe41 	bl	800955c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	3b01      	subs	r3, #1
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	dce9      	bgt.n	80088be <prvUnlockQueue+0x16>
 80088ea:	e000      	b.n	80088ee <prvUnlockQueue+0x46>
					break;
 80088ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	22ff      	movs	r2, #255	; 0xff
 80088f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088f6:	f001 fd31 	bl	800a35c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088fa:	f001 fcff 	bl	800a2fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008904:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008906:	e011      	b.n	800892c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d012      	beq.n	8008936 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3310      	adds	r3, #16
 8008914:	4618      	mov	r0, r3
 8008916:	f000 fd45 	bl	80093a4 <xTaskRemoveFromEventList>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008920:	f000 fe1c 	bl	800955c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	3b01      	subs	r3, #1
 8008928:	b2db      	uxtb	r3, r3
 800892a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800892c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008930:	2b00      	cmp	r3, #0
 8008932:	dce9      	bgt.n	8008908 <prvUnlockQueue+0x60>
 8008934:	e000      	b.n	8008938 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008936:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	22ff      	movs	r2, #255	; 0xff
 800893c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008940:	f001 fd0c 	bl	800a35c <vPortExitCritical>
}
 8008944:	bf00      	nop
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008954:	f001 fcd2 	bl	800a2fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895c:	2b00      	cmp	r3, #0
 800895e:	d102      	bne.n	8008966 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008960:	2301      	movs	r3, #1
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	e001      	b.n	800896a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800896a:	f001 fcf7 	bl	800a35c <vPortExitCritical>

	return xReturn;
 800896e:	68fb      	ldr	r3, [r7, #12]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008980:	f001 fcbc 	bl	800a2fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898c:	429a      	cmp	r2, r3
 800898e:	d102      	bne.n	8008996 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008990:	2301      	movs	r3, #1
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	e001      	b.n	800899a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800899a:	f001 fcdf 	bl	800a35c <vPortExitCritical>

	return xReturn;
 800899e:	68fb      	ldr	r3, [r7, #12]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	e014      	b.n	80089e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089b8:	4a0e      	ldr	r2, [pc, #56]	; (80089f4 <vQueueAddToRegistry+0x4c>)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10b      	bne.n	80089dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089c4:	490b      	ldr	r1, [pc, #44]	; (80089f4 <vQueueAddToRegistry+0x4c>)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089ce:	4a09      	ldr	r2, [pc, #36]	; (80089f4 <vQueueAddToRegistry+0x4c>)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	00db      	lsls	r3, r3, #3
 80089d4:	4413      	add	r3, r2
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089da:	e006      	b.n	80089ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3301      	adds	r3, #1
 80089e0:	60fb      	str	r3, [r7, #12]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2b07      	cmp	r3, #7
 80089e6:	d9e7      	bls.n	80089b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089e8:	bf00      	nop
 80089ea:	bf00      	nop
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bc80      	pop	{r7}
 80089f2:	4770      	bx	lr
 80089f4:	20003b40 	.word	0x20003b40

080089f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	e016      	b.n	8008a34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008a06:	4a10      	ldr	r2, [pc, #64]	; (8008a48 <vQueueUnregisterQueue+0x50>)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d10b      	bne.n	8008a2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008a16:	4a0c      	ldr	r2, [pc, #48]	; (8008a48 <vQueueUnregisterQueue+0x50>)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008a20:	4a09      	ldr	r2, [pc, #36]	; (8008a48 <vQueueUnregisterQueue+0x50>)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	00db      	lsls	r3, r3, #3
 8008a26:	4413      	add	r3, r2
 8008a28:	2200      	movs	r2, #0
 8008a2a:	605a      	str	r2, [r3, #4]
				break;
 8008a2c:	e006      	b.n	8008a3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3301      	adds	r3, #1
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b07      	cmp	r3, #7
 8008a38:	d9e5      	bls.n	8008a06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	20003b40 	.word	0x20003b40

08008a4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a5c:	f001 fc4e 	bl	800a2fc <vPortEnterCritical>
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a66:	b25b      	sxtb	r3, r3
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6c:	d103      	bne.n	8008a76 <vQueueWaitForMessageRestricted+0x2a>
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a7c:	b25b      	sxtb	r3, r3
 8008a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a82:	d103      	bne.n	8008a8c <vQueueWaitForMessageRestricted+0x40>
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a8c:	f001 fc66 	bl	800a35c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d106      	bne.n	8008aa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	3324      	adds	r3, #36	; 0x24
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fc53 	bl	800934c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008aa6:	6978      	ldr	r0, [r7, #20]
 8008aa8:	f7ff fefe 	bl	80088a8 <prvUnlockQueue>
	}
 8008aac:	bf00      	nop
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08e      	sub	sp, #56	; 0x38
 8008ab8:	af04      	add	r7, sp, #16
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	623b      	str	r3, [r7, #32]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10a      	bne.n	8008afa <xTaskCreateStatic+0x46>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	61fb      	str	r3, [r7, #28]
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008afa:	2370      	movs	r3, #112	; 0x70
 8008afc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b70      	cmp	r3, #112	; 0x70
 8008b02:	d00a      	beq.n	8008b1a <xTaskCreateStatic+0x66>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	61bb      	str	r3, [r7, #24]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d01e      	beq.n	8008b5e <xTaskCreateStatic+0xaa>
 8008b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d01b      	beq.n	8008b5e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b2e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	2202      	movs	r2, #2
 8008b34:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b38:	2300      	movs	r3, #0
 8008b3a:	9303      	str	r3, [sp, #12]
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	9302      	str	r3, [sp, #8]
 8008b40:	f107 0314 	add.w	r3, r7, #20
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	68b9      	ldr	r1, [r7, #8]
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 f850 	bl	8008bf6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b58:	f000 f8d8 	bl	8008d0c <prvAddNewTaskToReadyList>
 8008b5c:	e001      	b.n	8008b62 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b62:	697b      	ldr	r3, [r7, #20]
	}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3728      	adds	r7, #40	; 0x28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b08c      	sub	sp, #48	; 0x30
 8008b70:	af04      	add	r7, sp, #16
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4618      	mov	r0, r3
 8008b82:	f001 fcbb 	bl	800a4fc <pvPortMalloc>
 8008b86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00e      	beq.n	8008bac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008b8e:	2070      	movs	r0, #112	; 0x70
 8008b90:	f001 fcb4 	bl	800a4fc <pvPortMalloc>
 8008b94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8008ba2:	e005      	b.n	8008bb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ba4:	6978      	ldr	r0, [r7, #20]
 8008ba6:	f001 fd6d 	bl	800a684 <vPortFree>
 8008baa:	e001      	b.n	8008bb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bac:	2300      	movs	r3, #0
 8008bae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d017      	beq.n	8008be6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008bbe:	88fa      	ldrh	r2, [r7, #6]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9303      	str	r3, [sp, #12]
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	9302      	str	r3, [sp, #8]
 8008bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bca:	9301      	str	r3, [sp, #4]
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 f80e 	bl	8008bf6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bda:	69f8      	ldr	r0, [r7, #28]
 8008bdc:	f000 f896 	bl	8008d0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008be0:	2301      	movs	r3, #1
 8008be2:	61bb      	str	r3, [r7, #24]
 8008be4:	e002      	b.n	8008bec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008be6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bec:	69bb      	ldr	r3, [r7, #24]
	}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3720      	adds	r7, #32
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b088      	sub	sp, #32
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	607a      	str	r2, [r7, #4]
 8008c02:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	21a5      	movs	r1, #165	; 0xa5
 8008c10:	f001 fe84 	bl	800a91c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	f023 0307 	bic.w	r3, r3, #7
 8008c2c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	f003 0307 	and.w	r3, r3, #7
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00a      	beq.n	8008c4e <prvInitialiseNewTask+0x58>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	617b      	str	r3, [r7, #20]
}
 8008c4a:	bf00      	nop
 8008c4c:	e7fe      	b.n	8008c4c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
 8008c52:	e012      	b.n	8008c7a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	4413      	add	r3, r2
 8008c5a:	7819      	ldrb	r1, [r3, #0]
 8008c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	4413      	add	r3, r2
 8008c62:	3334      	adds	r3, #52	; 0x34
 8008c64:	460a      	mov	r2, r1
 8008c66:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d006      	beq.n	8008c82 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	3301      	adds	r3, #1
 8008c78:	61fb      	str	r3, [r7, #28]
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	2b1f      	cmp	r3, #31
 8008c7e:	d9e9      	bls.n	8008c54 <prvInitialiseNewTask+0x5e>
 8008c80:	e000      	b.n	8008c84 <prvInitialiseNewTask+0x8e>
		{
			break;
 8008c82:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	2b37      	cmp	r3, #55	; 0x37
 8008c90:	d901      	bls.n	8008c96 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c92:	2337      	movs	r3, #55	; 0x37
 8008c94:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ca0:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	3304      	adds	r3, #4
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fe fdbc 	bl	800782a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	3318      	adds	r3, #24
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe fdb7 	bl	800782a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	2200      	movs	r2, #0
 8008cdc:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	68f9      	ldr	r1, [r7, #12]
 8008cea:	69b8      	ldr	r0, [r7, #24]
 8008cec:	f001 fa16 	bl	800a11c <pxPortInitialiseStack>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d02:	bf00      	nop
 8008d04:	3720      	adds	r7, #32
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d14:	f001 faf2 	bl	800a2fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d18:	4b2d      	ldr	r3, [pc, #180]	; (8008dd0 <prvAddNewTaskToReadyList+0xc4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	4a2c      	ldr	r2, [pc, #176]	; (8008dd0 <prvAddNewTaskToReadyList+0xc4>)
 8008d20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d22:	4b2c      	ldr	r3, [pc, #176]	; (8008dd4 <prvAddNewTaskToReadyList+0xc8>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d109      	bne.n	8008d3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d2a:	4a2a      	ldr	r2, [pc, #168]	; (8008dd4 <prvAddNewTaskToReadyList+0xc8>)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d30:	4b27      	ldr	r3, [pc, #156]	; (8008dd0 <prvAddNewTaskToReadyList+0xc4>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d110      	bne.n	8008d5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d38:	f000 fc34 	bl	80095a4 <prvInitialiseTaskLists>
 8008d3c:	e00d      	b.n	8008d5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d3e:	4b26      	ldr	r3, [pc, #152]	; (8008dd8 <prvAddNewTaskToReadyList+0xcc>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d109      	bne.n	8008d5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d46:	4b23      	ldr	r3, [pc, #140]	; (8008dd4 <prvAddNewTaskToReadyList+0xc8>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d802      	bhi.n	8008d5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d54:	4a1f      	ldr	r2, [pc, #124]	; (8008dd4 <prvAddNewTaskToReadyList+0xc8>)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d5a:	4b20      	ldr	r3, [pc, #128]	; (8008ddc <prvAddNewTaskToReadyList+0xd0>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	4a1e      	ldr	r2, [pc, #120]	; (8008ddc <prvAddNewTaskToReadyList+0xd0>)
 8008d62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d64:	4b1d      	ldr	r3, [pc, #116]	; (8008ddc <prvAddNewTaskToReadyList+0xd0>)
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d70:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <prvAddNewTaskToReadyList+0xd4>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d903      	bls.n	8008d80 <prvAddNewTaskToReadyList+0x74>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	4a18      	ldr	r2, [pc, #96]	; (8008de0 <prvAddNewTaskToReadyList+0xd4>)
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4a15      	ldr	r2, [pc, #84]	; (8008de4 <prvAddNewTaskToReadyList+0xd8>)
 8008d8e:	441a      	add	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4619      	mov	r1, r3
 8008d96:	4610      	mov	r0, r2
 8008d98:	f7fe fd53 	bl	8007842 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d9c:	f001 fade 	bl	800a35c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008da0:	4b0d      	ldr	r3, [pc, #52]	; (8008dd8 <prvAddNewTaskToReadyList+0xcc>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00e      	beq.n	8008dc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008da8:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <prvAddNewTaskToReadyList+0xc8>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d207      	bcs.n	8008dc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008db6:	4b0c      	ldr	r3, [pc, #48]	; (8008de8 <prvAddNewTaskToReadyList+0xdc>)
 8008db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000980 	.word	0x20000980
 8008dd4:	200004ac 	.word	0x200004ac
 8008dd8:	2000098c 	.word	0x2000098c
 8008ddc:	2000099c 	.word	0x2000099c
 8008de0:	20000988 	.word	0x20000988
 8008de4:	200004b0 	.word	0x200004b0
 8008de8:	e000ed04 	.word	0xe000ed04

08008dec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008df4:	2300      	movs	r3, #0
 8008df6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d017      	beq.n	8008e2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008dfe:	4b13      	ldr	r3, [pc, #76]	; (8008e4c <vTaskDelay+0x60>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00a      	beq.n	8008e1c <vTaskDelay+0x30>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	60bb      	str	r3, [r7, #8]
}
 8008e18:	bf00      	nop
 8008e1a:	e7fe      	b.n	8008e1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e1c:	f000 f882 	bl	8008f24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e20:	2100      	movs	r1, #0
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fe14 	bl	8009a50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e28:	f000 f88a 	bl	8008f40 <xTaskResumeAll>
 8008e2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d107      	bne.n	8008e44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008e34:	4b06      	ldr	r3, [pc, #24]	; (8008e50 <vTaskDelay+0x64>)
 8008e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	200009a8 	.word	0x200009a8
 8008e50:	e000ed04 	.word	0xe000ed04

08008e54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08a      	sub	sp, #40	; 0x28
 8008e58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e62:	463a      	mov	r2, r7
 8008e64:	1d39      	adds	r1, r7, #4
 8008e66:	f107 0308 	add.w	r3, r7, #8
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe fc8e 	bl	800778c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	9202      	str	r2, [sp, #8]
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	2300      	movs	r3, #0
 8008e80:	460a      	mov	r2, r1
 8008e82:	4922      	ldr	r1, [pc, #136]	; (8008f0c <vTaskStartScheduler+0xb8>)
 8008e84:	4822      	ldr	r0, [pc, #136]	; (8008f10 <vTaskStartScheduler+0xbc>)
 8008e86:	f7ff fe15 	bl	8008ab4 <xTaskCreateStatic>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	4a21      	ldr	r2, [pc, #132]	; (8008f14 <vTaskStartScheduler+0xc0>)
 8008e8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e90:	4b20      	ldr	r3, [pc, #128]	; (8008f14 <vTaskStartScheduler+0xc0>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	617b      	str	r3, [r7, #20]
 8008e9c:	e001      	b.n	8008ea2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d102      	bne.n	8008eae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ea8:	f000 fe26 	bl	8009af8 <xTimerCreateTimerTask>
 8008eac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d118      	bne.n	8008ee6 <vTaskStartScheduler+0x92>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	613b      	str	r3, [r7, #16]
}
 8008ec6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ec8:	4b13      	ldr	r3, [pc, #76]	; (8008f18 <vTaskStartScheduler+0xc4>)
 8008eca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ece:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ed0:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <vTaskStartScheduler+0xc8>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008ed6:	4b12      	ldr	r3, [pc, #72]	; (8008f20 <vTaskStartScheduler+0xcc>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008edc:	f7f7 fa76 	bl	80003cc <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ee0:	f001 f99a 	bl	800a218 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ee4:	e00e      	b.n	8008f04 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eec:	d10a      	bne.n	8008f04 <vTaskStartScheduler+0xb0>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	60fb      	str	r3, [r7, #12]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <vTaskStartScheduler+0xae>
}
 8008f04:	bf00      	nop
 8008f06:	3718      	adds	r7, #24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	0800cda8 	.word	0x0800cda8
 8008f10:	08009575 	.word	0x08009575
 8008f14:	200009a4 	.word	0x200009a4
 8008f18:	200009a0 	.word	0x200009a0
 8008f1c:	2000098c 	.word	0x2000098c
 8008f20:	20000984 	.word	0x20000984

08008f24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f24:	b480      	push	{r7}
 8008f26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008f28:	4b04      	ldr	r3, [pc, #16]	; (8008f3c <vTaskSuspendAll+0x18>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	4a03      	ldr	r2, [pc, #12]	; (8008f3c <vTaskSuspendAll+0x18>)
 8008f30:	6013      	str	r3, [r2, #0]
}
 8008f32:	bf00      	nop
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bc80      	pop	{r7}
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	200009a8 	.word	0x200009a8

08008f40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f46:	2300      	movs	r3, #0
 8008f48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f4e:	4b42      	ldr	r3, [pc, #264]	; (8009058 <xTaskResumeAll+0x118>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10a      	bne.n	8008f6c <xTaskResumeAll+0x2c>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	603b      	str	r3, [r7, #0]
}
 8008f68:	bf00      	nop
 8008f6a:	e7fe      	b.n	8008f6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f6c:	f001 f9c6 	bl	800a2fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f70:	4b39      	ldr	r3, [pc, #228]	; (8009058 <xTaskResumeAll+0x118>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3b01      	subs	r3, #1
 8008f76:	4a38      	ldr	r2, [pc, #224]	; (8009058 <xTaskResumeAll+0x118>)
 8008f78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f7a:	4b37      	ldr	r3, [pc, #220]	; (8009058 <xTaskResumeAll+0x118>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d162      	bne.n	8009048 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f82:	4b36      	ldr	r3, [pc, #216]	; (800905c <xTaskResumeAll+0x11c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d05e      	beq.n	8009048 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f8a:	e02f      	b.n	8008fec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008f8c:	4b34      	ldr	r3, [pc, #208]	; (8009060 <xTaskResumeAll+0x120>)
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3318      	adds	r3, #24
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fe fcad 	bl	80078f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fe fca8 	bl	80078f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fac:	4b2d      	ldr	r3, [pc, #180]	; (8009064 <xTaskResumeAll+0x124>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d903      	bls.n	8008fbc <xTaskResumeAll+0x7c>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb8:	4a2a      	ldr	r2, [pc, #168]	; (8009064 <xTaskResumeAll+0x124>)
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4a27      	ldr	r2, [pc, #156]	; (8009068 <xTaskResumeAll+0x128>)
 8008fca:	441a      	add	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3304      	adds	r3, #4
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	f7fe fc35 	bl	8007842 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fdc:	4b23      	ldr	r3, [pc, #140]	; (800906c <xTaskResumeAll+0x12c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d302      	bcc.n	8008fec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008fe6:	4b22      	ldr	r3, [pc, #136]	; (8009070 <xTaskResumeAll+0x130>)
 8008fe8:	2201      	movs	r2, #1
 8008fea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fec:	4b1c      	ldr	r3, [pc, #112]	; (8009060 <xTaskResumeAll+0x120>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1cb      	bne.n	8008f8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ffa:	f000 fb71 	bl	80096e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008ffe:	4b1d      	ldr	r3, [pc, #116]	; (8009074 <xTaskResumeAll+0x134>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d010      	beq.n	800902c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800900a:	f000 f845 	bl	8009098 <xTaskIncrementTick>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009014:	4b16      	ldr	r3, [pc, #88]	; (8009070 <xTaskResumeAll+0x130>)
 8009016:	2201      	movs	r2, #1
 8009018:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3b01      	subs	r3, #1
 800901e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1f1      	bne.n	800900a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009026:	4b13      	ldr	r3, [pc, #76]	; (8009074 <xTaskResumeAll+0x134>)
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800902c:	4b10      	ldr	r3, [pc, #64]	; (8009070 <xTaskResumeAll+0x130>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d009      	beq.n	8009048 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009034:	2301      	movs	r3, #1
 8009036:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009038:	4b0f      	ldr	r3, [pc, #60]	; (8009078 <xTaskResumeAll+0x138>)
 800903a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009048:	f001 f988 	bl	800a35c <vPortExitCritical>

	return xAlreadyYielded;
 800904c:	68bb      	ldr	r3, [r7, #8]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	200009a8 	.word	0x200009a8
 800905c:	20000980 	.word	0x20000980
 8009060:	20000940 	.word	0x20000940
 8009064:	20000988 	.word	0x20000988
 8009068:	200004b0 	.word	0x200004b0
 800906c:	200004ac 	.word	0x200004ac
 8009070:	20000994 	.word	0x20000994
 8009074:	20000990 	.word	0x20000990
 8009078:	e000ed04 	.word	0xe000ed04

0800907c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009082:	4b04      	ldr	r3, [pc, #16]	; (8009094 <xTaskGetTickCount+0x18>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009088:	687b      	ldr	r3, [r7, #4]
}
 800908a:	4618      	mov	r0, r3
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr
 8009094:	20000984 	.word	0x20000984

08009098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800909e:	2300      	movs	r3, #0
 80090a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090a2:	4b51      	ldr	r3, [pc, #324]	; (80091e8 <xTaskIncrementTick+0x150>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f040 808e 	bne.w	80091c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090ac:	4b4f      	ldr	r3, [pc, #316]	; (80091ec <xTaskIncrementTick+0x154>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3301      	adds	r3, #1
 80090b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090b4:	4a4d      	ldr	r2, [pc, #308]	; (80091ec <xTaskIncrementTick+0x154>)
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d120      	bne.n	8009102 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80090c0:	4b4b      	ldr	r3, [pc, #300]	; (80091f0 <xTaskIncrementTick+0x158>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	603b      	str	r3, [r7, #0]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <xTaskIncrementTick+0x46>
 80090e0:	4b43      	ldr	r3, [pc, #268]	; (80091f0 <xTaskIncrementTick+0x158>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	4b43      	ldr	r3, [pc, #268]	; (80091f4 <xTaskIncrementTick+0x15c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a41      	ldr	r2, [pc, #260]	; (80091f0 <xTaskIncrementTick+0x158>)
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	4a41      	ldr	r2, [pc, #260]	; (80091f4 <xTaskIncrementTick+0x15c>)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	4b40      	ldr	r3, [pc, #256]	; (80091f8 <xTaskIncrementTick+0x160>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3301      	adds	r3, #1
 80090fa:	4a3f      	ldr	r2, [pc, #252]	; (80091f8 <xTaskIncrementTick+0x160>)
 80090fc:	6013      	str	r3, [r2, #0]
 80090fe:	f000 faef 	bl	80096e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009102:	4b3e      	ldr	r3, [pc, #248]	; (80091fc <xTaskIncrementTick+0x164>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	429a      	cmp	r2, r3
 800910a:	d34e      	bcc.n	80091aa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800910c:	4b38      	ldr	r3, [pc, #224]	; (80091f0 <xTaskIncrementTick+0x158>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <xTaskIncrementTick+0x82>
 8009116:	2301      	movs	r3, #1
 8009118:	e000      	b.n	800911c <xTaskIncrementTick+0x84>
 800911a:	2300      	movs	r3, #0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009120:	4b36      	ldr	r3, [pc, #216]	; (80091fc <xTaskIncrementTick+0x164>)
 8009122:	f04f 32ff 	mov.w	r2, #4294967295
 8009126:	601a      	str	r2, [r3, #0]
					break;
 8009128:	e03f      	b.n	80091aa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800912a:	4b31      	ldr	r3, [pc, #196]	; (80091f0 <xTaskIncrementTick+0x158>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	429a      	cmp	r2, r3
 8009140:	d203      	bcs.n	800914a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009142:	4a2e      	ldr	r2, [pc, #184]	; (80091fc <xTaskIncrementTick+0x164>)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6013      	str	r3, [r2, #0]
						break;
 8009148:	e02f      	b.n	80091aa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	3304      	adds	r3, #4
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fbd2 	bl	80078f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009158:	2b00      	cmp	r3, #0
 800915a:	d004      	beq.n	8009166 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	3318      	adds	r3, #24
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe fbc9 	bl	80078f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916a:	4b25      	ldr	r3, [pc, #148]	; (8009200 <xTaskIncrementTick+0x168>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d903      	bls.n	800917a <xTaskIncrementTick+0xe2>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009176:	4a22      	ldr	r2, [pc, #136]	; (8009200 <xTaskIncrementTick+0x168>)
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4a1f      	ldr	r2, [pc, #124]	; (8009204 <xTaskIncrementTick+0x16c>)
 8009188:	441a      	add	r2, r3
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	3304      	adds	r3, #4
 800918e:	4619      	mov	r1, r3
 8009190:	4610      	mov	r0, r2
 8009192:	f7fe fb56 	bl	8007842 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919a:	4b1b      	ldr	r3, [pc, #108]	; (8009208 <xTaskIncrementTick+0x170>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d3b3      	bcc.n	800910c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80091a4:	2301      	movs	r3, #1
 80091a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091a8:	e7b0      	b.n	800910c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091aa:	4b17      	ldr	r3, [pc, #92]	; (8009208 <xTaskIncrementTick+0x170>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b0:	4914      	ldr	r1, [pc, #80]	; (8009204 <xTaskIncrementTick+0x16c>)
 80091b2:	4613      	mov	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	440b      	add	r3, r1
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d907      	bls.n	80091d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80091c2:	2301      	movs	r3, #1
 80091c4:	617b      	str	r3, [r7, #20]
 80091c6:	e004      	b.n	80091d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80091c8:	4b10      	ldr	r3, [pc, #64]	; (800920c <xTaskIncrementTick+0x174>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	4a0f      	ldr	r2, [pc, #60]	; (800920c <xTaskIncrementTick+0x174>)
 80091d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80091d2:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <xTaskIncrementTick+0x178>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80091da:	2301      	movs	r3, #1
 80091dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80091de:	697b      	ldr	r3, [r7, #20]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	200009a8 	.word	0x200009a8
 80091ec:	20000984 	.word	0x20000984
 80091f0:	20000938 	.word	0x20000938
 80091f4:	2000093c 	.word	0x2000093c
 80091f8:	20000998 	.word	0x20000998
 80091fc:	200009a0 	.word	0x200009a0
 8009200:	20000988 	.word	0x20000988
 8009204:	200004b0 	.word	0x200004b0
 8009208:	200004ac 	.word	0x200004ac
 800920c:	20000990 	.word	0x20000990
 8009210:	20000994 	.word	0x20000994

08009214 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800921a:	4b33      	ldr	r3, [pc, #204]	; (80092e8 <vTaskSwitchContext+0xd4>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009222:	4b32      	ldr	r3, [pc, #200]	; (80092ec <vTaskSwitchContext+0xd8>)
 8009224:	2201      	movs	r2, #1
 8009226:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009228:	e05a      	b.n	80092e0 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 800922a:	4b30      	ldr	r3, [pc, #192]	; (80092ec <vTaskSwitchContext+0xd8>)
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009230:	f7f7 f8d2 	bl	80003d8 <getRunTimeCounterValue>
 8009234:	4603      	mov	r3, r0
 8009236:	4a2e      	ldr	r2, [pc, #184]	; (80092f0 <vTaskSwitchContext+0xdc>)
 8009238:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800923a:	4b2d      	ldr	r3, [pc, #180]	; (80092f0 <vTaskSwitchContext+0xdc>)
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	4b2d      	ldr	r3, [pc, #180]	; (80092f4 <vTaskSwitchContext+0xe0>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d909      	bls.n	800925a <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009246:	4b2c      	ldr	r3, [pc, #176]	; (80092f8 <vTaskSwitchContext+0xe4>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800924c:	4a28      	ldr	r2, [pc, #160]	; (80092f0 <vTaskSwitchContext+0xdc>)
 800924e:	6810      	ldr	r0, [r2, #0]
 8009250:	4a28      	ldr	r2, [pc, #160]	; (80092f4 <vTaskSwitchContext+0xe0>)
 8009252:	6812      	ldr	r2, [r2, #0]
 8009254:	1a82      	subs	r2, r0, r2
 8009256:	440a      	add	r2, r1
 8009258:	665a      	str	r2, [r3, #100]	; 0x64
				ulTaskSwitchedInTime = ulTotalRunTime;
 800925a:	4b25      	ldr	r3, [pc, #148]	; (80092f0 <vTaskSwitchContext+0xdc>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a25      	ldr	r2, [pc, #148]	; (80092f4 <vTaskSwitchContext+0xe0>)
 8009260:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009262:	4b26      	ldr	r3, [pc, #152]	; (80092fc <vTaskSwitchContext+0xe8>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	e010      	b.n	800928c <vTaskSwitchContext+0x78>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10a      	bne.n	8009286 <vTaskSwitchContext+0x72>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	607b      	str	r3, [r7, #4]
}
 8009282:	bf00      	nop
 8009284:	e7fe      	b.n	8009284 <vTaskSwitchContext+0x70>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3b01      	subs	r3, #1
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	491c      	ldr	r1, [pc, #112]	; (8009300 <vTaskSwitchContext+0xec>)
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	4613      	mov	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d0e4      	beq.n	800926a <vTaskSwitchContext+0x56>
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	4613      	mov	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4a15      	ldr	r2, [pc, #84]	; (8009300 <vTaskSwitchContext+0xec>)
 80092ac:	4413      	add	r3, r2
 80092ae:	60bb      	str	r3, [r7, #8]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	605a      	str	r2, [r3, #4]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	3308      	adds	r3, #8
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d104      	bne.n	80092d0 <vTaskSwitchContext+0xbc>
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	605a      	str	r2, [r3, #4]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	4a08      	ldr	r2, [pc, #32]	; (80092f8 <vTaskSwitchContext+0xe4>)
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	4a08      	ldr	r2, [pc, #32]	; (80092fc <vTaskSwitchContext+0xe8>)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6013      	str	r3, [r2, #0]
}
 80092e0:	bf00      	nop
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	200009a8 	.word	0x200009a8
 80092ec:	20000994 	.word	0x20000994
 80092f0:	200009b0 	.word	0x200009b0
 80092f4:	200009ac 	.word	0x200009ac
 80092f8:	200004ac 	.word	0x200004ac
 80092fc:	20000988 	.word	0x20000988
 8009300:	200004b0 	.word	0x200004b0

08009304 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	60fb      	str	r3, [r7, #12]
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800932a:	4b07      	ldr	r3, [pc, #28]	; (8009348 <vTaskPlaceOnEventList+0x44>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3318      	adds	r3, #24
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7fe faa8 	bl	8007888 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009338:	2101      	movs	r1, #1
 800933a:	6838      	ldr	r0, [r7, #0]
 800933c:	f000 fb88 	bl	8009a50 <prvAddCurrentTaskToDelayedList>
}
 8009340:	bf00      	nop
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	200004ac 	.word	0x200004ac

0800934c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10a      	bne.n	8009374 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	617b      	str	r3, [r7, #20]
}
 8009370:	bf00      	nop
 8009372:	e7fe      	b.n	8009372 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009374:	4b0a      	ldr	r3, [pc, #40]	; (80093a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3318      	adds	r3, #24
 800937a:	4619      	mov	r1, r3
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f7fe fa60 	bl	8007842 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009388:	f04f 33ff 	mov.w	r3, #4294967295
 800938c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800938e:	6879      	ldr	r1, [r7, #4]
 8009390:	68b8      	ldr	r0, [r7, #8]
 8009392:	f000 fb5d 	bl	8009a50 <prvAddCurrentTaskToDelayedList>
	}
 8009396:	bf00      	nop
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	200004ac 	.word	0x200004ac

080093a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	60fb      	str	r3, [r7, #12]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	3318      	adds	r3, #24
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fe fa8f 	bl	80078f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093da:	4b1e      	ldr	r3, [pc, #120]	; (8009454 <xTaskRemoveFromEventList+0xb0>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d11d      	bne.n	800941e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	3304      	adds	r3, #4
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fa86 	bl	80078f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f0:	4b19      	ldr	r3, [pc, #100]	; (8009458 <xTaskRemoveFromEventList+0xb4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d903      	bls.n	8009400 <xTaskRemoveFromEventList+0x5c>
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	4a16      	ldr	r2, [pc, #88]	; (8009458 <xTaskRemoveFromEventList+0xb4>)
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009404:	4613      	mov	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4413      	add	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4a13      	ldr	r2, [pc, #76]	; (800945c <xTaskRemoveFromEventList+0xb8>)
 800940e:	441a      	add	r2, r3
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	3304      	adds	r3, #4
 8009414:	4619      	mov	r1, r3
 8009416:	4610      	mov	r0, r2
 8009418:	f7fe fa13 	bl	8007842 <vListInsertEnd>
 800941c:	e005      	b.n	800942a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	3318      	adds	r3, #24
 8009422:	4619      	mov	r1, r3
 8009424:	480e      	ldr	r0, [pc, #56]	; (8009460 <xTaskRemoveFromEventList+0xbc>)
 8009426:	f7fe fa0c 	bl	8007842 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942e:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <xTaskRemoveFromEventList+0xc0>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	429a      	cmp	r2, r3
 8009436:	d905      	bls.n	8009444 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009438:	2301      	movs	r3, #1
 800943a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800943c:	4b0a      	ldr	r3, [pc, #40]	; (8009468 <xTaskRemoveFromEventList+0xc4>)
 800943e:	2201      	movs	r2, #1
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	e001      	b.n	8009448 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009444:	2300      	movs	r3, #0
 8009446:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009448:	697b      	ldr	r3, [r7, #20]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	200009a8 	.word	0x200009a8
 8009458:	20000988 	.word	0x20000988
 800945c:	200004b0 	.word	0x200004b0
 8009460:	20000940 	.word	0x20000940
 8009464:	200004ac 	.word	0x200004ac
 8009468:	20000994 	.word	0x20000994

0800946c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009474:	4b06      	ldr	r3, [pc, #24]	; (8009490 <vTaskInternalSetTimeOutState+0x24>)
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800947c:	4b05      	ldr	r3, [pc, #20]	; (8009494 <vTaskInternalSetTimeOutState+0x28>)
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	605a      	str	r2, [r3, #4]
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	bc80      	pop	{r7}
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	20000998 	.word	0x20000998
 8009494:	20000984 	.word	0x20000984

08009498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b088      	sub	sp, #32
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10a      	bne.n	80094be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	613b      	str	r3, [r7, #16]
}
 80094ba:	bf00      	nop
 80094bc:	e7fe      	b.n	80094bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	60fb      	str	r3, [r7, #12]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80094da:	f000 ff0f 	bl	800a2fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094de:	4b1d      	ldr	r3, [pc, #116]	; (8009554 <xTaskCheckForTimeOut+0xbc>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f6:	d102      	bne.n	80094fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094f8:	2300      	movs	r3, #0
 80094fa:	61fb      	str	r3, [r7, #28]
 80094fc:	e023      	b.n	8009546 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	4b15      	ldr	r3, [pc, #84]	; (8009558 <xTaskCheckForTimeOut+0xc0>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d007      	beq.n	800951a <xTaskCheckForTimeOut+0x82>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	69ba      	ldr	r2, [r7, #24]
 8009510:	429a      	cmp	r2, r3
 8009512:	d302      	bcc.n	800951a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009514:	2301      	movs	r3, #1
 8009516:	61fb      	str	r3, [r7, #28]
 8009518:	e015      	b.n	8009546 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	429a      	cmp	r2, r3
 8009522:	d20b      	bcs.n	800953c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	1ad2      	subs	r2, r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff ff9b 	bl	800946c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009536:	2300      	movs	r3, #0
 8009538:	61fb      	str	r3, [r7, #28]
 800953a:	e004      	b.n	8009546 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2200      	movs	r2, #0
 8009540:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009542:	2301      	movs	r3, #1
 8009544:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009546:	f000 ff09 	bl	800a35c <vPortExitCritical>

	return xReturn;
 800954a:	69fb      	ldr	r3, [r7, #28]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3720      	adds	r7, #32
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	20000984 	.word	0x20000984
 8009558:	20000998 	.word	0x20000998

0800955c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009560:	4b03      	ldr	r3, [pc, #12]	; (8009570 <vTaskMissedYield+0x14>)
 8009562:	2201      	movs	r2, #1
 8009564:	601a      	str	r2, [r3, #0]
}
 8009566:	bf00      	nop
 8009568:	46bd      	mov	sp, r7
 800956a:	bc80      	pop	{r7}
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	20000994 	.word	0x20000994

08009574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800957c:	f000 f852 	bl	8009624 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009580:	4b06      	ldr	r3, [pc, #24]	; (800959c <prvIdleTask+0x28>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d9f9      	bls.n	800957c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009588:	4b05      	ldr	r3, [pc, #20]	; (80095a0 <prvIdleTask+0x2c>)
 800958a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009598:	e7f0      	b.n	800957c <prvIdleTask+0x8>
 800959a:	bf00      	nop
 800959c:	200004b0 	.word	0x200004b0
 80095a0:	e000ed04 	.word	0xe000ed04

080095a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095aa:	2300      	movs	r3, #0
 80095ac:	607b      	str	r3, [r7, #4]
 80095ae:	e00c      	b.n	80095ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4a12      	ldr	r2, [pc, #72]	; (8009604 <prvInitialiseTaskLists+0x60>)
 80095bc:	4413      	add	r3, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe f914 	bl	80077ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	3301      	adds	r3, #1
 80095c8:	607b      	str	r3, [r7, #4]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b37      	cmp	r3, #55	; 0x37
 80095ce:	d9ef      	bls.n	80095b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095d0:	480d      	ldr	r0, [pc, #52]	; (8009608 <prvInitialiseTaskLists+0x64>)
 80095d2:	f7fe f90b 	bl	80077ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095d6:	480d      	ldr	r0, [pc, #52]	; (800960c <prvInitialiseTaskLists+0x68>)
 80095d8:	f7fe f908 	bl	80077ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095dc:	480c      	ldr	r0, [pc, #48]	; (8009610 <prvInitialiseTaskLists+0x6c>)
 80095de:	f7fe f905 	bl	80077ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095e2:	480c      	ldr	r0, [pc, #48]	; (8009614 <prvInitialiseTaskLists+0x70>)
 80095e4:	f7fe f902 	bl	80077ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095e8:	480b      	ldr	r0, [pc, #44]	; (8009618 <prvInitialiseTaskLists+0x74>)
 80095ea:	f7fe f8ff 	bl	80077ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095ee:	4b0b      	ldr	r3, [pc, #44]	; (800961c <prvInitialiseTaskLists+0x78>)
 80095f0:	4a05      	ldr	r2, [pc, #20]	; (8009608 <prvInitialiseTaskLists+0x64>)
 80095f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095f4:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <prvInitialiseTaskLists+0x7c>)
 80095f6:	4a05      	ldr	r2, [pc, #20]	; (800960c <prvInitialiseTaskLists+0x68>)
 80095f8:	601a      	str	r2, [r3, #0]
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	200004b0 	.word	0x200004b0
 8009608:	20000910 	.word	0x20000910
 800960c:	20000924 	.word	0x20000924
 8009610:	20000940 	.word	0x20000940
 8009614:	20000954 	.word	0x20000954
 8009618:	2000096c 	.word	0x2000096c
 800961c:	20000938 	.word	0x20000938
 8009620:	2000093c 	.word	0x2000093c

08009624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800962a:	e019      	b.n	8009660 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800962c:	f000 fe66 	bl	800a2fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009630:	4b10      	ldr	r3, [pc, #64]	; (8009674 <prvCheckTasksWaitingTermination+0x50>)
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3304      	adds	r3, #4
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe f95b 	bl	80078f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009642:	4b0d      	ldr	r3, [pc, #52]	; (8009678 <prvCheckTasksWaitingTermination+0x54>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3b01      	subs	r3, #1
 8009648:	4a0b      	ldr	r2, [pc, #44]	; (8009678 <prvCheckTasksWaitingTermination+0x54>)
 800964a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800964c:	4b0b      	ldr	r3, [pc, #44]	; (800967c <prvCheckTasksWaitingTermination+0x58>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3b01      	subs	r3, #1
 8009652:	4a0a      	ldr	r2, [pc, #40]	; (800967c <prvCheckTasksWaitingTermination+0x58>)
 8009654:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009656:	f000 fe81 	bl	800a35c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f810 	bl	8009680 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009660:	4b06      	ldr	r3, [pc, #24]	; (800967c <prvCheckTasksWaitingTermination+0x58>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e1      	bne.n	800962c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009668:	bf00      	nop
 800966a:	bf00      	nop
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20000954 	.word	0x20000954
 8009678:	20000980 	.word	0x20000980
 800967c:	20000968 	.word	0x20000968

08009680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800968e:	2b00      	cmp	r3, #0
 8009690:	d108      	bne.n	80096a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009696:	4618      	mov	r0, r3
 8009698:	f000 fff4 	bl	800a684 <vPortFree>
				vPortFree( pxTCB );
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fff1 	bl	800a684 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096a2:	e018      	b.n	80096d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d103      	bne.n	80096b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 ffe8 	bl	800a684 <vPortFree>
	}
 80096b4:	e00f      	b.n	80096d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d00a      	beq.n	80096d6 <prvDeleteTCB+0x56>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	60fb      	str	r3, [r7, #12]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <prvDeleteTCB+0x54>
	}
 80096d6:	bf00      	nop
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096e6:	4b0e      	ldr	r3, [pc, #56]	; (8009720 <prvResetNextTaskUnblockTime+0x40>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <prvResetNextTaskUnblockTime+0x14>
 80096f0:	2301      	movs	r3, #1
 80096f2:	e000      	b.n	80096f6 <prvResetNextTaskUnblockTime+0x16>
 80096f4:	2300      	movs	r3, #0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d004      	beq.n	8009704 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096fa:	4b0a      	ldr	r3, [pc, #40]	; (8009724 <prvResetNextTaskUnblockTime+0x44>)
 80096fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009700:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009702:	e008      	b.n	8009716 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009704:	4b06      	ldr	r3, [pc, #24]	; (8009720 <prvResetNextTaskUnblockTime+0x40>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	4a04      	ldr	r2, [pc, #16]	; (8009724 <prvResetNextTaskUnblockTime+0x44>)
 8009714:	6013      	str	r3, [r2, #0]
}
 8009716:	bf00      	nop
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	bc80      	pop	{r7}
 800971e:	4770      	bx	lr
 8009720:	20000938 	.word	0x20000938
 8009724:	200009a0 	.word	0x200009a0

08009728 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800972e:	4b0b      	ldr	r3, [pc, #44]	; (800975c <xTaskGetSchedulerState+0x34>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d102      	bne.n	800973c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009736:	2301      	movs	r3, #1
 8009738:	607b      	str	r3, [r7, #4]
 800973a:	e008      	b.n	800974e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800973c:	4b08      	ldr	r3, [pc, #32]	; (8009760 <xTaskGetSchedulerState+0x38>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d102      	bne.n	800974a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009744:	2302      	movs	r3, #2
 8009746:	607b      	str	r3, [r7, #4]
 8009748:	e001      	b.n	800974e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800974a:	2300      	movs	r3, #0
 800974c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800974e:	687b      	ldr	r3, [r7, #4]
	}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	2000098c 	.word	0x2000098c
 8009760:	200009a8 	.word	0x200009a8

08009764 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009770:	2300      	movs	r3, #0
 8009772:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d056      	beq.n	8009828 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800977e:	4b2d      	ldr	r3, [pc, #180]	; (8009834 <xTaskPriorityInherit+0xd0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	429a      	cmp	r2, r3
 8009786:	d246      	bcs.n	8009816 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	2b00      	cmp	r3, #0
 800978e:	db06      	blt.n	800979e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009790:	4b28      	ldr	r3, [pc, #160]	; (8009834 <xTaskPriorityInherit+0xd0>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009796:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	6959      	ldr	r1, [r3, #20]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a6:	4613      	mov	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4a22      	ldr	r2, [pc, #136]	; (8009838 <xTaskPriorityInherit+0xd4>)
 80097b0:	4413      	add	r3, r2
 80097b2:	4299      	cmp	r1, r3
 80097b4:	d101      	bne.n	80097ba <xTaskPriorityInherit+0x56>
 80097b6:	2301      	movs	r3, #1
 80097b8:	e000      	b.n	80097bc <xTaskPriorityInherit+0x58>
 80097ba:	2300      	movs	r3, #0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d022      	beq.n	8009806 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fe f897 	bl	80078f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097ca:	4b1a      	ldr	r3, [pc, #104]	; (8009834 <xTaskPriorityInherit+0xd0>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d8:	4b18      	ldr	r3, [pc, #96]	; (800983c <xTaskPriorityInherit+0xd8>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d903      	bls.n	80097e8 <xTaskPriorityInherit+0x84>
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e4:	4a15      	ldr	r2, [pc, #84]	; (800983c <xTaskPriorityInherit+0xd8>)
 80097e6:	6013      	str	r3, [r2, #0]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ec:	4613      	mov	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4a10      	ldr	r2, [pc, #64]	; (8009838 <xTaskPriorityInherit+0xd4>)
 80097f6:	441a      	add	r2, r3
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	3304      	adds	r3, #4
 80097fc:	4619      	mov	r1, r3
 80097fe:	4610      	mov	r0, r2
 8009800:	f7fe f81f 	bl	8007842 <vListInsertEnd>
 8009804:	e004      	b.n	8009810 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009806:	4b0b      	ldr	r3, [pc, #44]	; (8009834 <xTaskPriorityInherit+0xd0>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009810:	2301      	movs	r3, #1
 8009812:	60fb      	str	r3, [r7, #12]
 8009814:	e008      	b.n	8009828 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800981a:	4b06      	ldr	r3, [pc, #24]	; (8009834 <xTaskPriorityInherit+0xd0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	429a      	cmp	r2, r3
 8009822:	d201      	bcs.n	8009828 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009824:	2301      	movs	r3, #1
 8009826:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009828:	68fb      	ldr	r3, [r7, #12]
	}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	200004ac 	.word	0x200004ac
 8009838:	200004b0 	.word	0x200004b0
 800983c:	20000988 	.word	0x20000988

08009840 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800984c:	2300      	movs	r3, #0
 800984e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d056      	beq.n	8009904 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009856:	4b2e      	ldr	r3, [pc, #184]	; (8009910 <xTaskPriorityDisinherit+0xd0>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	429a      	cmp	r2, r3
 800985e:	d00a      	beq.n	8009876 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	60fb      	str	r3, [r7, #12]
}
 8009872:	bf00      	nop
 8009874:	e7fe      	b.n	8009874 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10a      	bne.n	8009894 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	60bb      	str	r3, [r7, #8]
}
 8009890:	bf00      	nop
 8009892:	e7fe      	b.n	8009892 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009898:	1e5a      	subs	r2, r3, #1
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d02c      	beq.n	8009904 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d128      	bne.n	8009904 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	3304      	adds	r3, #4
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fe f81e 	bl	80078f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d4:	4b0f      	ldr	r3, [pc, #60]	; (8009914 <xTaskPriorityDisinherit+0xd4>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d903      	bls.n	80098e4 <xTaskPriorityDisinherit+0xa4>
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	4a0c      	ldr	r2, [pc, #48]	; (8009914 <xTaskPriorityDisinherit+0xd4>)
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4a09      	ldr	r2, [pc, #36]	; (8009918 <xTaskPriorityDisinherit+0xd8>)
 80098f2:	441a      	add	r2, r3
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	3304      	adds	r3, #4
 80098f8:	4619      	mov	r1, r3
 80098fa:	4610      	mov	r0, r2
 80098fc:	f7fd ffa1 	bl	8007842 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009900:	2301      	movs	r3, #1
 8009902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009904:	697b      	ldr	r3, [r7, #20]
	}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	200004ac 	.word	0x200004ac
 8009914:	20000988 	.word	0x20000988
 8009918:	200004b0 	.word	0x200004b0

0800991c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b088      	sub	sp, #32
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800992a:	2301      	movs	r3, #1
 800992c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d06f      	beq.n	8009a14 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10a      	bne.n	8009952 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	60fb      	str	r3, [r7, #12]
}
 800994e:	bf00      	nop
 8009950:	e7fe      	b.n	8009950 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	429a      	cmp	r2, r3
 800995a:	d902      	bls.n	8009962 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	e002      	b.n	8009968 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009966:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996c:	69fa      	ldr	r2, [r7, #28]
 800996e:	429a      	cmp	r2, r3
 8009970:	d050      	beq.n	8009a14 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	429a      	cmp	r2, r3
 800997a:	d14b      	bne.n	8009a14 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800997c:	4b27      	ldr	r3, [pc, #156]	; (8009a1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	69ba      	ldr	r2, [r7, #24]
 8009982:	429a      	cmp	r2, r3
 8009984:	d10a      	bne.n	800999c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	60bb      	str	r3, [r7, #8]
}
 8009998:	bf00      	nop
 800999a:	e7fe      	b.n	800999a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	69fa      	ldr	r2, [r7, #28]
 80099a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	db04      	blt.n	80099ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	6959      	ldr	r1, [r3, #20]
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	4613      	mov	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4a15      	ldr	r2, [pc, #84]	; (8009a20 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80099ca:	4413      	add	r3, r2
 80099cc:	4299      	cmp	r1, r3
 80099ce:	d101      	bne.n	80099d4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80099d0:	2301      	movs	r3, #1
 80099d2:	e000      	b.n	80099d6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80099d4:	2300      	movs	r3, #0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d01c      	beq.n	8009a14 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	3304      	adds	r3, #4
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fd ff8a 	bl	80078f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e8:	4b0e      	ldr	r3, [pc, #56]	; (8009a24 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d903      	bls.n	80099f8 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f4:	4a0b      	ldr	r2, [pc, #44]	; (8009a24 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80099f6:	6013      	str	r3, [r2, #0]
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fc:	4613      	mov	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4a06      	ldr	r2, [pc, #24]	; (8009a20 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009a06:	441a      	add	r2, r3
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4610      	mov	r0, r2
 8009a10:	f7fd ff17 	bl	8007842 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a14:	bf00      	nop
 8009a16:	3720      	adds	r7, #32
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	200004ac 	.word	0x200004ac
 8009a20:	200004b0 	.word	0x200004b0
 8009a24:	20000988 	.word	0x20000988

08009a28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009a28:	b480      	push	{r7}
 8009a2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009a2c:	4b07      	ldr	r3, [pc, #28]	; (8009a4c <pvTaskIncrementMutexHeldCount+0x24>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d004      	beq.n	8009a3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009a34:	4b05      	ldr	r3, [pc, #20]	; (8009a4c <pvTaskIncrementMutexHeldCount+0x24>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a3a:	3201      	adds	r2, #1
 8009a3c:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 8009a3e:	4b03      	ldr	r3, [pc, #12]	; (8009a4c <pvTaskIncrementMutexHeldCount+0x24>)
 8009a40:	681b      	ldr	r3, [r3, #0]
	}
 8009a42:	4618      	mov	r0, r3
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bc80      	pop	{r7}
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	200004ac 	.word	0x200004ac

08009a50 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a5a:	4b21      	ldr	r3, [pc, #132]	; (8009ae0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a60:	4b20      	ldr	r3, [pc, #128]	; (8009ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3304      	adds	r3, #4
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fd ff46 	bl	80078f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a72:	d10a      	bne.n	8009a8a <prvAddCurrentTaskToDelayedList+0x3a>
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d007      	beq.n	8009a8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a7a:	4b1a      	ldr	r3, [pc, #104]	; (8009ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3304      	adds	r3, #4
 8009a80:	4619      	mov	r1, r3
 8009a82:	4819      	ldr	r0, [pc, #100]	; (8009ae8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a84:	f7fd fedd 	bl	8007842 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a88:	e026      	b.n	8009ad8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4413      	add	r3, r2
 8009a90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a92:	4b14      	ldr	r3, [pc, #80]	; (8009ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d209      	bcs.n	8009ab6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <prvAddCurrentTaskToDelayedList+0x9c>)
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	4b0f      	ldr	r3, [pc, #60]	; (8009ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3304      	adds	r3, #4
 8009aac:	4619      	mov	r1, r3
 8009aae:	4610      	mov	r0, r2
 8009ab0:	f7fd feea 	bl	8007888 <vListInsert>
}
 8009ab4:	e010      	b.n	8009ad8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ab6:	4b0e      	ldr	r3, [pc, #56]	; (8009af0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	4b0a      	ldr	r3, [pc, #40]	; (8009ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	f7fd fee0 	bl	8007888 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ac8:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d202      	bcs.n	8009ad8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ad2:	4a08      	ldr	r2, [pc, #32]	; (8009af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	6013      	str	r3, [r2, #0]
}
 8009ad8:	bf00      	nop
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20000984 	.word	0x20000984
 8009ae4:	200004ac 	.word	0x200004ac
 8009ae8:	2000096c 	.word	0x2000096c
 8009aec:	2000093c 	.word	0x2000093c
 8009af0:	20000938 	.word	0x20000938
 8009af4:	200009a0 	.word	0x200009a0

08009af8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	; 0x28
 8009afc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b02:	f000 facb 	bl	800a09c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b06:	4b1c      	ldr	r3, [pc, #112]	; (8009b78 <xTimerCreateTimerTask+0x80>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d021      	beq.n	8009b52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b12:	2300      	movs	r3, #0
 8009b14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b16:	1d3a      	adds	r2, r7, #4
 8009b18:	f107 0108 	add.w	r1, r7, #8
 8009b1c:	f107 030c 	add.w	r3, r7, #12
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fd fe4b 	bl	80077bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b26:	6879      	ldr	r1, [r7, #4]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	9202      	str	r2, [sp, #8]
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	2302      	movs	r3, #2
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	460a      	mov	r2, r1
 8009b38:	4910      	ldr	r1, [pc, #64]	; (8009b7c <xTimerCreateTimerTask+0x84>)
 8009b3a:	4811      	ldr	r0, [pc, #68]	; (8009b80 <xTimerCreateTimerTask+0x88>)
 8009b3c:	f7fe ffba 	bl	8008ab4 <xTaskCreateStatic>
 8009b40:	4603      	mov	r3, r0
 8009b42:	4a10      	ldr	r2, [pc, #64]	; (8009b84 <xTimerCreateTimerTask+0x8c>)
 8009b44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b46:	4b0f      	ldr	r3, [pc, #60]	; (8009b84 <xTimerCreateTimerTask+0x8c>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10a      	bne.n	8009b6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	613b      	str	r3, [r7, #16]
}
 8009b6a:	bf00      	nop
 8009b6c:	e7fe      	b.n	8009b6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b6e:	697b      	ldr	r3, [r7, #20]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3718      	adds	r7, #24
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	200009e4 	.word	0x200009e4
 8009b7c:	0800cdd8 	.word	0x0800cdd8
 8009b80:	08009ca5 	.word	0x08009ca5
 8009b84:	200009e8 	.word	0x200009e8

08009b88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08a      	sub	sp, #40	; 0x28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
 8009b94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10a      	bne.n	8009bb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	623b      	str	r3, [r7, #32]
}
 8009bb2:	bf00      	nop
 8009bb4:	e7fe      	b.n	8009bb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bb6:	4b1a      	ldr	r3, [pc, #104]	; (8009c20 <xTimerGenericCommand+0x98>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d02a      	beq.n	8009c14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b05      	cmp	r3, #5
 8009bce:	dc18      	bgt.n	8009c02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bd0:	f7ff fdaa 	bl	8009728 <xTaskGetSchedulerState>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d109      	bne.n	8009bee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bda:	4b11      	ldr	r3, [pc, #68]	; (8009c20 <xTimerGenericCommand+0x98>)
 8009bdc:	6818      	ldr	r0, [r3, #0]
 8009bde:	f107 0110 	add.w	r1, r7, #16
 8009be2:	2300      	movs	r3, #0
 8009be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009be6:	f7fe f8a9 	bl	8007d3c <xQueueGenericSend>
 8009bea:	6278      	str	r0, [r7, #36]	; 0x24
 8009bec:	e012      	b.n	8009c14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009bee:	4b0c      	ldr	r3, [pc, #48]	; (8009c20 <xTimerGenericCommand+0x98>)
 8009bf0:	6818      	ldr	r0, [r3, #0]
 8009bf2:	f107 0110 	add.w	r1, r7, #16
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f7fe f89f 	bl	8007d3c <xQueueGenericSend>
 8009bfe:	6278      	str	r0, [r7, #36]	; 0x24
 8009c00:	e008      	b.n	8009c14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c02:	4b07      	ldr	r3, [pc, #28]	; (8009c20 <xTimerGenericCommand+0x98>)
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	f107 0110 	add.w	r1, r7, #16
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	f7fe f993 	bl	8007f38 <xQueueGenericSendFromISR>
 8009c12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3728      	adds	r7, #40	; 0x28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	200009e4 	.word	0x200009e4

08009c24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b088      	sub	sp, #32
 8009c28:	af02      	add	r7, sp, #8
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c2e:	4b1c      	ldr	r3, [pc, #112]	; (8009ca0 <prvProcessExpiredTimer+0x7c>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fd fe5b 	bl	80078f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d122      	bne.n	8009c90 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	699a      	ldr	r2, [r3, #24]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	18d1      	adds	r1, r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	6978      	ldr	r0, [r7, #20]
 8009c58:	f000 f8c8 	bl	8009dec <prvInsertTimerInActiveList>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d016      	beq.n	8009c90 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c62:	2300      	movs	r3, #0
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	2300      	movs	r3, #0
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	6978      	ldr	r0, [r7, #20]
 8009c6e:	f7ff ff8b 	bl	8009b88 <xTimerGenericCommand>
 8009c72:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10a      	bne.n	8009c90 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	60fb      	str	r3, [r7, #12]
}
 8009c8c:	bf00      	nop
 8009c8e:	e7fe      	b.n	8009c8e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	6978      	ldr	r0, [r7, #20]
 8009c96:	4798      	blx	r3
}
 8009c98:	bf00      	nop
 8009c9a:	3718      	adds	r7, #24
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	200009dc 	.word	0x200009dc

08009ca4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cac:	f107 0308 	add.w	r3, r7, #8
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f000 f857 	bl	8009d64 <prvGetNextExpireTime>
 8009cb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	4619      	mov	r1, r3
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f000 f803 	bl	8009cc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cc2:	f000 f8d5 	bl	8009e70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cc6:	e7f1      	b.n	8009cac <prvTimerTask+0x8>

08009cc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009cd2:	f7ff f927 	bl	8008f24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cd6:	f107 0308 	add.w	r3, r7, #8
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 f866 	bl	8009dac <prvSampleTimeNow>
 8009ce0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d130      	bne.n	8009d4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10a      	bne.n	8009d04 <prvProcessTimerOrBlockTask+0x3c>
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d806      	bhi.n	8009d04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cf6:	f7ff f923 	bl	8008f40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cfa:	68f9      	ldr	r1, [r7, #12]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7ff ff91 	bl	8009c24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d02:	e024      	b.n	8009d4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d008      	beq.n	8009d1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d0a:	4b13      	ldr	r3, [pc, #76]	; (8009d58 <prvProcessTimerOrBlockTask+0x90>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bf0c      	ite	eq
 8009d14:	2301      	moveq	r3, #1
 8009d16:	2300      	movne	r3, #0
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d1c:	4b0f      	ldr	r3, [pc, #60]	; (8009d5c <prvProcessTimerOrBlockTask+0x94>)
 8009d1e:	6818      	ldr	r0, [r3, #0]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	f7fe fe8f 	bl	8008a4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d2e:	f7ff f907 	bl	8008f40 <xTaskResumeAll>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10a      	bne.n	8009d4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d38:	4b09      	ldr	r3, [pc, #36]	; (8009d60 <prvProcessTimerOrBlockTask+0x98>)
 8009d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	f3bf 8f6f 	isb	sy
}
 8009d48:	e001      	b.n	8009d4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d4a:	f7ff f8f9 	bl	8008f40 <xTaskResumeAll>
}
 8009d4e:	bf00      	nop
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	200009e0 	.word	0x200009e0
 8009d5c:	200009e4 	.word	0x200009e4
 8009d60:	e000ed04 	.word	0xe000ed04

08009d64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d6c:	4b0e      	ldr	r3, [pc, #56]	; (8009da8 <prvGetNextExpireTime+0x44>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	bf0c      	ite	eq
 8009d76:	2301      	moveq	r3, #1
 8009d78:	2300      	movne	r3, #0
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d105      	bne.n	8009d96 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d8a:	4b07      	ldr	r3, [pc, #28]	; (8009da8 <prvGetNextExpireTime+0x44>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	e001      	b.n	8009d9a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bc80      	pop	{r7}
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	200009dc 	.word	0x200009dc

08009dac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009db4:	f7ff f962 	bl	800907c <xTaskGetTickCount>
 8009db8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009dba:	4b0b      	ldr	r3, [pc, #44]	; (8009de8 <prvSampleTimeNow+0x3c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d205      	bcs.n	8009dd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009dc4:	f000 f908 	bl	8009fd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	e002      	b.n	8009dd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009dd6:	4a04      	ldr	r2, [pc, #16]	; (8009de8 <prvSampleTimeNow+0x3c>)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	200009ec 	.word	0x200009ec

08009dec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d812      	bhi.n	8009e38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	1ad2      	subs	r2, r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d302      	bcc.n	8009e26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e20:	2301      	movs	r3, #1
 8009e22:	617b      	str	r3, [r7, #20]
 8009e24:	e01b      	b.n	8009e5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e26:	4b10      	ldr	r3, [pc, #64]	; (8009e68 <prvInsertTimerInActiveList+0x7c>)
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4610      	mov	r0, r2
 8009e32:	f7fd fd29 	bl	8007888 <vListInsert>
 8009e36:	e012      	b.n	8009e5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d206      	bcs.n	8009e4e <prvInsertTimerInActiveList+0x62>
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d302      	bcc.n	8009e4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	e007      	b.n	8009e5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e4e:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <prvInsertTimerInActiveList+0x80>)
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3304      	adds	r3, #4
 8009e56:	4619      	mov	r1, r3
 8009e58:	4610      	mov	r0, r2
 8009e5a:	f7fd fd15 	bl	8007888 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e5e:	697b      	ldr	r3, [r7, #20]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	200009e0 	.word	0x200009e0
 8009e6c:	200009dc 	.word	0x200009dc

08009e70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08e      	sub	sp, #56	; 0x38
 8009e74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e76:	e09d      	b.n	8009fb4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	da18      	bge.n	8009eb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e7e:	1d3b      	adds	r3, r7, #4
 8009e80:	3304      	adds	r3, #4
 8009e82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10a      	bne.n	8009ea0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	61fb      	str	r3, [r7, #28]
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ea6:	6850      	ldr	r0, [r2, #4]
 8009ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eaa:	6892      	ldr	r2, [r2, #8]
 8009eac:	4611      	mov	r1, r2
 8009eae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	db7d      	blt.n	8009fb2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d004      	beq.n	8009ecc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fd fd16 	bl	80078f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ecc:	463b      	mov	r3, r7
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff ff6c 	bl	8009dac <prvSampleTimeNow>
 8009ed4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b09      	cmp	r3, #9
 8009eda:	d86b      	bhi.n	8009fb4 <prvProcessReceivedCommands+0x144>
 8009edc:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <prvProcessReceivedCommands+0x74>)
 8009ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee2:	bf00      	nop
 8009ee4:	08009f0d 	.word	0x08009f0d
 8009ee8:	08009f0d 	.word	0x08009f0d
 8009eec:	08009f0d 	.word	0x08009f0d
 8009ef0:	08009fb5 	.word	0x08009fb5
 8009ef4:	08009f69 	.word	0x08009f69
 8009ef8:	08009fa1 	.word	0x08009fa1
 8009efc:	08009f0d 	.word	0x08009f0d
 8009f00:	08009f0d 	.word	0x08009f0d
 8009f04:	08009fb5 	.word	0x08009fb5
 8009f08:	08009f69 	.word	0x08009f69
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	18d1      	adds	r1, r2, r3
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f1a:	f7ff ff67 	bl	8009dec <prvInsertTimerInActiveList>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d047      	beq.n	8009fb4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f2a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	69db      	ldr	r3, [r3, #28]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d13f      	bne.n	8009fb4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	441a      	add	r2, r3
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	2300      	movs	r3, #0
 8009f42:	2100      	movs	r1, #0
 8009f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f46:	f7ff fe1f 	bl	8009b88 <xTimerGenericCommand>
 8009f4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d130      	bne.n	8009fb4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	61bb      	str	r3, [r7, #24]
}
 8009f64:	bf00      	nop
 8009f66:	e7fe      	b.n	8009f66 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10a      	bne.n	8009f8c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	617b      	str	r3, [r7, #20]
}
 8009f88:	bf00      	nop
 8009f8a:	e7fe      	b.n	8009f8a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8e:	699a      	ldr	r2, [r3, #24]
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	18d1      	adds	r1, r2, r3
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f9a:	f7ff ff27 	bl	8009dec <prvInsertTimerInActiveList>
					break;
 8009f9e:	e009      	b.n	8009fb4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d104      	bne.n	8009fb4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8009faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fac:	f000 fb6a 	bl	800a684 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009fb0:	e000      	b.n	8009fb4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009fb2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fb4:	4b07      	ldr	r3, [pc, #28]	; (8009fd4 <prvProcessReceivedCommands+0x164>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	1d39      	adds	r1, r7, #4
 8009fba:	2200      	movs	r2, #0
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7fe f8e1 	bl	8008184 <xQueueReceive>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f47f af57 	bne.w	8009e78 <prvProcessReceivedCommands+0x8>
	}
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	3730      	adds	r7, #48	; 0x30
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	200009e4 	.word	0x200009e4

08009fd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b088      	sub	sp, #32
 8009fdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fde:	e045      	b.n	800a06c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fe0:	4b2c      	ldr	r3, [pc, #176]	; (800a094 <prvSwitchTimerLists+0xbc>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fea:	4b2a      	ldr	r3, [pc, #168]	; (800a094 <prvSwitchTimerLists+0xbc>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fd fc7d 	bl	80078f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d12e      	bne.n	800a06c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	4413      	add	r3, r2
 800a016:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d90e      	bls.n	800a03e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a02c:	4b19      	ldr	r3, [pc, #100]	; (800a094 <prvSwitchTimerLists+0xbc>)
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3304      	adds	r3, #4
 800a034:	4619      	mov	r1, r3
 800a036:	4610      	mov	r0, r2
 800a038:	f7fd fc26 	bl	8007888 <vListInsert>
 800a03c:	e016      	b.n	800a06c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a03e:	2300      	movs	r3, #0
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	2300      	movs	r3, #0
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	2100      	movs	r1, #0
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7ff fd9d 	bl	8009b88 <xTimerGenericCommand>
 800a04e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10a      	bne.n	800a06c <prvSwitchTimerLists+0x94>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	603b      	str	r3, [r7, #0]
}
 800a068:	bf00      	nop
 800a06a:	e7fe      	b.n	800a06a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a06c:	4b09      	ldr	r3, [pc, #36]	; (800a094 <prvSwitchTimerLists+0xbc>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1b4      	bne.n	8009fe0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a076:	4b07      	ldr	r3, [pc, #28]	; (800a094 <prvSwitchTimerLists+0xbc>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a07c:	4b06      	ldr	r3, [pc, #24]	; (800a098 <prvSwitchTimerLists+0xc0>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a04      	ldr	r2, [pc, #16]	; (800a094 <prvSwitchTimerLists+0xbc>)
 800a082:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a084:	4a04      	ldr	r2, [pc, #16]	; (800a098 <prvSwitchTimerLists+0xc0>)
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	6013      	str	r3, [r2, #0]
}
 800a08a:	bf00      	nop
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	200009dc 	.word	0x200009dc
 800a098:	200009e0 	.word	0x200009e0

0800a09c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0a2:	f000 f92b 	bl	800a2fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0a6:	4b15      	ldr	r3, [pc, #84]	; (800a0fc <prvCheckForValidListAndQueue+0x60>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d120      	bne.n	800a0f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a0ae:	4814      	ldr	r0, [pc, #80]	; (800a100 <prvCheckForValidListAndQueue+0x64>)
 800a0b0:	f7fd fb9c 	bl	80077ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0b4:	4813      	ldr	r0, [pc, #76]	; (800a104 <prvCheckForValidListAndQueue+0x68>)
 800a0b6:	f7fd fb99 	bl	80077ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0ba:	4b13      	ldr	r3, [pc, #76]	; (800a108 <prvCheckForValidListAndQueue+0x6c>)
 800a0bc:	4a10      	ldr	r2, [pc, #64]	; (800a100 <prvCheckForValidListAndQueue+0x64>)
 800a0be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a0c0:	4b12      	ldr	r3, [pc, #72]	; (800a10c <prvCheckForValidListAndQueue+0x70>)
 800a0c2:	4a10      	ldr	r2, [pc, #64]	; (800a104 <prvCheckForValidListAndQueue+0x68>)
 800a0c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	4b11      	ldr	r3, [pc, #68]	; (800a110 <prvCheckForValidListAndQueue+0x74>)
 800a0cc:	4a11      	ldr	r2, [pc, #68]	; (800a114 <prvCheckForValidListAndQueue+0x78>)
 800a0ce:	2110      	movs	r1, #16
 800a0d0:	200a      	movs	r0, #10
 800a0d2:	f7fd fca3 	bl	8007a1c <xQueueGenericCreateStatic>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	4a08      	ldr	r2, [pc, #32]	; (800a0fc <prvCheckForValidListAndQueue+0x60>)
 800a0da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a0dc:	4b07      	ldr	r3, [pc, #28]	; (800a0fc <prvCheckForValidListAndQueue+0x60>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d005      	beq.n	800a0f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0e4:	4b05      	ldr	r3, [pc, #20]	; (800a0fc <prvCheckForValidListAndQueue+0x60>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	490b      	ldr	r1, [pc, #44]	; (800a118 <prvCheckForValidListAndQueue+0x7c>)
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe fc5c 	bl	80089a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0f0:	f000 f934 	bl	800a35c <vPortExitCritical>
}
 800a0f4:	bf00      	nop
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	200009e4 	.word	0x200009e4
 800a100:	200009b4 	.word	0x200009b4
 800a104:	200009c8 	.word	0x200009c8
 800a108:	200009dc 	.word	0x200009dc
 800a10c:	200009e0 	.word	0x200009e0
 800a110:	20000a90 	.word	0x20000a90
 800a114:	200009f0 	.word	0x200009f0
 800a118:	0800cde0 	.word	0x0800cde0

0800a11c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3b04      	subs	r3, #4
 800a12c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	3b04      	subs	r3, #4
 800a13a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f023 0201 	bic.w	r2, r3, #1
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	3b04      	subs	r3, #4
 800a14a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a14c:	4a08      	ldr	r2, [pc, #32]	; (800a170 <pxPortInitialiseStack+0x54>)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3b14      	subs	r3, #20
 800a156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	3b20      	subs	r3, #32
 800a162:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a164:	68fb      	ldr	r3, [r7, #12]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bc80      	pop	{r7}
 800a16e:	4770      	bx	lr
 800a170:	0800a175 	.word	0x0800a175

0800a174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a17e:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <prvTaskExitError+0x54>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a186:	d00a      	beq.n	800a19e <prvTaskExitError+0x2a>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	60fb      	str	r3, [r7, #12]
}
 800a19a:	bf00      	nop
 800a19c:	e7fe      	b.n	800a19c <prvTaskExitError+0x28>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	60bb      	str	r3, [r7, #8]
}
 800a1b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a1b2:	bf00      	nop
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0fc      	beq.n	800a1b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a1ba:	bf00      	nop
 800a1bc:	bf00      	nop
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bc80      	pop	{r7}
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	2000002c 	.word	0x2000002c
 800a1cc:	00000000 	.word	0x00000000

0800a1d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1d0:	4b07      	ldr	r3, [pc, #28]	; (800a1f0 <pxCurrentTCBConst2>)
 800a1d2:	6819      	ldr	r1, [r3, #0]
 800a1d4:	6808      	ldr	r0, [r1, #0]
 800a1d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a1da:	f380 8809 	msr	PSP, r0
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f04f 0000 	mov.w	r0, #0
 800a1e6:	f380 8811 	msr	BASEPRI, r0
 800a1ea:	f04e 0e0d 	orr.w	lr, lr, #13
 800a1ee:	4770      	bx	lr

0800a1f0 <pxCurrentTCBConst2>:
 800a1f0:	200004ac 	.word	0x200004ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop

0800a1f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a1f8:	4806      	ldr	r0, [pc, #24]	; (800a214 <prvPortStartFirstTask+0x1c>)
 800a1fa:	6800      	ldr	r0, [r0, #0]
 800a1fc:	6800      	ldr	r0, [r0, #0]
 800a1fe:	f380 8808 	msr	MSP, r0
 800a202:	b662      	cpsie	i
 800a204:	b661      	cpsie	f
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	df00      	svc	0
 800a210:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a212:	bf00      	nop
 800a214:	e000ed08 	.word	0xe000ed08

0800a218 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a21e:	4b32      	ldr	r3, [pc, #200]	; (800a2e8 <xPortStartScheduler+0xd0>)
 800a220:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	b2db      	uxtb	r3, r3
 800a228:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	22ff      	movs	r2, #255	; 0xff
 800a22e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	b2db      	uxtb	r3, r3
 800a236:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a238:	78fb      	ldrb	r3, [r7, #3]
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a240:	b2da      	uxtb	r2, r3
 800a242:	4b2a      	ldr	r3, [pc, #168]	; (800a2ec <xPortStartScheduler+0xd4>)
 800a244:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a246:	4b2a      	ldr	r3, [pc, #168]	; (800a2f0 <xPortStartScheduler+0xd8>)
 800a248:	2207      	movs	r2, #7
 800a24a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a24c:	e009      	b.n	800a262 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a24e:	4b28      	ldr	r3, [pc, #160]	; (800a2f0 <xPortStartScheduler+0xd8>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3b01      	subs	r3, #1
 800a254:	4a26      	ldr	r2, [pc, #152]	; (800a2f0 <xPortStartScheduler+0xd8>)
 800a256:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a258:	78fb      	ldrb	r3, [r7, #3]
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	005b      	lsls	r3, r3, #1
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a262:	78fb      	ldrb	r3, [r7, #3]
 800a264:	b2db      	uxtb	r3, r3
 800a266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a26a:	2b80      	cmp	r3, #128	; 0x80
 800a26c:	d0ef      	beq.n	800a24e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a26e:	4b20      	ldr	r3, [pc, #128]	; (800a2f0 <xPortStartScheduler+0xd8>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f1c3 0307 	rsb	r3, r3, #7
 800a276:	2b04      	cmp	r3, #4
 800a278:	d00a      	beq.n	800a290 <xPortStartScheduler+0x78>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	60bb      	str	r3, [r7, #8]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a290:	4b17      	ldr	r3, [pc, #92]	; (800a2f0 <xPortStartScheduler+0xd8>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	4a16      	ldr	r2, [pc, #88]	; (800a2f0 <xPortStartScheduler+0xd8>)
 800a298:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a29a:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <xPortStartScheduler+0xd8>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2a2:	4a13      	ldr	r2, [pc, #76]	; (800a2f0 <xPortStartScheduler+0xd8>)
 800a2a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2ae:	4b11      	ldr	r3, [pc, #68]	; (800a2f4 <xPortStartScheduler+0xdc>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a10      	ldr	r2, [pc, #64]	; (800a2f4 <xPortStartScheduler+0xdc>)
 800a2b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2ba:	4b0e      	ldr	r3, [pc, #56]	; (800a2f4 <xPortStartScheduler+0xdc>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a0d      	ldr	r2, [pc, #52]	; (800a2f4 <xPortStartScheduler+0xdc>)
 800a2c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a2c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2c6:	f000 f8b9 	bl	800a43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2ca:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <xPortStartScheduler+0xe0>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2d0:	f7ff ff92 	bl	800a1f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2d4:	f7fe ff9e 	bl	8009214 <vTaskSwitchContext>
	prvTaskExitError();
 800a2d8:	f7ff ff4c 	bl	800a174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	e000e400 	.word	0xe000e400
 800a2ec:	20000ae0 	.word	0x20000ae0
 800a2f0:	20000ae4 	.word	0x20000ae4
 800a2f4:	e000ed20 	.word	0xe000ed20
 800a2f8:	2000002c 	.word	0x2000002c

0800a2fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	607b      	str	r3, [r7, #4]
}
 800a314:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a316:	4b0f      	ldr	r3, [pc, #60]	; (800a354 <vPortEnterCritical+0x58>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3301      	adds	r3, #1
 800a31c:	4a0d      	ldr	r2, [pc, #52]	; (800a354 <vPortEnterCritical+0x58>)
 800a31e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a320:	4b0c      	ldr	r3, [pc, #48]	; (800a354 <vPortEnterCritical+0x58>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d10f      	bne.n	800a348 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a328:	4b0b      	ldr	r3, [pc, #44]	; (800a358 <vPortEnterCritical+0x5c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00a      	beq.n	800a348 <vPortEnterCritical+0x4c>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	603b      	str	r3, [r7, #0]
}
 800a344:	bf00      	nop
 800a346:	e7fe      	b.n	800a346 <vPortEnterCritical+0x4a>
	}
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bc80      	pop	{r7}
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	2000002c 	.word	0x2000002c
 800a358:	e000ed04 	.word	0xe000ed04

0800a35c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a362:	4b11      	ldr	r3, [pc, #68]	; (800a3a8 <vPortExitCritical+0x4c>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10a      	bne.n	800a380 <vPortExitCritical+0x24>
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	607b      	str	r3, [r7, #4]
}
 800a37c:	bf00      	nop
 800a37e:	e7fe      	b.n	800a37e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a380:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <vPortExitCritical+0x4c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3b01      	subs	r3, #1
 800a386:	4a08      	ldr	r2, [pc, #32]	; (800a3a8 <vPortExitCritical+0x4c>)
 800a388:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a38a:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <vPortExitCritical+0x4c>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d105      	bne.n	800a39e <vPortExitCritical+0x42>
 800a392:	2300      	movs	r3, #0
 800a394:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	f383 8811 	msr	BASEPRI, r3
}
 800a39c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a39e:	bf00      	nop
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bc80      	pop	{r7}
 800a3a6:	4770      	bx	lr
 800a3a8:	2000002c 	.word	0x2000002c
 800a3ac:	00000000 	.word	0x00000000

0800a3b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3b0:	f3ef 8009 	mrs	r0, PSP
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	4b0d      	ldr	r3, [pc, #52]	; (800a3f0 <pxCurrentTCBConst>)
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a3c0:	6010      	str	r0, [r2, #0]
 800a3c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a3c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a3ca:	f380 8811 	msr	BASEPRI, r0
 800a3ce:	f7fe ff21 	bl	8009214 <vTaskSwitchContext>
 800a3d2:	f04f 0000 	mov.w	r0, #0
 800a3d6:	f380 8811 	msr	BASEPRI, r0
 800a3da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a3de:	6819      	ldr	r1, [r3, #0]
 800a3e0:	6808      	ldr	r0, [r1, #0]
 800a3e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a3e6:	f380 8809 	msr	PSP, r0
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	4770      	bx	lr

0800a3f0 <pxCurrentTCBConst>:
 800a3f0:	200004ac 	.word	0x200004ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop

0800a3f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	607b      	str	r3, [r7, #4]
}
 800a410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a412:	f7fe fe41 	bl	8009098 <xTaskIncrementTick>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d003      	beq.n	800a424 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a41c:	4b06      	ldr	r3, [pc, #24]	; (800a438 <SysTick_Handler+0x40>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	2300      	movs	r3, #0
 800a426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	f383 8811 	msr	BASEPRI, r3
}
 800a42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	e000ed04 	.word	0xe000ed04

0800a43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a440:	4b0a      	ldr	r3, [pc, #40]	; (800a46c <vPortSetupTimerInterrupt+0x30>)
 800a442:	2200      	movs	r2, #0
 800a444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a446:	4b0a      	ldr	r3, [pc, #40]	; (800a470 <vPortSetupTimerInterrupt+0x34>)
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a44c:	4b09      	ldr	r3, [pc, #36]	; (800a474 <vPortSetupTimerInterrupt+0x38>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a09      	ldr	r2, [pc, #36]	; (800a478 <vPortSetupTimerInterrupt+0x3c>)
 800a452:	fba2 2303 	umull	r2, r3, r2, r3
 800a456:	095b      	lsrs	r3, r3, #5
 800a458:	4a08      	ldr	r2, [pc, #32]	; (800a47c <vPortSetupTimerInterrupt+0x40>)
 800a45a:	3b01      	subs	r3, #1
 800a45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a45e:	4b03      	ldr	r3, [pc, #12]	; (800a46c <vPortSetupTimerInterrupt+0x30>)
 800a460:	2207      	movs	r2, #7
 800a462:	601a      	str	r2, [r3, #0]
}
 800a464:	bf00      	nop
 800a466:	46bd      	mov	sp, r7
 800a468:	bc80      	pop	{r7}
 800a46a:	4770      	bx	lr
 800a46c:	e000e010 	.word	0xe000e010
 800a470:	e000e018 	.word	0xe000e018
 800a474:	20000020 	.word	0x20000020
 800a478:	51eb851f 	.word	0x51eb851f
 800a47c:	e000e014 	.word	0xe000e014

0800a480 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a486:	f3ef 8305 	mrs	r3, IPSR
 800a48a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2b0f      	cmp	r3, #15
 800a490:	d914      	bls.n	800a4bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a492:	4a16      	ldr	r2, [pc, #88]	; (800a4ec <vPortValidateInterruptPriority+0x6c>)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	4413      	add	r3, r2
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a49c:	4b14      	ldr	r3, [pc, #80]	; (800a4f0 <vPortValidateInterruptPriority+0x70>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	7afa      	ldrb	r2, [r7, #11]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d20a      	bcs.n	800a4bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	607b      	str	r3, [r7, #4]
}
 800a4b8:	bf00      	nop
 800a4ba:	e7fe      	b.n	800a4ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4bc:	4b0d      	ldr	r3, [pc, #52]	; (800a4f4 <vPortValidateInterruptPriority+0x74>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a4c4:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <vPortValidateInterruptPriority+0x78>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d90a      	bls.n	800a4e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	603b      	str	r3, [r7, #0]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <vPortValidateInterruptPriority+0x60>
	}
 800a4e2:	bf00      	nop
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bc80      	pop	{r7}
 800a4ea:	4770      	bx	lr
 800a4ec:	e000e3f0 	.word	0xe000e3f0
 800a4f0:	20000ae0 	.word	0x20000ae0
 800a4f4:	e000ed0c 	.word	0xe000ed0c
 800a4f8:	20000ae4 	.word	0x20000ae4

0800a4fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08a      	sub	sp, #40	; 0x28
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a504:	2300      	movs	r3, #0
 800a506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a508:	f7fe fd0c 	bl	8008f24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a50c:	4b58      	ldr	r3, [pc, #352]	; (800a670 <pvPortMalloc+0x174>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a514:	f000 f910 	bl	800a738 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a518:	4b56      	ldr	r3, [pc, #344]	; (800a674 <pvPortMalloc+0x178>)
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4013      	ands	r3, r2
 800a520:	2b00      	cmp	r3, #0
 800a522:	f040 808e 	bne.w	800a642 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d01d      	beq.n	800a568 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a52c:	2208      	movs	r2, #8
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4413      	add	r3, r2
 800a532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d014      	beq.n	800a568 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f023 0307 	bic.w	r3, r3, #7
 800a544:	3308      	adds	r3, #8
 800a546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f003 0307 	and.w	r3, r3, #7
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00a      	beq.n	800a568 <pvPortMalloc+0x6c>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	617b      	str	r3, [r7, #20]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d069      	beq.n	800a642 <pvPortMalloc+0x146>
 800a56e:	4b42      	ldr	r3, [pc, #264]	; (800a678 <pvPortMalloc+0x17c>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	429a      	cmp	r2, r3
 800a576:	d864      	bhi.n	800a642 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a578:	4b40      	ldr	r3, [pc, #256]	; (800a67c <pvPortMalloc+0x180>)
 800a57a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a57c:	4b3f      	ldr	r3, [pc, #252]	; (800a67c <pvPortMalloc+0x180>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a582:	e004      	b.n	800a58e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	429a      	cmp	r2, r3
 800a596:	d903      	bls.n	800a5a0 <pvPortMalloc+0xa4>
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1f1      	bne.n	800a584 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5a0:	4b33      	ldr	r3, [pc, #204]	; (800a670 <pvPortMalloc+0x174>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d04b      	beq.n	800a642 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2208      	movs	r2, #8
 800a5b0:	4413      	add	r3, r2
 800a5b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	1ad2      	subs	r2, r2, r3
 800a5c4:	2308      	movs	r3, #8
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d91f      	bls.n	800a60c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	f003 0307 	and.w	r3, r3, #7
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00a      	beq.n	800a5f4 <pvPortMalloc+0xf8>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	613b      	str	r3, [r7, #16]
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	1ad2      	subs	r2, r2, r3
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a606:	69b8      	ldr	r0, [r7, #24]
 800a608:	f000 f8f8 	bl	800a7fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a60c:	4b1a      	ldr	r3, [pc, #104]	; (800a678 <pvPortMalloc+0x17c>)
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	4a18      	ldr	r2, [pc, #96]	; (800a678 <pvPortMalloc+0x17c>)
 800a618:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a61a:	4b17      	ldr	r3, [pc, #92]	; (800a678 <pvPortMalloc+0x17c>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	4b18      	ldr	r3, [pc, #96]	; (800a680 <pvPortMalloc+0x184>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	429a      	cmp	r2, r3
 800a624:	d203      	bcs.n	800a62e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a626:	4b14      	ldr	r3, [pc, #80]	; (800a678 <pvPortMalloc+0x17c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a15      	ldr	r2, [pc, #84]	; (800a680 <pvPortMalloc+0x184>)
 800a62c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	4b10      	ldr	r3, [pc, #64]	; (800a674 <pvPortMalloc+0x178>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	431a      	orrs	r2, r3
 800a638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63e:	2200      	movs	r2, #0
 800a640:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a642:	f7fe fc7d 	bl	8008f40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00a      	beq.n	800a666 <pvPortMalloc+0x16a>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	60fb      	str	r3, [r7, #12]
}
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <pvPortMalloc+0x168>
	return pvReturn;
 800a666:	69fb      	ldr	r3, [r7, #28]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3728      	adds	r7, #40	; 0x28
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	200039d0 	.word	0x200039d0
 800a674:	200039dc 	.word	0x200039dc
 800a678:	200039d4 	.word	0x200039d4
 800a67c:	200039c8 	.word	0x200039c8
 800a680:	200039d8 	.word	0x200039d8

0800a684 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d048      	beq.n	800a728 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a696:	2308      	movs	r3, #8
 800a698:	425b      	negs	r3, r3
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	4413      	add	r3, r2
 800a69e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	4b21      	ldr	r3, [pc, #132]	; (800a730 <vPortFree+0xac>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10a      	bne.n	800a6c8 <vPortFree+0x44>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	60fb      	str	r3, [r7, #12]
}
 800a6c4:	bf00      	nop
 800a6c6:	e7fe      	b.n	800a6c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00a      	beq.n	800a6e6 <vPortFree+0x62>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	60bb      	str	r3, [r7, #8]
}
 800a6e2:	bf00      	nop
 800a6e4:	e7fe      	b.n	800a6e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	4b11      	ldr	r3, [pc, #68]	; (800a730 <vPortFree+0xac>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d019      	beq.n	800a728 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d115      	bne.n	800a728 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	685a      	ldr	r2, [r3, #4]
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <vPortFree+0xac>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	43db      	mvns	r3, r3
 800a706:	401a      	ands	r2, r3
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a70c:	f7fe fc0a 	bl	8008f24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	4b07      	ldr	r3, [pc, #28]	; (800a734 <vPortFree+0xb0>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4413      	add	r3, r2
 800a71a:	4a06      	ldr	r2, [pc, #24]	; (800a734 <vPortFree+0xb0>)
 800a71c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a71e:	6938      	ldr	r0, [r7, #16]
 800a720:	f000 f86c 	bl	800a7fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a724:	f7fe fc0c 	bl	8008f40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a728:	bf00      	nop
 800a72a:	3718      	adds	r7, #24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	200039dc 	.word	0x200039dc
 800a734:	200039d4 	.word	0x200039d4

0800a738 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a73e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800a742:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a744:	4b27      	ldr	r3, [pc, #156]	; (800a7e4 <prvHeapInit+0xac>)
 800a746:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f003 0307 	and.w	r3, r3, #7
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00c      	beq.n	800a76c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3307      	adds	r3, #7
 800a756:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 0307 	bic.w	r3, r3, #7
 800a75e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	4a1f      	ldr	r2, [pc, #124]	; (800a7e4 <prvHeapInit+0xac>)
 800a768:	4413      	add	r3, r2
 800a76a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a770:	4a1d      	ldr	r2, [pc, #116]	; (800a7e8 <prvHeapInit+0xb0>)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a776:	4b1c      	ldr	r3, [pc, #112]	; (800a7e8 <prvHeapInit+0xb0>)
 800a778:	2200      	movs	r2, #0
 800a77a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	4413      	add	r3, r2
 800a782:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a784:	2208      	movs	r2, #8
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	1a9b      	subs	r3, r3, r2
 800a78a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f023 0307 	bic.w	r3, r3, #7
 800a792:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4a15      	ldr	r2, [pc, #84]	; (800a7ec <prvHeapInit+0xb4>)
 800a798:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a79a:	4b14      	ldr	r3, [pc, #80]	; (800a7ec <prvHeapInit+0xb4>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7a2:	4b12      	ldr	r3, [pc, #72]	; (800a7ec <prvHeapInit+0xb4>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	1ad2      	subs	r2, r2, r3
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7b8:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <prvHeapInit+0xb4>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	4a0a      	ldr	r2, [pc, #40]	; (800a7f0 <prvHeapInit+0xb8>)
 800a7c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	4a09      	ldr	r2, [pc, #36]	; (800a7f4 <prvHeapInit+0xbc>)
 800a7ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7d0:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <prvHeapInit+0xc0>)
 800a7d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7d6:	601a      	str	r2, [r3, #0]
}
 800a7d8:	bf00      	nop
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bc80      	pop	{r7}
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	20000ae8 	.word	0x20000ae8
 800a7e8:	200039c8 	.word	0x200039c8
 800a7ec:	200039d0 	.word	0x200039d0
 800a7f0:	200039d8 	.word	0x200039d8
 800a7f4:	200039d4 	.word	0x200039d4
 800a7f8:	200039dc 	.word	0x200039dc

0800a7fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a804:	4b27      	ldr	r3, [pc, #156]	; (800a8a4 <prvInsertBlockIntoFreeList+0xa8>)
 800a806:	60fb      	str	r3, [r7, #12]
 800a808:	e002      	b.n	800a810 <prvInsertBlockIntoFreeList+0x14>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	60fb      	str	r3, [r7, #12]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	429a      	cmp	r2, r3
 800a818:	d8f7      	bhi.n	800a80a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	4413      	add	r3, r2
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d108      	bne.n	800a83e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	441a      	add	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	441a      	add	r2, r3
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d118      	bne.n	800a884 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	4b14      	ldr	r3, [pc, #80]	; (800a8a8 <prvInsertBlockIntoFreeList+0xac>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d00d      	beq.n	800a87a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	441a      	add	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	601a      	str	r2, [r3, #0]
 800a878:	e008      	b.n	800a88c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a87a:	4b0b      	ldr	r3, [pc, #44]	; (800a8a8 <prvInsertBlockIntoFreeList+0xac>)
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	e003      	b.n	800a88c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	429a      	cmp	r2, r3
 800a892:	d002      	beq.n	800a89a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a89a:	bf00      	nop
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bc80      	pop	{r7}
 800a8a2:	4770      	bx	lr
 800a8a4:	200039c8 	.word	0x200039c8
 800a8a8:	200039d0 	.word	0x200039d0

0800a8ac <__errno>:
 800a8ac:	4b01      	ldr	r3, [pc, #4]	; (800a8b4 <__errno+0x8>)
 800a8ae:	6818      	ldr	r0, [r3, #0]
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	20000030 	.word	0x20000030

0800a8b8 <__libc_init_array>:
 800a8b8:	b570      	push	{r4, r5, r6, lr}
 800a8ba:	2600      	movs	r6, #0
 800a8bc:	4d0c      	ldr	r5, [pc, #48]	; (800a8f0 <__libc_init_array+0x38>)
 800a8be:	4c0d      	ldr	r4, [pc, #52]	; (800a8f4 <__libc_init_array+0x3c>)
 800a8c0:	1b64      	subs	r4, r4, r5
 800a8c2:	10a4      	asrs	r4, r4, #2
 800a8c4:	42a6      	cmp	r6, r4
 800a8c6:	d109      	bne.n	800a8dc <__libc_init_array+0x24>
 800a8c8:	f001 f8d2 	bl	800ba70 <_init>
 800a8cc:	2600      	movs	r6, #0
 800a8ce:	4d0a      	ldr	r5, [pc, #40]	; (800a8f8 <__libc_init_array+0x40>)
 800a8d0:	4c0a      	ldr	r4, [pc, #40]	; (800a8fc <__libc_init_array+0x44>)
 800a8d2:	1b64      	subs	r4, r4, r5
 800a8d4:	10a4      	asrs	r4, r4, #2
 800a8d6:	42a6      	cmp	r6, r4
 800a8d8:	d105      	bne.n	800a8e6 <__libc_init_array+0x2e>
 800a8da:	bd70      	pop	{r4, r5, r6, pc}
 800a8dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8e0:	4798      	blx	r3
 800a8e2:	3601      	adds	r6, #1
 800a8e4:	e7ee      	b.n	800a8c4 <__libc_init_array+0xc>
 800a8e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ea:	4798      	blx	r3
 800a8ec:	3601      	adds	r6, #1
 800a8ee:	e7f2      	b.n	800a8d6 <__libc_init_array+0x1e>
 800a8f0:	0800d0a4 	.word	0x0800d0a4
 800a8f4:	0800d0a4 	.word	0x0800d0a4
 800a8f8:	0800d0a4 	.word	0x0800d0a4
 800a8fc:	0800d0a8 	.word	0x0800d0a8

0800a900 <memcpy>:
 800a900:	440a      	add	r2, r1
 800a902:	4291      	cmp	r1, r2
 800a904:	f100 33ff 	add.w	r3, r0, #4294967295
 800a908:	d100      	bne.n	800a90c <memcpy+0xc>
 800a90a:	4770      	bx	lr
 800a90c:	b510      	push	{r4, lr}
 800a90e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a912:	4291      	cmp	r1, r2
 800a914:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a918:	d1f9      	bne.n	800a90e <memcpy+0xe>
 800a91a:	bd10      	pop	{r4, pc}

0800a91c <memset>:
 800a91c:	4603      	mov	r3, r0
 800a91e:	4402      	add	r2, r0
 800a920:	4293      	cmp	r3, r2
 800a922:	d100      	bne.n	800a926 <memset+0xa>
 800a924:	4770      	bx	lr
 800a926:	f803 1b01 	strb.w	r1, [r3], #1
 800a92a:	e7f9      	b.n	800a920 <memset+0x4>

0800a92c <_puts_r>:
 800a92c:	b570      	push	{r4, r5, r6, lr}
 800a92e:	460e      	mov	r6, r1
 800a930:	4605      	mov	r5, r0
 800a932:	b118      	cbz	r0, 800a93c <_puts_r+0x10>
 800a934:	6983      	ldr	r3, [r0, #24]
 800a936:	b90b      	cbnz	r3, 800a93c <_puts_r+0x10>
 800a938:	f000 fb24 	bl	800af84 <__sinit>
 800a93c:	69ab      	ldr	r3, [r5, #24]
 800a93e:	68ac      	ldr	r4, [r5, #8]
 800a940:	b913      	cbnz	r3, 800a948 <_puts_r+0x1c>
 800a942:	4628      	mov	r0, r5
 800a944:	f000 fb1e 	bl	800af84 <__sinit>
 800a948:	4b2c      	ldr	r3, [pc, #176]	; (800a9fc <_puts_r+0xd0>)
 800a94a:	429c      	cmp	r4, r3
 800a94c:	d120      	bne.n	800a990 <_puts_r+0x64>
 800a94e:	686c      	ldr	r4, [r5, #4]
 800a950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a952:	07db      	lsls	r3, r3, #31
 800a954:	d405      	bmi.n	800a962 <_puts_r+0x36>
 800a956:	89a3      	ldrh	r3, [r4, #12]
 800a958:	0598      	lsls	r0, r3, #22
 800a95a:	d402      	bmi.n	800a962 <_puts_r+0x36>
 800a95c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a95e:	f000 fbaf 	bl	800b0c0 <__retarget_lock_acquire_recursive>
 800a962:	89a3      	ldrh	r3, [r4, #12]
 800a964:	0719      	lsls	r1, r3, #28
 800a966:	d51d      	bpl.n	800a9a4 <_puts_r+0x78>
 800a968:	6923      	ldr	r3, [r4, #16]
 800a96a:	b1db      	cbz	r3, 800a9a4 <_puts_r+0x78>
 800a96c:	3e01      	subs	r6, #1
 800a96e:	68a3      	ldr	r3, [r4, #8]
 800a970:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a974:	3b01      	subs	r3, #1
 800a976:	60a3      	str	r3, [r4, #8]
 800a978:	bb39      	cbnz	r1, 800a9ca <_puts_r+0x9e>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	da38      	bge.n	800a9f0 <_puts_r+0xc4>
 800a97e:	4622      	mov	r2, r4
 800a980:	210a      	movs	r1, #10
 800a982:	4628      	mov	r0, r5
 800a984:	f000 f924 	bl	800abd0 <__swbuf_r>
 800a988:	3001      	adds	r0, #1
 800a98a:	d011      	beq.n	800a9b0 <_puts_r+0x84>
 800a98c:	250a      	movs	r5, #10
 800a98e:	e011      	b.n	800a9b4 <_puts_r+0x88>
 800a990:	4b1b      	ldr	r3, [pc, #108]	; (800aa00 <_puts_r+0xd4>)
 800a992:	429c      	cmp	r4, r3
 800a994:	d101      	bne.n	800a99a <_puts_r+0x6e>
 800a996:	68ac      	ldr	r4, [r5, #8]
 800a998:	e7da      	b.n	800a950 <_puts_r+0x24>
 800a99a:	4b1a      	ldr	r3, [pc, #104]	; (800aa04 <_puts_r+0xd8>)
 800a99c:	429c      	cmp	r4, r3
 800a99e:	bf08      	it	eq
 800a9a0:	68ec      	ldreq	r4, [r5, #12]
 800a9a2:	e7d5      	b.n	800a950 <_puts_r+0x24>
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f000 f964 	bl	800ac74 <__swsetup_r>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d0dd      	beq.n	800a96c <_puts_r+0x40>
 800a9b0:	f04f 35ff 	mov.w	r5, #4294967295
 800a9b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9b6:	07da      	lsls	r2, r3, #31
 800a9b8:	d405      	bmi.n	800a9c6 <_puts_r+0x9a>
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	059b      	lsls	r3, r3, #22
 800a9be:	d402      	bmi.n	800a9c6 <_puts_r+0x9a>
 800a9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9c2:	f000 fb7e 	bl	800b0c2 <__retarget_lock_release_recursive>
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	da04      	bge.n	800a9d8 <_puts_r+0xac>
 800a9ce:	69a2      	ldr	r2, [r4, #24]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	dc06      	bgt.n	800a9e2 <_puts_r+0xb6>
 800a9d4:	290a      	cmp	r1, #10
 800a9d6:	d004      	beq.n	800a9e2 <_puts_r+0xb6>
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	6022      	str	r2, [r4, #0]
 800a9de:	7019      	strb	r1, [r3, #0]
 800a9e0:	e7c5      	b.n	800a96e <_puts_r+0x42>
 800a9e2:	4622      	mov	r2, r4
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	f000 f8f3 	bl	800abd0 <__swbuf_r>
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	d1bf      	bne.n	800a96e <_puts_r+0x42>
 800a9ee:	e7df      	b.n	800a9b0 <_puts_r+0x84>
 800a9f0:	250a      	movs	r5, #10
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	1c5a      	adds	r2, r3, #1
 800a9f6:	6022      	str	r2, [r4, #0]
 800a9f8:	701d      	strb	r5, [r3, #0]
 800a9fa:	e7db      	b.n	800a9b4 <_puts_r+0x88>
 800a9fc:	0800d030 	.word	0x0800d030
 800aa00:	0800d050 	.word	0x0800d050
 800aa04:	0800d010 	.word	0x0800d010

0800aa08 <puts>:
 800aa08:	4b02      	ldr	r3, [pc, #8]	; (800aa14 <puts+0xc>)
 800aa0a:	4601      	mov	r1, r0
 800aa0c:	6818      	ldr	r0, [r3, #0]
 800aa0e:	f7ff bf8d 	b.w	800a92c <_puts_r>
 800aa12:	bf00      	nop
 800aa14:	20000030 	.word	0x20000030

0800aa18 <setvbuf>:
 800aa18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa1c:	461d      	mov	r5, r3
 800aa1e:	4b5d      	ldr	r3, [pc, #372]	; (800ab94 <setvbuf+0x17c>)
 800aa20:	4604      	mov	r4, r0
 800aa22:	681f      	ldr	r7, [r3, #0]
 800aa24:	460e      	mov	r6, r1
 800aa26:	4690      	mov	r8, r2
 800aa28:	b127      	cbz	r7, 800aa34 <setvbuf+0x1c>
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	b913      	cbnz	r3, 800aa34 <setvbuf+0x1c>
 800aa2e:	4638      	mov	r0, r7
 800aa30:	f000 faa8 	bl	800af84 <__sinit>
 800aa34:	4b58      	ldr	r3, [pc, #352]	; (800ab98 <setvbuf+0x180>)
 800aa36:	429c      	cmp	r4, r3
 800aa38:	d167      	bne.n	800ab0a <setvbuf+0xf2>
 800aa3a:	687c      	ldr	r4, [r7, #4]
 800aa3c:	f1b8 0f02 	cmp.w	r8, #2
 800aa40:	d006      	beq.n	800aa50 <setvbuf+0x38>
 800aa42:	f1b8 0f01 	cmp.w	r8, #1
 800aa46:	f200 809f 	bhi.w	800ab88 <setvbuf+0x170>
 800aa4a:	2d00      	cmp	r5, #0
 800aa4c:	f2c0 809c 	blt.w	800ab88 <setvbuf+0x170>
 800aa50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa52:	07db      	lsls	r3, r3, #31
 800aa54:	d405      	bmi.n	800aa62 <setvbuf+0x4a>
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	0598      	lsls	r0, r3, #22
 800aa5a:	d402      	bmi.n	800aa62 <setvbuf+0x4a>
 800aa5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa5e:	f000 fb2f 	bl	800b0c0 <__retarget_lock_acquire_recursive>
 800aa62:	4621      	mov	r1, r4
 800aa64:	4638      	mov	r0, r7
 800aa66:	f000 f9f9 	bl	800ae5c <_fflush_r>
 800aa6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa6c:	b141      	cbz	r1, 800aa80 <setvbuf+0x68>
 800aa6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa72:	4299      	cmp	r1, r3
 800aa74:	d002      	beq.n	800aa7c <setvbuf+0x64>
 800aa76:	4638      	mov	r0, r7
 800aa78:	f000 fb90 	bl	800b19c <_free_r>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	6363      	str	r3, [r4, #52]	; 0x34
 800aa80:	2300      	movs	r3, #0
 800aa82:	61a3      	str	r3, [r4, #24]
 800aa84:	6063      	str	r3, [r4, #4]
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	0619      	lsls	r1, r3, #24
 800aa8a:	d503      	bpl.n	800aa94 <setvbuf+0x7c>
 800aa8c:	4638      	mov	r0, r7
 800aa8e:	6921      	ldr	r1, [r4, #16]
 800aa90:	f000 fb84 	bl	800b19c <_free_r>
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	f1b8 0f02 	cmp.w	r8, #2
 800aa9a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800aa9e:	f023 0303 	bic.w	r3, r3, #3
 800aaa2:	81a3      	strh	r3, [r4, #12]
 800aaa4:	d06c      	beq.n	800ab80 <setvbuf+0x168>
 800aaa6:	ab01      	add	r3, sp, #4
 800aaa8:	466a      	mov	r2, sp
 800aaaa:	4621      	mov	r1, r4
 800aaac:	4638      	mov	r0, r7
 800aaae:	f000 fb09 	bl	800b0c4 <__swhatbuf_r>
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	4318      	orrs	r0, r3
 800aab6:	81a0      	strh	r0, [r4, #12]
 800aab8:	2d00      	cmp	r5, #0
 800aaba:	d130      	bne.n	800ab1e <setvbuf+0x106>
 800aabc:	9d00      	ldr	r5, [sp, #0]
 800aabe:	4628      	mov	r0, r5
 800aac0:	f000 fb64 	bl	800b18c <malloc>
 800aac4:	4606      	mov	r6, r0
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d155      	bne.n	800ab76 <setvbuf+0x15e>
 800aaca:	f8dd 9000 	ldr.w	r9, [sp]
 800aace:	45a9      	cmp	r9, r5
 800aad0:	d14a      	bne.n	800ab68 <setvbuf+0x150>
 800aad2:	f04f 35ff 	mov.w	r5, #4294967295
 800aad6:	2200      	movs	r2, #0
 800aad8:	60a2      	str	r2, [r4, #8]
 800aada:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800aade:	6022      	str	r2, [r4, #0]
 800aae0:	6122      	str	r2, [r4, #16]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aae8:	6162      	str	r2, [r4, #20]
 800aaea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aaec:	f043 0302 	orr.w	r3, r3, #2
 800aaf0:	07d2      	lsls	r2, r2, #31
 800aaf2:	81a3      	strh	r3, [r4, #12]
 800aaf4:	d405      	bmi.n	800ab02 <setvbuf+0xea>
 800aaf6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800aafa:	d102      	bne.n	800ab02 <setvbuf+0xea>
 800aafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aafe:	f000 fae0 	bl	800b0c2 <__retarget_lock_release_recursive>
 800ab02:	4628      	mov	r0, r5
 800ab04:	b003      	add	sp, #12
 800ab06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab0a:	4b24      	ldr	r3, [pc, #144]	; (800ab9c <setvbuf+0x184>)
 800ab0c:	429c      	cmp	r4, r3
 800ab0e:	d101      	bne.n	800ab14 <setvbuf+0xfc>
 800ab10:	68bc      	ldr	r4, [r7, #8]
 800ab12:	e793      	b.n	800aa3c <setvbuf+0x24>
 800ab14:	4b22      	ldr	r3, [pc, #136]	; (800aba0 <setvbuf+0x188>)
 800ab16:	429c      	cmp	r4, r3
 800ab18:	bf08      	it	eq
 800ab1a:	68fc      	ldreq	r4, [r7, #12]
 800ab1c:	e78e      	b.n	800aa3c <setvbuf+0x24>
 800ab1e:	2e00      	cmp	r6, #0
 800ab20:	d0cd      	beq.n	800aabe <setvbuf+0xa6>
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	b913      	cbnz	r3, 800ab2c <setvbuf+0x114>
 800ab26:	4638      	mov	r0, r7
 800ab28:	f000 fa2c 	bl	800af84 <__sinit>
 800ab2c:	f1b8 0f01 	cmp.w	r8, #1
 800ab30:	bf08      	it	eq
 800ab32:	89a3      	ldrheq	r3, [r4, #12]
 800ab34:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ab38:	bf04      	itt	eq
 800ab3a:	f043 0301 	orreq.w	r3, r3, #1
 800ab3e:	81a3      	strheq	r3, [r4, #12]
 800ab40:	89a2      	ldrh	r2, [r4, #12]
 800ab42:	6026      	str	r6, [r4, #0]
 800ab44:	f012 0308 	ands.w	r3, r2, #8
 800ab48:	d01c      	beq.n	800ab84 <setvbuf+0x16c>
 800ab4a:	07d3      	lsls	r3, r2, #31
 800ab4c:	bf41      	itttt	mi
 800ab4e:	2300      	movmi	r3, #0
 800ab50:	426d      	negmi	r5, r5
 800ab52:	60a3      	strmi	r3, [r4, #8]
 800ab54:	61a5      	strmi	r5, [r4, #24]
 800ab56:	bf58      	it	pl
 800ab58:	60a5      	strpl	r5, [r4, #8]
 800ab5a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ab5c:	f015 0501 	ands.w	r5, r5, #1
 800ab60:	d115      	bne.n	800ab8e <setvbuf+0x176>
 800ab62:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ab66:	e7c8      	b.n	800aafa <setvbuf+0xe2>
 800ab68:	4648      	mov	r0, r9
 800ab6a:	f000 fb0f 	bl	800b18c <malloc>
 800ab6e:	4606      	mov	r6, r0
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d0ae      	beq.n	800aad2 <setvbuf+0xba>
 800ab74:	464d      	mov	r5, r9
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab7c:	81a3      	strh	r3, [r4, #12]
 800ab7e:	e7d0      	b.n	800ab22 <setvbuf+0x10a>
 800ab80:	2500      	movs	r5, #0
 800ab82:	e7a8      	b.n	800aad6 <setvbuf+0xbe>
 800ab84:	60a3      	str	r3, [r4, #8]
 800ab86:	e7e8      	b.n	800ab5a <setvbuf+0x142>
 800ab88:	f04f 35ff 	mov.w	r5, #4294967295
 800ab8c:	e7b9      	b.n	800ab02 <setvbuf+0xea>
 800ab8e:	2500      	movs	r5, #0
 800ab90:	e7b7      	b.n	800ab02 <setvbuf+0xea>
 800ab92:	bf00      	nop
 800ab94:	20000030 	.word	0x20000030
 800ab98:	0800d030 	.word	0x0800d030
 800ab9c:	0800d050 	.word	0x0800d050
 800aba0:	0800d010 	.word	0x0800d010

0800aba4 <viprintf>:
 800aba4:	4b09      	ldr	r3, [pc, #36]	; (800abcc <viprintf+0x28>)
 800aba6:	b570      	push	{r4, r5, r6, lr}
 800aba8:	681c      	ldr	r4, [r3, #0]
 800abaa:	4605      	mov	r5, r0
 800abac:	460e      	mov	r6, r1
 800abae:	b124      	cbz	r4, 800abba <viprintf+0x16>
 800abb0:	69a3      	ldr	r3, [r4, #24]
 800abb2:	b913      	cbnz	r3, 800abba <viprintf+0x16>
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 f9e5 	bl	800af84 <__sinit>
 800abba:	4633      	mov	r3, r6
 800abbc:	462a      	mov	r2, r5
 800abbe:	4620      	mov	r0, r4
 800abc0:	68a1      	ldr	r1, [r4, #8]
 800abc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800abc6:	f000 bbb7 	b.w	800b338 <_vfiprintf_r>
 800abca:	bf00      	nop
 800abcc:	20000030 	.word	0x20000030

0800abd0 <__swbuf_r>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	460e      	mov	r6, r1
 800abd4:	4614      	mov	r4, r2
 800abd6:	4605      	mov	r5, r0
 800abd8:	b118      	cbz	r0, 800abe2 <__swbuf_r+0x12>
 800abda:	6983      	ldr	r3, [r0, #24]
 800abdc:	b90b      	cbnz	r3, 800abe2 <__swbuf_r+0x12>
 800abde:	f000 f9d1 	bl	800af84 <__sinit>
 800abe2:	4b21      	ldr	r3, [pc, #132]	; (800ac68 <__swbuf_r+0x98>)
 800abe4:	429c      	cmp	r4, r3
 800abe6:	d12b      	bne.n	800ac40 <__swbuf_r+0x70>
 800abe8:	686c      	ldr	r4, [r5, #4]
 800abea:	69a3      	ldr	r3, [r4, #24]
 800abec:	60a3      	str	r3, [r4, #8]
 800abee:	89a3      	ldrh	r3, [r4, #12]
 800abf0:	071a      	lsls	r2, r3, #28
 800abf2:	d52f      	bpl.n	800ac54 <__swbuf_r+0x84>
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	b36b      	cbz	r3, 800ac54 <__swbuf_r+0x84>
 800abf8:	6923      	ldr	r3, [r4, #16]
 800abfa:	6820      	ldr	r0, [r4, #0]
 800abfc:	b2f6      	uxtb	r6, r6
 800abfe:	1ac0      	subs	r0, r0, r3
 800ac00:	6963      	ldr	r3, [r4, #20]
 800ac02:	4637      	mov	r7, r6
 800ac04:	4283      	cmp	r3, r0
 800ac06:	dc04      	bgt.n	800ac12 <__swbuf_r+0x42>
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f000 f926 	bl	800ae5c <_fflush_r>
 800ac10:	bb30      	cbnz	r0, 800ac60 <__swbuf_r+0x90>
 800ac12:	68a3      	ldr	r3, [r4, #8]
 800ac14:	3001      	adds	r0, #1
 800ac16:	3b01      	subs	r3, #1
 800ac18:	60a3      	str	r3, [r4, #8]
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	1c5a      	adds	r2, r3, #1
 800ac1e:	6022      	str	r2, [r4, #0]
 800ac20:	701e      	strb	r6, [r3, #0]
 800ac22:	6963      	ldr	r3, [r4, #20]
 800ac24:	4283      	cmp	r3, r0
 800ac26:	d004      	beq.n	800ac32 <__swbuf_r+0x62>
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	07db      	lsls	r3, r3, #31
 800ac2c:	d506      	bpl.n	800ac3c <__swbuf_r+0x6c>
 800ac2e:	2e0a      	cmp	r6, #10
 800ac30:	d104      	bne.n	800ac3c <__swbuf_r+0x6c>
 800ac32:	4621      	mov	r1, r4
 800ac34:	4628      	mov	r0, r5
 800ac36:	f000 f911 	bl	800ae5c <_fflush_r>
 800ac3a:	b988      	cbnz	r0, 800ac60 <__swbuf_r+0x90>
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac40:	4b0a      	ldr	r3, [pc, #40]	; (800ac6c <__swbuf_r+0x9c>)
 800ac42:	429c      	cmp	r4, r3
 800ac44:	d101      	bne.n	800ac4a <__swbuf_r+0x7a>
 800ac46:	68ac      	ldr	r4, [r5, #8]
 800ac48:	e7cf      	b.n	800abea <__swbuf_r+0x1a>
 800ac4a:	4b09      	ldr	r3, [pc, #36]	; (800ac70 <__swbuf_r+0xa0>)
 800ac4c:	429c      	cmp	r4, r3
 800ac4e:	bf08      	it	eq
 800ac50:	68ec      	ldreq	r4, [r5, #12]
 800ac52:	e7ca      	b.n	800abea <__swbuf_r+0x1a>
 800ac54:	4621      	mov	r1, r4
 800ac56:	4628      	mov	r0, r5
 800ac58:	f000 f80c 	bl	800ac74 <__swsetup_r>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d0cb      	beq.n	800abf8 <__swbuf_r+0x28>
 800ac60:	f04f 37ff 	mov.w	r7, #4294967295
 800ac64:	e7ea      	b.n	800ac3c <__swbuf_r+0x6c>
 800ac66:	bf00      	nop
 800ac68:	0800d030 	.word	0x0800d030
 800ac6c:	0800d050 	.word	0x0800d050
 800ac70:	0800d010 	.word	0x0800d010

0800ac74 <__swsetup_r>:
 800ac74:	4b32      	ldr	r3, [pc, #200]	; (800ad40 <__swsetup_r+0xcc>)
 800ac76:	b570      	push	{r4, r5, r6, lr}
 800ac78:	681d      	ldr	r5, [r3, #0]
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460c      	mov	r4, r1
 800ac7e:	b125      	cbz	r5, 800ac8a <__swsetup_r+0x16>
 800ac80:	69ab      	ldr	r3, [r5, #24]
 800ac82:	b913      	cbnz	r3, 800ac8a <__swsetup_r+0x16>
 800ac84:	4628      	mov	r0, r5
 800ac86:	f000 f97d 	bl	800af84 <__sinit>
 800ac8a:	4b2e      	ldr	r3, [pc, #184]	; (800ad44 <__swsetup_r+0xd0>)
 800ac8c:	429c      	cmp	r4, r3
 800ac8e:	d10f      	bne.n	800acb0 <__swsetup_r+0x3c>
 800ac90:	686c      	ldr	r4, [r5, #4]
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac98:	0719      	lsls	r1, r3, #28
 800ac9a:	d42c      	bmi.n	800acf6 <__swsetup_r+0x82>
 800ac9c:	06dd      	lsls	r5, r3, #27
 800ac9e:	d411      	bmi.n	800acc4 <__swsetup_r+0x50>
 800aca0:	2309      	movs	r3, #9
 800aca2:	6033      	str	r3, [r6, #0]
 800aca4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aca8:	f04f 30ff 	mov.w	r0, #4294967295
 800acac:	81a3      	strh	r3, [r4, #12]
 800acae:	e03e      	b.n	800ad2e <__swsetup_r+0xba>
 800acb0:	4b25      	ldr	r3, [pc, #148]	; (800ad48 <__swsetup_r+0xd4>)
 800acb2:	429c      	cmp	r4, r3
 800acb4:	d101      	bne.n	800acba <__swsetup_r+0x46>
 800acb6:	68ac      	ldr	r4, [r5, #8]
 800acb8:	e7eb      	b.n	800ac92 <__swsetup_r+0x1e>
 800acba:	4b24      	ldr	r3, [pc, #144]	; (800ad4c <__swsetup_r+0xd8>)
 800acbc:	429c      	cmp	r4, r3
 800acbe:	bf08      	it	eq
 800acc0:	68ec      	ldreq	r4, [r5, #12]
 800acc2:	e7e6      	b.n	800ac92 <__swsetup_r+0x1e>
 800acc4:	0758      	lsls	r0, r3, #29
 800acc6:	d512      	bpl.n	800acee <__swsetup_r+0x7a>
 800acc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acca:	b141      	cbz	r1, 800acde <__swsetup_r+0x6a>
 800accc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acd0:	4299      	cmp	r1, r3
 800acd2:	d002      	beq.n	800acda <__swsetup_r+0x66>
 800acd4:	4630      	mov	r0, r6
 800acd6:	f000 fa61 	bl	800b19c <_free_r>
 800acda:	2300      	movs	r3, #0
 800acdc:	6363      	str	r3, [r4, #52]	; 0x34
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ace4:	81a3      	strh	r3, [r4, #12]
 800ace6:	2300      	movs	r3, #0
 800ace8:	6063      	str	r3, [r4, #4]
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	89a3      	ldrh	r3, [r4, #12]
 800acf0:	f043 0308 	orr.w	r3, r3, #8
 800acf4:	81a3      	strh	r3, [r4, #12]
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	b94b      	cbnz	r3, 800ad0e <__swsetup_r+0x9a>
 800acfa:	89a3      	ldrh	r3, [r4, #12]
 800acfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad04:	d003      	beq.n	800ad0e <__swsetup_r+0x9a>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f000 f9ff 	bl	800b10c <__smakebuf_r>
 800ad0e:	89a0      	ldrh	r0, [r4, #12]
 800ad10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad14:	f010 0301 	ands.w	r3, r0, #1
 800ad18:	d00a      	beq.n	800ad30 <__swsetup_r+0xbc>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60a3      	str	r3, [r4, #8]
 800ad1e:	6963      	ldr	r3, [r4, #20]
 800ad20:	425b      	negs	r3, r3
 800ad22:	61a3      	str	r3, [r4, #24]
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	b943      	cbnz	r3, 800ad3a <__swsetup_r+0xc6>
 800ad28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad2c:	d1ba      	bne.n	800aca4 <__swsetup_r+0x30>
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}
 800ad30:	0781      	lsls	r1, r0, #30
 800ad32:	bf58      	it	pl
 800ad34:	6963      	ldrpl	r3, [r4, #20]
 800ad36:	60a3      	str	r3, [r4, #8]
 800ad38:	e7f4      	b.n	800ad24 <__swsetup_r+0xb0>
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	e7f7      	b.n	800ad2e <__swsetup_r+0xba>
 800ad3e:	bf00      	nop
 800ad40:	20000030 	.word	0x20000030
 800ad44:	0800d030 	.word	0x0800d030
 800ad48:	0800d050 	.word	0x0800d050
 800ad4c:	0800d010 	.word	0x0800d010

0800ad50 <__sflush_r>:
 800ad50:	898a      	ldrh	r2, [r1, #12]
 800ad52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad56:	4605      	mov	r5, r0
 800ad58:	0710      	lsls	r0, r2, #28
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	d458      	bmi.n	800ae10 <__sflush_r+0xc0>
 800ad5e:	684b      	ldr	r3, [r1, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	dc05      	bgt.n	800ad70 <__sflush_r+0x20>
 800ad64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	dc02      	bgt.n	800ad70 <__sflush_r+0x20>
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad72:	2e00      	cmp	r6, #0
 800ad74:	d0f9      	beq.n	800ad6a <__sflush_r+0x1a>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad7c:	682f      	ldr	r7, [r5, #0]
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	d032      	beq.n	800ade8 <__sflush_r+0x98>
 800ad82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	075a      	lsls	r2, r3, #29
 800ad88:	d505      	bpl.n	800ad96 <__sflush_r+0x46>
 800ad8a:	6863      	ldr	r3, [r4, #4]
 800ad8c:	1ac0      	subs	r0, r0, r3
 800ad8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad90:	b10b      	cbz	r3, 800ad96 <__sflush_r+0x46>
 800ad92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad94:	1ac0      	subs	r0, r0, r3
 800ad96:	2300      	movs	r3, #0
 800ad98:	4602      	mov	r2, r0
 800ad9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	6a21      	ldr	r1, [r4, #32]
 800ada0:	47b0      	blx	r6
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	d106      	bne.n	800adb6 <__sflush_r+0x66>
 800ada8:	6829      	ldr	r1, [r5, #0]
 800adaa:	291d      	cmp	r1, #29
 800adac:	d82c      	bhi.n	800ae08 <__sflush_r+0xb8>
 800adae:	4a2a      	ldr	r2, [pc, #168]	; (800ae58 <__sflush_r+0x108>)
 800adb0:	40ca      	lsrs	r2, r1
 800adb2:	07d6      	lsls	r6, r2, #31
 800adb4:	d528      	bpl.n	800ae08 <__sflush_r+0xb8>
 800adb6:	2200      	movs	r2, #0
 800adb8:	6062      	str	r2, [r4, #4]
 800adba:	6922      	ldr	r2, [r4, #16]
 800adbc:	04d9      	lsls	r1, r3, #19
 800adbe:	6022      	str	r2, [r4, #0]
 800adc0:	d504      	bpl.n	800adcc <__sflush_r+0x7c>
 800adc2:	1c42      	adds	r2, r0, #1
 800adc4:	d101      	bne.n	800adca <__sflush_r+0x7a>
 800adc6:	682b      	ldr	r3, [r5, #0]
 800adc8:	b903      	cbnz	r3, 800adcc <__sflush_r+0x7c>
 800adca:	6560      	str	r0, [r4, #84]	; 0x54
 800adcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adce:	602f      	str	r7, [r5, #0]
 800add0:	2900      	cmp	r1, #0
 800add2:	d0ca      	beq.n	800ad6a <__sflush_r+0x1a>
 800add4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800add8:	4299      	cmp	r1, r3
 800adda:	d002      	beq.n	800ade2 <__sflush_r+0x92>
 800addc:	4628      	mov	r0, r5
 800adde:	f000 f9dd 	bl	800b19c <_free_r>
 800ade2:	2000      	movs	r0, #0
 800ade4:	6360      	str	r0, [r4, #52]	; 0x34
 800ade6:	e7c1      	b.n	800ad6c <__sflush_r+0x1c>
 800ade8:	6a21      	ldr	r1, [r4, #32]
 800adea:	2301      	movs	r3, #1
 800adec:	4628      	mov	r0, r5
 800adee:	47b0      	blx	r6
 800adf0:	1c41      	adds	r1, r0, #1
 800adf2:	d1c7      	bne.n	800ad84 <__sflush_r+0x34>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0c4      	beq.n	800ad84 <__sflush_r+0x34>
 800adfa:	2b1d      	cmp	r3, #29
 800adfc:	d001      	beq.n	800ae02 <__sflush_r+0xb2>
 800adfe:	2b16      	cmp	r3, #22
 800ae00:	d101      	bne.n	800ae06 <__sflush_r+0xb6>
 800ae02:	602f      	str	r7, [r5, #0]
 800ae04:	e7b1      	b.n	800ad6a <__sflush_r+0x1a>
 800ae06:	89a3      	ldrh	r3, [r4, #12]
 800ae08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae0c:	81a3      	strh	r3, [r4, #12]
 800ae0e:	e7ad      	b.n	800ad6c <__sflush_r+0x1c>
 800ae10:	690f      	ldr	r7, [r1, #16]
 800ae12:	2f00      	cmp	r7, #0
 800ae14:	d0a9      	beq.n	800ad6a <__sflush_r+0x1a>
 800ae16:	0793      	lsls	r3, r2, #30
 800ae18:	bf18      	it	ne
 800ae1a:	2300      	movne	r3, #0
 800ae1c:	680e      	ldr	r6, [r1, #0]
 800ae1e:	bf08      	it	eq
 800ae20:	694b      	ldreq	r3, [r1, #20]
 800ae22:	eba6 0807 	sub.w	r8, r6, r7
 800ae26:	600f      	str	r7, [r1, #0]
 800ae28:	608b      	str	r3, [r1, #8]
 800ae2a:	f1b8 0f00 	cmp.w	r8, #0
 800ae2e:	dd9c      	ble.n	800ad6a <__sflush_r+0x1a>
 800ae30:	4643      	mov	r3, r8
 800ae32:	463a      	mov	r2, r7
 800ae34:	4628      	mov	r0, r5
 800ae36:	6a21      	ldr	r1, [r4, #32]
 800ae38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae3a:	47b0      	blx	r6
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	dc06      	bgt.n	800ae4e <__sflush_r+0xfe>
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	f04f 30ff 	mov.w	r0, #4294967295
 800ae46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae4a:	81a3      	strh	r3, [r4, #12]
 800ae4c:	e78e      	b.n	800ad6c <__sflush_r+0x1c>
 800ae4e:	4407      	add	r7, r0
 800ae50:	eba8 0800 	sub.w	r8, r8, r0
 800ae54:	e7e9      	b.n	800ae2a <__sflush_r+0xda>
 800ae56:	bf00      	nop
 800ae58:	20400001 	.word	0x20400001

0800ae5c <_fflush_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	690b      	ldr	r3, [r1, #16]
 800ae60:	4605      	mov	r5, r0
 800ae62:	460c      	mov	r4, r1
 800ae64:	b913      	cbnz	r3, 800ae6c <_fflush_r+0x10>
 800ae66:	2500      	movs	r5, #0
 800ae68:	4628      	mov	r0, r5
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}
 800ae6c:	b118      	cbz	r0, 800ae76 <_fflush_r+0x1a>
 800ae6e:	6983      	ldr	r3, [r0, #24]
 800ae70:	b90b      	cbnz	r3, 800ae76 <_fflush_r+0x1a>
 800ae72:	f000 f887 	bl	800af84 <__sinit>
 800ae76:	4b14      	ldr	r3, [pc, #80]	; (800aec8 <_fflush_r+0x6c>)
 800ae78:	429c      	cmp	r4, r3
 800ae7a:	d11b      	bne.n	800aeb4 <_fflush_r+0x58>
 800ae7c:	686c      	ldr	r4, [r5, #4]
 800ae7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0ef      	beq.n	800ae66 <_fflush_r+0xa>
 800ae86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae88:	07d0      	lsls	r0, r2, #31
 800ae8a:	d404      	bmi.n	800ae96 <_fflush_r+0x3a>
 800ae8c:	0599      	lsls	r1, r3, #22
 800ae8e:	d402      	bmi.n	800ae96 <_fflush_r+0x3a>
 800ae90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae92:	f000 f915 	bl	800b0c0 <__retarget_lock_acquire_recursive>
 800ae96:	4628      	mov	r0, r5
 800ae98:	4621      	mov	r1, r4
 800ae9a:	f7ff ff59 	bl	800ad50 <__sflush_r>
 800ae9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aea0:	4605      	mov	r5, r0
 800aea2:	07da      	lsls	r2, r3, #31
 800aea4:	d4e0      	bmi.n	800ae68 <_fflush_r+0xc>
 800aea6:	89a3      	ldrh	r3, [r4, #12]
 800aea8:	059b      	lsls	r3, r3, #22
 800aeaa:	d4dd      	bmi.n	800ae68 <_fflush_r+0xc>
 800aeac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeae:	f000 f908 	bl	800b0c2 <__retarget_lock_release_recursive>
 800aeb2:	e7d9      	b.n	800ae68 <_fflush_r+0xc>
 800aeb4:	4b05      	ldr	r3, [pc, #20]	; (800aecc <_fflush_r+0x70>)
 800aeb6:	429c      	cmp	r4, r3
 800aeb8:	d101      	bne.n	800aebe <_fflush_r+0x62>
 800aeba:	68ac      	ldr	r4, [r5, #8]
 800aebc:	e7df      	b.n	800ae7e <_fflush_r+0x22>
 800aebe:	4b04      	ldr	r3, [pc, #16]	; (800aed0 <_fflush_r+0x74>)
 800aec0:	429c      	cmp	r4, r3
 800aec2:	bf08      	it	eq
 800aec4:	68ec      	ldreq	r4, [r5, #12]
 800aec6:	e7da      	b.n	800ae7e <_fflush_r+0x22>
 800aec8:	0800d030 	.word	0x0800d030
 800aecc:	0800d050 	.word	0x0800d050
 800aed0:	0800d010 	.word	0x0800d010

0800aed4 <std>:
 800aed4:	2300      	movs	r3, #0
 800aed6:	b510      	push	{r4, lr}
 800aed8:	4604      	mov	r4, r0
 800aeda:	e9c0 3300 	strd	r3, r3, [r0]
 800aede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aee2:	6083      	str	r3, [r0, #8]
 800aee4:	8181      	strh	r1, [r0, #12]
 800aee6:	6643      	str	r3, [r0, #100]	; 0x64
 800aee8:	81c2      	strh	r2, [r0, #14]
 800aeea:	6183      	str	r3, [r0, #24]
 800aeec:	4619      	mov	r1, r3
 800aeee:	2208      	movs	r2, #8
 800aef0:	305c      	adds	r0, #92	; 0x5c
 800aef2:	f7ff fd13 	bl	800a91c <memset>
 800aef6:	4b05      	ldr	r3, [pc, #20]	; (800af0c <std+0x38>)
 800aef8:	6224      	str	r4, [r4, #32]
 800aefa:	6263      	str	r3, [r4, #36]	; 0x24
 800aefc:	4b04      	ldr	r3, [pc, #16]	; (800af10 <std+0x3c>)
 800aefe:	62a3      	str	r3, [r4, #40]	; 0x28
 800af00:	4b04      	ldr	r3, [pc, #16]	; (800af14 <std+0x40>)
 800af02:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af04:	4b04      	ldr	r3, [pc, #16]	; (800af18 <std+0x44>)
 800af06:	6323      	str	r3, [r4, #48]	; 0x30
 800af08:	bd10      	pop	{r4, pc}
 800af0a:	bf00      	nop
 800af0c:	0800b8e5 	.word	0x0800b8e5
 800af10:	0800b907 	.word	0x0800b907
 800af14:	0800b93f 	.word	0x0800b93f
 800af18:	0800b963 	.word	0x0800b963

0800af1c <_cleanup_r>:
 800af1c:	4901      	ldr	r1, [pc, #4]	; (800af24 <_cleanup_r+0x8>)
 800af1e:	f000 b8af 	b.w	800b080 <_fwalk_reent>
 800af22:	bf00      	nop
 800af24:	0800ae5d 	.word	0x0800ae5d

0800af28 <__sfmoreglue>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	2568      	movs	r5, #104	; 0x68
 800af2c:	1e4a      	subs	r2, r1, #1
 800af2e:	4355      	muls	r5, r2
 800af30:	460e      	mov	r6, r1
 800af32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af36:	f000 f97d 	bl	800b234 <_malloc_r>
 800af3a:	4604      	mov	r4, r0
 800af3c:	b140      	cbz	r0, 800af50 <__sfmoreglue+0x28>
 800af3e:	2100      	movs	r1, #0
 800af40:	e9c0 1600 	strd	r1, r6, [r0]
 800af44:	300c      	adds	r0, #12
 800af46:	60a0      	str	r0, [r4, #8]
 800af48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af4c:	f7ff fce6 	bl	800a91c <memset>
 800af50:	4620      	mov	r0, r4
 800af52:	bd70      	pop	{r4, r5, r6, pc}

0800af54 <__sfp_lock_acquire>:
 800af54:	4801      	ldr	r0, [pc, #4]	; (800af5c <__sfp_lock_acquire+0x8>)
 800af56:	f000 b8b3 	b.w	800b0c0 <__retarget_lock_acquire_recursive>
 800af5a:	bf00      	nop
 800af5c:	20003b88 	.word	0x20003b88

0800af60 <__sfp_lock_release>:
 800af60:	4801      	ldr	r0, [pc, #4]	; (800af68 <__sfp_lock_release+0x8>)
 800af62:	f000 b8ae 	b.w	800b0c2 <__retarget_lock_release_recursive>
 800af66:	bf00      	nop
 800af68:	20003b88 	.word	0x20003b88

0800af6c <__sinit_lock_acquire>:
 800af6c:	4801      	ldr	r0, [pc, #4]	; (800af74 <__sinit_lock_acquire+0x8>)
 800af6e:	f000 b8a7 	b.w	800b0c0 <__retarget_lock_acquire_recursive>
 800af72:	bf00      	nop
 800af74:	20003b83 	.word	0x20003b83

0800af78 <__sinit_lock_release>:
 800af78:	4801      	ldr	r0, [pc, #4]	; (800af80 <__sinit_lock_release+0x8>)
 800af7a:	f000 b8a2 	b.w	800b0c2 <__retarget_lock_release_recursive>
 800af7e:	bf00      	nop
 800af80:	20003b83 	.word	0x20003b83

0800af84 <__sinit>:
 800af84:	b510      	push	{r4, lr}
 800af86:	4604      	mov	r4, r0
 800af88:	f7ff fff0 	bl	800af6c <__sinit_lock_acquire>
 800af8c:	69a3      	ldr	r3, [r4, #24]
 800af8e:	b11b      	cbz	r3, 800af98 <__sinit+0x14>
 800af90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af94:	f7ff bff0 	b.w	800af78 <__sinit_lock_release>
 800af98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af9c:	6523      	str	r3, [r4, #80]	; 0x50
 800af9e:	4b13      	ldr	r3, [pc, #76]	; (800afec <__sinit+0x68>)
 800afa0:	4a13      	ldr	r2, [pc, #76]	; (800aff0 <__sinit+0x6c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	62a2      	str	r2, [r4, #40]	; 0x28
 800afa6:	42a3      	cmp	r3, r4
 800afa8:	bf08      	it	eq
 800afaa:	2301      	moveq	r3, #1
 800afac:	4620      	mov	r0, r4
 800afae:	bf08      	it	eq
 800afb0:	61a3      	streq	r3, [r4, #24]
 800afb2:	f000 f81f 	bl	800aff4 <__sfp>
 800afb6:	6060      	str	r0, [r4, #4]
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 f81b 	bl	800aff4 <__sfp>
 800afbe:	60a0      	str	r0, [r4, #8]
 800afc0:	4620      	mov	r0, r4
 800afc2:	f000 f817 	bl	800aff4 <__sfp>
 800afc6:	2200      	movs	r2, #0
 800afc8:	2104      	movs	r1, #4
 800afca:	60e0      	str	r0, [r4, #12]
 800afcc:	6860      	ldr	r0, [r4, #4]
 800afce:	f7ff ff81 	bl	800aed4 <std>
 800afd2:	2201      	movs	r2, #1
 800afd4:	2109      	movs	r1, #9
 800afd6:	68a0      	ldr	r0, [r4, #8]
 800afd8:	f7ff ff7c 	bl	800aed4 <std>
 800afdc:	2202      	movs	r2, #2
 800afde:	2112      	movs	r1, #18
 800afe0:	68e0      	ldr	r0, [r4, #12]
 800afe2:	f7ff ff77 	bl	800aed4 <std>
 800afe6:	2301      	movs	r3, #1
 800afe8:	61a3      	str	r3, [r4, #24]
 800afea:	e7d1      	b.n	800af90 <__sinit+0xc>
 800afec:	0800d00c 	.word	0x0800d00c
 800aff0:	0800af1d 	.word	0x0800af1d

0800aff4 <__sfp>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	4607      	mov	r7, r0
 800aff8:	f7ff ffac 	bl	800af54 <__sfp_lock_acquire>
 800affc:	4b1e      	ldr	r3, [pc, #120]	; (800b078 <__sfp+0x84>)
 800affe:	681e      	ldr	r6, [r3, #0]
 800b000:	69b3      	ldr	r3, [r6, #24]
 800b002:	b913      	cbnz	r3, 800b00a <__sfp+0x16>
 800b004:	4630      	mov	r0, r6
 800b006:	f7ff ffbd 	bl	800af84 <__sinit>
 800b00a:	3648      	adds	r6, #72	; 0x48
 800b00c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b010:	3b01      	subs	r3, #1
 800b012:	d503      	bpl.n	800b01c <__sfp+0x28>
 800b014:	6833      	ldr	r3, [r6, #0]
 800b016:	b30b      	cbz	r3, 800b05c <__sfp+0x68>
 800b018:	6836      	ldr	r6, [r6, #0]
 800b01a:	e7f7      	b.n	800b00c <__sfp+0x18>
 800b01c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b020:	b9d5      	cbnz	r5, 800b058 <__sfp+0x64>
 800b022:	4b16      	ldr	r3, [pc, #88]	; (800b07c <__sfp+0x88>)
 800b024:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b028:	60e3      	str	r3, [r4, #12]
 800b02a:	6665      	str	r5, [r4, #100]	; 0x64
 800b02c:	f000 f847 	bl	800b0be <__retarget_lock_init_recursive>
 800b030:	f7ff ff96 	bl	800af60 <__sfp_lock_release>
 800b034:	2208      	movs	r2, #8
 800b036:	4629      	mov	r1, r5
 800b038:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b03c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b040:	6025      	str	r5, [r4, #0]
 800b042:	61a5      	str	r5, [r4, #24]
 800b044:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b048:	f7ff fc68 	bl	800a91c <memset>
 800b04c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b050:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b054:	4620      	mov	r0, r4
 800b056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b058:	3468      	adds	r4, #104	; 0x68
 800b05a:	e7d9      	b.n	800b010 <__sfp+0x1c>
 800b05c:	2104      	movs	r1, #4
 800b05e:	4638      	mov	r0, r7
 800b060:	f7ff ff62 	bl	800af28 <__sfmoreglue>
 800b064:	4604      	mov	r4, r0
 800b066:	6030      	str	r0, [r6, #0]
 800b068:	2800      	cmp	r0, #0
 800b06a:	d1d5      	bne.n	800b018 <__sfp+0x24>
 800b06c:	f7ff ff78 	bl	800af60 <__sfp_lock_release>
 800b070:	230c      	movs	r3, #12
 800b072:	603b      	str	r3, [r7, #0]
 800b074:	e7ee      	b.n	800b054 <__sfp+0x60>
 800b076:	bf00      	nop
 800b078:	0800d00c 	.word	0x0800d00c
 800b07c:	ffff0001 	.word	0xffff0001

0800b080 <_fwalk_reent>:
 800b080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b084:	4606      	mov	r6, r0
 800b086:	4688      	mov	r8, r1
 800b088:	2700      	movs	r7, #0
 800b08a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b08e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b092:	f1b9 0901 	subs.w	r9, r9, #1
 800b096:	d505      	bpl.n	800b0a4 <_fwalk_reent+0x24>
 800b098:	6824      	ldr	r4, [r4, #0]
 800b09a:	2c00      	cmp	r4, #0
 800b09c:	d1f7      	bne.n	800b08e <_fwalk_reent+0xe>
 800b09e:	4638      	mov	r0, r7
 800b0a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a4:	89ab      	ldrh	r3, [r5, #12]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d907      	bls.n	800b0ba <_fwalk_reent+0x3a>
 800b0aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	d003      	beq.n	800b0ba <_fwalk_reent+0x3a>
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	47c0      	blx	r8
 800b0b8:	4307      	orrs	r7, r0
 800b0ba:	3568      	adds	r5, #104	; 0x68
 800b0bc:	e7e9      	b.n	800b092 <_fwalk_reent+0x12>

0800b0be <__retarget_lock_init_recursive>:
 800b0be:	4770      	bx	lr

0800b0c0 <__retarget_lock_acquire_recursive>:
 800b0c0:	4770      	bx	lr

0800b0c2 <__retarget_lock_release_recursive>:
 800b0c2:	4770      	bx	lr

0800b0c4 <__swhatbuf_r>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	460e      	mov	r6, r1
 800b0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0cc:	4614      	mov	r4, r2
 800b0ce:	2900      	cmp	r1, #0
 800b0d0:	461d      	mov	r5, r3
 800b0d2:	b096      	sub	sp, #88	; 0x58
 800b0d4:	da07      	bge.n	800b0e6 <__swhatbuf_r+0x22>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	602b      	str	r3, [r5, #0]
 800b0da:	89b3      	ldrh	r3, [r6, #12]
 800b0dc:	061a      	lsls	r2, r3, #24
 800b0de:	d410      	bmi.n	800b102 <__swhatbuf_r+0x3e>
 800b0e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0e4:	e00e      	b.n	800b104 <__swhatbuf_r+0x40>
 800b0e6:	466a      	mov	r2, sp
 800b0e8:	f000 fc62 	bl	800b9b0 <_fstat_r>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	dbf2      	blt.n	800b0d6 <__swhatbuf_r+0x12>
 800b0f0:	9a01      	ldr	r2, [sp, #4]
 800b0f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0fa:	425a      	negs	r2, r3
 800b0fc:	415a      	adcs	r2, r3
 800b0fe:	602a      	str	r2, [r5, #0]
 800b100:	e7ee      	b.n	800b0e0 <__swhatbuf_r+0x1c>
 800b102:	2340      	movs	r3, #64	; 0x40
 800b104:	2000      	movs	r0, #0
 800b106:	6023      	str	r3, [r4, #0]
 800b108:	b016      	add	sp, #88	; 0x58
 800b10a:	bd70      	pop	{r4, r5, r6, pc}

0800b10c <__smakebuf_r>:
 800b10c:	898b      	ldrh	r3, [r1, #12]
 800b10e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b110:	079d      	lsls	r5, r3, #30
 800b112:	4606      	mov	r6, r0
 800b114:	460c      	mov	r4, r1
 800b116:	d507      	bpl.n	800b128 <__smakebuf_r+0x1c>
 800b118:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	6123      	str	r3, [r4, #16]
 800b120:	2301      	movs	r3, #1
 800b122:	6163      	str	r3, [r4, #20]
 800b124:	b002      	add	sp, #8
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	466a      	mov	r2, sp
 800b12a:	ab01      	add	r3, sp, #4
 800b12c:	f7ff ffca 	bl	800b0c4 <__swhatbuf_r>
 800b130:	9900      	ldr	r1, [sp, #0]
 800b132:	4605      	mov	r5, r0
 800b134:	4630      	mov	r0, r6
 800b136:	f000 f87d 	bl	800b234 <_malloc_r>
 800b13a:	b948      	cbnz	r0, 800b150 <__smakebuf_r+0x44>
 800b13c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b140:	059a      	lsls	r2, r3, #22
 800b142:	d4ef      	bmi.n	800b124 <__smakebuf_r+0x18>
 800b144:	f023 0303 	bic.w	r3, r3, #3
 800b148:	f043 0302 	orr.w	r3, r3, #2
 800b14c:	81a3      	strh	r3, [r4, #12]
 800b14e:	e7e3      	b.n	800b118 <__smakebuf_r+0xc>
 800b150:	4b0d      	ldr	r3, [pc, #52]	; (800b188 <__smakebuf_r+0x7c>)
 800b152:	62b3      	str	r3, [r6, #40]	; 0x28
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	6020      	str	r0, [r4, #0]
 800b158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b15c:	81a3      	strh	r3, [r4, #12]
 800b15e:	9b00      	ldr	r3, [sp, #0]
 800b160:	6120      	str	r0, [r4, #16]
 800b162:	6163      	str	r3, [r4, #20]
 800b164:	9b01      	ldr	r3, [sp, #4]
 800b166:	b15b      	cbz	r3, 800b180 <__smakebuf_r+0x74>
 800b168:	4630      	mov	r0, r6
 800b16a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b16e:	f000 fc31 	bl	800b9d4 <_isatty_r>
 800b172:	b128      	cbz	r0, 800b180 <__smakebuf_r+0x74>
 800b174:	89a3      	ldrh	r3, [r4, #12]
 800b176:	f023 0303 	bic.w	r3, r3, #3
 800b17a:	f043 0301 	orr.w	r3, r3, #1
 800b17e:	81a3      	strh	r3, [r4, #12]
 800b180:	89a0      	ldrh	r0, [r4, #12]
 800b182:	4305      	orrs	r5, r0
 800b184:	81a5      	strh	r5, [r4, #12]
 800b186:	e7cd      	b.n	800b124 <__smakebuf_r+0x18>
 800b188:	0800af1d 	.word	0x0800af1d

0800b18c <malloc>:
 800b18c:	4b02      	ldr	r3, [pc, #8]	; (800b198 <malloc+0xc>)
 800b18e:	4601      	mov	r1, r0
 800b190:	6818      	ldr	r0, [r3, #0]
 800b192:	f000 b84f 	b.w	800b234 <_malloc_r>
 800b196:	bf00      	nop
 800b198:	20000030 	.word	0x20000030

0800b19c <_free_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4605      	mov	r5, r0
 800b1a0:	2900      	cmp	r1, #0
 800b1a2:	d043      	beq.n	800b22c <_free_r+0x90>
 800b1a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1a8:	1f0c      	subs	r4, r1, #4
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	bfb8      	it	lt
 800b1ae:	18e4      	addlt	r4, r4, r3
 800b1b0:	f000 fc40 	bl	800ba34 <__malloc_lock>
 800b1b4:	4a1e      	ldr	r2, [pc, #120]	; (800b230 <_free_r+0x94>)
 800b1b6:	6813      	ldr	r3, [r2, #0]
 800b1b8:	4610      	mov	r0, r2
 800b1ba:	b933      	cbnz	r3, 800b1ca <_free_r+0x2e>
 800b1bc:	6063      	str	r3, [r4, #4]
 800b1be:	6014      	str	r4, [r2, #0]
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1c6:	f000 bc3b 	b.w	800ba40 <__malloc_unlock>
 800b1ca:	42a3      	cmp	r3, r4
 800b1cc:	d90a      	bls.n	800b1e4 <_free_r+0x48>
 800b1ce:	6821      	ldr	r1, [r4, #0]
 800b1d0:	1862      	adds	r2, r4, r1
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	bf01      	itttt	eq
 800b1d6:	681a      	ldreq	r2, [r3, #0]
 800b1d8:	685b      	ldreq	r3, [r3, #4]
 800b1da:	1852      	addeq	r2, r2, r1
 800b1dc:	6022      	streq	r2, [r4, #0]
 800b1de:	6063      	str	r3, [r4, #4]
 800b1e0:	6004      	str	r4, [r0, #0]
 800b1e2:	e7ed      	b.n	800b1c0 <_free_r+0x24>
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	b10b      	cbz	r3, 800b1ee <_free_r+0x52>
 800b1ea:	42a3      	cmp	r3, r4
 800b1ec:	d9fa      	bls.n	800b1e4 <_free_r+0x48>
 800b1ee:	6811      	ldr	r1, [r2, #0]
 800b1f0:	1850      	adds	r0, r2, r1
 800b1f2:	42a0      	cmp	r0, r4
 800b1f4:	d10b      	bne.n	800b20e <_free_r+0x72>
 800b1f6:	6820      	ldr	r0, [r4, #0]
 800b1f8:	4401      	add	r1, r0
 800b1fa:	1850      	adds	r0, r2, r1
 800b1fc:	4283      	cmp	r3, r0
 800b1fe:	6011      	str	r1, [r2, #0]
 800b200:	d1de      	bne.n	800b1c0 <_free_r+0x24>
 800b202:	6818      	ldr	r0, [r3, #0]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	4401      	add	r1, r0
 800b208:	6011      	str	r1, [r2, #0]
 800b20a:	6053      	str	r3, [r2, #4]
 800b20c:	e7d8      	b.n	800b1c0 <_free_r+0x24>
 800b20e:	d902      	bls.n	800b216 <_free_r+0x7a>
 800b210:	230c      	movs	r3, #12
 800b212:	602b      	str	r3, [r5, #0]
 800b214:	e7d4      	b.n	800b1c0 <_free_r+0x24>
 800b216:	6820      	ldr	r0, [r4, #0]
 800b218:	1821      	adds	r1, r4, r0
 800b21a:	428b      	cmp	r3, r1
 800b21c:	bf01      	itttt	eq
 800b21e:	6819      	ldreq	r1, [r3, #0]
 800b220:	685b      	ldreq	r3, [r3, #4]
 800b222:	1809      	addeq	r1, r1, r0
 800b224:	6021      	streq	r1, [r4, #0]
 800b226:	6063      	str	r3, [r4, #4]
 800b228:	6054      	str	r4, [r2, #4]
 800b22a:	e7c9      	b.n	800b1c0 <_free_r+0x24>
 800b22c:	bd38      	pop	{r3, r4, r5, pc}
 800b22e:	bf00      	nop
 800b230:	200039e0 	.word	0x200039e0

0800b234 <_malloc_r>:
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b236:	1ccd      	adds	r5, r1, #3
 800b238:	f025 0503 	bic.w	r5, r5, #3
 800b23c:	3508      	adds	r5, #8
 800b23e:	2d0c      	cmp	r5, #12
 800b240:	bf38      	it	cc
 800b242:	250c      	movcc	r5, #12
 800b244:	2d00      	cmp	r5, #0
 800b246:	4606      	mov	r6, r0
 800b248:	db01      	blt.n	800b24e <_malloc_r+0x1a>
 800b24a:	42a9      	cmp	r1, r5
 800b24c:	d903      	bls.n	800b256 <_malloc_r+0x22>
 800b24e:	230c      	movs	r3, #12
 800b250:	6033      	str	r3, [r6, #0]
 800b252:	2000      	movs	r0, #0
 800b254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b256:	f000 fbed 	bl	800ba34 <__malloc_lock>
 800b25a:	4921      	ldr	r1, [pc, #132]	; (800b2e0 <_malloc_r+0xac>)
 800b25c:	680a      	ldr	r2, [r1, #0]
 800b25e:	4614      	mov	r4, r2
 800b260:	b99c      	cbnz	r4, 800b28a <_malloc_r+0x56>
 800b262:	4f20      	ldr	r7, [pc, #128]	; (800b2e4 <_malloc_r+0xb0>)
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	b923      	cbnz	r3, 800b272 <_malloc_r+0x3e>
 800b268:	4621      	mov	r1, r4
 800b26a:	4630      	mov	r0, r6
 800b26c:	f000 fb2a 	bl	800b8c4 <_sbrk_r>
 800b270:	6038      	str	r0, [r7, #0]
 800b272:	4629      	mov	r1, r5
 800b274:	4630      	mov	r0, r6
 800b276:	f000 fb25 	bl	800b8c4 <_sbrk_r>
 800b27a:	1c43      	adds	r3, r0, #1
 800b27c:	d123      	bne.n	800b2c6 <_malloc_r+0x92>
 800b27e:	230c      	movs	r3, #12
 800b280:	4630      	mov	r0, r6
 800b282:	6033      	str	r3, [r6, #0]
 800b284:	f000 fbdc 	bl	800ba40 <__malloc_unlock>
 800b288:	e7e3      	b.n	800b252 <_malloc_r+0x1e>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	1b5b      	subs	r3, r3, r5
 800b28e:	d417      	bmi.n	800b2c0 <_malloc_r+0x8c>
 800b290:	2b0b      	cmp	r3, #11
 800b292:	d903      	bls.n	800b29c <_malloc_r+0x68>
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	441c      	add	r4, r3
 800b298:	6025      	str	r5, [r4, #0]
 800b29a:	e004      	b.n	800b2a6 <_malloc_r+0x72>
 800b29c:	6863      	ldr	r3, [r4, #4]
 800b29e:	42a2      	cmp	r2, r4
 800b2a0:	bf0c      	ite	eq
 800b2a2:	600b      	streq	r3, [r1, #0]
 800b2a4:	6053      	strne	r3, [r2, #4]
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f000 fbca 	bl	800ba40 <__malloc_unlock>
 800b2ac:	f104 000b 	add.w	r0, r4, #11
 800b2b0:	1d23      	adds	r3, r4, #4
 800b2b2:	f020 0007 	bic.w	r0, r0, #7
 800b2b6:	1ac2      	subs	r2, r0, r3
 800b2b8:	d0cc      	beq.n	800b254 <_malloc_r+0x20>
 800b2ba:	1a1b      	subs	r3, r3, r0
 800b2bc:	50a3      	str	r3, [r4, r2]
 800b2be:	e7c9      	b.n	800b254 <_malloc_r+0x20>
 800b2c0:	4622      	mov	r2, r4
 800b2c2:	6864      	ldr	r4, [r4, #4]
 800b2c4:	e7cc      	b.n	800b260 <_malloc_r+0x2c>
 800b2c6:	1cc4      	adds	r4, r0, #3
 800b2c8:	f024 0403 	bic.w	r4, r4, #3
 800b2cc:	42a0      	cmp	r0, r4
 800b2ce:	d0e3      	beq.n	800b298 <_malloc_r+0x64>
 800b2d0:	1a21      	subs	r1, r4, r0
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f000 faf6 	bl	800b8c4 <_sbrk_r>
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d1dd      	bne.n	800b298 <_malloc_r+0x64>
 800b2dc:	e7cf      	b.n	800b27e <_malloc_r+0x4a>
 800b2de:	bf00      	nop
 800b2e0:	200039e0 	.word	0x200039e0
 800b2e4:	200039e4 	.word	0x200039e4

0800b2e8 <__sfputc_r>:
 800b2e8:	6893      	ldr	r3, [r2, #8]
 800b2ea:	b410      	push	{r4}
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	6093      	str	r3, [r2, #8]
 800b2f2:	da07      	bge.n	800b304 <__sfputc_r+0x1c>
 800b2f4:	6994      	ldr	r4, [r2, #24]
 800b2f6:	42a3      	cmp	r3, r4
 800b2f8:	db01      	blt.n	800b2fe <__sfputc_r+0x16>
 800b2fa:	290a      	cmp	r1, #10
 800b2fc:	d102      	bne.n	800b304 <__sfputc_r+0x1c>
 800b2fe:	bc10      	pop	{r4}
 800b300:	f7ff bc66 	b.w	800abd0 <__swbuf_r>
 800b304:	6813      	ldr	r3, [r2, #0]
 800b306:	1c58      	adds	r0, r3, #1
 800b308:	6010      	str	r0, [r2, #0]
 800b30a:	7019      	strb	r1, [r3, #0]
 800b30c:	4608      	mov	r0, r1
 800b30e:	bc10      	pop	{r4}
 800b310:	4770      	bx	lr

0800b312 <__sfputs_r>:
 800b312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b314:	4606      	mov	r6, r0
 800b316:	460f      	mov	r7, r1
 800b318:	4614      	mov	r4, r2
 800b31a:	18d5      	adds	r5, r2, r3
 800b31c:	42ac      	cmp	r4, r5
 800b31e:	d101      	bne.n	800b324 <__sfputs_r+0x12>
 800b320:	2000      	movs	r0, #0
 800b322:	e007      	b.n	800b334 <__sfputs_r+0x22>
 800b324:	463a      	mov	r2, r7
 800b326:	4630      	mov	r0, r6
 800b328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b32c:	f7ff ffdc 	bl	800b2e8 <__sfputc_r>
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	d1f3      	bne.n	800b31c <__sfputs_r+0xa>
 800b334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b338 <_vfiprintf_r>:
 800b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	460d      	mov	r5, r1
 800b33e:	4614      	mov	r4, r2
 800b340:	4698      	mov	r8, r3
 800b342:	4606      	mov	r6, r0
 800b344:	b09d      	sub	sp, #116	; 0x74
 800b346:	b118      	cbz	r0, 800b350 <_vfiprintf_r+0x18>
 800b348:	6983      	ldr	r3, [r0, #24]
 800b34a:	b90b      	cbnz	r3, 800b350 <_vfiprintf_r+0x18>
 800b34c:	f7ff fe1a 	bl	800af84 <__sinit>
 800b350:	4b89      	ldr	r3, [pc, #548]	; (800b578 <_vfiprintf_r+0x240>)
 800b352:	429d      	cmp	r5, r3
 800b354:	d11b      	bne.n	800b38e <_vfiprintf_r+0x56>
 800b356:	6875      	ldr	r5, [r6, #4]
 800b358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b35a:	07d9      	lsls	r1, r3, #31
 800b35c:	d405      	bmi.n	800b36a <_vfiprintf_r+0x32>
 800b35e:	89ab      	ldrh	r3, [r5, #12]
 800b360:	059a      	lsls	r2, r3, #22
 800b362:	d402      	bmi.n	800b36a <_vfiprintf_r+0x32>
 800b364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b366:	f7ff feab 	bl	800b0c0 <__retarget_lock_acquire_recursive>
 800b36a:	89ab      	ldrh	r3, [r5, #12]
 800b36c:	071b      	lsls	r3, r3, #28
 800b36e:	d501      	bpl.n	800b374 <_vfiprintf_r+0x3c>
 800b370:	692b      	ldr	r3, [r5, #16]
 800b372:	b9eb      	cbnz	r3, 800b3b0 <_vfiprintf_r+0x78>
 800b374:	4629      	mov	r1, r5
 800b376:	4630      	mov	r0, r6
 800b378:	f7ff fc7c 	bl	800ac74 <__swsetup_r>
 800b37c:	b1c0      	cbz	r0, 800b3b0 <_vfiprintf_r+0x78>
 800b37e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b380:	07dc      	lsls	r4, r3, #31
 800b382:	d50e      	bpl.n	800b3a2 <_vfiprintf_r+0x6a>
 800b384:	f04f 30ff 	mov.w	r0, #4294967295
 800b388:	b01d      	add	sp, #116	; 0x74
 800b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38e:	4b7b      	ldr	r3, [pc, #492]	; (800b57c <_vfiprintf_r+0x244>)
 800b390:	429d      	cmp	r5, r3
 800b392:	d101      	bne.n	800b398 <_vfiprintf_r+0x60>
 800b394:	68b5      	ldr	r5, [r6, #8]
 800b396:	e7df      	b.n	800b358 <_vfiprintf_r+0x20>
 800b398:	4b79      	ldr	r3, [pc, #484]	; (800b580 <_vfiprintf_r+0x248>)
 800b39a:	429d      	cmp	r5, r3
 800b39c:	bf08      	it	eq
 800b39e:	68f5      	ldreq	r5, [r6, #12]
 800b3a0:	e7da      	b.n	800b358 <_vfiprintf_r+0x20>
 800b3a2:	89ab      	ldrh	r3, [r5, #12]
 800b3a4:	0598      	lsls	r0, r3, #22
 800b3a6:	d4ed      	bmi.n	800b384 <_vfiprintf_r+0x4c>
 800b3a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3aa:	f7ff fe8a 	bl	800b0c2 <__retarget_lock_release_recursive>
 800b3ae:	e7e9      	b.n	800b384 <_vfiprintf_r+0x4c>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b4:	2320      	movs	r3, #32
 800b3b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3ba:	2330      	movs	r3, #48	; 0x30
 800b3bc:	f04f 0901 	mov.w	r9, #1
 800b3c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b584 <_vfiprintf_r+0x24c>
 800b3c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3cc:	4623      	mov	r3, r4
 800b3ce:	469a      	mov	sl, r3
 800b3d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3d4:	b10a      	cbz	r2, 800b3da <_vfiprintf_r+0xa2>
 800b3d6:	2a25      	cmp	r2, #37	; 0x25
 800b3d8:	d1f9      	bne.n	800b3ce <_vfiprintf_r+0x96>
 800b3da:	ebba 0b04 	subs.w	fp, sl, r4
 800b3de:	d00b      	beq.n	800b3f8 <_vfiprintf_r+0xc0>
 800b3e0:	465b      	mov	r3, fp
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f7ff ff93 	bl	800b312 <__sfputs_r>
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	f000 80aa 	beq.w	800b546 <_vfiprintf_r+0x20e>
 800b3f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3f4:	445a      	add	r2, fp
 800b3f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b3f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 80a2 	beq.w	800b546 <_vfiprintf_r+0x20e>
 800b402:	2300      	movs	r3, #0
 800b404:	f04f 32ff 	mov.w	r2, #4294967295
 800b408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b40c:	f10a 0a01 	add.w	sl, sl, #1
 800b410:	9304      	str	r3, [sp, #16]
 800b412:	9307      	str	r3, [sp, #28]
 800b414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b418:	931a      	str	r3, [sp, #104]	; 0x68
 800b41a:	4654      	mov	r4, sl
 800b41c:	2205      	movs	r2, #5
 800b41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b422:	4858      	ldr	r0, [pc, #352]	; (800b584 <_vfiprintf_r+0x24c>)
 800b424:	f000 faf8 	bl	800ba18 <memchr>
 800b428:	9a04      	ldr	r2, [sp, #16]
 800b42a:	b9d8      	cbnz	r0, 800b464 <_vfiprintf_r+0x12c>
 800b42c:	06d1      	lsls	r1, r2, #27
 800b42e:	bf44      	itt	mi
 800b430:	2320      	movmi	r3, #32
 800b432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b436:	0713      	lsls	r3, r2, #28
 800b438:	bf44      	itt	mi
 800b43a:	232b      	movmi	r3, #43	; 0x2b
 800b43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b440:	f89a 3000 	ldrb.w	r3, [sl]
 800b444:	2b2a      	cmp	r3, #42	; 0x2a
 800b446:	d015      	beq.n	800b474 <_vfiprintf_r+0x13c>
 800b448:	4654      	mov	r4, sl
 800b44a:	2000      	movs	r0, #0
 800b44c:	f04f 0c0a 	mov.w	ip, #10
 800b450:	9a07      	ldr	r2, [sp, #28]
 800b452:	4621      	mov	r1, r4
 800b454:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b458:	3b30      	subs	r3, #48	; 0x30
 800b45a:	2b09      	cmp	r3, #9
 800b45c:	d94e      	bls.n	800b4fc <_vfiprintf_r+0x1c4>
 800b45e:	b1b0      	cbz	r0, 800b48e <_vfiprintf_r+0x156>
 800b460:	9207      	str	r2, [sp, #28]
 800b462:	e014      	b.n	800b48e <_vfiprintf_r+0x156>
 800b464:	eba0 0308 	sub.w	r3, r0, r8
 800b468:	fa09 f303 	lsl.w	r3, r9, r3
 800b46c:	4313      	orrs	r3, r2
 800b46e:	46a2      	mov	sl, r4
 800b470:	9304      	str	r3, [sp, #16]
 800b472:	e7d2      	b.n	800b41a <_vfiprintf_r+0xe2>
 800b474:	9b03      	ldr	r3, [sp, #12]
 800b476:	1d19      	adds	r1, r3, #4
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	9103      	str	r1, [sp, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	bfbb      	ittet	lt
 800b480:	425b      	neglt	r3, r3
 800b482:	f042 0202 	orrlt.w	r2, r2, #2
 800b486:	9307      	strge	r3, [sp, #28]
 800b488:	9307      	strlt	r3, [sp, #28]
 800b48a:	bfb8      	it	lt
 800b48c:	9204      	strlt	r2, [sp, #16]
 800b48e:	7823      	ldrb	r3, [r4, #0]
 800b490:	2b2e      	cmp	r3, #46	; 0x2e
 800b492:	d10c      	bne.n	800b4ae <_vfiprintf_r+0x176>
 800b494:	7863      	ldrb	r3, [r4, #1]
 800b496:	2b2a      	cmp	r3, #42	; 0x2a
 800b498:	d135      	bne.n	800b506 <_vfiprintf_r+0x1ce>
 800b49a:	9b03      	ldr	r3, [sp, #12]
 800b49c:	3402      	adds	r4, #2
 800b49e:	1d1a      	adds	r2, r3, #4
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	9203      	str	r2, [sp, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	bfb8      	it	lt
 800b4a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4ac:	9305      	str	r3, [sp, #20]
 800b4ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b594 <_vfiprintf_r+0x25c>
 800b4b2:	2203      	movs	r2, #3
 800b4b4:	4650      	mov	r0, sl
 800b4b6:	7821      	ldrb	r1, [r4, #0]
 800b4b8:	f000 faae 	bl	800ba18 <memchr>
 800b4bc:	b140      	cbz	r0, 800b4d0 <_vfiprintf_r+0x198>
 800b4be:	2340      	movs	r3, #64	; 0x40
 800b4c0:	eba0 000a 	sub.w	r0, r0, sl
 800b4c4:	fa03 f000 	lsl.w	r0, r3, r0
 800b4c8:	9b04      	ldr	r3, [sp, #16]
 800b4ca:	3401      	adds	r4, #1
 800b4cc:	4303      	orrs	r3, r0
 800b4ce:	9304      	str	r3, [sp, #16]
 800b4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d4:	2206      	movs	r2, #6
 800b4d6:	482c      	ldr	r0, [pc, #176]	; (800b588 <_vfiprintf_r+0x250>)
 800b4d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4dc:	f000 fa9c 	bl	800ba18 <memchr>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d03f      	beq.n	800b564 <_vfiprintf_r+0x22c>
 800b4e4:	4b29      	ldr	r3, [pc, #164]	; (800b58c <_vfiprintf_r+0x254>)
 800b4e6:	bb1b      	cbnz	r3, 800b530 <_vfiprintf_r+0x1f8>
 800b4e8:	9b03      	ldr	r3, [sp, #12]
 800b4ea:	3307      	adds	r3, #7
 800b4ec:	f023 0307 	bic.w	r3, r3, #7
 800b4f0:	3308      	adds	r3, #8
 800b4f2:	9303      	str	r3, [sp, #12]
 800b4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f6:	443b      	add	r3, r7
 800b4f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4fa:	e767      	b.n	800b3cc <_vfiprintf_r+0x94>
 800b4fc:	460c      	mov	r4, r1
 800b4fe:	2001      	movs	r0, #1
 800b500:	fb0c 3202 	mla	r2, ip, r2, r3
 800b504:	e7a5      	b.n	800b452 <_vfiprintf_r+0x11a>
 800b506:	2300      	movs	r3, #0
 800b508:	f04f 0c0a 	mov.w	ip, #10
 800b50c:	4619      	mov	r1, r3
 800b50e:	3401      	adds	r4, #1
 800b510:	9305      	str	r3, [sp, #20]
 800b512:	4620      	mov	r0, r4
 800b514:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b518:	3a30      	subs	r2, #48	; 0x30
 800b51a:	2a09      	cmp	r2, #9
 800b51c:	d903      	bls.n	800b526 <_vfiprintf_r+0x1ee>
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d0c5      	beq.n	800b4ae <_vfiprintf_r+0x176>
 800b522:	9105      	str	r1, [sp, #20]
 800b524:	e7c3      	b.n	800b4ae <_vfiprintf_r+0x176>
 800b526:	4604      	mov	r4, r0
 800b528:	2301      	movs	r3, #1
 800b52a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b52e:	e7f0      	b.n	800b512 <_vfiprintf_r+0x1da>
 800b530:	ab03      	add	r3, sp, #12
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	462a      	mov	r2, r5
 800b536:	4630      	mov	r0, r6
 800b538:	4b15      	ldr	r3, [pc, #84]	; (800b590 <_vfiprintf_r+0x258>)
 800b53a:	a904      	add	r1, sp, #16
 800b53c:	f3af 8000 	nop.w
 800b540:	4607      	mov	r7, r0
 800b542:	1c78      	adds	r0, r7, #1
 800b544:	d1d6      	bne.n	800b4f4 <_vfiprintf_r+0x1bc>
 800b546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b548:	07d9      	lsls	r1, r3, #31
 800b54a:	d405      	bmi.n	800b558 <_vfiprintf_r+0x220>
 800b54c:	89ab      	ldrh	r3, [r5, #12]
 800b54e:	059a      	lsls	r2, r3, #22
 800b550:	d402      	bmi.n	800b558 <_vfiprintf_r+0x220>
 800b552:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b554:	f7ff fdb5 	bl	800b0c2 <__retarget_lock_release_recursive>
 800b558:	89ab      	ldrh	r3, [r5, #12]
 800b55a:	065b      	lsls	r3, r3, #25
 800b55c:	f53f af12 	bmi.w	800b384 <_vfiprintf_r+0x4c>
 800b560:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b562:	e711      	b.n	800b388 <_vfiprintf_r+0x50>
 800b564:	ab03      	add	r3, sp, #12
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	462a      	mov	r2, r5
 800b56a:	4630      	mov	r0, r6
 800b56c:	4b08      	ldr	r3, [pc, #32]	; (800b590 <_vfiprintf_r+0x258>)
 800b56e:	a904      	add	r1, sp, #16
 800b570:	f000 f882 	bl	800b678 <_printf_i>
 800b574:	e7e4      	b.n	800b540 <_vfiprintf_r+0x208>
 800b576:	bf00      	nop
 800b578:	0800d030 	.word	0x0800d030
 800b57c:	0800d050 	.word	0x0800d050
 800b580:	0800d010 	.word	0x0800d010
 800b584:	0800d070 	.word	0x0800d070
 800b588:	0800d07a 	.word	0x0800d07a
 800b58c:	00000000 	.word	0x00000000
 800b590:	0800b313 	.word	0x0800b313
 800b594:	0800d076 	.word	0x0800d076

0800b598 <_printf_common>:
 800b598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b59c:	4616      	mov	r6, r2
 800b59e:	4699      	mov	r9, r3
 800b5a0:	688a      	ldr	r2, [r1, #8]
 800b5a2:	690b      	ldr	r3, [r1, #16]
 800b5a4:	4607      	mov	r7, r0
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	bfb8      	it	lt
 800b5aa:	4613      	movlt	r3, r2
 800b5ac:	6033      	str	r3, [r6, #0]
 800b5ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5b8:	b10a      	cbz	r2, 800b5be <_printf_common+0x26>
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	6033      	str	r3, [r6, #0]
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	0699      	lsls	r1, r3, #26
 800b5c2:	bf42      	ittt	mi
 800b5c4:	6833      	ldrmi	r3, [r6, #0]
 800b5c6:	3302      	addmi	r3, #2
 800b5c8:	6033      	strmi	r3, [r6, #0]
 800b5ca:	6825      	ldr	r5, [r4, #0]
 800b5cc:	f015 0506 	ands.w	r5, r5, #6
 800b5d0:	d106      	bne.n	800b5e0 <_printf_common+0x48>
 800b5d2:	f104 0a19 	add.w	sl, r4, #25
 800b5d6:	68e3      	ldr	r3, [r4, #12]
 800b5d8:	6832      	ldr	r2, [r6, #0]
 800b5da:	1a9b      	subs	r3, r3, r2
 800b5dc:	42ab      	cmp	r3, r5
 800b5de:	dc28      	bgt.n	800b632 <_printf_common+0x9a>
 800b5e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5e4:	1e13      	subs	r3, r2, #0
 800b5e6:	6822      	ldr	r2, [r4, #0]
 800b5e8:	bf18      	it	ne
 800b5ea:	2301      	movne	r3, #1
 800b5ec:	0692      	lsls	r2, r2, #26
 800b5ee:	d42d      	bmi.n	800b64c <_printf_common+0xb4>
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5f8:	47c0      	blx	r8
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	d020      	beq.n	800b640 <_printf_common+0xa8>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	68e5      	ldr	r5, [r4, #12]
 800b602:	f003 0306 	and.w	r3, r3, #6
 800b606:	2b04      	cmp	r3, #4
 800b608:	bf18      	it	ne
 800b60a:	2500      	movne	r5, #0
 800b60c:	6832      	ldr	r2, [r6, #0]
 800b60e:	f04f 0600 	mov.w	r6, #0
 800b612:	68a3      	ldr	r3, [r4, #8]
 800b614:	bf08      	it	eq
 800b616:	1aad      	subeq	r5, r5, r2
 800b618:	6922      	ldr	r2, [r4, #16]
 800b61a:	bf08      	it	eq
 800b61c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b620:	4293      	cmp	r3, r2
 800b622:	bfc4      	itt	gt
 800b624:	1a9b      	subgt	r3, r3, r2
 800b626:	18ed      	addgt	r5, r5, r3
 800b628:	341a      	adds	r4, #26
 800b62a:	42b5      	cmp	r5, r6
 800b62c:	d11a      	bne.n	800b664 <_printf_common+0xcc>
 800b62e:	2000      	movs	r0, #0
 800b630:	e008      	b.n	800b644 <_printf_common+0xac>
 800b632:	2301      	movs	r3, #1
 800b634:	4652      	mov	r2, sl
 800b636:	4649      	mov	r1, r9
 800b638:	4638      	mov	r0, r7
 800b63a:	47c0      	blx	r8
 800b63c:	3001      	adds	r0, #1
 800b63e:	d103      	bne.n	800b648 <_printf_common+0xb0>
 800b640:	f04f 30ff 	mov.w	r0, #4294967295
 800b644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b648:	3501      	adds	r5, #1
 800b64a:	e7c4      	b.n	800b5d6 <_printf_common+0x3e>
 800b64c:	2030      	movs	r0, #48	; 0x30
 800b64e:	18e1      	adds	r1, r4, r3
 800b650:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b65a:	4422      	add	r2, r4
 800b65c:	3302      	adds	r3, #2
 800b65e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b662:	e7c5      	b.n	800b5f0 <_printf_common+0x58>
 800b664:	2301      	movs	r3, #1
 800b666:	4622      	mov	r2, r4
 800b668:	4649      	mov	r1, r9
 800b66a:	4638      	mov	r0, r7
 800b66c:	47c0      	blx	r8
 800b66e:	3001      	adds	r0, #1
 800b670:	d0e6      	beq.n	800b640 <_printf_common+0xa8>
 800b672:	3601      	adds	r6, #1
 800b674:	e7d9      	b.n	800b62a <_printf_common+0x92>
	...

0800b678 <_printf_i>:
 800b678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b67c:	460c      	mov	r4, r1
 800b67e:	7e27      	ldrb	r7, [r4, #24]
 800b680:	4691      	mov	r9, r2
 800b682:	2f78      	cmp	r7, #120	; 0x78
 800b684:	4680      	mov	r8, r0
 800b686:	469a      	mov	sl, r3
 800b688:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b68a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b68e:	d807      	bhi.n	800b6a0 <_printf_i+0x28>
 800b690:	2f62      	cmp	r7, #98	; 0x62
 800b692:	d80a      	bhi.n	800b6aa <_printf_i+0x32>
 800b694:	2f00      	cmp	r7, #0
 800b696:	f000 80d9 	beq.w	800b84c <_printf_i+0x1d4>
 800b69a:	2f58      	cmp	r7, #88	; 0x58
 800b69c:	f000 80a4 	beq.w	800b7e8 <_printf_i+0x170>
 800b6a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b6a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6a8:	e03a      	b.n	800b720 <_printf_i+0xa8>
 800b6aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6ae:	2b15      	cmp	r3, #21
 800b6b0:	d8f6      	bhi.n	800b6a0 <_printf_i+0x28>
 800b6b2:	a001      	add	r0, pc, #4	; (adr r0, 800b6b8 <_printf_i+0x40>)
 800b6b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b6b8:	0800b711 	.word	0x0800b711
 800b6bc:	0800b725 	.word	0x0800b725
 800b6c0:	0800b6a1 	.word	0x0800b6a1
 800b6c4:	0800b6a1 	.word	0x0800b6a1
 800b6c8:	0800b6a1 	.word	0x0800b6a1
 800b6cc:	0800b6a1 	.word	0x0800b6a1
 800b6d0:	0800b725 	.word	0x0800b725
 800b6d4:	0800b6a1 	.word	0x0800b6a1
 800b6d8:	0800b6a1 	.word	0x0800b6a1
 800b6dc:	0800b6a1 	.word	0x0800b6a1
 800b6e0:	0800b6a1 	.word	0x0800b6a1
 800b6e4:	0800b833 	.word	0x0800b833
 800b6e8:	0800b755 	.word	0x0800b755
 800b6ec:	0800b815 	.word	0x0800b815
 800b6f0:	0800b6a1 	.word	0x0800b6a1
 800b6f4:	0800b6a1 	.word	0x0800b6a1
 800b6f8:	0800b855 	.word	0x0800b855
 800b6fc:	0800b6a1 	.word	0x0800b6a1
 800b700:	0800b755 	.word	0x0800b755
 800b704:	0800b6a1 	.word	0x0800b6a1
 800b708:	0800b6a1 	.word	0x0800b6a1
 800b70c:	0800b81d 	.word	0x0800b81d
 800b710:	680b      	ldr	r3, [r1, #0]
 800b712:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b716:	1d1a      	adds	r2, r3, #4
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	600a      	str	r2, [r1, #0]
 800b71c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b720:	2301      	movs	r3, #1
 800b722:	e0a4      	b.n	800b86e <_printf_i+0x1f6>
 800b724:	6825      	ldr	r5, [r4, #0]
 800b726:	6808      	ldr	r0, [r1, #0]
 800b728:	062e      	lsls	r6, r5, #24
 800b72a:	f100 0304 	add.w	r3, r0, #4
 800b72e:	d50a      	bpl.n	800b746 <_printf_i+0xce>
 800b730:	6805      	ldr	r5, [r0, #0]
 800b732:	600b      	str	r3, [r1, #0]
 800b734:	2d00      	cmp	r5, #0
 800b736:	da03      	bge.n	800b740 <_printf_i+0xc8>
 800b738:	232d      	movs	r3, #45	; 0x2d
 800b73a:	426d      	negs	r5, r5
 800b73c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b740:	230a      	movs	r3, #10
 800b742:	485e      	ldr	r0, [pc, #376]	; (800b8bc <_printf_i+0x244>)
 800b744:	e019      	b.n	800b77a <_printf_i+0x102>
 800b746:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b74a:	6805      	ldr	r5, [r0, #0]
 800b74c:	600b      	str	r3, [r1, #0]
 800b74e:	bf18      	it	ne
 800b750:	b22d      	sxthne	r5, r5
 800b752:	e7ef      	b.n	800b734 <_printf_i+0xbc>
 800b754:	680b      	ldr	r3, [r1, #0]
 800b756:	6825      	ldr	r5, [r4, #0]
 800b758:	1d18      	adds	r0, r3, #4
 800b75a:	6008      	str	r0, [r1, #0]
 800b75c:	0628      	lsls	r0, r5, #24
 800b75e:	d501      	bpl.n	800b764 <_printf_i+0xec>
 800b760:	681d      	ldr	r5, [r3, #0]
 800b762:	e002      	b.n	800b76a <_printf_i+0xf2>
 800b764:	0669      	lsls	r1, r5, #25
 800b766:	d5fb      	bpl.n	800b760 <_printf_i+0xe8>
 800b768:	881d      	ldrh	r5, [r3, #0]
 800b76a:	2f6f      	cmp	r7, #111	; 0x6f
 800b76c:	bf0c      	ite	eq
 800b76e:	2308      	moveq	r3, #8
 800b770:	230a      	movne	r3, #10
 800b772:	4852      	ldr	r0, [pc, #328]	; (800b8bc <_printf_i+0x244>)
 800b774:	2100      	movs	r1, #0
 800b776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b77a:	6866      	ldr	r6, [r4, #4]
 800b77c:	2e00      	cmp	r6, #0
 800b77e:	bfa8      	it	ge
 800b780:	6821      	ldrge	r1, [r4, #0]
 800b782:	60a6      	str	r6, [r4, #8]
 800b784:	bfa4      	itt	ge
 800b786:	f021 0104 	bicge.w	r1, r1, #4
 800b78a:	6021      	strge	r1, [r4, #0]
 800b78c:	b90d      	cbnz	r5, 800b792 <_printf_i+0x11a>
 800b78e:	2e00      	cmp	r6, #0
 800b790:	d04d      	beq.n	800b82e <_printf_i+0x1b6>
 800b792:	4616      	mov	r6, r2
 800b794:	fbb5 f1f3 	udiv	r1, r5, r3
 800b798:	fb03 5711 	mls	r7, r3, r1, r5
 800b79c:	5dc7      	ldrb	r7, [r0, r7]
 800b79e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7a2:	462f      	mov	r7, r5
 800b7a4:	42bb      	cmp	r3, r7
 800b7a6:	460d      	mov	r5, r1
 800b7a8:	d9f4      	bls.n	800b794 <_printf_i+0x11c>
 800b7aa:	2b08      	cmp	r3, #8
 800b7ac:	d10b      	bne.n	800b7c6 <_printf_i+0x14e>
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	07df      	lsls	r7, r3, #31
 800b7b2:	d508      	bpl.n	800b7c6 <_printf_i+0x14e>
 800b7b4:	6923      	ldr	r3, [r4, #16]
 800b7b6:	6861      	ldr	r1, [r4, #4]
 800b7b8:	4299      	cmp	r1, r3
 800b7ba:	bfde      	ittt	le
 800b7bc:	2330      	movle	r3, #48	; 0x30
 800b7be:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b7c6:	1b92      	subs	r2, r2, r6
 800b7c8:	6122      	str	r2, [r4, #16]
 800b7ca:	464b      	mov	r3, r9
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4640      	mov	r0, r8
 800b7d0:	f8cd a000 	str.w	sl, [sp]
 800b7d4:	aa03      	add	r2, sp, #12
 800b7d6:	f7ff fedf 	bl	800b598 <_printf_common>
 800b7da:	3001      	adds	r0, #1
 800b7dc:	d14c      	bne.n	800b878 <_printf_i+0x200>
 800b7de:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e2:	b004      	add	sp, #16
 800b7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e8:	4834      	ldr	r0, [pc, #208]	; (800b8bc <_printf_i+0x244>)
 800b7ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b7ee:	680e      	ldr	r6, [r1, #0]
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	f856 5b04 	ldr.w	r5, [r6], #4
 800b7f6:	061f      	lsls	r7, r3, #24
 800b7f8:	600e      	str	r6, [r1, #0]
 800b7fa:	d514      	bpl.n	800b826 <_printf_i+0x1ae>
 800b7fc:	07d9      	lsls	r1, r3, #31
 800b7fe:	bf44      	itt	mi
 800b800:	f043 0320 	orrmi.w	r3, r3, #32
 800b804:	6023      	strmi	r3, [r4, #0]
 800b806:	b91d      	cbnz	r5, 800b810 <_printf_i+0x198>
 800b808:	6823      	ldr	r3, [r4, #0]
 800b80a:	f023 0320 	bic.w	r3, r3, #32
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	2310      	movs	r3, #16
 800b812:	e7af      	b.n	800b774 <_printf_i+0xfc>
 800b814:	6823      	ldr	r3, [r4, #0]
 800b816:	f043 0320 	orr.w	r3, r3, #32
 800b81a:	6023      	str	r3, [r4, #0]
 800b81c:	2378      	movs	r3, #120	; 0x78
 800b81e:	4828      	ldr	r0, [pc, #160]	; (800b8c0 <_printf_i+0x248>)
 800b820:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b824:	e7e3      	b.n	800b7ee <_printf_i+0x176>
 800b826:	065e      	lsls	r6, r3, #25
 800b828:	bf48      	it	mi
 800b82a:	b2ad      	uxthmi	r5, r5
 800b82c:	e7e6      	b.n	800b7fc <_printf_i+0x184>
 800b82e:	4616      	mov	r6, r2
 800b830:	e7bb      	b.n	800b7aa <_printf_i+0x132>
 800b832:	680b      	ldr	r3, [r1, #0]
 800b834:	6826      	ldr	r6, [r4, #0]
 800b836:	1d1d      	adds	r5, r3, #4
 800b838:	6960      	ldr	r0, [r4, #20]
 800b83a:	600d      	str	r5, [r1, #0]
 800b83c:	0635      	lsls	r5, r6, #24
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	d501      	bpl.n	800b846 <_printf_i+0x1ce>
 800b842:	6018      	str	r0, [r3, #0]
 800b844:	e002      	b.n	800b84c <_printf_i+0x1d4>
 800b846:	0671      	lsls	r1, r6, #25
 800b848:	d5fb      	bpl.n	800b842 <_printf_i+0x1ca>
 800b84a:	8018      	strh	r0, [r3, #0]
 800b84c:	2300      	movs	r3, #0
 800b84e:	4616      	mov	r6, r2
 800b850:	6123      	str	r3, [r4, #16]
 800b852:	e7ba      	b.n	800b7ca <_printf_i+0x152>
 800b854:	680b      	ldr	r3, [r1, #0]
 800b856:	1d1a      	adds	r2, r3, #4
 800b858:	600a      	str	r2, [r1, #0]
 800b85a:	681e      	ldr	r6, [r3, #0]
 800b85c:	2100      	movs	r1, #0
 800b85e:	4630      	mov	r0, r6
 800b860:	6862      	ldr	r2, [r4, #4]
 800b862:	f000 f8d9 	bl	800ba18 <memchr>
 800b866:	b108      	cbz	r0, 800b86c <_printf_i+0x1f4>
 800b868:	1b80      	subs	r0, r0, r6
 800b86a:	6060      	str	r0, [r4, #4]
 800b86c:	6863      	ldr	r3, [r4, #4]
 800b86e:	6123      	str	r3, [r4, #16]
 800b870:	2300      	movs	r3, #0
 800b872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b876:	e7a8      	b.n	800b7ca <_printf_i+0x152>
 800b878:	4632      	mov	r2, r6
 800b87a:	4649      	mov	r1, r9
 800b87c:	4640      	mov	r0, r8
 800b87e:	6923      	ldr	r3, [r4, #16]
 800b880:	47d0      	blx	sl
 800b882:	3001      	adds	r0, #1
 800b884:	d0ab      	beq.n	800b7de <_printf_i+0x166>
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	079b      	lsls	r3, r3, #30
 800b88a:	d413      	bmi.n	800b8b4 <_printf_i+0x23c>
 800b88c:	68e0      	ldr	r0, [r4, #12]
 800b88e:	9b03      	ldr	r3, [sp, #12]
 800b890:	4298      	cmp	r0, r3
 800b892:	bfb8      	it	lt
 800b894:	4618      	movlt	r0, r3
 800b896:	e7a4      	b.n	800b7e2 <_printf_i+0x16a>
 800b898:	2301      	movs	r3, #1
 800b89a:	4632      	mov	r2, r6
 800b89c:	4649      	mov	r1, r9
 800b89e:	4640      	mov	r0, r8
 800b8a0:	47d0      	blx	sl
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	d09b      	beq.n	800b7de <_printf_i+0x166>
 800b8a6:	3501      	adds	r5, #1
 800b8a8:	68e3      	ldr	r3, [r4, #12]
 800b8aa:	9903      	ldr	r1, [sp, #12]
 800b8ac:	1a5b      	subs	r3, r3, r1
 800b8ae:	42ab      	cmp	r3, r5
 800b8b0:	dcf2      	bgt.n	800b898 <_printf_i+0x220>
 800b8b2:	e7eb      	b.n	800b88c <_printf_i+0x214>
 800b8b4:	2500      	movs	r5, #0
 800b8b6:	f104 0619 	add.w	r6, r4, #25
 800b8ba:	e7f5      	b.n	800b8a8 <_printf_i+0x230>
 800b8bc:	0800d081 	.word	0x0800d081
 800b8c0:	0800d092 	.word	0x0800d092

0800b8c4 <_sbrk_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	4d05      	ldr	r5, [pc, #20]	; (800b8e0 <_sbrk_r+0x1c>)
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	4608      	mov	r0, r1
 800b8ce:	602b      	str	r3, [r5, #0]
 800b8d0:	f7f7 f974 	bl	8002bbc <_sbrk>
 800b8d4:	1c43      	adds	r3, r0, #1
 800b8d6:	d102      	bne.n	800b8de <_sbrk_r+0x1a>
 800b8d8:	682b      	ldr	r3, [r5, #0]
 800b8da:	b103      	cbz	r3, 800b8de <_sbrk_r+0x1a>
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	bd38      	pop	{r3, r4, r5, pc}
 800b8e0:	20003b8c 	.word	0x20003b8c

0800b8e4 <__sread>:
 800b8e4:	b510      	push	{r4, lr}
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ec:	f000 f8ae 	bl	800ba4c <_read_r>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	bfab      	itete	ge
 800b8f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b8f8:	181b      	addge	r3, r3, r0
 800b8fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8fe:	bfac      	ite	ge
 800b900:	6563      	strge	r3, [r4, #84]	; 0x54
 800b902:	81a3      	strhlt	r3, [r4, #12]
 800b904:	bd10      	pop	{r4, pc}

0800b906 <__swrite>:
 800b906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b90a:	461f      	mov	r7, r3
 800b90c:	898b      	ldrh	r3, [r1, #12]
 800b90e:	4605      	mov	r5, r0
 800b910:	05db      	lsls	r3, r3, #23
 800b912:	460c      	mov	r4, r1
 800b914:	4616      	mov	r6, r2
 800b916:	d505      	bpl.n	800b924 <__swrite+0x1e>
 800b918:	2302      	movs	r3, #2
 800b91a:	2200      	movs	r2, #0
 800b91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b920:	f000 f868 	bl	800b9f4 <_lseek_r>
 800b924:	89a3      	ldrh	r3, [r4, #12]
 800b926:	4632      	mov	r2, r6
 800b928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b92c:	81a3      	strh	r3, [r4, #12]
 800b92e:	4628      	mov	r0, r5
 800b930:	463b      	mov	r3, r7
 800b932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b93a:	f000 b817 	b.w	800b96c <_write_r>

0800b93e <__sseek>:
 800b93e:	b510      	push	{r4, lr}
 800b940:	460c      	mov	r4, r1
 800b942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b946:	f000 f855 	bl	800b9f4 <_lseek_r>
 800b94a:	1c43      	adds	r3, r0, #1
 800b94c:	89a3      	ldrh	r3, [r4, #12]
 800b94e:	bf15      	itete	ne
 800b950:	6560      	strne	r0, [r4, #84]	; 0x54
 800b952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b95a:	81a3      	strheq	r3, [r4, #12]
 800b95c:	bf18      	it	ne
 800b95e:	81a3      	strhne	r3, [r4, #12]
 800b960:	bd10      	pop	{r4, pc}

0800b962 <__sclose>:
 800b962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b966:	f000 b813 	b.w	800b990 <_close_r>
	...

0800b96c <_write_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4604      	mov	r4, r0
 800b970:	4608      	mov	r0, r1
 800b972:	4611      	mov	r1, r2
 800b974:	2200      	movs	r2, #0
 800b976:	4d05      	ldr	r5, [pc, #20]	; (800b98c <_write_r+0x20>)
 800b978:	602a      	str	r2, [r5, #0]
 800b97a:	461a      	mov	r2, r3
 800b97c:	f7f6 fed2 	bl	8002724 <_write>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	d102      	bne.n	800b98a <_write_r+0x1e>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	b103      	cbz	r3, 800b98a <_write_r+0x1e>
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	20003b8c 	.word	0x20003b8c

0800b990 <_close_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	2300      	movs	r3, #0
 800b994:	4d05      	ldr	r5, [pc, #20]	; (800b9ac <_close_r+0x1c>)
 800b996:	4604      	mov	r4, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	602b      	str	r3, [r5, #0]
 800b99c:	f7f6 feee 	bl	800277c <_close>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_close_r+0x1a>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_close_r+0x1a>
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	20003b8c 	.word	0x20003b8c

0800b9b0 <_fstat_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4d06      	ldr	r5, [pc, #24]	; (800b9d0 <_fstat_r+0x20>)
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	602b      	str	r3, [r5, #0]
 800b9be:	f7f6 ff2d 	bl	800281c <_fstat>
 800b9c2:	1c43      	adds	r3, r0, #1
 800b9c4:	d102      	bne.n	800b9cc <_fstat_r+0x1c>
 800b9c6:	682b      	ldr	r3, [r5, #0]
 800b9c8:	b103      	cbz	r3, 800b9cc <_fstat_r+0x1c>
 800b9ca:	6023      	str	r3, [r4, #0]
 800b9cc:	bd38      	pop	{r3, r4, r5, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20003b8c 	.word	0x20003b8c

0800b9d4 <_isatty_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	4d05      	ldr	r5, [pc, #20]	; (800b9f0 <_isatty_r+0x1c>)
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4608      	mov	r0, r1
 800b9de:	602b      	str	r3, [r5, #0]
 800b9e0:	f7f6 fe8a 	bl	80026f8 <_isatty>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	d102      	bne.n	800b9ee <_isatty_r+0x1a>
 800b9e8:	682b      	ldr	r3, [r5, #0]
 800b9ea:	b103      	cbz	r3, 800b9ee <_isatty_r+0x1a>
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	bd38      	pop	{r3, r4, r5, pc}
 800b9f0:	20003b8c 	.word	0x20003b8c

0800b9f4 <_lseek_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	4d05      	ldr	r5, [pc, #20]	; (800ba14 <_lseek_r+0x20>)
 800ba00:	602a      	str	r2, [r5, #0]
 800ba02:	461a      	mov	r2, r3
 800ba04:	f7f6 fed1 	bl	80027aa <_lseek>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d102      	bne.n	800ba12 <_lseek_r+0x1e>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	b103      	cbz	r3, 800ba12 <_lseek_r+0x1e>
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	bd38      	pop	{r3, r4, r5, pc}
 800ba14:	20003b8c 	.word	0x20003b8c

0800ba18 <memchr>:
 800ba18:	4603      	mov	r3, r0
 800ba1a:	b510      	push	{r4, lr}
 800ba1c:	b2c9      	uxtb	r1, r1
 800ba1e:	4402      	add	r2, r0
 800ba20:	4293      	cmp	r3, r2
 800ba22:	4618      	mov	r0, r3
 800ba24:	d101      	bne.n	800ba2a <memchr+0x12>
 800ba26:	2000      	movs	r0, #0
 800ba28:	e003      	b.n	800ba32 <memchr+0x1a>
 800ba2a:	7804      	ldrb	r4, [r0, #0]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	428c      	cmp	r4, r1
 800ba30:	d1f6      	bne.n	800ba20 <memchr+0x8>
 800ba32:	bd10      	pop	{r4, pc}

0800ba34 <__malloc_lock>:
 800ba34:	4801      	ldr	r0, [pc, #4]	; (800ba3c <__malloc_lock+0x8>)
 800ba36:	f7ff bb43 	b.w	800b0c0 <__retarget_lock_acquire_recursive>
 800ba3a:	bf00      	nop
 800ba3c:	20003b84 	.word	0x20003b84

0800ba40 <__malloc_unlock>:
 800ba40:	4801      	ldr	r0, [pc, #4]	; (800ba48 <__malloc_unlock+0x8>)
 800ba42:	f7ff bb3e 	b.w	800b0c2 <__retarget_lock_release_recursive>
 800ba46:	bf00      	nop
 800ba48:	20003b84 	.word	0x20003b84

0800ba4c <_read_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4604      	mov	r4, r0
 800ba50:	4608      	mov	r0, r1
 800ba52:	4611      	mov	r1, r2
 800ba54:	2200      	movs	r2, #0
 800ba56:	4d05      	ldr	r5, [pc, #20]	; (800ba6c <_read_r+0x20>)
 800ba58:	602a      	str	r2, [r5, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f7f6 feb6 	bl	80027cc <_read>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d102      	bne.n	800ba6a <_read_r+0x1e>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b103      	cbz	r3, 800ba6a <_read_r+0x1e>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	20003b8c 	.word	0x20003b8c

0800ba70 <_init>:
 800ba70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba72:	bf00      	nop
 800ba74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba76:	bc08      	pop	{r3}
 800ba78:	469e      	mov	lr, r3
 800ba7a:	4770      	bx	lr

0800ba7c <_fini>:
 800ba7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7e:	bf00      	nop
 800ba80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba82:	bc08      	pop	{r3}
 800ba84:	469e      	mov	lr, r3
 800ba86:	4770      	bx	lr
