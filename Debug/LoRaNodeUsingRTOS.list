
LoRaNodeUsingRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c048  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000169c  0800c158  0800c158  0001c158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7f4  0800d7f4  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800d7f4  0800d7f4  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d7f4  0800d7f4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7f4  0800d7f4  0001d7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7f8  0800d7f8  0001d7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d7fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b08  20000098  0800d890  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003ba0  0800d890  00023ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027701  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054d9  00000000  00000000  000477be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  0004cc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019d0  00000000  00000000  0004e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000087ef  00000000  00000000  00050290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023e06  00000000  00000000  00058a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a17e7  00000000  00000000  0007c885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011e06c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c20  00000000  00000000  0011e0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c140 	.word	0x0800c140

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	0800c140 	.word	0x0800c140

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2iz>:
 800060c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30f      	bcc.n	8000636 <__aeabi_f2iz+0x2a>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d90d      	bls.n	800063c <__aeabi_f2iz+0x30>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800062c:	fa23 f002 	lsr.w	r0, r3, r2
 8000630:	bf18      	it	ne
 8000632:	4240      	negne	r0, r0
 8000634:	4770      	bx	lr
 8000636:	f04f 0000 	mov.w	r0, #0
 800063a:	4770      	bx	lr
 800063c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000640:	d101      	bne.n	8000646 <__aeabi_f2iz+0x3a>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	d105      	bne.n	8000652 <__aeabi_f2iz+0x46>
 8000646:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800064a:	bf08      	it	eq
 800064c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_ADC1_Init+0x74>)
 800066a:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <MX_ADC1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_ADC1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_ADC1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_ADC1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_ADC1_Init+0x74>)
 8000682:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_ADC1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_ADC1_Init+0x74>)
 8000690:	2201      	movs	r2, #1
 8000692:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_ADC1_Init+0x74>)
 8000696:	f002 fea7 	bl	80033e8 <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80006a0:	f002 fa04 	bl	8002aac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80006ac:	2307      	movs	r3, #7
 80006ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_ADC1_Init+0x74>)
 80006b6:	f003 f9e5 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006c0:	f002 f9f4 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200039e8 	.word	0x200039e8
 80006d0:	40012400 	.word	0x40012400

080006d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <HAL_ADC_MspInit+0x7c>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d129      	bne.n	8000748 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <HAL_ADC_MspInit+0x80>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a16      	ldr	r2, [pc, #88]	; (8000754 <HAL_ADC_MspInit+0x80>)
 80006fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <HAL_ADC_MspInit+0x80>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_ADC_MspInit+0x80>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a10      	ldr	r2, [pc, #64]	; (8000754 <HAL_ADC_MspInit+0x80>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_ADC_MspInit+0x80>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LIGHT_SENSOR_OUTPUT_Pin;
 8000724:	2301      	movs	r3, #1
 8000726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000728:	2303      	movs	r3, #3
 800072a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LIGHT_SENSOR_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4619      	mov	r1, r3
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <HAL_ADC_MspInit+0x84>)
 8000734:	f003 ffe6 	bl	8004704 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2105      	movs	r1, #5
 800073c:	2012      	movs	r0, #18
 800073e:	f003 fcc5 	bl	80040cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000742:	2012      	movs	r0, #18
 8000744:	f003 fcee 	bl	8004124 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012400 	.word	0x40012400
 8000754:	40021000 	.word	0x40021000
 8000758:	40010800 	.word	0x40010800

0800075c <Flash_WriteWord>:
#include "flash.h"
#include "stm_log.h"

HAL_StatusTypeDef Flash_WriteWord(uint32_t start_address, uint32_t data)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af06      	add	r7, sp, #24
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
    if (Flash_ReadAddress(start_address) != -1)
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 f850 	bl	800080c <Flash_ReadAddress>
 800076c:	4603      	mov	r3, r0
 800076e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000772:	d001      	beq.n	8000778 <Flash_WriteWord+0x1c>
        return HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	e03d      	b.n	80007f4 <Flash_WriteWord+0x98>
    // /* Erase Flash based on initialize struct */
    // HAL_StatusTypeDef err = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
    // if (err != HAL_OK) {
    //     return flash_status;
    // }
    STM_LOGV("Flash", "write data to 0x%x: 0x%x - dec: %d", start_address, data, data);
 8000778:	f002 fe08 	bl	800338c <HAL_GetTick>
 800077c:	4602      	mov	r2, r0
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	9305      	str	r3, [sp, #20]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	9304      	str	r3, [sp, #16]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	9303      	str	r3, [sp, #12]
 800078a:	2315      	movs	r3, #21
 800078c:	9302      	str	r3, [sp, #8]
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <Flash_WriteWord+0xa0>)
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <Flash_WriteWord+0xa4>)
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	4613      	mov	r3, r2
 8000798:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <Flash_WriteWord+0xa8>)
 800079a:	4919      	ldr	r1, [pc, #100]	; (8000800 <Flash_WriteWord+0xa4>)
 800079c:	2005      	movs	r0, #5
 800079e:	f002 fcdd 	bl	800315c <stm_log_write>
    HAL_FLASH_Unlock();
 80007a2:	f003 fd87 	bl	80042b4 <HAL_FLASH_Unlock>
    HAL_StatusTypeDef err = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_address, data);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	2002      	movs	r0, #2
 80007b2:	f003 fccf 	bl	8004154 <HAL_FLASH_Program>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73fb      	strb	r3, [r7, #15]
    HAL_FLASH_Lock();
 80007ba:	f003 fda1 	bl	8004300 <HAL_FLASH_Lock>
    FLASH_READ(start_address);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f824 	bl	800080c <Flash_ReadAddress>
 80007c4:	4603      	mov	r3, r0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	f002 fde0 	bl	800338c <HAL_GetTick>
 80007cc:	4602      	mov	r2, r0
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	9305      	str	r3, [sp, #20]
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	9304      	str	r3, [sp, #16]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	9303      	str	r3, [sp, #12]
 80007da:	2319      	movs	r3, #25
 80007dc:	9302      	str	r3, [sp, #8]
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <Flash_WriteWord+0xa0>)
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <Flash_WriteWord+0xa4>)
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	4613      	mov	r3, r2
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <Flash_WriteWord+0xac>)
 80007ea:	4905      	ldr	r1, [pc, #20]	; (8000800 <Flash_WriteWord+0xa4>)
 80007ec:	2005      	movs	r0, #5
 80007ee:	f002 fcb5 	bl	800315c <stm_log_write>
    return err;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	0800d52c 	.word	0x0800d52c
 8000800:	0800c198 	.word	0x0800c198
 8000804:	0800c158 	.word	0x0800c158
 8000808:	0800c1a0 	.word	0x0800c1a0

0800080c <Flash_ReadAddress>:

int Flash_ReadAddress(uint32_t flash_address)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    return *(volatile int*)(flash_address);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
	...

08000824 <Flash_ErasePage>:
        return -1;
    }
}

HAL_StatusTypeDef Flash_ErasePage(uint32_t start_address, uint32_t nb_of_delete_pages)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af04      	add	r7, sp, #16
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef EraseInitStruct = { 0 };
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
    uint32_t PageError = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]

    HAL_FLASH_Unlock();
 8000840:	f003 fd38 	bl	80042b4 <HAL_FLASH_Unlock>

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.PageAddress = start_address;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbPages = nb_of_delete_pages;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	61bb      	str	r3, [r7, #24]

    HAL_StatusTypeDef err = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000850:	f107 0208 	add.w	r2, r7, #8
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fe12 	bl	8004484 <HAL_FLASHEx_Erase>
 8000860:	4603      	mov	r3, r0
 8000862:	77fb      	strb	r3, [r7, #31]
    if (PageError != 0xFFFFFFFF) {
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800086a:	d010      	beq.n	800088e <Flash_ErasePage+0x6a>
        STM_LOGE("Flash", "PageError != 0xFFFFFFFF, %d", PageError);
 800086c:	f002 fd8e 	bl	800338c <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	9303      	str	r3, [sp, #12]
 8000876:	233a      	movs	r3, #58	; 0x3a
 8000878:	9302      	str	r3, [sp, #8]
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <Flash_ErasePage+0x78>)
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <Flash_ErasePage+0x7c>)
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	4613      	mov	r3, r2
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <Flash_ErasePage+0x80>)
 8000886:	4906      	ldr	r1, [pc, #24]	; (80008a0 <Flash_ErasePage+0x7c>)
 8000888:	2001      	movs	r0, #1
 800088a:	f002 fc67 	bl	800315c <stm_log_write>
    }

    HAL_FLASH_Lock();
 800088e:	f003 fd37 	bl	8004300 <HAL_FLASH_Lock>
    return err;
 8000892:	7ffb      	ldrb	r3, [r7, #31]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	0800d53c 	.word	0x0800d53c
 80008a0:	0800c198 	.word	0x0800c198
 80008a4:	0800c1dc 	.word	0x0800c1dc

080008a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008ac:	f3bf 8f4f 	dsb	sy
}
 80008b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <__NVIC_SystemReset+0x24>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008ba:	4904      	ldr	r1, [pc, #16]	; (80008cc <__NVIC_SystemReset+0x24>)
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_SystemReset+0x28>)
 80008be:	4313      	orrs	r3, r2
 80008c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008c2:	f3bf 8f4f 	dsb	sy
}
 80008c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <__NVIC_SystemReset+0x20>
 80008cc:	e000ed00 	.word	0xe000ed00
 80008d0:	05fa0004 	.word	0x05fa0004

080008d4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return 0;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
	...

080008f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af04      	add	r7, sp, #16

  /* USER CODE END Init */

  /* Create the recursive mutex(es) */
  /* creation of nodedataMutex */
  nodedataMutexHandle = osMutexNew(&nodedataMutex_attributes);
 80008f6:	4850      	ldr	r0, [pc, #320]	; (8000a38 <MX_FREERTOS_Init+0x148>)
 80008f8:	f006 fed4 	bl	80076a4 <osMutexNew>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a4f      	ldr	r2, [pc, #316]	; (8000a3c <MX_FREERTOS_Init+0x14c>)
 8000900:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of rxDoneSemaphore */
  rxDoneSemaphoreHandle = osSemaphoreNew(5, 5, &rxDoneSemaphore_attributes);
 8000902:	4a4f      	ldr	r2, [pc, #316]	; (8000a40 <MX_FREERTOS_Init+0x150>)
 8000904:	2105      	movs	r1, #5
 8000906:	2005      	movs	r0, #5
 8000908:	f006 ff66 	bl	80077d8 <osSemaphoreNew>
 800090c:	4603      	mov	r3, r0
 800090e:	4a4d      	ldr	r2, [pc, #308]	; (8000a44 <MX_FREERTOS_Init+0x154>)
 8000910:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  if (rxDoneSemaphoreHandle == NULL)
 8000912:	4b4c      	ldr	r3, [pc, #304]	; (8000a44 <MX_FREERTOS_Init+0x154>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10d      	bne.n	8000936 <MX_FREERTOS_Init+0x46>
    STM_LOGE("ERROR", "create rxDoneSemaphoreHandle failed");
 800091a:	f002 fd37 	bl	800338c <HAL_GetTick>
 800091e:	4603      	mov	r3, r0
 8000920:	22a0      	movs	r2, #160	; 0xa0
 8000922:	9202      	str	r2, [sp, #8]
 8000924:	4a48      	ldr	r2, [pc, #288]	; (8000a48 <MX_FREERTOS_Init+0x158>)
 8000926:	9201      	str	r2, [sp, #4]
 8000928:	4a48      	ldr	r2, [pc, #288]	; (8000a4c <MX_FREERTOS_Init+0x15c>)
 800092a:	9200      	str	r2, [sp, #0]
 800092c:	4a48      	ldr	r2, [pc, #288]	; (8000a50 <MX_FREERTOS_Init+0x160>)
 800092e:	4947      	ldr	r1, [pc, #284]	; (8000a4c <MX_FREERTOS_Init+0x15c>)
 8000930:	2001      	movs	r0, #1
 8000932:	f002 fc13 	bl	800315c <stm_log_write>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (10, 10, &myQueue01_attributes);
 8000936:	4a47      	ldr	r2, [pc, #284]	; (8000a54 <MX_FREERTOS_Init+0x164>)
 8000938:	210a      	movs	r1, #10
 800093a:	200a      	movs	r0, #10
 800093c:	f007 f8a6 	bl	8007a8c <osMessageQueueNew>
 8000940:	4603      	mov	r3, r0
 8000942:	4a45      	ldr	r2, [pc, #276]	; (8000a58 <MX_FREERTOS_Init+0x168>)
 8000944:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  if (myQueue01Handle == NULL)
 8000946:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <MX_FREERTOS_Init+0x168>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d10d      	bne.n	800096a <MX_FREERTOS_Init+0x7a>
    STM_LOGE("ERROR", "create myQueue01Handle failed");
 800094e:	f002 fd1d 	bl	800338c <HAL_GetTick>
 8000952:	4603      	mov	r3, r0
 8000954:	22ac      	movs	r2, #172	; 0xac
 8000956:	9202      	str	r2, [sp, #8]
 8000958:	4a3b      	ldr	r2, [pc, #236]	; (8000a48 <MX_FREERTOS_Init+0x158>)
 800095a:	9201      	str	r2, [sp, #4]
 800095c:	4a3b      	ldr	r2, [pc, #236]	; (8000a4c <MX_FREERTOS_Init+0x15c>)
 800095e:	9200      	str	r2, [sp, #0]
 8000960:	4a3e      	ldr	r2, [pc, #248]	; (8000a5c <MX_FREERTOS_Init+0x16c>)
 8000962:	493a      	ldr	r1, [pc, #232]	; (8000a4c <MX_FREERTOS_Init+0x15c>)
 8000964:	2001      	movs	r0, #1
 8000966:	f002 fbf9 	bl	800315c <stm_log_write>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800096a:	4a3d      	ldr	r2, [pc, #244]	; (8000a60 <MX_FREERTOS_Init+0x170>)
 800096c:	2100      	movs	r1, #0
 800096e:	483d      	ldr	r0, [pc, #244]	; (8000a64 <MX_FREERTOS_Init+0x174>)
 8000970:	f006 fdc0 	bl	80074f4 <osThreadNew>
 8000974:	4603      	mov	r3, r0
 8000976:	4a3c      	ldr	r2, [pc, #240]	; (8000a68 <MX_FREERTOS_Init+0x178>)
 8000978:	6013      	str	r3, [r2, #0]

  /* creation of taskProducer */
  taskProducerHandle = osThreadNew(entryProducer, NULL, &taskProducer_attributes);
 800097a:	4a3c      	ldr	r2, [pc, #240]	; (8000a6c <MX_FREERTOS_Init+0x17c>)
 800097c:	2100      	movs	r1, #0
 800097e:	483c      	ldr	r0, [pc, #240]	; (8000a70 <MX_FREERTOS_Init+0x180>)
 8000980:	f006 fdb8 	bl	80074f4 <osThreadNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a3b      	ldr	r2, [pc, #236]	; (8000a74 <MX_FREERTOS_Init+0x184>)
 8000988:	6013      	str	r3, [r2, #0]

  /* creation of taskConsumer */
  taskConsumerHandle = osThreadNew(entryConsumer, NULL, &taskConsumer_attributes);
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <MX_FREERTOS_Init+0x188>)
 800098c:	2100      	movs	r1, #0
 800098e:	483b      	ldr	r0, [pc, #236]	; (8000a7c <MX_FREERTOS_Init+0x18c>)
 8000990:	f006 fdb0 	bl	80074f4 <osThreadNew>
 8000994:	4603      	mov	r3, r0
 8000996:	4a3a      	ldr	r2, [pc, #232]	; (8000a80 <MX_FREERTOS_Init+0x190>)
 8000998:	6013      	str	r3, [r2, #0]

  /* creation of taskPeriodic */
  taskPeriodicHandle = osThreadNew(entryPeriodic, NULL, &taskPeriodic_attributes);
 800099a:	4a3a      	ldr	r2, [pc, #232]	; (8000a84 <MX_FREERTOS_Init+0x194>)
 800099c:	2100      	movs	r1, #0
 800099e:	483a      	ldr	r0, [pc, #232]	; (8000a88 <MX_FREERTOS_Init+0x198>)
 80009a0:	f006 fda8 	bl	80074f4 <osThreadNew>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a39      	ldr	r2, [pc, #228]	; (8000a8c <MX_FREERTOS_Init+0x19c>)
 80009a8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  if (taskProducerHandle == NULL)
 80009aa:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <MX_FREERTOS_Init+0x184>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10d      	bne.n	80009ce <MX_FREERTOS_Init+0xde>
    STM_LOGE("ERROR", "create taskProducerHandle failed");
 80009b2:	f002 fceb 	bl	800338c <HAL_GetTick>
 80009b6:	4603      	mov	r3, r0
 80009b8:	22bf      	movs	r2, #191	; 0xbf
 80009ba:	9202      	str	r2, [sp, #8]
 80009bc:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <MX_FREERTOS_Init+0x158>)
 80009be:	9201      	str	r2, [sp, #4]
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <MX_FREERTOS_Init+0x15c>)
 80009c2:	9200      	str	r2, [sp, #0]
 80009c4:	4a32      	ldr	r2, [pc, #200]	; (8000a90 <MX_FREERTOS_Init+0x1a0>)
 80009c6:	4921      	ldr	r1, [pc, #132]	; (8000a4c <MX_FREERTOS_Init+0x15c>)
 80009c8:	2001      	movs	r0, #1
 80009ca:	f002 fbc7 	bl	800315c <stm_log_write>
  if (taskConsumerHandle == NULL)
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <MX_FREERTOS_Init+0x190>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d10d      	bne.n	80009f2 <MX_FREERTOS_Init+0x102>
    STM_LOGE("ERROR", "create taskConsumerHandle failed");
 80009d6:	f002 fcd9 	bl	800338c <HAL_GetTick>
 80009da:	4603      	mov	r3, r0
 80009dc:	22c1      	movs	r2, #193	; 0xc1
 80009de:	9202      	str	r2, [sp, #8]
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <MX_FREERTOS_Init+0x158>)
 80009e2:	9201      	str	r2, [sp, #4]
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <MX_FREERTOS_Init+0x15c>)
 80009e6:	9200      	str	r2, [sp, #0]
 80009e8:	4a2a      	ldr	r2, [pc, #168]	; (8000a94 <MX_FREERTOS_Init+0x1a4>)
 80009ea:	4918      	ldr	r1, [pc, #96]	; (8000a4c <MX_FREERTOS_Init+0x15c>)
 80009ec:	2001      	movs	r0, #1
 80009ee:	f002 fbb5 	bl	800315c <stm_log_write>
  if (taskPeriodicHandle == NULL)
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <MX_FREERTOS_Init+0x19c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10d      	bne.n	8000a16 <MX_FREERTOS_Init+0x126>
    STM_LOGE("ERROR", "create taskPeriodicHandle failed");
 80009fa:	f002 fcc7 	bl	800338c <HAL_GetTick>
 80009fe:	4603      	mov	r3, r0
 8000a00:	22c3      	movs	r2, #195	; 0xc3
 8000a02:	9202      	str	r2, [sp, #8]
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <MX_FREERTOS_Init+0x158>)
 8000a06:	9201      	str	r2, [sp, #4]
 8000a08:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <MX_FREERTOS_Init+0x15c>)
 8000a0a:	9200      	str	r2, [sp, #0]
 8000a0c:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <MX_FREERTOS_Init+0x1a8>)
 8000a0e:	490f      	ldr	r1, [pc, #60]	; (8000a4c <MX_FREERTOS_Init+0x15c>)
 8000a10:	2001      	movs	r0, #1
 8000a12:	f002 fba3 	bl	800315c <stm_log_write>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  STM_LOGV("MileStone", "Kernel starts");
 8000a16:	f002 fcb9 	bl	800338c <HAL_GetTick>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	22c7      	movs	r2, #199	; 0xc7
 8000a1e:	9202      	str	r2, [sp, #8]
 8000a20:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <MX_FREERTOS_Init+0x158>)
 8000a22:	9201      	str	r2, [sp, #4]
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <MX_FREERTOS_Init+0x1ac>)
 8000a26:	9200      	str	r2, [sp, #0]
 8000a28:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <MX_FREERTOS_Init+0x1b0>)
 8000a2a:	491c      	ldr	r1, [pc, #112]	; (8000a9c <MX_FREERTOS_Init+0x1ac>)
 8000a2c:	2005      	movs	r0, #5
 8000a2e:	f002 fb95 	bl	800315c <stm_log_write>
  /* USER CODE END RTOS_EVENTS */

}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	0800d5f4 	.word	0x0800d5f4
 8000a3c:	20003a28 	.word	0x20003a28
 8000a40:	0800d604 	.word	0x0800d604
 8000a44:	20003a1c 	.word	0x20003a1c
 8000a48:	0800d614 	.word	0x0800d614
 8000a4c:	0800c2cc 	.word	0x0800c2cc
 8000a50:	0800c284 	.word	0x0800c284
 8000a54:	0800d5dc 	.word	0x0800d5dc
 8000a58:	20003a2c 	.word	0x20003a2c
 8000a5c:	0800c2d4 	.word	0x0800c2d4
 8000a60:	0800d54c 	.word	0x0800d54c
 8000a64:	08000aa5 	.word	0x08000aa5
 8000a68:	20003a18 	.word	0x20003a18
 8000a6c:	0800d570 	.word	0x0800d570
 8000a70:	08000ab5 	.word	0x08000ab5
 8000a74:	20003a24 	.word	0x20003a24
 8000a78:	0800d594 	.word	0x0800d594
 8000a7c:	08000c7d 	.word	0x08000c7d
 8000a80:	20003a20 	.word	0x20003a20
 8000a84:	0800d5b8 	.word	0x0800d5b8
 8000a88:	08000d99 	.word	0x08000d99
 8000a8c:	20003a30 	.word	0x20003a30
 8000a90:	0800c318 	.word	0x0800c318
 8000a94:	0800c35c 	.word	0x0800c35c
 8000a98:	0800c3a0 	.word	0x0800c3a0
 8000a9c:	0800c410 	.word	0x0800c410
 8000aa0:	0800c3e4 	.word	0x0800c3e4

08000aa4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f006 fdcb 	bl	8007648 <osDelay>
 8000ab2:	e7fb      	b.n	8000aac <StartDefaultTask+0x8>

08000ab4 <entryProducer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryProducer */
void entryProducer(void *argument)
{
 8000ab4:	b5b0      	push	{r4, r5, r7, lr}
 8000ab6:	b08e      	sub	sp, #56	; 0x38
 8000ab8:	af06      	add	r7, sp, #24
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryProducer */
  osStatus_t err;
  uint8_t receivedMsg[10];
  uint32_t tickToWait = pdMS_TO_TICKS(5000);
 8000abc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ac0:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for (;;)
  {
    err = osSemaphoreAcquire(rxDoneSemaphoreHandle, portMAX_DELAY);
 8000ac2:	4b62      	ldr	r3, [pc, #392]	; (8000c4c <entryProducer+0x198>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f04f 31ff 	mov.w	r1, #4294967295
 8000aca:	4618      	mov	r0, r3
 8000acc:	f006 ff20 	bl	8007910 <osSemaphoreAcquire>
 8000ad0:	6178      	str	r0, [r7, #20]
    if (!err) {
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1f4      	bne.n	8000ac2 <entryProducer+0xe>

      STM_LOGV("Producer", "Get semaphore ok");
 8000ad8:	f002 fc58 	bl	800338c <HAL_GetTick>
 8000adc:	4603      	mov	r3, r0
 8000ade:	22f1      	movs	r2, #241	; 0xf1
 8000ae0:	9202      	str	r2, [sp, #8]
 8000ae2:	4a5b      	ldr	r2, [pc, #364]	; (8000c50 <entryProducer+0x19c>)
 8000ae4:	9201      	str	r2, [sp, #4]
 8000ae6:	4a5b      	ldr	r2, [pc, #364]	; (8000c54 <entryProducer+0x1a0>)
 8000ae8:	9200      	str	r2, [sp, #0]
 8000aea:	4a5b      	ldr	r2, [pc, #364]	; (8000c58 <entryProducer+0x1a4>)
 8000aec:	4959      	ldr	r1, [pc, #356]	; (8000c54 <entryProducer+0x1a0>)
 8000aee:	2005      	movs	r0, #5
 8000af0:	f002 fb34 	bl	800315c <stm_log_write>

      if (LoRaGetITFlag(PAYLOAD_CRC_ERROR_MskPos) == 1)
 8000af4:	2005      	movs	r0, #5
 8000af6:	f001 fc83 	bl	8002400 <LoRaGetITFlag>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d10e      	bne.n	8000b1e <entryProducer+0x6a>
      {
        STM_LOGE("Producer", "Payload CRC failed");
 8000b00:	f002 fc44 	bl	800338c <HAL_GetTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	22f5      	movs	r2, #245	; 0xf5
 8000b08:	9202      	str	r2, [sp, #8]
 8000b0a:	4a51      	ldr	r2, [pc, #324]	; (8000c50 <entryProducer+0x19c>)
 8000b0c:	9201      	str	r2, [sp, #4]
 8000b0e:	4a51      	ldr	r2, [pc, #324]	; (8000c54 <entryProducer+0x1a0>)
 8000b10:	9200      	str	r2, [sp, #0]
 8000b12:	4a52      	ldr	r2, [pc, #328]	; (8000c5c <entryProducer+0x1a8>)
 8000b14:	494f      	ldr	r1, [pc, #316]	; (8000c54 <entryProducer+0x1a0>)
 8000b16:	2001      	movs	r0, #1
 8000b18:	f002 fb20 	bl	800315c <stm_log_write>
 8000b1c:	e092      	b.n	8000c44 <entryProducer+0x190>
      }
      else
      {
        LORA_SET_FIFO_CURRENT_MSG();
 8000b1e:	2010      	movs	r0, #16
 8000b20:	f000 fd06 	bl	8001530 <ucSpi1Read>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4619      	mov	r1, r3
 8000b28:	200d      	movs	r0, #13
 8000b2a:	f000 fc99 	bl	8001460 <vSpi1Write>
        for (uint8_t i = 0; i < PAYLOAD_LENGTH; i++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	77fb      	strb	r3, [r7, #31]
 8000b32:	e00d      	b.n	8000b50 <entryProducer+0x9c>
          receivedMsg[i] = ucSpi1Read(RegFifo);
 8000b34:	7ffc      	ldrb	r4, [r7, #31]
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 fcfa 	bl	8001530 <ucSpi1Read>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f107 0320 	add.w	r3, r7, #32
 8000b44:	4423      	add	r3, r4
 8000b46:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (uint8_t i = 0; i < PAYLOAD_LENGTH; i++) {
 8000b4a:	7ffb      	ldrb	r3, [r7, #31]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	77fb      	strb	r3, [r7, #31]
 8000b50:	7ffb      	ldrb	r3, [r7, #31]
 8000b52:	2b09      	cmp	r3, #9
 8000b54:	d9ee      	bls.n	8000b34 <entryProducer+0x80>
          // STM_LOGI("Producer", "receivedData[%d]: %x", i, receivedMsg[i]);
        }

        STM_LOGI("Producer", "msg dest ID: %x - thisNodeID: %x", receivedMsg[INDEX_DEST_ID], thisNode.nodeID);
 8000b56:	f002 fc19 	bl	800338c <HAL_GetTick>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	7a7a      	ldrb	r2, [r7, #9]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4a3f      	ldr	r2, [pc, #252]	; (8000c60 <entryProducer+0x1ac>)
 8000b62:	7812      	ldrb	r2, [r2, #0]
 8000b64:	9204      	str	r2, [sp, #16]
 8000b66:	9103      	str	r1, [sp, #12]
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	9202      	str	r2, [sp, #8]
 8000b6c:	4a38      	ldr	r2, [pc, #224]	; (8000c50 <entryProducer+0x19c>)
 8000b6e:	9201      	str	r2, [sp, #4]
 8000b70:	4a38      	ldr	r2, [pc, #224]	; (8000c54 <entryProducer+0x1a0>)
 8000b72:	9200      	str	r2, [sp, #0]
 8000b74:	4a3b      	ldr	r2, [pc, #236]	; (8000c64 <entryProducer+0x1b0>)
 8000b76:	4937      	ldr	r1, [pc, #220]	; (8000c54 <entryProducer+0x1a0>)
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f002 faef 	bl	800315c <stm_log_write>
        if (receivedMsg[INDEX_DEST_ID] == thisNode.nodeID &&
 8000b7e:	7a7a      	ldrb	r2, [r7, #9]
 8000b80:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <entryProducer+0x1ac>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d14e      	bne.n	8000c26 <entryProducer+0x172>
          receivedMsg[INDEX_MSG_TYPE] == MSG_TYPE_REQUEST)
 8000b88:	7abb      	ldrb	r3, [r7, #10]
        if (receivedMsg[INDEX_DEST_ID] == thisNode.nodeID &&
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14b      	bne.n	8000c26 <entryProducer+0x172>
        {

          STM_LOGV("Producer", "put queue");
 8000b8e:	f002 fbfd 	bl	800338c <HAL_GetTick>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b98:	9202      	str	r2, [sp, #8]
 8000b9a:	4a2d      	ldr	r2, [pc, #180]	; (8000c50 <entryProducer+0x19c>)
 8000b9c:	9201      	str	r2, [sp, #4]
 8000b9e:	4a2d      	ldr	r2, [pc, #180]	; (8000c54 <entryProducer+0x1a0>)
 8000ba0:	9200      	str	r2, [sp, #0]
 8000ba2:	4a31      	ldr	r2, [pc, #196]	; (8000c68 <entryProducer+0x1b4>)
 8000ba4:	492b      	ldr	r1, [pc, #172]	; (8000c54 <entryProducer+0x1a0>)
 8000ba6:	2005      	movs	r0, #5
 8000ba8:	f002 fad8 	bl	800315c <stm_log_write>
          err = osMessageQueuePut(myQueue01Handle, receivedMsg, 0, tickToWait);
 8000bac:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <entryProducer+0x1b8>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	f107 0108 	add.w	r1, r7, #8
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f006 ffee 	bl	8007b98 <osMessageQueuePut>
 8000bbc:	6178      	str	r0, [r7, #20]
          if (!err)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d10f      	bne.n	8000be4 <entryProducer+0x130>
          {
            STM_LOGV("Producer", "put queue ok");
 8000bc4:	f002 fbe2 	bl	800338c <HAL_GetTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000bce:	9202      	str	r2, [sp, #8]
 8000bd0:	4a1f      	ldr	r2, [pc, #124]	; (8000c50 <entryProducer+0x19c>)
 8000bd2:	9201      	str	r2, [sp, #4]
 8000bd4:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <entryProducer+0x1a0>)
 8000bd6:	9200      	str	r2, [sp, #0]
 8000bd8:	4a25      	ldr	r2, [pc, #148]	; (8000c70 <entryProducer+0x1bc>)
 8000bda:	491e      	ldr	r1, [pc, #120]	; (8000c54 <entryProducer+0x1a0>)
 8000bdc:	2005      	movs	r0, #5
 8000bde:	f002 fabd 	bl	800315c <stm_log_write>
          if (!err)
 8000be2:	e02f      	b.n	8000c44 <entryProducer+0x190>
          }
          else
          {
            STM_LOGE("Producer", "put queue failed, err %d\n\r NbOfMsg in queue : % d\n\ravailable size : % d", \
 8000be4:	f002 fbd2 	bl	800338c <HAL_GetTick>
 8000be8:	4605      	mov	r5, r0
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <entryProducer+0x1b8>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f007 f8b8 	bl	8007d64 <osMessageQueueGetCount>
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <entryProducer+0x1b8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f007 f8e4 	bl	8007dc8 <osMessageQueueGetSpace>
 8000c00:	4603      	mov	r3, r0
 8000c02:	9305      	str	r3, [sp, #20]
 8000c04:	9404      	str	r4, [sp, #16]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	9303      	str	r3, [sp, #12]
 8000c0a:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000c0e:	9302      	str	r3, [sp, #8]
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <entryProducer+0x19c>)
 8000c12:	9301      	str	r3, [sp, #4]
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <entryProducer+0x1a0>)
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	462b      	mov	r3, r5
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <entryProducer+0x1c0>)
 8000c1c:	490d      	ldr	r1, [pc, #52]	; (8000c54 <entryProducer+0x1a0>)
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f002 fa9c 	bl	800315c <stm_log_write>
          if (!err)
 8000c24:	e00e      	b.n	8000c44 <entryProducer+0x190>
              osMessageQueueGetSpace(myQueue01Handle));
          }
        }
        else
        {
          STM_LOGV("Producer", "msg not matched --> dicarded");
 8000c26:	f002 fbb1 	bl	800338c <HAL_GetTick>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f44f 728a 	mov.w	r2, #276	; 0x114
 8000c30:	9202      	str	r2, [sp, #8]
 8000c32:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <entryProducer+0x19c>)
 8000c34:	9201      	str	r2, [sp, #4]
 8000c36:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <entryProducer+0x1a0>)
 8000c38:	9200      	str	r2, [sp, #0]
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <entryProducer+0x1c4>)
 8000c3c:	4905      	ldr	r1, [pc, #20]	; (8000c54 <entryProducer+0x1a0>)
 8000c3e:	2005      	movs	r0, #5
 8000c40:	f002 fa8c 	bl	800315c <stm_log_write>
        }
      }
      LoRaClearITFlag(RX_DONE_Msk | PAYLOAD_CRC_ERROR_Msk);
 8000c44:	2060      	movs	r0, #96	; 0x60
 8000c46:	f001 fc25 	bl	8002494 <LoRaClearITFlag>
    err = osSemaphoreAcquire(rxDoneSemaphoreHandle, portMAX_DELAY);
 8000c4a:	e73a      	b.n	8000ac2 <entryProducer+0xe>
 8000c4c:	20003a1c 	.word	0x20003a1c
 8000c50:	0800d628 	.word	0x0800d628
 8000c54:	0800c44c 	.word	0x0800c44c
 8000c58:	0800c41c 	.word	0x0800c41c
 8000c5c:	0800c458 	.word	0x0800c458
 8000c60:	20000000 	.word	0x20000000
 8000c64:	0800c490 	.word	0x0800c490
 8000c68:	0800c4d4 	.word	0x0800c4d4
 8000c6c:	20003a2c 	.word	0x20003a2c
 8000c70:	0800c4fc 	.word	0x0800c4fc
 8000c74:	0800c528 	.word	0x0800c528
 8000c78:	0800c594 	.word	0x0800c594

08000c7c <entryConsumer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryConsumer */
void entryConsumer(void *argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af04      	add	r7, sp, #16
 8000c82:	6078      	str	r0, [r7, #4]
  static uint8_t receivedMsgFromQueue[PAYLOAD_LENGTH];
  osStatus_t err;
  /* Infinite loop */
  for (;;)
  {
    err = osMessageQueueGet(myQueue01Handle, receivedMsgFromQueue, 0, portMAX_DELAY);
 8000c84:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <entryConsumer+0xfc>)
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	493b      	ldr	r1, [pc, #236]	; (8000d7c <entryConsumer+0x100>)
 8000c90:	f006 fff6 	bl	8007c80 <osMessageQueueGet>
 8000c94:	60f8      	str	r0, [r7, #12]
    if (!err)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1f3      	bne.n	8000c84 <entryConsumer+0x8>
    {
      printf("\r\n");
 8000c9c:	4838      	ldr	r0, [pc, #224]	; (8000d80 <entryConsumer+0x104>)
 8000c9e:	f00a fa1b 	bl	800b0d8 <puts>
      STM_LOGV("Consumer", "Get queue ok");
 8000ca2:	f002 fb73 	bl	800338c <HAL_GetTick>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f44f 7298 	mov.w	r2, #304	; 0x130
 8000cac:	9202      	str	r2, [sp, #8]
 8000cae:	4a35      	ldr	r2, [pc, #212]	; (8000d84 <entryConsumer+0x108>)
 8000cb0:	9201      	str	r2, [sp, #4]
 8000cb2:	4a35      	ldr	r2, [pc, #212]	; (8000d88 <entryConsumer+0x10c>)
 8000cb4:	9200      	str	r2, [sp, #0]
 8000cb6:	4a35      	ldr	r2, [pc, #212]	; (8000d8c <entryConsumer+0x110>)
 8000cb8:	4933      	ldr	r1, [pc, #204]	; (8000d88 <entryConsumer+0x10c>)
 8000cba:	2005      	movs	r0, #5
 8000cbc:	f002 fa4e 	bl	800315c <stm_log_write>
      STM_LOGI("Consumer", "-----> OPCODE: %d", receivedMsgFromQueue[INDEX_COMMAND_OPCODE]);
 8000cc0:	f002 fb64 	bl	800338c <HAL_GetTick>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a2d      	ldr	r2, [pc, #180]	; (8000d7c <entryConsumer+0x100>)
 8000cc8:	7a12      	ldrb	r2, [r2, #8]
 8000cca:	9203      	str	r2, [sp, #12]
 8000ccc:	f240 1231 	movw	r2, #305	; 0x131
 8000cd0:	9202      	str	r2, [sp, #8]
 8000cd2:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <entryConsumer+0x108>)
 8000cd4:	9201      	str	r2, [sp, #4]
 8000cd6:	4a2c      	ldr	r2, [pc, #176]	; (8000d88 <entryConsumer+0x10c>)
 8000cd8:	9200      	str	r2, [sp, #0]
 8000cda:	4a2d      	ldr	r2, [pc, #180]	; (8000d90 <entryConsumer+0x114>)
 8000cdc:	492a      	ldr	r1, [pc, #168]	; (8000d88 <entryConsumer+0x10c>)
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f002 fa3c 	bl	800315c <stm_log_write>
      vModeInit(STDBY_MODE);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f000 fd2f 	bl	8001748 <vModeInit>
      switch (receivedMsgFromQueue[INDEX_COMMAND_OPCODE])
 8000cea:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <entryConsumer+0x100>)
 8000cec:	7a1b      	ldrb	r3, [r3, #8]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d828      	bhi.n	8000d46 <entryConsumer+0xca>
 8000cf4:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <entryConsumer+0x80>)
 8000cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfa:	bf00      	nop
 8000cfc:	08000d0d 	.word	0x08000d0d
 8000d00:	08000d19 	.word	0x08000d19
 8000d04:	08000d2b 	.word	0x08000d2b
 8000d08:	08000d35 	.word	0x08000d35
      {
      case OPCODE_REQUEST_STATE:
        opcodeInquiry(receivedMsgFromQueue[INDEX_SEQUENCE_ID]);
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <entryConsumer+0x100>)
 8000d0e:	791b      	ldrb	r3, [r3, #4]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 f867 	bl	8000de4 <opcodeInquiry>
        break;
 8000d16:	e029      	b.n	8000d6c <entryConsumer+0xf0>
      case OPCODE_REQUEST_RELAY_CONTROL:
        opcodeRelayControl(receivedMsgFromQueue[INDEX_DATA_RELAY_STATE], receivedMsgFromQueue[INDEX_SEQUENCE_ID]);
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <entryConsumer+0x100>)
 8000d1a:	799b      	ldrb	r3, [r3, #6]
 8000d1c:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <entryConsumer+0x100>)
 8000d1e:	7912      	ldrb	r2, [r2, #4]
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f88a 	bl	8000e3c <opcodeRelayControl>
        break;
 8000d28:	e020      	b.n	8000d6c <entryConsumer+0xf0>
      case OPCODE_REQUEST_MCU_RESET:
        opcodeMcuReset();
 8000d2a:	f000 fa51 	bl	80011d0 <opcodeMcuReset>
        updateDataToFlash();
 8000d2e:	f001 fdbf 	bl	80028b0 <updateDataToFlash>
        break;
 8000d32:	e01b      	b.n	8000d6c <entryConsumer+0xf0>
      case OPCODE_REQUEST_LOCATION_UPDATE:
        opcodeLocationUpdate(receivedMsgFromQueue[INDEX_DATA_LOCATION], receivedMsgFromQueue[INDEX_SEQUENCE_ID]);
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <entryConsumer+0x100>)
 8000d36:	795b      	ldrb	r3, [r3, #5]
 8000d38:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <entryConsumer+0x100>)
 8000d3a:	7912      	ldrb	r2, [r2, #4]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fa60 	bl	8001204 <opcodeLocationUpdate>
        break;
 8000d44:	e012      	b.n	8000d6c <entryConsumer+0xf0>
      default:
        STM_LOGE("Consumer", "No service for opcode %d", receivedMsgFromQueue[INDEX_COMMAND_OPCODE]);
 8000d46:	f002 fb21 	bl	800338c <HAL_GetTick>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <entryConsumer+0x100>)
 8000d4e:	7a12      	ldrb	r2, [r2, #8]
 8000d50:	9203      	str	r2, [sp, #12]
 8000d52:	f240 1243 	movw	r2, #323	; 0x143
 8000d56:	9202      	str	r2, [sp, #8]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <entryConsumer+0x108>)
 8000d5a:	9201      	str	r2, [sp, #4]
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <entryConsumer+0x10c>)
 8000d5e:	9200      	str	r2, [sp, #0]
 8000d60:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <entryConsumer+0x118>)
 8000d62:	4909      	ldr	r1, [pc, #36]	; (8000d88 <entryConsumer+0x10c>)
 8000d64:	2001      	movs	r0, #1
 8000d66:	f002 f9f9 	bl	800315c <stm_log_write>
        break;
 8000d6a:	bf00      	nop
      }

      vModeInit(RXCONTINUOUS_MODE);
 8000d6c:	2005      	movs	r0, #5
 8000d6e:	f000 fceb 	bl	8001748 <vModeInit>
      updateDataToFlash();
 8000d72:	f001 fd9d 	bl	80028b0 <updateDataToFlash>
    err = osMessageQueueGet(myQueue01Handle, receivedMsgFromQueue, 0, portMAX_DELAY);
 8000d76:	e785      	b.n	8000c84 <entryConsumer+0x8>
 8000d78:	20003a2c 	.word	0x20003a2c
 8000d7c:	200000b4 	.word	0x200000b4
 8000d80:	0800c5d0 	.word	0x0800c5d0
 8000d84:	0800d638 	.word	0x0800d638
 8000d88:	0800c600 	.word	0x0800c600
 8000d8c:	0800c5d4 	.word	0x0800c5d4
 8000d90:	0800c60c 	.word	0x0800c60c
 8000d94:	0800c644 	.word	0x0800c644

08000d98 <entryPeriodic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPeriodic */
void entryPeriodic(void *argument)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  static const uint32_t tickToWait = pdMS_TO_TICKS(1000);
  static int count;
  /* Infinite loop */
  for (;;)
  {
    TOGGLE_LED();
 8000da0:	2101      	movs	r1, #1
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <entryPeriodic+0x3c>)
 8000da4:	f003 ff50 	bl	8004c48 <HAL_GPIO_TogglePin>
    if (++count >= 10) {
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <entryPeriodic+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <entryPeriodic+0x40>)
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <entryPeriodic+0x40>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b09      	cmp	r3, #9
 8000db8:	dd02      	ble.n	8000dc0 <entryPeriodic+0x28>
      count = 0;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <entryPeriodic+0x40>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
      // STM_LOGI("Periodic", "relay: %s", WHICH_RELAY(thisNode.relayState));
    }
    HAL_IWDG_Refresh(&hiwdg);
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <entryPeriodic+0x44>)
 8000dc2:	f003 fff1 	bl	8004da8 <HAL_IWDG_Refresh>
    osDelay(tickToWait);
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <entryPeriodic+0x48>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f006 fc3c 	bl	8007648 <osDelay>
    TOGGLE_LED();
 8000dd0:	e7e6      	b.n	8000da0 <entryPeriodic+0x8>
 8000dd2:	bf00      	nop
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	200000c0 	.word	0x200000c0
 8000ddc:	20003a34 	.word	0x20003a34
 8000de0:	0800d648 	.word	0x0800d648

08000de4 <opcodeInquiry>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void opcodeInquiry(uint8_t seqID)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  uint8_t msg[10];
  PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_OK, seqID, OPCODE_RESPOSNE_STATE);
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <opcodeInquiry+0x54>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	733b      	strb	r3, [r7, #12]
 8000df4:	23ff      	movs	r3, #255	; 0xff
 8000df6:	737b      	strb	r3, [r7, #13]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73bb      	strb	r3, [r7, #14]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	743b      	strb	r3, [r7, #16]
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <opcodeInquiry+0x54>)
 8000e06:	785b      	ldrb	r3, [r3, #1]
 8000e08:	747b      	strb	r3, [r7, #17]
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <opcodeInquiry+0x54>)
 8000e0c:	789b      	ldrb	r3, [r3, #2]
 8000e0e:	74bb      	strb	r3, [r7, #18]
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <opcodeInquiry+0x54>)
 8000e12:	78db      	ldrb	r3, [r3, #3]
 8000e14:	74fb      	strb	r3, [r7, #19]
 8000e16:	2365      	movs	r3, #101	; 0x65
 8000e18:	753b      	strb	r3, [r7, #20]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	757b      	strb	r3, [r7, #21]
  LoRaTransmit(msg, PAYLOAD_LENGTH, LORA_DELAY);
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	f04f 32ff 	mov.w	r2, #4294967295
 8000e26:	210a      	movs	r1, #10
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 f829 	bl	8001e80 <LoRaTransmit>
}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000

08000e3c <opcodeRelayControl>:

static void opcodeRelayControl(uint8_t newState, uint8_t seqID)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b08d      	sub	sp, #52	; 0x34
 8000e40:	af06      	add	r7, sp, #24
 8000e42:	4603      	mov	r3, r0
 8000e44:	460a      	mov	r2, r1
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	71bb      	strb	r3, [r7, #6]
  uint8_t msg[10];
  uint8_t countCheck = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	75fb      	strb	r3, [r7, #23]
  bool isAck = false;
 8000e50:	2300      	movs	r3, #0
 8000e52:	75bb      	strb	r3, [r7, #22]
  bool isChecking = true;
 8000e54:	2301      	movs	r3, #1
 8000e56:	757b      	strb	r3, [r7, #21]
  if (thisNode.relayState != newState)
 8000e58:	4b9c      	ldr	r3, [pc, #624]	; (80010cc <opcodeRelayControl+0x290>)
 8000e5a:	789b      	ldrb	r3, [r3, #2]
 8000e5c:	79fa      	ldrb	r2, [r7, #7]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	f000 811f 	beq.w	80010a2 <opcodeRelayControl+0x266>
  {
    STM_LOGI("Consumer", "State changes: {%s} to {%s}", WHICH_RELAY(thisNode.relayState), WHICH_RELAY(newState));
 8000e64:	f002 fa92 	bl	800338c <HAL_GetTick>
 8000e68:	4601      	mov	r1, r0
 8000e6a:	4b98      	ldr	r3, [pc, #608]	; (80010cc <opcodeRelayControl+0x290>)
 8000e6c:	789b      	ldrb	r3, [r3, #2]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d007      	beq.n	8000e82 <opcodeRelayControl+0x46>
 8000e72:	4b96      	ldr	r3, [pc, #600]	; (80010cc <opcodeRelayControl+0x290>)
 8000e74:	789b      	ldrb	r3, [r3, #2]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d101      	bne.n	8000e7e <opcodeRelayControl+0x42>
 8000e7a:	4b95      	ldr	r3, [pc, #596]	; (80010d0 <opcodeRelayControl+0x294>)
 8000e7c:	e002      	b.n	8000e84 <opcodeRelayControl+0x48>
 8000e7e:	4b95      	ldr	r3, [pc, #596]	; (80010d4 <opcodeRelayControl+0x298>)
 8000e80:	e000      	b.n	8000e84 <opcodeRelayControl+0x48>
 8000e82:	4b95      	ldr	r3, [pc, #596]	; (80010d8 <opcodeRelayControl+0x29c>)
 8000e84:	79fa      	ldrb	r2, [r7, #7]
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	d006      	beq.n	8000e98 <opcodeRelayControl+0x5c>
 8000e8a:	79fa      	ldrb	r2, [r7, #7]
 8000e8c:	2a01      	cmp	r2, #1
 8000e8e:	d101      	bne.n	8000e94 <opcodeRelayControl+0x58>
 8000e90:	4a8f      	ldr	r2, [pc, #572]	; (80010d0 <opcodeRelayControl+0x294>)
 8000e92:	e002      	b.n	8000e9a <opcodeRelayControl+0x5e>
 8000e94:	4a8f      	ldr	r2, [pc, #572]	; (80010d4 <opcodeRelayControl+0x298>)
 8000e96:	e000      	b.n	8000e9a <opcodeRelayControl+0x5e>
 8000e98:	4a8f      	ldr	r2, [pc, #572]	; (80010d8 <opcodeRelayControl+0x29c>)
 8000e9a:	9204      	str	r2, [sp, #16]
 8000e9c:	9303      	str	r3, [sp, #12]
 8000e9e:	f240 1379 	movw	r3, #377	; 0x179
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	4b8d      	ldr	r3, [pc, #564]	; (80010dc <opcodeRelayControl+0x2a0>)
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	4b8d      	ldr	r3, [pc, #564]	; (80010e0 <opcodeRelayControl+0x2a4>)
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	460b      	mov	r3, r1
 8000eae:	4a8d      	ldr	r2, [pc, #564]	; (80010e4 <opcodeRelayControl+0x2a8>)
 8000eb0:	498b      	ldr	r1, [pc, #556]	; (80010e0 <opcodeRelayControl+0x2a4>)
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f002 f952 	bl	800315c <stm_log_write>
    thisNode.relayState = newState;
 8000eb8:	4a84      	ldr	r2, [pc, #528]	; (80010cc <opcodeRelayControl+0x290>)
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	7093      	strb	r3, [r2, #2]
    RELAY_CONTROL(thisNode.relayState);
 8000ebe:	4b83      	ldr	r3, [pc, #524]	; (80010cc <opcodeRelayControl+0x290>)
 8000ec0:	789b      	ldrb	r3, [r3, #2]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4888      	ldr	r0, [pc, #544]	; (80010e8 <opcodeRelayControl+0x2ac>)
 8000ec8:	f003 fe8c 	bl	8004be4 <HAL_GPIO_WritePin>
    STM_LOGV("Consumer", "Checking relay ...");
 8000ecc:	f002 fa5e 	bl	800338c <HAL_GetTick>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8000ed6:	9202      	str	r2, [sp, #8]
 8000ed8:	4a80      	ldr	r2, [pc, #512]	; (80010dc <opcodeRelayControl+0x2a0>)
 8000eda:	9201      	str	r2, [sp, #4]
 8000edc:	4a80      	ldr	r2, [pc, #512]	; (80010e0 <opcodeRelayControl+0x2a4>)
 8000ede:	9200      	str	r2, [sp, #0]
 8000ee0:	4a82      	ldr	r2, [pc, #520]	; (80010ec <opcodeRelayControl+0x2b0>)
 8000ee2:	497f      	ldr	r1, [pc, #508]	; (80010e0 <opcodeRelayControl+0x2a4>)
 8000ee4:	2005      	movs	r0, #5
 8000ee6:	f002 f939 	bl	800315c <stm_log_write>
    ADC_READ_LIGHTSENSOR();
 8000eea:	4881      	ldr	r0, [pc, #516]	; (80010f0 <opcodeRelayControl+0x2b4>)
 8000eec:	f002 fbe6 	bl	80036bc <HAL_ADC_Start_IT>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 80ca 	beq.w	800108c <opcodeRelayControl+0x250>
 8000ef8:	f002 fa48 	bl	800338c <HAL_GetTick>
 8000efc:	4604      	mov	r4, r0
 8000efe:	487c      	ldr	r0, [pc, #496]	; (80010f0 <opcodeRelayControl+0x2b4>)
 8000f00:	f002 fbdc 	bl	80036bc <HAL_ADC_Start_IT>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d009      	beq.n	8000f1e <opcodeRelayControl+0xe2>
 8000f0a:	4879      	ldr	r0, [pc, #484]	; (80010f0 <opcodeRelayControl+0x2b4>)
 8000f0c:	f002 fbd6 	bl	80036bc <HAL_ADC_Start_IT>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d101      	bne.n	8000f1a <opcodeRelayControl+0xde>
 8000f16:	4b77      	ldr	r3, [pc, #476]	; (80010f4 <opcodeRelayControl+0x2b8>)
 8000f18:	e002      	b.n	8000f20 <opcodeRelayControl+0xe4>
 8000f1a:	4b77      	ldr	r3, [pc, #476]	; (80010f8 <opcodeRelayControl+0x2bc>)
 8000f1c:	e000      	b.n	8000f20 <opcodeRelayControl+0xe4>
 8000f1e:	4b77      	ldr	r3, [pc, #476]	; (80010fc <opcodeRelayControl+0x2c0>)
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	f240 137d 	movw	r3, #381	; 0x17d
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	4b6c      	ldr	r3, [pc, #432]	; (80010dc <opcodeRelayControl+0x2a0>)
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	4b74      	ldr	r3, [pc, #464]	; (8001100 <opcodeRelayControl+0x2c4>)
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	4623      	mov	r3, r4
 8000f32:	4a74      	ldr	r2, [pc, #464]	; (8001104 <opcodeRelayControl+0x2c8>)
 8000f34:	4972      	ldr	r1, [pc, #456]	; (8001100 <opcodeRelayControl+0x2c4>)
 8000f36:	2001      	movs	r0, #1
 8000f38:	f002 f910 	bl	800315c <stm_log_write>
    while (isChecking && ++countCheck <= 70) {
 8000f3c:	e0a6      	b.n	800108c <opcodeRelayControl+0x250>
      STM_LOGD("Consumer", "adcLightSensor: %d - count: %d", adcLightSensor, countCheck);
 8000f3e:	f002 fa25 	bl	800338c <HAL_GetTick>
 8000f42:	4601      	mov	r1, r0
 8000f44:	4b70      	ldr	r3, [pc, #448]	; (8001108 <opcodeRelayControl+0x2cc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	7dfa      	ldrb	r2, [r7, #23]
 8000f4a:	9204      	str	r2, [sp, #16]
 8000f4c:	9303      	str	r3, [sp, #12]
 8000f4e:	f240 137f 	movw	r3, #383	; 0x17f
 8000f52:	9302      	str	r3, [sp, #8]
 8000f54:	4b61      	ldr	r3, [pc, #388]	; (80010dc <opcodeRelayControl+0x2a0>)
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	4b61      	ldr	r3, [pc, #388]	; (80010e0 <opcodeRelayControl+0x2a4>)
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4a6b      	ldr	r2, [pc, #428]	; (800110c <opcodeRelayControl+0x2d0>)
 8000f60:	495f      	ldr	r1, [pc, #380]	; (80010e0 <opcodeRelayControl+0x2a4>)
 8000f62:	2004      	movs	r0, #4
 8000f64:	f002 f8fa 	bl	800315c <stm_log_write>

      if (((adcLightSensor < LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_ON)) ||
 8000f68:	4b67      	ldr	r3, [pc, #412]	; (8001108 <opcodeRelayControl+0x2cc>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f70:	d203      	bcs.n	8000f7a <opcodeRelayControl+0x13e>
 8000f72:	4b56      	ldr	r3, [pc, #344]	; (80010cc <opcodeRelayControl+0x290>)
 8000f74:	789b      	ldrb	r3, [r3, #2]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d008      	beq.n	8000f8c <opcodeRelayControl+0x150>
        ((adcLightSensor >= LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_OFF)))
 8000f7a:	4b63      	ldr	r3, [pc, #396]	; (8001108 <opcodeRelayControl+0x2cc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
      if (((adcLightSensor < LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_ON)) ||
 8000f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f82:	d31a      	bcc.n	8000fba <opcodeRelayControl+0x17e>
        ((adcLightSensor >= LIGHTSENSOR_THRESHOLD) && (thisNode.relayState == RELAY_STATE_OFF)))
 8000f84:	4b51      	ldr	r3, [pc, #324]	; (80010cc <opcodeRelayControl+0x290>)
 8000f86:	789b      	ldrb	r3, [r3, #2]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d116      	bne.n	8000fba <opcodeRelayControl+0x17e>
      {
        isChecking = false;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	757b      	strb	r3, [r7, #21]
        isAck = true;
 8000f90:	2301      	movs	r3, #1
 8000f92:	75bb      	strb	r3, [r7, #22]
        thisNode.errCode = ERR_CODE_NONE;
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <opcodeRelayControl+0x290>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	70da      	strb	r2, [r3, #3]
        STM_LOGD("Consumer", "----> check ok ");
 8000f9a:	f002 f9f7 	bl	800338c <HAL_GetTick>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f240 1287 	movw	r2, #391	; 0x187
 8000fa4:	9202      	str	r2, [sp, #8]
 8000fa6:	4a4d      	ldr	r2, [pc, #308]	; (80010dc <opcodeRelayControl+0x2a0>)
 8000fa8:	9201      	str	r2, [sp, #4]
 8000faa:	4a4d      	ldr	r2, [pc, #308]	; (80010e0 <opcodeRelayControl+0x2a4>)
 8000fac:	9200      	str	r2, [sp, #0]
 8000fae:	4a58      	ldr	r2, [pc, #352]	; (8001110 <opcodeRelayControl+0x2d4>)
 8000fb0:	494b      	ldr	r1, [pc, #300]	; (80010e0 <opcodeRelayControl+0x2a4>)
 8000fb2:	2004      	movs	r0, #4
 8000fb4:	f002 f8d2 	bl	800315c <stm_log_write>
 8000fb8:	e068      	b.n	800108c <opcodeRelayControl+0x250>
      }
      else if (countCheck == 70) {
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
 8000fbc:	2b46      	cmp	r3, #70	; 0x46
 8000fbe:	d12b      	bne.n	8001018 <opcodeRelayControl+0x1dc>
        STM_LOGE("Consumer", "----> check failed");
 8000fc0:	f002 f9e4 	bl	800338c <HAL_GetTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8000fca:	9202      	str	r2, [sp, #8]
 8000fcc:	4a43      	ldr	r2, [pc, #268]	; (80010dc <opcodeRelayControl+0x2a0>)
 8000fce:	9201      	str	r2, [sp, #4]
 8000fd0:	4a43      	ldr	r2, [pc, #268]	; (80010e0 <opcodeRelayControl+0x2a4>)
 8000fd2:	9200      	str	r2, [sp, #0]
 8000fd4:	4a4f      	ldr	r2, [pc, #316]	; (8001114 <opcodeRelayControl+0x2d8>)
 8000fd6:	4942      	ldr	r1, [pc, #264]	; (80010e0 <opcodeRelayControl+0x2a4>)
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f002 f8bf 	bl	800315c <stm_log_write>
        isAck = false;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	75bb      	strb	r3, [r7, #22]
        thisNode.errCode = (thisNode.relayState == RELAY_STATE_ON) ? ERR_CODE_LIGHT_ON_FAILED : ERR_CODE_LIGHT_OFF_FAILED;
 8000fe2:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <opcodeRelayControl+0x290>)
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d101      	bne.n	8000fee <opcodeRelayControl+0x1b2>
 8000fea:	2201      	movs	r2, #1
 8000fec:	e000      	b.n	8000ff0 <opcodeRelayControl+0x1b4>
 8000fee:	2202      	movs	r2, #2
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <opcodeRelayControl+0x290>)
 8000ff2:	70da      	strb	r2, [r3, #3]
        thisNode.relayState = !thisNode.relayState;
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <opcodeRelayControl+0x290>)
 8000ff6:	789b      	ldrb	r3, [r3, #2]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bf0c      	ite	eq
 8000ffc:	2301      	moveq	r3, #1
 8000ffe:	2300      	movne	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	4b31      	ldr	r3, [pc, #196]	; (80010cc <opcodeRelayControl+0x290>)
 8001006:	709a      	strb	r2, [r3, #2]
        RELAY_CONTROL(thisNode.relayState);
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <opcodeRelayControl+0x290>)
 800100a:	789b      	ldrb	r3, [r3, #2]
 800100c:	461a      	mov	r2, r3
 800100e:	2102      	movs	r1, #2
 8001010:	4835      	ldr	r0, [pc, #212]	; (80010e8 <opcodeRelayControl+0x2ac>)
 8001012:	f003 fde7 	bl	8004be4 <HAL_GPIO_WritePin>
 8001016:	e039      	b.n	800108c <opcodeRelayControl+0x250>
      }
      else {
        ADC_READ_LIGHTSENSOR();
 8001018:	4835      	ldr	r0, [pc, #212]	; (80010f0 <opcodeRelayControl+0x2b4>)
 800101a:	f002 fb4f 	bl	80036bc <HAL_ADC_Start_IT>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d021      	beq.n	8001068 <opcodeRelayControl+0x22c>
 8001024:	f002 f9b2 	bl	800338c <HAL_GetTick>
 8001028:	4604      	mov	r4, r0
 800102a:	4831      	ldr	r0, [pc, #196]	; (80010f0 <opcodeRelayControl+0x2b4>)
 800102c:	f002 fb46 	bl	80036bc <HAL_ADC_Start_IT>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d009      	beq.n	800104a <opcodeRelayControl+0x20e>
 8001036:	482e      	ldr	r0, [pc, #184]	; (80010f0 <opcodeRelayControl+0x2b4>)
 8001038:	f002 fb40 	bl	80036bc <HAL_ADC_Start_IT>
 800103c:	4603      	mov	r3, r0
 800103e:	2b02      	cmp	r3, #2
 8001040:	d101      	bne.n	8001046 <opcodeRelayControl+0x20a>
 8001042:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <opcodeRelayControl+0x2b8>)
 8001044:	e002      	b.n	800104c <opcodeRelayControl+0x210>
 8001046:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <opcodeRelayControl+0x2bc>)
 8001048:	e000      	b.n	800104c <opcodeRelayControl+0x210>
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <opcodeRelayControl+0x2c0>)
 800104c:	9303      	str	r3, [sp, #12]
 800104e:	f240 1391 	movw	r3, #401	; 0x191
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <opcodeRelayControl+0x2a0>)
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <opcodeRelayControl+0x2c4>)
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	4623      	mov	r3, r4
 800105e:	4a29      	ldr	r2, [pc, #164]	; (8001104 <opcodeRelayControl+0x2c8>)
 8001060:	4927      	ldr	r1, [pc, #156]	; (8001100 <opcodeRelayControl+0x2c4>)
 8001062:	2001      	movs	r0, #1
 8001064:	f002 f87a 	bl	800315c <stm_log_write>
        osDelay(10);
 8001068:	200a      	movs	r0, #10
 800106a:	f006 faed 	bl	8007648 <osDelay>
        STM_LOGD("Consumer", "----> check again");
 800106e:	f002 f98d 	bl	800338c <HAL_GetTick>
 8001072:	4603      	mov	r3, r0
 8001074:	f240 1293 	movw	r2, #403	; 0x193
 8001078:	9202      	str	r2, [sp, #8]
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <opcodeRelayControl+0x2a0>)
 800107c:	9201      	str	r2, [sp, #4]
 800107e:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <opcodeRelayControl+0x2a4>)
 8001080:	9200      	str	r2, [sp, #0]
 8001082:	4a25      	ldr	r2, [pc, #148]	; (8001118 <opcodeRelayControl+0x2dc>)
 8001084:	4916      	ldr	r1, [pc, #88]	; (80010e0 <opcodeRelayControl+0x2a4>)
 8001086:	2004      	movs	r0, #4
 8001088:	f002 f868 	bl	800315c <stm_log_write>
    while (isChecking && ++countCheck <= 70) {
 800108c:	7d7b      	ldrb	r3, [r7, #21]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d053      	beq.n	800113a <opcodeRelayControl+0x2fe>
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	3301      	adds	r3, #1
 8001096:	75fb      	strb	r3, [r7, #23]
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	2b46      	cmp	r3, #70	; 0x46
 800109c:	f67f af4f 	bls.w	8000f3e <opcodeRelayControl+0x102>
 80010a0:	e04b      	b.n	800113a <opcodeRelayControl+0x2fe>
      }
    }
  }
  else
  {
    isAck = true;
 80010a2:	2301      	movs	r3, #1
 80010a4:	75bb      	strb	r3, [r7, #22]
    thisNode.errCode = ERR_CODE_NONE;
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <opcodeRelayControl+0x290>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	70da      	strb	r2, [r3, #3]
    STM_LOGV("Consumer", "----> already %s", WHICH_RELAY(thisNode.relayState));
 80010ac:	f002 f96e 	bl	800338c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <opcodeRelayControl+0x290>)
 80010b4:	789b      	ldrb	r3, [r3, #2]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d030      	beq.n	800111c <opcodeRelayControl+0x2e0>
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <opcodeRelayControl+0x290>)
 80010bc:	789b      	ldrb	r3, [r3, #2]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d101      	bne.n	80010c6 <opcodeRelayControl+0x28a>
 80010c2:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <opcodeRelayControl+0x294>)
 80010c4:	e02b      	b.n	800111e <opcodeRelayControl+0x2e2>
 80010c6:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <opcodeRelayControl+0x298>)
 80010c8:	e029      	b.n	800111e <opcodeRelayControl+0x2e2>
 80010ca:	bf00      	nop
 80010cc:	20000000 	.word	0x20000000
 80010d0:	0800c680 	.word	0x0800c680
 80010d4:	0800c68c 	.word	0x0800c68c
 80010d8:	0800c69c 	.word	0x0800c69c
 80010dc:	0800d64c 	.word	0x0800d64c
 80010e0:	0800c600 	.word	0x0800c600
 80010e4:	0800c6a8 	.word	0x0800c6a8
 80010e8:	40010800 	.word	0x40010800
 80010ec:	0800c6e8 	.word	0x0800c6e8
 80010f0:	200039e8 	.word	0x200039e8
 80010f4:	0800c718 	.word	0x0800c718
 80010f8:	0800c724 	.word	0x0800c724
 80010fc:	0800c730 	.word	0x0800c730
 8001100:	0800c76c 	.word	0x0800c76c
 8001104:	0800c73c 	.word	0x0800c73c
 8001108:	20003ae4 	.word	0x20003ae4
 800110c:	0800c77c 	.word	0x0800c77c
 8001110:	0800c7c0 	.word	0x0800c7c0
 8001114:	0800c7f4 	.word	0x0800c7f4
 8001118:	0800c82c 	.word	0x0800c82c
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <opcodeRelayControl+0x380>)
 800111e:	9303      	str	r3, [sp, #12]
 8001120:	f240 139b 	movw	r3, #411	; 0x19b
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <opcodeRelayControl+0x384>)
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <opcodeRelayControl+0x388>)
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	4613      	mov	r3, r2
 8001130:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <opcodeRelayControl+0x38c>)
 8001132:	4924      	ldr	r1, [pc, #144]	; (80011c4 <opcodeRelayControl+0x388>)
 8001134:	2005      	movs	r0, #5
 8001136:	f002 f811 	bl	800315c <stm_log_write>
  }

  if (isAck) {
 800113a:	7dbb      	ldrb	r3, [r7, #22]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d018      	beq.n	8001172 <opcodeRelayControl+0x336>
    PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_OK, seqID, OPCODE_RESPOSNE_RELAY_CONTROL);
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <opcodeRelayControl+0x390>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	723b      	strb	r3, [r7, #8]
 8001146:	23ff      	movs	r3, #255	; 0xff
 8001148:	727b      	strb	r3, [r7, #9]
 800114a:	2301      	movs	r3, #1
 800114c:	72bb      	strb	r3, [r7, #10]
 800114e:	2301      	movs	r3, #1
 8001150:	72fb      	strb	r3, [r7, #11]
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	733b      	strb	r3, [r7, #12]
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <opcodeRelayControl+0x390>)
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	737b      	strb	r3, [r7, #13]
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <opcodeRelayControl+0x390>)
 800115e:	789b      	ldrb	r3, [r3, #2]
 8001160:	73bb      	strb	r3, [r7, #14]
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <opcodeRelayControl+0x390>)
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	2366      	movs	r3, #102	; 0x66
 800116a:	743b      	strb	r3, [r7, #16]
 800116c:	2300      	movs	r3, #0
 800116e:	747b      	strb	r3, [r7, #17]
 8001170:	e017      	b.n	80011a2 <opcodeRelayControl+0x366>
  }
  else {
    PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_FAILED, seqID, OPCODE_RESPOSNE_RELAY_CONTROL);
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <opcodeRelayControl+0x390>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	723b      	strb	r3, [r7, #8]
 8001178:	23ff      	movs	r3, #255	; 0xff
 800117a:	727b      	strb	r3, [r7, #9]
 800117c:	2301      	movs	r3, #1
 800117e:	72bb      	strb	r3, [r7, #10]
 8001180:	2302      	movs	r3, #2
 8001182:	72fb      	strb	r3, [r7, #11]
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	733b      	strb	r3, [r7, #12]
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <opcodeRelayControl+0x390>)
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	737b      	strb	r3, [r7, #13]
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <opcodeRelayControl+0x390>)
 8001190:	789b      	ldrb	r3, [r3, #2]
 8001192:	73bb      	strb	r3, [r7, #14]
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <opcodeRelayControl+0x390>)
 8001196:	78db      	ldrb	r3, [r3, #3]
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	2366      	movs	r3, #102	; 0x66
 800119c:	743b      	strb	r3, [r7, #16]
 800119e:	2300      	movs	r3, #0
 80011a0:	747b      	strb	r3, [r7, #17]
  }
  LoRaTransmit(msg, PAYLOAD_LENGTH, LORA_DELAY);
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	f04f 32ff 	mov.w	r2, #4294967295
 80011aa:	210a      	movs	r1, #10
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fe67 	bl	8001e80 <LoRaTransmit>
}
 80011b2:	bf00      	nop
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd90      	pop	{r4, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	0800c69c 	.word	0x0800c69c
 80011c0:	0800d64c 	.word	0x0800d64c
 80011c4:	0800c600 	.word	0x0800c600
 80011c8:	0800c864 	.word	0x0800c864
 80011cc:	20000000 	.word	0x20000000

080011d0 <opcodeMcuReset>:

static void opcodeMcuReset(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af04      	add	r7, sp, #16
  STM_LOGV("Consumer", "Perform self reset");
 80011d6:	f002 f8d9 	bl	800338c <HAL_GetTick>
 80011da:	4603      	mov	r3, r0
 80011dc:	f240 12a9 	movw	r2, #425	; 0x1a9
 80011e0:	9202      	str	r2, [sp, #8]
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <opcodeMcuReset+0x28>)
 80011e4:	9201      	str	r2, [sp, #4]
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <opcodeMcuReset+0x2c>)
 80011e8:	9200      	str	r2, [sp, #0]
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <opcodeMcuReset+0x30>)
 80011ec:	4903      	ldr	r1, [pc, #12]	; (80011fc <opcodeMcuReset+0x2c>)
 80011ee:	2005      	movs	r0, #5
 80011f0:	f001 ffb4 	bl	800315c <stm_log_write>
  NVIC_SystemReset();
 80011f4:	f7ff fb58 	bl	80008a8 <__NVIC_SystemReset>
 80011f8:	0800d660 	.word	0x0800d660
 80011fc:	0800c600 	.word	0x0800c600
 8001200:	0800c894 	.word	0x0800c894

08001204 <opcodeLocationUpdate>:
}

static void opcodeLocationUpdate(uint8_t newLocation, uint8_t seqID)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af04      	add	r7, sp, #16
 800120a:	4603      	mov	r3, r0
 800120c:	460a      	mov	r2, r1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	4613      	mov	r3, r2
 8001212:	71bb      	strb	r3, [r7, #6]
  uint8_t msg[10];
  if (newLocation != LOCATION_NONE)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d02d      	beq.n	8001276 <opcodeLocationUpdate+0x72>
  {
    thisNode.location = newLocation;
 800121a:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <opcodeLocationUpdate+0xe0>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	7053      	strb	r3, [r2, #1]
    STM_LOGV("Consumer", "----> Update location %d", newLocation);
 8001220:	f002 f8b4 	bl	800338c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	9303      	str	r3, [sp, #12]
 800122a:	f240 13b3 	movw	r3, #435	; 0x1b3
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <opcodeLocationUpdate+0xe4>)
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <opcodeLocationUpdate+0xe8>)
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	4a2d      	ldr	r2, [pc, #180]	; (80012f0 <opcodeLocationUpdate+0xec>)
 800123c:	492b      	ldr	r1, [pc, #172]	; (80012ec <opcodeLocationUpdate+0xe8>)
 800123e:	2005      	movs	r0, #5
 8001240:	f001 ff8c 	bl	800315c <stm_log_write>
    PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_OK, seqID, OPCODE_RESPOSNE_LOCATION_UPDATE);
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <opcodeLocationUpdate+0xe0>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	733b      	strb	r3, [r7, #12]
 800124a:	23ff      	movs	r3, #255	; 0xff
 800124c:	737b      	strb	r3, [r7, #13]
 800124e:	2301      	movs	r3, #1
 8001250:	73bb      	strb	r3, [r7, #14]
 8001252:	2301      	movs	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	79bb      	ldrb	r3, [r7, #6]
 8001258:	743b      	strb	r3, [r7, #16]
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <opcodeLocationUpdate+0xe0>)
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	747b      	strb	r3, [r7, #17]
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <opcodeLocationUpdate+0xe0>)
 8001262:	789b      	ldrb	r3, [r3, #2]
 8001264:	74bb      	strb	r3, [r7, #18]
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <opcodeLocationUpdate+0xe0>)
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	74fb      	strb	r3, [r7, #19]
 800126c:	2368      	movs	r3, #104	; 0x68
 800126e:	753b      	strb	r3, [r7, #20]
 8001270:	2300      	movs	r3, #0
 8001272:	757b      	strb	r3, [r7, #21]
 8001274:	e029      	b.n	80012ca <opcodeLocationUpdate+0xc6>
  }
  else
  {
    STM_LOGV("Consumer", "Invalid data %d", newLocation);
 8001276:	f002 f889 	bl	800338c <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	9303      	str	r3, [sp, #12]
 8001280:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <opcodeLocationUpdate+0xe4>)
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <opcodeLocationUpdate+0xe8>)
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	4613      	mov	r3, r2
 8001290:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <opcodeLocationUpdate+0xf0>)
 8001292:	4916      	ldr	r1, [pc, #88]	; (80012ec <opcodeLocationUpdate+0xe8>)
 8001294:	2005      	movs	r0, #5
 8001296:	f001 ff61 	bl	800315c <stm_log_write>
    PACK_RESPONSE_MSG(msg, thisNode, MSG_STS_FAILED, seqID, OPCODE_RESPOSNE_LOCATION_UPDATE);
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <opcodeLocationUpdate+0xe0>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	733b      	strb	r3, [r7, #12]
 80012a0:	23ff      	movs	r3, #255	; 0xff
 80012a2:	737b      	strb	r3, [r7, #13]
 80012a4:	2301      	movs	r3, #1
 80012a6:	73bb      	strb	r3, [r7, #14]
 80012a8:	2302      	movs	r3, #2
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	743b      	strb	r3, [r7, #16]
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <opcodeLocationUpdate+0xe0>)
 80012b2:	785b      	ldrb	r3, [r3, #1]
 80012b4:	747b      	strb	r3, [r7, #17]
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <opcodeLocationUpdate+0xe0>)
 80012b8:	789b      	ldrb	r3, [r3, #2]
 80012ba:	74bb      	strb	r3, [r7, #18]
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <opcodeLocationUpdate+0xe0>)
 80012be:	78db      	ldrb	r3, [r3, #3]
 80012c0:	74fb      	strb	r3, [r7, #19]
 80012c2:	2368      	movs	r3, #104	; 0x68
 80012c4:	753b      	strb	r3, [r7, #20]
 80012c6:	2300      	movs	r3, #0
 80012c8:	757b      	strb	r3, [r7, #21]
  }
  LoRaTransmit(msg, PAYLOAD_LENGTH, LORA_DELAY);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	f04f 32ff 	mov.w	r2, #4294967295
 80012d2:	210a      	movs	r1, #10
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fdd3 	bl	8001e80 <LoRaTransmit>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000
 80012e8:	0800d670 	.word	0x0800d670
 80012ec:	0800c600 	.word	0x0800c600
 80012f0:	0800c8c4 	.word	0x0800c8c4
 80012f4:	0800c8fc 	.word	0x0800c8fc

080012f8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130c:	4b4f      	ldr	r3, [pc, #316]	; (800144c <MX_GPIO_Init+0x154>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a4e      	ldr	r2, [pc, #312]	; (800144c <MX_GPIO_Init+0x154>)
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b4c      	ldr	r3, [pc, #304]	; (800144c <MX_GPIO_Init+0x154>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001324:	4b49      	ldr	r3, [pc, #292]	; (800144c <MX_GPIO_Init+0x154>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a48      	ldr	r2, [pc, #288]	; (800144c <MX_GPIO_Init+0x154>)
 800132a:	f043 0320 	orr.w	r3, r3, #32
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b46      	ldr	r3, [pc, #280]	; (800144c <MX_GPIO_Init+0x154>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b43      	ldr	r3, [pc, #268]	; (800144c <MX_GPIO_Init+0x154>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a42      	ldr	r2, [pc, #264]	; (800144c <MX_GPIO_Init+0x154>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b40      	ldr	r3, [pc, #256]	; (800144c <MX_GPIO_Init+0x154>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001354:	4b3d      	ldr	r3, [pc, #244]	; (800144c <MX_GPIO_Init+0x154>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a3c      	ldr	r2, [pc, #240]	; (800144c <MX_GPIO_Init+0x154>)
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b3a      	ldr	r3, [pc, #232]	; (800144c <MX_GPIO_Init+0x154>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_OUTPUT_GPIO_Port, RELAY_OUTPUT_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2102      	movs	r1, #2
 8001370:	4837      	ldr	r0, [pc, #220]	; (8001450 <MX_GPIO_Init+0x158>)
 8001372:	f003 fc37 	bl	8004be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2110      	movs	r1, #16
 800137a:	4835      	ldr	r0, [pc, #212]	; (8001450 <MX_GPIO_Init+0x158>)
 800137c:	f003 fc32 	bl	8004be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2101      	movs	r1, #1
 8001384:	4833      	ldr	r0, [pc, #204]	; (8001454 <MX_GPIO_Init+0x15c>)
 8001386:	f003 fc2d 	bl	8004be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800138a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001390:	2303      	movs	r3, #3
 8001392:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	482f      	ldr	r0, [pc, #188]	; (8001458 <MX_GPIO_Init+0x160>)
 800139c:	f003 f9b2 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RELAY_OUTPUT_Pin|SPI1_NSS_Pin;
 80013a0:	2312      	movs	r3, #18
 80013a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4619      	mov	r1, r3
 80013b6:	4826      	ldr	r0, [pc, #152]	; (8001450 <MX_GPIO_Init+0x158>)
 80013b8:	f003 f9a4 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 80013bc:	2304      	movs	r3, #4
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4619      	mov	r1, r3
 80013ce:	4820      	ldr	r0, [pc, #128]	; (8001450 <MX_GPIO_Init+0x158>)
 80013d0:	f003 f998 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTERRUPT_LORA_Pin;
 80013d4:	2308      	movs	r3, #8
 80013d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_GPIO_Init+0x164>)
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERRUPT_LORA_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4619      	mov	r1, r3
 80013e6:	481a      	ldr	r0, [pc, #104]	; (8001450 <MX_GPIO_Init+0x158>)
 80013e8:	f003 f98c 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OUTPUT_Pin;
 80013ec:	2301      	movs	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4619      	mov	r1, r3
 8001402:	4814      	ldr	r0, [pc, #80]	; (8001454 <MX_GPIO_Init+0x15c>)
 8001404:	f003 f97e 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8001408:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800140c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4619      	mov	r1, r3
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <MX_GPIO_Init+0x15c>)
 800141a:	f003 f973 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 800141e:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 8001422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001424:	2303      	movs	r3, #3
 8001426:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	4808      	ldr	r0, [pc, #32]	; (8001450 <MX_GPIO_Init+0x158>)
 8001430:	f003 f968 	bl	8004704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2105      	movs	r1, #5
 8001438:	2009      	movs	r0, #9
 800143a:	f002 fe47 	bl	80040cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800143e:	2009      	movs	r0, #9
 8001440:	f002 fe70 	bl	8004124 <HAL_NVIC_EnableIRQ>

}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	40010800 	.word	0x40010800
 8001454:	40010c00 	.word	0x40010c00
 8001458:	40011000 	.word	0x40011000
 800145c:	10110000 	.word	0x10110000

08001460 <vSpi1Write>:
  * @param ucData: Data need write into registers or fifo of Lora
  * @retval None
  */

void vSpi1Write(uint8_t ucAddress, uint8_t ucData)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af04      	add	r7, sp, #16
 8001466:	4603      	mov	r3, r0
 8001468:	460a      	mov	r2, r1
 800146a:	71fb      	strb	r3, [r7, #7]
 800146c:	4613      	mov	r3, r2
 800146e:	71bb      	strb	r3, [r7, #6]
  uint8_t ucDataMatrix[2];
  ucAddress |= SPI1_WRITE; /* A wnr bit, which is 1 for write access and 0 for read access */
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001476:	71fb      	strb	r3, [r7, #7]
  ucDataMatrix[0] = ucAddress;
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	733b      	strb	r3, [r7, #12]
  ucDataMatrix[1] = ucData;
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2110      	movs	r1, #16
 8001484:	4822      	ldr	r0, [pc, #136]	; (8001510 <vSpi1Write+0xb0>)
 8001486:	f003 fbad 	bl	8004be4 <HAL_GPIO_WritePin>
  HAL_Delay(DELAY_SPI);
 800148a:	2003      	movs	r0, #3
 800148c:	f001 ff88 	bl	80033a0 <HAL_Delay>
  ERROR_CHECK(HAL_SPI_Transmit(&hspi1, (uint8_t*)ucDataMatrix, sizeof(ucDataMatrix), 100));
 8001490:	f107 010c 	add.w	r1, r7, #12
 8001494:	2364      	movs	r3, #100	; 0x64
 8001496:	2202      	movs	r2, #2
 8001498:	481e      	ldr	r0, [pc, #120]	; (8001514 <vSpi1Write+0xb4>)
 800149a:	f004 fd0f 	bl	8005ebc <HAL_SPI_Transmit>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d028      	beq.n	80014f6 <vSpi1Write+0x96>
 80014a4:	f001 ff72 	bl	800338c <HAL_GetTick>
 80014a8:	4604      	mov	r4, r0
 80014aa:	f107 010c 	add.w	r1, r7, #12
 80014ae:	2364      	movs	r3, #100	; 0x64
 80014b0:	2202      	movs	r2, #2
 80014b2:	4818      	ldr	r0, [pc, #96]	; (8001514 <vSpi1Write+0xb4>)
 80014b4:	f004 fd02 	bl	8005ebc <HAL_SPI_Transmit>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d00d      	beq.n	80014da <vSpi1Write+0x7a>
 80014be:	f107 010c 	add.w	r1, r7, #12
 80014c2:	2364      	movs	r3, #100	; 0x64
 80014c4:	2202      	movs	r2, #2
 80014c6:	4813      	ldr	r0, [pc, #76]	; (8001514 <vSpi1Write+0xb4>)
 80014c8:	f004 fcf8 	bl	8005ebc <HAL_SPI_Transmit>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d101      	bne.n	80014d6 <vSpi1Write+0x76>
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <vSpi1Write+0xb8>)
 80014d4:	e002      	b.n	80014dc <vSpi1Write+0x7c>
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <vSpi1Write+0xbc>)
 80014d8:	e000      	b.n	80014dc <vSpi1Write+0x7c>
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <vSpi1Write+0xc0>)
 80014dc:	9303      	str	r3, [sp, #12]
 80014de:	231f      	movs	r3, #31
 80014e0:	9302      	str	r3, [sp, #8]
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <vSpi1Write+0xc4>)
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <vSpi1Write+0xc8>)
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4623      	mov	r3, r4
 80014ec:	4a0f      	ldr	r2, [pc, #60]	; (800152c <vSpi1Write+0xcc>)
 80014ee:	490e      	ldr	r1, [pc, #56]	; (8001528 <vSpi1Write+0xc8>)
 80014f0:	2001      	movs	r0, #1
 80014f2:	f001 fe33 	bl	800315c <stm_log_write>
  HAL_Delay(DELAY_SPI);
 80014f6:	2003      	movs	r0, #3
 80014f8:	f001 ff52 	bl	80033a0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2110      	movs	r1, #16
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <vSpi1Write+0xb0>)
 8001502:	f003 fb6f 	bl	8004be4 <HAL_GPIO_WritePin>
}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	40010800 	.word	0x40010800
 8001514:	20003a44 	.word	0x20003a44
 8001518:	0800c928 	.word	0x0800c928
 800151c:	0800c934 	.word	0x0800c934
 8001520:	0800c940 	.word	0x0800c940
 8001524:	0800d688 	.word	0x0800d688
 8001528:	0800c97c 	.word	0x0800c97c
 800152c:	0800c94c 	.word	0x0800c94c

08001530 <ucSpi1Read>:
  * @brief Read Data Function from Lora Module
  * @param ucAddress: Address registers or fifo of Lora Module
  * @retval ucData: Data contained in registers or fifo of Lora Module
  */
uint8_t ucSpi1Read(uint8_t ucAddress)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af04      	add	r7, sp, #16
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
  ucAddress &= SPI1_READ; /* A wnr bit, which is 1 for write access and 0 for read access */
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001544:	b2db      	uxtb	r3, r3
 8001546:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2110      	movs	r1, #16
 800154c:	483a      	ldr	r0, [pc, #232]	; (8001638 <ucSpi1Read+0x108>)
 800154e:	f003 fb49 	bl	8004be4 <HAL_GPIO_WritePin>
  HAL_Delay(DELAY_SPI);
 8001552:	2003      	movs	r0, #3
 8001554:	f001 ff24 	bl	80033a0 <HAL_Delay>
  ERROR_CHECK(HAL_SPI_Transmit(&hspi1, (uint8_t*)&ucAddress, sizeof(ucAddress), 100));
 8001558:	1df9      	adds	r1, r7, #7
 800155a:	2364      	movs	r3, #100	; 0x64
 800155c:	2201      	movs	r2, #1
 800155e:	4837      	ldr	r0, [pc, #220]	; (800163c <ucSpi1Read+0x10c>)
 8001560:	f004 fcac 	bl	8005ebc <HAL_SPI_Transmit>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d026      	beq.n	80015b8 <ucSpi1Read+0x88>
 800156a:	f001 ff0f 	bl	800338c <HAL_GetTick>
 800156e:	4604      	mov	r4, r0
 8001570:	1df9      	adds	r1, r7, #7
 8001572:	2364      	movs	r3, #100	; 0x64
 8001574:	2201      	movs	r2, #1
 8001576:	4831      	ldr	r0, [pc, #196]	; (800163c <ucSpi1Read+0x10c>)
 8001578:	f004 fca0 	bl	8005ebc <HAL_SPI_Transmit>
 800157c:	4603      	mov	r3, r0
 800157e:	2b01      	cmp	r3, #1
 8001580:	d00c      	beq.n	800159c <ucSpi1Read+0x6c>
 8001582:	1df9      	adds	r1, r7, #7
 8001584:	2364      	movs	r3, #100	; 0x64
 8001586:	2201      	movs	r2, #1
 8001588:	482c      	ldr	r0, [pc, #176]	; (800163c <ucSpi1Read+0x10c>)
 800158a:	f004 fc97 	bl	8005ebc <HAL_SPI_Transmit>
 800158e:	4603      	mov	r3, r0
 8001590:	2b02      	cmp	r3, #2
 8001592:	d101      	bne.n	8001598 <ucSpi1Read+0x68>
 8001594:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <ucSpi1Read+0x110>)
 8001596:	e002      	b.n	800159e <ucSpi1Read+0x6e>
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <ucSpi1Read+0x114>)
 800159a:	e000      	b.n	800159e <ucSpi1Read+0x6e>
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <ucSpi1Read+0x118>)
 800159e:	9303      	str	r3, [sp, #12]
 80015a0:	232f      	movs	r3, #47	; 0x2f
 80015a2:	9302      	str	r3, [sp, #8]
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <ucSpi1Read+0x11c>)
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <ucSpi1Read+0x120>)
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4623      	mov	r3, r4
 80015ae:	4a29      	ldr	r2, [pc, #164]	; (8001654 <ucSpi1Read+0x124>)
 80015b0:	4927      	ldr	r1, [pc, #156]	; (8001650 <ucSpi1Read+0x120>)
 80015b2:	2001      	movs	r0, #1
 80015b4:	f001 fdd2 	bl	800315c <stm_log_write>
  ERROR_CHECK(HAL_SPI_Receive(&hspi1, (uint8_t*)&ucData, sizeof(ucData), 100));
 80015b8:	f107 010f 	add.w	r1, r7, #15
 80015bc:	2364      	movs	r3, #100	; 0x64
 80015be:	2201      	movs	r2, #1
 80015c0:	481e      	ldr	r0, [pc, #120]	; (800163c <ucSpi1Read+0x10c>)
 80015c2:	f004 fdc7 	bl	8006154 <HAL_SPI_Receive>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d028      	beq.n	800161e <ucSpi1Read+0xee>
 80015cc:	f001 fede 	bl	800338c <HAL_GetTick>
 80015d0:	4604      	mov	r4, r0
 80015d2:	f107 010f 	add.w	r1, r7, #15
 80015d6:	2364      	movs	r3, #100	; 0x64
 80015d8:	2201      	movs	r2, #1
 80015da:	4818      	ldr	r0, [pc, #96]	; (800163c <ucSpi1Read+0x10c>)
 80015dc:	f004 fdba 	bl	8006154 <HAL_SPI_Receive>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d00d      	beq.n	8001602 <ucSpi1Read+0xd2>
 80015e6:	f107 010f 	add.w	r1, r7, #15
 80015ea:	2364      	movs	r3, #100	; 0x64
 80015ec:	2201      	movs	r2, #1
 80015ee:	4813      	ldr	r0, [pc, #76]	; (800163c <ucSpi1Read+0x10c>)
 80015f0:	f004 fdb0 	bl	8006154 <HAL_SPI_Receive>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d101      	bne.n	80015fe <ucSpi1Read+0xce>
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <ucSpi1Read+0x110>)
 80015fc:	e002      	b.n	8001604 <ucSpi1Read+0xd4>
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <ucSpi1Read+0x114>)
 8001600:	e000      	b.n	8001604 <ucSpi1Read+0xd4>
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <ucSpi1Read+0x118>)
 8001604:	9303      	str	r3, [sp, #12]
 8001606:	2330      	movs	r3, #48	; 0x30
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <ucSpi1Read+0x11c>)
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <ucSpi1Read+0x120>)
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	4623      	mov	r3, r4
 8001614:	4a0f      	ldr	r2, [pc, #60]	; (8001654 <ucSpi1Read+0x124>)
 8001616:	490e      	ldr	r1, [pc, #56]	; (8001650 <ucSpi1Read+0x120>)
 8001618:	2001      	movs	r0, #1
 800161a:	f001 fd9f 	bl	800315c <stm_log_write>
  HAL_Delay(DELAY_SPI);
 800161e:	2003      	movs	r0, #3
 8001620:	f001 febe 	bl	80033a0 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	2110      	movs	r1, #16
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <ucSpi1Read+0x108>)
 800162a:	f003 fadb 	bl	8004be4 <HAL_GPIO_WritePin>
  return ucData;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	40010800 	.word	0x40010800
 800163c:	20003a44 	.word	0x20003a44
 8001640:	0800c928 	.word	0x0800c928
 8001644:	0800c934 	.word	0x0800c934
 8001648:	0800c940 	.word	0x0800c940
 800164c:	0800d694 	.word	0x0800d694
 8001650:	0800c97c 	.word	0x0800c97c
 8001654:	0800c94c 	.word	0x0800c94c

08001658 <vLongRangeModeInit>:
  * @brief Mode Initialization LoraTM or FSK/OOK
  * @param ucMode: Value of mode: LoraTM if 1, FSK/OOK if 0
  * @retval None
  */
void vLongRangeModeInit(uint8_t ucLongRangeMode)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  vModeInit(SLEEP_MODE);
 8001662:	2000      	movs	r0, #0
 8001664:	f000 f870 	bl	8001748 <vModeInit>
  uint8_t ucData = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 800166c:	2001      	movs	r0, #1
 800166e:	f7ff ff5f 	bl	8001530 <ucSpi1Read>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x7F;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800167c:	73fb      	strb	r3, [r7, #15]
  if (ucLongRangeMode == 0u || ucLongRangeMode == 1u)
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <vLongRangeModeInit+0x32>
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d10c      	bne.n	80016a4 <vLongRangeModeInit+0x4c>
  {
    ucData |= (ucLongRangeMode << 7);
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	01db      	lsls	r3, r3, #7
 800168e:	b25a      	sxtb	r2, r3
 8001690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001694:	4313      	orrs	r3, r2
 8001696:	b25b      	sxtb	r3, r3
 8001698:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	4619      	mov	r1, r3
 800169e:	2001      	movs	r0, #1
 80016a0:	f7ff fede 	bl	8001460 <vSpi1Write>
  }
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <vAccessSharedRegInit>:
  * @brief Access Low Frequency Mode Initialization
  * @param ucAccessSharedReg: Value of mode
  * @retval None
  */
void vAccessSharedRegInit(uint8_t ucAccessSharedReg)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff ff38 	bl	8001530 <ucSpi1Read>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xBF;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016ca:	73fb      	strb	r3, [r7, #15]
  if (ucAccessSharedReg == 0u || ucAccessSharedReg == 1u)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <vAccessSharedRegInit+0x2c>
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d10c      	bne.n	80016f2 <vAccessSharedRegInit+0x46>
  {
    ucData |= (ucAccessSharedReg << 6);
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	019b      	lsls	r3, r3, #6
 80016dc:	b25a      	sxtb	r2, r3
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	4619      	mov	r1, r3
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff feb7 	bl	8001460 <vSpi1Write>
  }
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <vLowFrequencyModeOnInit>:
  * @brief Access Low Frequency Mode Initialization
  * @param ucLowFrequencyModeOn: Value of mode
  * @retval None
  */
void vLowFrequencyModeOnInit(uint8_t ucLowFrequencyModeOn)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff ff11 	bl	8001530 <ucSpi1Read>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF7;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	f023 0308 	bic.w	r3, r3, #8
 8001718:	73fb      	strb	r3, [r7, #15]
  if (ucLowFrequencyModeOn == 0u || ucLowFrequencyModeOn == 1u)
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <vLowFrequencyModeOnInit+0x2c>
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d10c      	bne.n	8001740 <vLowFrequencyModeOnInit+0x46>
  {
    ucData |= (ucLowFrequencyModeOn << 3);
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	b25a      	sxtb	r2, r3
 800172c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001730:	4313      	orrs	r3, r2
 8001732:	b25b      	sxtb	r3, r3
 8001734:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	4619      	mov	r1, r3
 800173a:	2001      	movs	r0, #1
 800173c:	f7ff fe90 	bl	8001460 <vSpi1Write>
  }
}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <vModeInit>:
  * @brief Device Modes Initialization
  * @param ucDeviceMode: Value of mode
  * @retval None
  */
void vModeInit(uint8_t ucMode)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af04      	add	r7, sp, #16
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  STM_LOGD("LoRa", "LoRa -> %s", WHICH_MODE(ucMode));
 8001752:	f001 fe1b 	bl	800338c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d010      	beq.n	8001780 <vModeInit+0x38>
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d00b      	beq.n	800177c <vModeInit+0x34>
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d006      	beq.n	8001778 <vModeInit+0x30>
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d101      	bne.n	8001774 <vModeInit+0x2c>
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <vModeInit+0x8c>)
 8001772:	e006      	b.n	8001782 <vModeInit+0x3a>
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <vModeInit+0x90>)
 8001776:	e004      	b.n	8001782 <vModeInit+0x3a>
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <vModeInit+0x94>)
 800177a:	e002      	b.n	8001782 <vModeInit+0x3a>
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <vModeInit+0x98>)
 800177e:	e000      	b.n	8001782 <vModeInit+0x3a>
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <vModeInit+0x9c>)
 8001782:	9303      	str	r3, [sp, #12]
 8001784:	2371      	movs	r3, #113	; 0x71
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <vModeInit+0xa0>)
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <vModeInit+0xa4>)
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <vModeInit+0xa8>)
 8001794:	4915      	ldr	r1, [pc, #84]	; (80017ec <vModeInit+0xa4>)
 8001796:	2004      	movs	r0, #4
 8001798:	f001 fce0 	bl	800315c <stm_log_write>
  uint8_t ucData = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOpMode);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff fec5 	bl	8001530 <ucSpi1Read>
 80017a6:	4603      	mov	r3, r0
 80017a8:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	f023 0307 	bic.w	r3, r3, #7
 80017b0:	73fb      	strb	r3, [r7, #15]
  if (ucMode >= 0u && ucMode <= 7u)
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b07      	cmp	r3, #7
 80017b6:	d808      	bhi.n	80017ca <vModeInit+0x82>
  {
    ucData |= ucMode;
 80017b8:	7bfa      	ldrb	r2, [r7, #15]
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4313      	orrs	r3, r2
 80017be:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOpMode, ucData);
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	4619      	mov	r1, r3
 80017c4:	2001      	movs	r0, #1
 80017c6:	f7ff fe4b 	bl	8001460 <vSpi1Write>
  }
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	0800c98c 	.word	0x0800c98c
 80017d8:	0800c994 	.word	0x0800c994
 80017dc:	0800c99c 	.word	0x0800c99c
 80017e0:	0800c9a0 	.word	0x0800c9a0
 80017e4:	0800c9a8 	.word	0x0800c9a8
 80017e8:	0800d6a0 	.word	0x0800d6a0
 80017ec:	0800c9e0 	.word	0x0800c9e0
 80017f0:	0800c9b0 	.word	0x0800c9b0

080017f4 <vFrfInit>:
  * @brief RF carrier frequency Initialization
  * @param uiFrf: Value of RF carrier frequency
  * @retval None
  */
void vFrfInit(unsigned int uiFrf)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  vSpi1Write(RegFrfMsb, (uint8_t)(uiFrf >> 16));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	0c1b      	lsrs	r3, r3, #16
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4619      	mov	r1, r3
 8001804:	2006      	movs	r0, #6
 8001806:	f7ff fe2b 	bl	8001460 <vSpi1Write>
  vSpi1Write(RegFrfMid, (uint8_t)(uiFrf >> 8));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4619      	mov	r1, r3
 8001812:	2007      	movs	r0, #7
 8001814:	f7ff fe24 	bl	8001460 <vSpi1Write>
  vSpi1Write(RegFrfLsb, (uint8_t)uiFrf);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	4619      	mov	r1, r3
 800181e:	2008      	movs	r0, #8
 8001820:	f7ff fe1e 	bl	8001460 <vSpi1Write>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <vPaSelectInit>:
  * @brief Power Amplifier Initialization
  * @param ucPaSelect: Power Amplifier Value
  * @retval None
  */
void vPaSelectInit(uint8_t ucPaSelect)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaConfig);
 800183a:	2009      	movs	r0, #9
 800183c:	f7ff fe78 	bl	8001530 <ucSpi1Read>
 8001840:	4603      	mov	r3, r0
 8001842:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x7F;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800184a:	73fb      	strb	r3, [r7, #15]
  if (ucPaSelect == 0u || ucPaSelect == 1u)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <vPaSelectInit+0x2c>
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d10c      	bne.n	8001872 <vPaSelectInit+0x46>
  {
    ucData |= (ucPaSelect << 7);
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	01db      	lsls	r3, r3, #7
 800185c:	b25a      	sxtb	r2, r3
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001862:	4313      	orrs	r3, r2
 8001864:	b25b      	sxtb	r3, r3
 8001866:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaConfig, ucData);
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	4619      	mov	r1, r3
 800186c:	2009      	movs	r0, #9
 800186e:	f7ff fdf7 	bl	8001460 <vSpi1Write>
  }
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <vOutputPowerInit>:
  * @brief Output Power Initialization
  * @param ucOutputPower: Output Power Value
  * @retval None
  */
void vOutputPowerInit(uint8_t ucOutputPower)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaConfig);
 8001888:	2009      	movs	r0, #9
 800188a:	f7ff fe51 	bl	8001530 <ucSpi1Read>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF0;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	f023 030f 	bic.w	r3, r3, #15
 8001898:	73fb      	strb	r3, [r7, #15]
  if (ucOutputPower >= 0u && ucOutputPower <= 15u)
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	2b0f      	cmp	r3, #15
 800189e:	d808      	bhi.n	80018b2 <vOutputPowerInit+0x38>
  {
    ucData |= ucOutputPower;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaConfig, ucData);
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	4619      	mov	r1, r3
 80018ac:	2009      	movs	r0, #9
 80018ae:	f7ff fdd7 	bl	8001460 <vSpi1Write>
  }
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <vPaRampInit>:
  * @brief Rise/Fall time of ramp up/down in FSK Initialization
  * @param ucPaRamp: Ramp Value
  * @retval None
  */
void vPaRampInit(uint8_t ucPaRamp)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaRamp);
 80018c8:	200a      	movs	r0, #10
 80018ca:	f7ff fe31 	bl	8001530 <ucSpi1Read>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF0;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	f023 030f 	bic.w	r3, r3, #15
 80018d8:	73fb      	strb	r3, [r7, #15]
  if (ucPaRamp >= 0u && ucPaRamp <= 15u)
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d808      	bhi.n	80018f2 <vPaRampInit+0x38>
  {
    ucData |= ucPaRamp;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaRamp, ucData);
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	4619      	mov	r1, r3
 80018ec:	200a      	movs	r0, #10
 80018ee:	f7ff fdb7 	bl	8001460 <vSpi1Write>
  }
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <vOcpTrimInit>:
  * @brief  Overload Current Protection Initialization
  * @param ucOcpTrim: OcpTrim Value
  * @retval None
  */
void vOcpTrimInit(uint8_t ucOcpTrim)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegOcp);
 8001908:	200b      	movs	r0, #11
 800190a:	f7ff fe11 	bl	8001530 <ucSpi1Read>
 800190e:	4603      	mov	r3, r0
 8001910:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xE0;
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	f023 031f 	bic.w	r3, r3, #31
 8001918:	73fb      	strb	r3, [r7, #15]
  if (ucOcpTrim >= 0u && ucOcpTrim <= 31u)
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	2b1f      	cmp	r3, #31
 800191e:	d808      	bhi.n	8001932 <vOcpTrimInit+0x38>
  {
    ucData |= ucOcpTrim;
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	4313      	orrs	r3, r2
 8001926:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegOcp, ucData);
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	4619      	mov	r1, r3
 800192c:	200b      	movs	r0, #11
 800192e:	f7ff fd97 	bl	8001460 <vSpi1Write>
  }
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <vFifoTxBaseAddrInit>:
  * @brief Base address in FIFO data buffer for TX modulator Initialization
  * @param ucFifoTxBaseAddr: Base Address Value for Tx
  * @retval None
  */
void vFifoTxBaseAddrInit(uint8_t ucFifoTxBaseAddr)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegFifoTxBaseAddr, ucFifoTxBaseAddr);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	4619      	mov	r1, r3
 8001948:	200e      	movs	r0, #14
 800194a:	f7ff fd89 	bl	8001460 <vSpi1Write>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <vFifoRxBaseAddrInit>:
  * @brief Base address in FIFO data buffer for RX modulator Initialization
  * @param ucFifoRxBaseAddr: Base Address Value for Rx
  * @retval None
  */
void vFifoRxBaseAddrInit(uint8_t ucFifoRxBaseAddr)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegFifoRxBaseAddr, ucFifoRxBaseAddr);
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	4619      	mov	r1, r3
 8001964:	200f      	movs	r0, #15
 8001966:	f7ff fd7b 	bl	8001460 <vSpi1Write>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <vBandWidthInit>:
  * @brief Signal bandwidth Initialization
  * @param ucBandWidth: BandWidth Value
  * @retval None
  */
void vBandWidthInit(uint8_t ucBandWidth)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig1);
 8001980:	201d      	movs	r0, #29
 8001982:	f7ff fdd5 	bl	8001530 <ucSpi1Read>
 8001986:	4603      	mov	r3, r0
 8001988:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x0F;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	73fb      	strb	r3, [r7, #15]
  if (ucBandWidth >= 0u && ucBandWidth <= 9u)
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2b09      	cmp	r3, #9
 8001996:	d80c      	bhi.n	80019b2 <vBandWidthInit+0x40>
  {
    ucData |= (ucBandWidth << 4);
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	b25a      	sxtb	r2, r3
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig1, ucData);
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	4619      	mov	r1, r3
 80019ac:	201d      	movs	r0, #29
 80019ae:	f7ff fd57 	bl	8001460 <vSpi1Write>
  }
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <vCodingRateInit>:
  * @brief Error coding rate Initialization
  * @param ucCodingRate: Error coding rate Value
  * @retval None
  */
void vCodingRateInit(uint8_t ucCodingRate)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig1);
 80019c8:	201d      	movs	r0, #29
 80019ca:	f7ff fdb1 	bl	8001530 <ucSpi1Read>
 80019ce:	4603      	mov	r3, r0
 80019d0:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF1;
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	f023 030e 	bic.w	r3, r3, #14
 80019d8:	73fb      	strb	r3, [r7, #15]
  if (ucCodingRate >= 1u && ucCodingRate <= 4u)
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00f      	beq.n	8001a00 <vCodingRateInit+0x46>
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d80c      	bhi.n	8001a00 <vCodingRateInit+0x46>
  {
    ucData |= (ucCodingRate << 1);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	b25a      	sxtb	r2, r3
 80019ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig1, ucData);
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	4619      	mov	r1, r3
 80019fa:	201d      	movs	r0, #29
 80019fc:	f7ff fd30 	bl	8001460 <vSpi1Write>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <vImplicitHeaderModeOnInit>:
  * @brief Explicit or Implicit Header mode Initialization
  * @param ucHeaderMode: Error coding rate Value
  * @retval None
  */
void vImplicitHeaderModeOnInit(uint8_t ucHeaderMode)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig1);
 8001a16:	201d      	movs	r0, #29
 8001a18:	f7ff fd8a 	bl	8001530 <ucSpi1Read>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xFE;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
  if (ucHeaderMode == 0u || ucHeaderMode == 1u)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <vImplicitHeaderModeOnInit+0x2c>
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d108      	bne.n	8001a46 <vImplicitHeaderModeOnInit+0x3e>
  {
    ucData |= ucHeaderMode;
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig1, ucData);
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	201d      	movs	r0, #29
 8001a42:	f7ff fd0d 	bl	8001460 <vSpi1Write>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <vSpreadingFactorInit>:
  * @brief Spreading Factor rate Initialization
  * @param ucSpreadingFactor: Spreading Factor Value
  * @retval None
  */
void vSpreadingFactorInit(uint8_t ucSpreadingFactor)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig2);
 8001a5c:	201e      	movs	r0, #30
 8001a5e:	f7ff fd67 	bl	8001530 <ucSpi1Read>
 8001a62:	4603      	mov	r3, r0
 8001a64:	73fb      	strb	r3, [r7, #15]
  ucData &= 0x0F;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	73fb      	strb	r3, [r7, #15]
  if (ucSpreadingFactor >= 6u && ucSpreadingFactor <= 12u)
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b05      	cmp	r3, #5
 8001a72:	d90f      	bls.n	8001a94 <vSpreadingFactorInit+0x46>
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d80c      	bhi.n	8001a94 <vSpreadingFactorInit+0x46>
  {
    ucData |= (ucSpreadingFactor << 4);
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	b25a      	sxtb	r2, r3
 8001a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig2, ucData);
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	201e      	movs	r0, #30
 8001a90:	f7ff fce6 	bl	8001460 <vSpi1Write>
  }
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <vRxPayloadCrcOnInit>:
  * @brief CRC generation and check on payload Initialization
  * @param ucRxPayloadCrcOn: CRCON Value
  * @retval None
  */
void vRxPayloadCrcOnInit(uint8_t ucRxPayloadCrcOn)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig2);
 8001aaa:	201e      	movs	r0, #30
 8001aac:	f7ff fd40 	bl	8001530 <ucSpi1Read>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xFB;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	f023 0304 	bic.w	r3, r3, #4
 8001aba:	73fb      	strb	r3, [r7, #15]
  if (ucRxPayloadCrcOn == 0u || ucRxPayloadCrcOn == 1u)
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <vRxPayloadCrcOnInit+0x2c>
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d10c      	bne.n	8001ae2 <vRxPayloadCrcOnInit+0x46>
  {
    ucData |= (ucRxPayloadCrcOn << 2);
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig2, ucData);
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	4619      	mov	r1, r3
 8001adc:	201e      	movs	r0, #30
 8001ade:	f7ff fcbf 	bl	8001460 <vSpi1Write>
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <vPreambleLengthInit>:
  * @brief Preamble Length Initialization
  * @param ucPreambleLength: Preamble Length Value
  * @retval None
  */
void vPreambleLengthInit(uint16_t ucPreambleLength)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	80fb      	strh	r3, [r7, #6]
  vSpi1Write(RegPreambleMsb, (uint8_t)(ucPreambleLength >> 8));
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	4619      	mov	r1, r3
 8001afe:	2020      	movs	r0, #32
 8001b00:	f7ff fcae 	bl	8001460 <vSpi1Write>
  vSpi1Write(RegPreambleLsb, (uint8_t)(ucPreambleLength));
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	2021      	movs	r0, #33	; 0x21
 8001b0c:	f7ff fca8 	bl	8001460 <vSpi1Write>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <vPayloadLengthInit>:
  * @brief Payload Length Initialization
  * @param ucPayloadLength: Payload Length Value
  * @retval None
  */
void vPayloadLengthInit(uint8_t ucPayloadLength)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegPayloadLength, ucPayloadLength);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	4619      	mov	r1, r3
 8001b26:	2022      	movs	r0, #34	; 0x22
 8001b28:	f7ff fc9a 	bl	8001460 <vSpi1Write>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <vLowDataRateOptimizeInit>:
  * @brief Low Data Rate Optimize Initialization
  * @param ucLowDataRateOptimize: Low Data Rate Optimize Value to Disable or Enable
  * @retval None
  */
void vLowDataRateOptimizeInit(uint8_t ucLowDataRateOptimize)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegModemConfig3);
 8001b42:	2026      	movs	r0, #38	; 0x26
 8001b44:	f7ff fcf4 	bl	8001530 <ucSpi1Read>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF7;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	f023 0308 	bic.w	r3, r3, #8
 8001b52:	73fb      	strb	r3, [r7, #15]
  if (ucLowDataRateOptimize == 0u || ucLowDataRateOptimize == 1u)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <vLowDataRateOptimizeInit+0x2c>
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d10c      	bne.n	8001b7a <vLowDataRateOptimizeInit+0x46>
  {
    ucData |= (ucLowDataRateOptimize << 3);
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	b25a      	sxtb	r2, r3
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegModemConfig3, ucData);
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	4619      	mov	r1, r3
 8001b74:	2026      	movs	r0, #38	; 0x26
 8001b76:	f7ff fc73 	bl	8001460 <vSpi1Write>
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <vDetectionOptimizeInit>:
  * @brief  LoRa Detection Optimize Initialization
  * @param ucDetectionOptimize: Detection Optimize Value
  * @retval None
  */
void vDetectionOptimizeInit(uint8_t ucDetectionOptimize)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegDetectOptimize);
 8001b90:	2031      	movs	r0, #49	; 0x31
 8001b92:	f7ff fccd 	bl	8001530 <ucSpi1Read>
 8001b96:	4603      	mov	r3, r0
 8001b98:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	f023 0307 	bic.w	r3, r3, #7
 8001ba0:	73fb      	strb	r3, [r7, #15]
  if (ucDetectionOptimize == 3u || ucDetectionOptimize == 5u)
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d002      	beq.n	8001bae <vDetectionOptimizeInit+0x2c>
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d108      	bne.n	8001bc0 <vDetectionOptimizeInit+0x3e>
  {
    ucData |= ucDetectionOptimize;
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegDetectOptimize, ucData);
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	2031      	movs	r0, #49	; 0x31
 8001bbc:	f7ff fc50 	bl	8001460 <vSpi1Write>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <vDetectionThresholdInit>:
  * @brief LoRa detection threshold Initialization
  * @param ucDetectionThreshold: LoRa detection threshold Value
  * @retval None
  */
void vDetectionThresholdInit(uint8_t ucDetectionThreshold)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  if (ucDetectionThreshold == 0x0A || ucDetectionThreshold == 0x0C)
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2b0a      	cmp	r3, #10
 8001bd6:	d002      	beq.n	8001bde <vDetectionThresholdInit+0x16>
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d104      	bne.n	8001be8 <vDetectionThresholdInit+0x20>
  {
    vSpi1Write(RegDetectionThreshold, ucDetectionThreshold);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4619      	mov	r1, r3
 8001be2:	2037      	movs	r0, #55	; 0x37
 8001be4:	f7ff fc3c 	bl	8001460 <vSpi1Write>
  }
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <vTcxoInputOnInit>:
  * @brief Controls the crystal oscillator Initialization
  * @param ucTcxoInputOn: Tcxo Input On Value
  * @retval None
  */
void vTcxoInputOnInit(uint8_t ucTcxoInputOn)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegTcxo);
 8001bfe:	204b      	movs	r0, #75	; 0x4b
 8001c00:	f7ff fc96 	bl	8001530 <ucSpi1Read>
 8001c04:	4603      	mov	r3, r0
 8001c06:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xEF;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	f023 0310 	bic.w	r3, r3, #16
 8001c0e:	73fb      	strb	r3, [r7, #15]
  if (ucTcxoInputOn == 0u || ucTcxoInputOn == 1u)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <vTcxoInputOnInit+0x2c>
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d10c      	bne.n	8001c36 <vTcxoInputOnInit+0x46>
  {
    ucData |= (ucTcxoInputOn << 4);
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	b25a      	sxtb	r2, r3
 8001c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegTcxo, ucData);
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	204b      	movs	r0, #75	; 0x4b
 8001c32:	f7ff fc15 	bl	8001460 <vSpi1Write>
  }
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <vPaDacInit>:
  * @brief Enables the +20dBm option on PA_BOOST pin Initialization
  * @param ucPaDac: Pa Dac Value
  * @retval None
  */
void vPaDacInit(uint8_t ucPaDac)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  uint8_t ucData = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
  ucData = ucSpi1Read(RegPaDac);
 8001c4c:	204d      	movs	r0, #77	; 0x4d
 8001c4e:	f7ff fc6f 	bl	8001530 <ucSpi1Read>
 8001c52:	4603      	mov	r3, r0
 8001c54:	73fb      	strb	r3, [r7, #15]
  ucData &= 0xF8;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	f023 0307 	bic.w	r3, r3, #7
 8001c5c:	73fb      	strb	r3, [r7, #15]
  if (ucPaDac == 4u || ucPaDac == 7u)
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d002      	beq.n	8001c6a <vPaDacInit+0x2c>
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2b07      	cmp	r3, #7
 8001c68:	d108      	bne.n	8001c7c <vPaDacInit+0x3e>
  {
    ucData |= ucPaDac;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	73fb      	strb	r3, [r7, #15]
    vSpi1Write(RegPaDac, ucData);
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	4619      	mov	r1, r3
 8001c76:	204d      	movs	r0, #77	; 0x4d
 8001c78:	f7ff fbf2 	bl	8001460 <vSpi1Write>
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <vLoraInit>:
  * @brief Lora Module Initialization
  * @param: None
  * @retval: None
  */
void vLoraInit(LoraConf_t* LoraInit)
{
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c86:	b095      	sub	sp, #84	; 0x54
 8001c88:	af0e      	add	r7, sp, #56	; 0x38
 8001c8a:	60f8      	str	r0, [r7, #12]

  STM_LOGD("LoRa", "LoRa init");
 8001c8c:	f001 fb7e 	bl	800338c <HAL_GetTick>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f240 424b 	movw	r2, #1099	; 0x44b
 8001c96:	9202      	str	r2, [sp, #8]
 8001c98:	4a73      	ldr	r2, [pc, #460]	; (8001e68 <vLoraInit+0x1e4>)
 8001c9a:	9201      	str	r2, [sp, #4]
 8001c9c:	4a73      	ldr	r2, [pc, #460]	; (8001e6c <vLoraInit+0x1e8>)
 8001c9e:	9200      	str	r2, [sp, #0]
 8001ca0:	4a73      	ldr	r2, [pc, #460]	; (8001e70 <vLoraInit+0x1ec>)
 8001ca2:	4972      	ldr	r1, [pc, #456]	; (8001e6c <vLoraInit+0x1e8>)
 8001ca4:	2004      	movs	r0, #4
 8001ca6:	f001 fa59 	bl	800315c <stm_log_write>

  vLongRangeModeInit(LORA_MODE); /*  Init Module Lora into Lora TM Mode */
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7ff fcd4 	bl	8001658 <vLongRangeModeInit>
  // LORA_GET_REGISTER(RegOpMode);

  vModeInit(STDBY_MODE);                              /* Init Module Lora into Standby Mode */
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f7ff fd49 	bl	8001748 <vModeInit>
  vAccessSharedRegInit(LoraInit->Access_Shared_Reg);        /* Access LoRa registers page 0x0D: 0x3F */
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fcf6 	bl	80016ac <vAccessSharedRegInit>
  vLowFrequencyModeOnInit(LoraInit->Access_Frequence_Mode); /* Access Low Frequency Mode registers */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	785b      	ldrb	r3, [r3, #1]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fd18 	bl	80016fa <vLowFrequencyModeOnInit>
  // LORA_GET_REGISTER(RegOpMode);

  vFrfInit(LoraInit->Rf_Frequency); /*  Init RF carrier frequency */
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fd90 	bl	80017f4 <vFrfInit>
  // LORA_GET_REGISTER(RegFrfMsb);
  // LORA_GET_REGISTER(RegFrfMid);
  // LORA_GET_REGISTER(RegFrfLsb);

  vPaSelectInit(LoraInit->Pa_Select); /* Output power is limited to +20 dBm */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	7a1b      	ldrb	r3, [r3, #8]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fda7 	bl	800182c <vPaSelectInit>
  // vMaxPowerInit(MAX_POWER);
  vOutputPowerInit(LoraInit->Output_Power); /* Pout=17-(15-OutputPower) */
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	7a5b      	ldrb	r3, [r3, #9]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fdc9 	bl	800187a <vOutputPowerInit>
  // LORA_GET_REGISTER(RegPaConfig);

  vPaRampInit(PA_RAMP);
 8001ce8:	2008      	movs	r0, #8
 8001cea:	f7ff fde6 	bl	80018ba <vPaRampInit>
  // LORA_GET_REGISTER(RegPaRamp);

  // vOcpOnInit(OCP_ON); /* OCP enabled */
  vOcpTrimInit(LoraInit->Ocp_Strim); /* Trimming of OCP current: Imax = 240mA */
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	7a9b      	ldrb	r3, [r3, #10]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fe01 	bl	80018fa <vOcpTrimInit>
  // LORA_GET_REGISTER(RegLna);
  // vLnaBoostLfInit(LNA_BOOST_LF); /* Low Frequency (RFI_LF) LNA current adjustment Default LNA current */
  // vLnaBoostHfInit(LNA_BOOST_HF); /* High Frequency (RFI_HF) LNA current adjustment Boost on, 150% LNA current */
  // LORA_GET_REGISTER(RegLna);

  vFifoTxBaseAddrInit(LoraInit->Fifo_Tx_Base_Addr); /* Write base address in FIFO data buffer for TX modulator */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	7adb      	ldrb	r3, [r3, #11]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fe1c 	bl	800193a <vFifoTxBaseAddrInit>
  // LORA_GET_REGISTER(RegFifoTxBaseAddr);

  vFifoRxBaseAddrInit(LoraInit->Fifo_Rx_Base_Addr); /* Read base address in FIFO data buffer for RX demodulator */
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	7b1b      	ldrb	r3, [r3, #12]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fe25 	bl	8001956 <vFifoRxBaseAddrInit>

  // vIrqFlagsMaskInit(IRQ_FLAGS_MASK); /* Disable all interrupts mask */
  // LORA_GET_REGISTER(RegIrqFlagsMask);

  // vBandWidthInit(BANDWIDTH_125K); /*  Signal bandwidth: BANDWIDTH_125K */
  vCodingRateInit(LoraInit->Coding_Rate); /* ANCHOR Error coding rate 4/5 */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	7b5b      	ldrb	r3, [r3, #13]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fe52 	bl	80019ba <vCodingRateInit>

  vBandWidthInit(LoraInit->Band_Width);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	7b9b      	ldrb	r3, [r3, #14]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fe29 	bl	8001972 <vBandWidthInit>
  // vCodingRateInit(CODING_RATE_4_5);
  vImplicitHeaderModeOnInit(LoraInit->Header_Mode); /* ANCHOR Init Implicit Header mode */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	7bdb      	ldrb	r3, [r3, #15]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fe6f 	bl	8001a08 <vImplicitHeaderModeOnInit>
  // LORA_GET_REGISTER(RegModemConfig1);

  vSpreadingFactorInit(LoraInit->Spreading_Factor); /* ANCHOR SF rate 64 chips / symbol */
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	7c1b      	ldrb	r3, [r3, #16]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fe8d 	bl	8001a4e <vSpreadingFactorInit>
  // LORA_GET_REGISTER(RegModemConfig2);
  // vTxContinuousModeInit(TX_SINGLE); /* ANCHOR Normal mode, a single packet is sent */
  vRxPayloadCrcOnInit(LoraInit->Rx_Payload_Crc); /* ANCHOR Enable CRC generation and check on payload */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	7c5b      	ldrb	r3, [r3, #17]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff feaf 	bl	8001a9c <vRxPayloadCrcOnInit>

  // vSymbTimeoutInit(RX_TIMEOUT); /* ANCHOR RX operation time-out */
  // // LORA_GET_REGISTER(RegModemConfig2);
  // // LORA_GET_REGISTER(RegSymbTimeoutLsb);

  vPreambleLengthInit(LoraInit->Preamble_Length); /* ANCHOR Preamble length = PreambleLength + 4.25 Symbols */
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8a5b      	ldrh	r3, [r3, #18]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fed1 	bl	8001aea <vPreambleLengthInit>
  // // LORA_GET_REGISTER(RegPreambleMsb);
  // // LORA_GET_REGISTER(RegPreambleLsb);

  vPayloadLengthInit(LoraInit->Payload_Length); /*  Init Payload length */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	7d1b      	ldrb	r3, [r3, #20]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fee3 	bl	8001b18 <vPayloadLengthInit>
  // // LORA_GET_REGISTER(RegMaxPayloadLength);

  // vFreqHoppingPeriodInit(FREQ_HOPPING_PERIOD); /* Symbol periods between frequency hops */
  // // LORA_GET_REGISTER(RegHopPeriod);

  vLowDataRateOptimizeInit(LOW_DATA_RATE_OPTIMIZE); /* Enabled; mandated for when the symbol length exceeds16ms */
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7ff feee 	bl	8001b34 <vLowDataRateOptimizeInit>





  vDetectionOptimizeInit(LoraInit->Detection_Optimize); /* LoRa Detection Optimize 0x03 -> SF7 to SF12; 0x05 -> SF6 */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	7d5b      	ldrb	r3, [r3, #21]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff10 	bl	8001b82 <vDetectionOptimizeInit>





  vDetectionThresholdInit(LoraInit->Detection_Threshold); /* ANCHOR LoRa detection threshold 0x0A -> SF7 to SF12; 0x0C -> SF6 */
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	7d9b      	ldrb	r3, [r3, #22]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff2e 	bl	8001bc8 <vDetectionThresholdInit>

  // vMapPreambleDetect(PREAMBBLE_DETECT_INTERRUPT);
  // // LORA_GET_REGISTER(RegTcxo);
  // printf("RegTcxo = 0x%x\r\n", ucData);

  vTcxoInputOnInit(LoraInit->Crystal_Oscillator); /* ANCHOR Controls the crystal oscillator */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	7ddb      	ldrb	r3, [r3, #23]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff3d 	bl	8001bf0 <vTcxoInputOnInit>
  // LORA_GET_REGISTER(RegTcxo);

  vPaDacInit(LoraInit->Pa_Dac); /* Enables the +20dBm option on PA_BOOST pin */
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	7e1b      	ldrb	r3, [r3, #24]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff5f 	bl	8001c3e <vPaDacInit>
  // LORA_GET_REGISTER(RegPaDac);
  // LORA_GET_REGISTER(RegLna);
  // LORA_GET_REGISTER(RegVersion);
  // LORA_GET_REGISTER(RegOpMode);
  LORA_GET_REGISTER(RegVersion);
 8001d80:	2042      	movs	r0, #66	; 0x42
 8001d82:	f7ff fbd5 	bl	8001530 <ucSpi1Read>
 8001d86:	4603      	mov	r3, r0
 8001d88:	75fb      	strb	r3, [r7, #23]
 8001d8a:	f001 faff 	bl	800338c <HAL_GetTick>
 8001d8e:	4686      	mov	lr, r0
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001d98:	2a00      	cmp	r2, #0
 8001d9a:	da01      	bge.n	8001da0 <vLoraInit+0x11c>
 8001d9c:	2231      	movs	r2, #49	; 0x31
 8001d9e:	e000      	b.n	8001da2 <vLoraInit+0x11e>
 8001da0:	2230      	movs	r2, #48	; 0x30
 8001da2:	7df9      	ldrb	r1, [r7, #23]
 8001da4:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8001da8:	2900      	cmp	r1, #0
 8001daa:	d001      	beq.n	8001db0 <vLoraInit+0x12c>
 8001dac:	2131      	movs	r1, #49	; 0x31
 8001dae:	e000      	b.n	8001db2 <vLoraInit+0x12e>
 8001db0:	2130      	movs	r1, #48	; 0x30
 8001db2:	7df8      	ldrb	r0, [r7, #23]
 8001db4:	f000 0020 	and.w	r0, r0, #32
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d001      	beq.n	8001dc0 <vLoraInit+0x13c>
 8001dbc:	2031      	movs	r0, #49	; 0x31
 8001dbe:	e000      	b.n	8001dc2 <vLoraInit+0x13e>
 8001dc0:	2030      	movs	r0, #48	; 0x30
 8001dc2:	7dfc      	ldrb	r4, [r7, #23]
 8001dc4:	f004 0410 	and.w	r4, r4, #16
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d001      	beq.n	8001dd0 <vLoraInit+0x14c>
 8001dcc:	2431      	movs	r4, #49	; 0x31
 8001dce:	e000      	b.n	8001dd2 <vLoraInit+0x14e>
 8001dd0:	2430      	movs	r4, #48	; 0x30
 8001dd2:	7dfd      	ldrb	r5, [r7, #23]
 8001dd4:	f005 0508 	and.w	r5, r5, #8
 8001dd8:	2d00      	cmp	r5, #0
 8001dda:	d001      	beq.n	8001de0 <vLoraInit+0x15c>
 8001ddc:	2531      	movs	r5, #49	; 0x31
 8001dde:	e000      	b.n	8001de2 <vLoraInit+0x15e>
 8001de0:	2530      	movs	r5, #48	; 0x30
 8001de2:	7dfe      	ldrb	r6, [r7, #23]
 8001de4:	f006 0604 	and.w	r6, r6, #4
 8001de8:	2e00      	cmp	r6, #0
 8001dea:	d001      	beq.n	8001df0 <vLoraInit+0x16c>
 8001dec:	2631      	movs	r6, #49	; 0x31
 8001dee:	e000      	b.n	8001df2 <vLoraInit+0x16e>
 8001df0:	2630      	movs	r6, #48	; 0x30
 8001df2:	f897 c017 	ldrb.w	ip, [r7, #23]
 8001df6:	f00c 0c02 	and.w	ip, ip, #2
 8001dfa:	f1bc 0f00 	cmp.w	ip, #0
 8001dfe:	d002      	beq.n	8001e06 <vLoraInit+0x182>
 8001e00:	2331      	movs	r3, #49	; 0x31
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	e001      	b.n	8001e0a <vLoraInit+0x186>
 8001e06:	2330      	movs	r3, #48	; 0x30
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	f897 c017 	ldrb.w	ip, [r7, #23]
 8001e0e:	f00c 0c01 	and.w	ip, ip, #1
 8001e12:	f1bc 0f00 	cmp.w	ip, #0
 8001e16:	d001      	beq.n	8001e1c <vLoraInit+0x198>
 8001e18:	2331      	movs	r3, #49	; 0x31
 8001e1a:	e000      	b.n	8001e1e <vLoraInit+0x19a>
 8001e1c:	2330      	movs	r3, #48	; 0x30
 8001e1e:	930c      	str	r3, [sp, #48]	; 0x30
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e24:	960a      	str	r6, [sp, #40]	; 0x28
 8001e26:	9509      	str	r5, [sp, #36]	; 0x24
 8001e28:	9408      	str	r4, [sp, #32]
 8001e2a:	9007      	str	r0, [sp, #28]
 8001e2c:	9106      	str	r1, [sp, #24]
 8001e2e:	9205      	str	r2, [sp, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	9304      	str	r3, [sp, #16]
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <vLoraInit+0x1f0>)
 8001e36:	9303      	str	r3, [sp, #12]
 8001e38:	f240 43d5 	movw	r3, #1237	; 0x4d5
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <vLoraInit+0x1e4>)
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <vLoraInit+0x1f4>)
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	4673      	mov	r3, lr
 8001e48:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <vLoraInit+0x1f8>)
 8001e4a:	490b      	ldr	r1, [pc, #44]	; (8001e78 <vLoraInit+0x1f4>)
 8001e4c:	2005      	movs	r0, #5
 8001e4e:	f001 f985 	bl	800315c <stm_log_write>
  // LORA_GET_REGISTER(0x3B);
  // vSpi1Write(0x3B, 0xAA);
  // LORA_GET_REGISTER(0x3B);
  /* Reset Rx Pointer */
  vModeInit(STDBY_MODE);
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff fc78 	bl	8001748 <vModeInit>
  vModeInit(RXCONTINUOUS_MODE);
 8001e58:	2005      	movs	r0, #5
 8001e5a:	f7ff fc75 	bl	8001748 <vModeInit>
  // LORA_GET_REGISTER(RegOpMode);

}
 8001e5e:	bf00      	nop
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e66:	bf00      	nop
 8001e68:	0800d6ac 	.word	0x0800d6ac
 8001e6c:	0800c9e0 	.word	0x0800c9e0
 8001e70:	0800ca3c 	.word	0x0800ca3c
 8001e74:	0800cab0 	.word	0x0800cab0
 8001e78:	0800caa8 	.word	0x0800caa8
 8001e7c:	0800ca6c 	.word	0x0800ca6c

08001e80 <LoRaTransmit>:
{
  return (ucSpi1Read(RegModemConfig2) & SPREADING_FACTOR_Msk) >> SPREADING_FACTOR_MskPos;
}

void LoRaTransmit(uint8_t* data, uint8_t size, uint32_t timeoutMs)
{
 8001e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e82:	b09b      	sub	sp, #108	; 0x6c
 8001e84:	af0e      	add	r7, sp, #56	; 0x38
 8001e86:	6178      	str	r0, [r7, #20]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	60fa      	str	r2, [r7, #12]
 8001e8c:	74fb      	strb	r3, [r7, #19]
  bool isTransmitOk = true;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  vModeInit(STDBY_MODE);
 8001e94:	2001      	movs	r0, #1
 8001e96:	f7ff fc57 	bl	8001748 <vModeInit>
LORA_GET_REGISTER(RegOpMode);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f7ff fb48 	bl	8001530 <ucSpi1Read>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ea6:	f001 fa71 	bl	800338c <HAL_GetTick>
 8001eaa:	4686      	mov	lr, r0
 8001eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8001eb6:	2a00      	cmp	r2, #0
 8001eb8:	da01      	bge.n	8001ebe <LoRaTransmit+0x3e>
 8001eba:	2231      	movs	r2, #49	; 0x31
 8001ebc:	e000      	b.n	8001ec0 <LoRaTransmit+0x40>
 8001ebe:	2230      	movs	r2, #48	; 0x30
 8001ec0:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8001ec4:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	d001      	beq.n	8001ed0 <LoRaTransmit+0x50>
 8001ecc:	2131      	movs	r1, #49	; 0x31
 8001ece:	e000      	b.n	8001ed2 <LoRaTransmit+0x52>
 8001ed0:	2130      	movs	r1, #48	; 0x30
 8001ed2:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8001ed6:	f000 0020 	and.w	r0, r0, #32
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d001      	beq.n	8001ee2 <LoRaTransmit+0x62>
 8001ede:	2031      	movs	r0, #49	; 0x31
 8001ee0:	e000      	b.n	8001ee4 <LoRaTransmit+0x64>
 8001ee2:	2030      	movs	r0, #48	; 0x30
 8001ee4:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8001ee8:	f004 0410 	and.w	r4, r4, #16
 8001eec:	2c00      	cmp	r4, #0
 8001eee:	d001      	beq.n	8001ef4 <LoRaTransmit+0x74>
 8001ef0:	2431      	movs	r4, #49	; 0x31
 8001ef2:	e000      	b.n	8001ef6 <LoRaTransmit+0x76>
 8001ef4:	2430      	movs	r4, #48	; 0x30
 8001ef6:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8001efa:	f005 0508 	and.w	r5, r5, #8
 8001efe:	2d00      	cmp	r5, #0
 8001f00:	d001      	beq.n	8001f06 <LoRaTransmit+0x86>
 8001f02:	2531      	movs	r5, #49	; 0x31
 8001f04:	e000      	b.n	8001f08 <LoRaTransmit+0x88>
 8001f06:	2530      	movs	r5, #48	; 0x30
 8001f08:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8001f0c:	f006 0604 	and.w	r6, r6, #4
 8001f10:	2e00      	cmp	r6, #0
 8001f12:	d001      	beq.n	8001f18 <LoRaTransmit+0x98>
 8001f14:	2631      	movs	r6, #49	; 0x31
 8001f16:	e000      	b.n	8001f1a <LoRaTransmit+0x9a>
 8001f18:	2630      	movs	r6, #48	; 0x30
 8001f1a:	f897 c027 	ldrb.w	ip, [r7, #39]	; 0x27
 8001f1e:	f00c 0c02 	and.w	ip, ip, #2
 8001f22:	f1bc 0f00 	cmp.w	ip, #0
 8001f26:	d002      	beq.n	8001f2e <LoRaTransmit+0xae>
 8001f28:	2331      	movs	r3, #49	; 0x31
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	e001      	b.n	8001f32 <LoRaTransmit+0xb2>
 8001f2e:	2330      	movs	r3, #48	; 0x30
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	f897 c027 	ldrb.w	ip, [r7, #39]	; 0x27
 8001f36:	f00c 0c01 	and.w	ip, ip, #1
 8001f3a:	f1bc 0f00 	cmp.w	ip, #0
 8001f3e:	d001      	beq.n	8001f44 <LoRaTransmit+0xc4>
 8001f40:	2331      	movs	r3, #49	; 0x31
 8001f42:	e000      	b.n	8001f46 <LoRaTransmit+0xc6>
 8001f44:	2330      	movs	r3, #48	; 0x30
 8001f46:	930c      	str	r3, [sp, #48]	; 0x30
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f4c:	960a      	str	r6, [sp, #40]	; 0x28
 8001f4e:	9509      	str	r5, [sp, #36]	; 0x24
 8001f50:	9408      	str	r4, [sp, #32]
 8001f52:	9007      	str	r0, [sp, #28]
 8001f54:	9106      	str	r1, [sp, #24]
 8001f56:	9205      	str	r2, [sp, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	9304      	str	r3, [sp, #16]
 8001f5c:	4b9f      	ldr	r3, [pc, #636]	; (80021dc <LoRaTransmit+0x35c>)
 8001f5e:	9303      	str	r3, [sp, #12]
 8001f60:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8001f64:	9302      	str	r3, [sp, #8]
 8001f66:	4b9e      	ldr	r3, [pc, #632]	; (80021e0 <LoRaTransmit+0x360>)
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	4b9e      	ldr	r3, [pc, #632]	; (80021e4 <LoRaTransmit+0x364>)
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	4673      	mov	r3, lr
 8001f70:	4a9d      	ldr	r2, [pc, #628]	; (80021e8 <LoRaTransmit+0x368>)
 8001f72:	499c      	ldr	r1, [pc, #624]	; (80021e4 <LoRaTransmit+0x364>)
 8001f74:	2005      	movs	r0, #5
 8001f76:	f001 f8f1 	bl	800315c <stm_log_write>

  /* STANDBY MODE */
  vSpi1Write(RegFifoAddrPtr, FIFO_TX_BASE_ADDR); /* Set FifoPtrAddr to FifoTxPtrBase */
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	200d      	movs	r0, #13
 8001f7e:	f7ff fa6f 	bl	8001460 <vSpi1Write>
  /* WRITE DATA FIFO */
  for (size_t i = 0u; i < size; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f86:	e0c9      	b.n	800211c <LoRaTransmit+0x29c>
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	3b02      	subs	r3, #2
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	f200 80a3 	bhi.w	80020d8 <LoRaTransmit+0x258>
 8001f92:	a201      	add	r2, pc, #4	; (adr r2, 8001f98 <LoRaTransmit+0x118>)
 8001f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f98:	08001fb1 	.word	0x08001fb1
 8001f9c:	08001ffb 	.word	0x08001ffb
 8001fa0:	080020d9 	.word	0x080020d9
 8001fa4:	080020d9 	.word	0x080020d9
 8001fa8:	08002045 	.word	0x08002045
 8001fac:	0800208f 	.word	0x0800208f
  {
    switch (i) {
    case INDEX_MSG_TYPE:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_MSG_TYPE(*(data + i)));
 8001fb0:	f001 f9ec 	bl	800338c <HAL_GetTick>
 8001fb4:	4601      	mov	r1, r0
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	4413      	add	r3, r2
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <LoRaTransmit+0x156>
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc6:	4413      	add	r3, r2
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <LoRaTransmit+0x152>
 8001fce:	4b87      	ldr	r3, [pc, #540]	; (80021ec <LoRaTransmit+0x36c>)
 8001fd0:	e002      	b.n	8001fd8 <LoRaTransmit+0x158>
 8001fd2:	4b87      	ldr	r3, [pc, #540]	; (80021f0 <LoRaTransmit+0x370>)
 8001fd4:	e000      	b.n	8001fd8 <LoRaTransmit+0x158>
 8001fd6:	4b87      	ldr	r3, [pc, #540]	; (80021f4 <LoRaTransmit+0x374>)
 8001fd8:	9304      	str	r3, [sp, #16]
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	9303      	str	r3, [sp, #12]
 8001fde:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 8001fe2:	9302      	str	r3, [sp, #8]
 8001fe4:	4b7e      	ldr	r3, [pc, #504]	; (80021e0 <LoRaTransmit+0x360>)
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	4b83      	ldr	r3, [pc, #524]	; (80021f8 <LoRaTransmit+0x378>)
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	4a83      	ldr	r2, [pc, #524]	; (80021fc <LoRaTransmit+0x37c>)
 8001ff0:	4981      	ldr	r1, [pc, #516]	; (80021f8 <LoRaTransmit+0x378>)
 8001ff2:	2005      	movs	r0, #5
 8001ff4:	f001 f8b2 	bl	800315c <stm_log_write>
      break;
 8001ff8:	e085      	b.n	8002106 <LoRaTransmit+0x286>
    case INDEX_MSG_STATUS:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_MSG_STS(*(data + i)));
 8001ffa:	f001 f9c7 	bl	800338c <HAL_GetTick>
 8001ffe:	4601      	mov	r1, r0
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	4413      	add	r3, r2
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d009      	beq.n	8002020 <LoRaTransmit+0x1a0>
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	4413      	add	r3, r2
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <LoRaTransmit+0x19c>
 8002018:	4b79      	ldr	r3, [pc, #484]	; (8002200 <LoRaTransmit+0x380>)
 800201a:	e002      	b.n	8002022 <LoRaTransmit+0x1a2>
 800201c:	4b79      	ldr	r3, [pc, #484]	; (8002204 <LoRaTransmit+0x384>)
 800201e:	e000      	b.n	8002022 <LoRaTransmit+0x1a2>
 8002020:	4b79      	ldr	r3, [pc, #484]	; (8002208 <LoRaTransmit+0x388>)
 8002022:	9304      	str	r3, [sp, #16]
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	9303      	str	r3, [sp, #12]
 8002028:	f240 530b 	movw	r3, #1291	; 0x50b
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	4b6c      	ldr	r3, [pc, #432]	; (80021e0 <LoRaTransmit+0x360>)
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	4b71      	ldr	r3, [pc, #452]	; (80021f8 <LoRaTransmit+0x378>)
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	460b      	mov	r3, r1
 8002038:	4a70      	ldr	r2, [pc, #448]	; (80021fc <LoRaTransmit+0x37c>)
 800203a:	496f      	ldr	r1, [pc, #444]	; (80021f8 <LoRaTransmit+0x378>)
 800203c:	2005      	movs	r0, #5
 800203e:	f001 f88d 	bl	800315c <stm_log_write>
      break;
 8002042:	e060      	b.n	8002106 <LoRaTransmit+0x286>
    case INDEX_DATA_RELAY_STATE:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_RELAY(*(data + i)));
 8002044:	f001 f9a2 	bl	800338c <HAL_GetTick>
 8002048:	4601      	mov	r1, r0
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	4413      	add	r3, r2
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <LoRaTransmit+0x1ea>
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205a:	4413      	add	r3, r2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <LoRaTransmit+0x1e6>
 8002062:	4b6a      	ldr	r3, [pc, #424]	; (800220c <LoRaTransmit+0x38c>)
 8002064:	e002      	b.n	800206c <LoRaTransmit+0x1ec>
 8002066:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <LoRaTransmit+0x390>)
 8002068:	e000      	b.n	800206c <LoRaTransmit+0x1ec>
 800206a:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <LoRaTransmit+0x394>)
 800206c:	9304      	str	r3, [sp, #16]
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	9303      	str	r3, [sp, #12]
 8002072:	f240 530e 	movw	r3, #1294	; 0x50e
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <LoRaTransmit+0x360>)
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	4b5e      	ldr	r3, [pc, #376]	; (80021f8 <LoRaTransmit+0x378>)
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	460b      	mov	r3, r1
 8002082:	4a5e      	ldr	r2, [pc, #376]	; (80021fc <LoRaTransmit+0x37c>)
 8002084:	495c      	ldr	r1, [pc, #368]	; (80021f8 <LoRaTransmit+0x378>)
 8002086:	2005      	movs	r0, #5
 8002088:	f001 f868 	bl	800315c <stm_log_write>
      break;
 800208c:	e03b      	b.n	8002106 <LoRaTransmit+0x286>
    case INDEX_DATA_ERR_CODE:
      STM_LOGV("LoRaTX", "data transmit[%d]: %s", i, WHICH_RELAY_ERR(*(data + i)));
 800208e:	f001 f97d 	bl	800338c <HAL_GetTick>
 8002092:	4601      	mov	r1, r0
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	4413      	add	r3, r2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d009      	beq.n	80020b4 <LoRaTransmit+0x234>
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <LoRaTransmit+0x230>
 80020ac:	4b5a      	ldr	r3, [pc, #360]	; (8002218 <LoRaTransmit+0x398>)
 80020ae:	e002      	b.n	80020b6 <LoRaTransmit+0x236>
 80020b0:	4b5a      	ldr	r3, [pc, #360]	; (800221c <LoRaTransmit+0x39c>)
 80020b2:	e000      	b.n	80020b6 <LoRaTransmit+0x236>
 80020b4:	4b5a      	ldr	r3, [pc, #360]	; (8002220 <LoRaTransmit+0x3a0>)
 80020b6:	9304      	str	r3, [sp, #16]
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	9303      	str	r3, [sp, #12]
 80020bc:	f240 5311 	movw	r3, #1297	; 0x511
 80020c0:	9302      	str	r3, [sp, #8]
 80020c2:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <LoRaTransmit+0x360>)
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <LoRaTransmit+0x378>)
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	460b      	mov	r3, r1
 80020cc:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <LoRaTransmit+0x37c>)
 80020ce:	494a      	ldr	r1, [pc, #296]	; (80021f8 <LoRaTransmit+0x378>)
 80020d0:	2005      	movs	r0, #5
 80020d2:	f001 f843 	bl	800315c <stm_log_write>
      break;
 80020d6:	e016      	b.n	8002106 <LoRaTransmit+0x286>
    default:
      STM_LOGV("LoRaTX", "data transmit[%d]: %d", i, *(data + i));
 80020d8:	f001 f958 	bl	800338c <HAL_GetTick>
 80020dc:	4601      	mov	r1, r0
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e2:	4413      	add	r3, r2
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	9304      	str	r3, [sp, #16]
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	9303      	str	r3, [sp, #12]
 80020ec:	f240 5314 	movw	r3, #1300	; 0x514
 80020f0:	9302      	str	r3, [sp, #8]
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <LoRaTransmit+0x360>)
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	4b40      	ldr	r3, [pc, #256]	; (80021f8 <LoRaTransmit+0x378>)
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	460b      	mov	r3, r1
 80020fc:	4a49      	ldr	r2, [pc, #292]	; (8002224 <LoRaTransmit+0x3a4>)
 80020fe:	493e      	ldr	r1, [pc, #248]	; (80021f8 <LoRaTransmit+0x378>)
 8002100:	2005      	movs	r0, #5
 8002102:	f001 f82b 	bl	800315c <stm_log_write>
    }

    vSpi1Write(RegFifo, *(data + i));
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	4413      	add	r3, r2
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	4619      	mov	r1, r3
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff f9a5 	bl	8001460 <vSpi1Write>
  for (size_t i = 0u; i < size; i++)
 8002116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002118:	3301      	adds	r3, #1
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002120:	429a      	cmp	r2, r3
 8002122:	f4ff af31 	bcc.w	8001f88 <LoRaTransmit+0x108>
  }
  /* MODE REQUEST TX */
  HAL_Delay(10);
 8002126:	200a      	movs	r0, #10
 8002128:	f001 f93a 	bl	80033a0 <HAL_Delay>
  vModeInit(TX_MODE);
 800212c:	2003      	movs	r0, #3
 800212e:	f7ff fb0b 	bl	8001748 <vModeInit>
  LORA_GET_REGISTER(RegOpMode);
 8002132:	2001      	movs	r0, #1
 8002134:	f7ff f9fc 	bl	8001530 <ucSpi1Read>
 8002138:	4603      	mov	r3, r0
 800213a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800213e:	f001 f925 	bl	800338c <HAL_GetTick>
 8002142:	4686      	mov	lr, r0
 8002144:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 800214e:	2a00      	cmp	r2, #0
 8002150:	da01      	bge.n	8002156 <LoRaTransmit+0x2d6>
 8002152:	2231      	movs	r2, #49	; 0x31
 8002154:	e000      	b.n	8002158 <LoRaTransmit+0x2d8>
 8002156:	2230      	movs	r2, #48	; 0x30
 8002158:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800215c:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8002160:	2900      	cmp	r1, #0
 8002162:	d001      	beq.n	8002168 <LoRaTransmit+0x2e8>
 8002164:	2131      	movs	r1, #49	; 0x31
 8002166:	e000      	b.n	800216a <LoRaTransmit+0x2ea>
 8002168:	2130      	movs	r1, #48	; 0x30
 800216a:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800216e:	f000 0020 	and.w	r0, r0, #32
 8002172:	2800      	cmp	r0, #0
 8002174:	d001      	beq.n	800217a <LoRaTransmit+0x2fa>
 8002176:	2031      	movs	r0, #49	; 0x31
 8002178:	e000      	b.n	800217c <LoRaTransmit+0x2fc>
 800217a:	2030      	movs	r0, #48	; 0x30
 800217c:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8002180:	f004 0410 	and.w	r4, r4, #16
 8002184:	2c00      	cmp	r4, #0
 8002186:	d001      	beq.n	800218c <LoRaTransmit+0x30c>
 8002188:	2431      	movs	r4, #49	; 0x31
 800218a:	e000      	b.n	800218e <LoRaTransmit+0x30e>
 800218c:	2430      	movs	r4, #48	; 0x30
 800218e:	f897 5026 	ldrb.w	r5, [r7, #38]	; 0x26
 8002192:	f005 0508 	and.w	r5, r5, #8
 8002196:	2d00      	cmp	r5, #0
 8002198:	d001      	beq.n	800219e <LoRaTransmit+0x31e>
 800219a:	2531      	movs	r5, #49	; 0x31
 800219c:	e000      	b.n	80021a0 <LoRaTransmit+0x320>
 800219e:	2530      	movs	r5, #48	; 0x30
 80021a0:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
 80021a4:	f006 0604 	and.w	r6, r6, #4
 80021a8:	2e00      	cmp	r6, #0
 80021aa:	d001      	beq.n	80021b0 <LoRaTransmit+0x330>
 80021ac:	2631      	movs	r6, #49	; 0x31
 80021ae:	e000      	b.n	80021b2 <LoRaTransmit+0x332>
 80021b0:	2630      	movs	r6, #48	; 0x30
 80021b2:	f897 c026 	ldrb.w	ip, [r7, #38]	; 0x26
 80021b6:	f00c 0c02 	and.w	ip, ip, #2
 80021ba:	f1bc 0f00 	cmp.w	ip, #0
 80021be:	d002      	beq.n	80021c6 <LoRaTransmit+0x346>
 80021c0:	2331      	movs	r3, #49	; 0x31
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	e001      	b.n	80021ca <LoRaTransmit+0x34a>
 80021c6:	2330      	movs	r3, #48	; 0x30
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	f897 c026 	ldrb.w	ip, [r7, #38]	; 0x26
 80021ce:	f00c 0c01 	and.w	ip, ip, #1
 80021d2:	f1bc 0f00 	cmp.w	ip, #0
 80021d6:	d027      	beq.n	8002228 <LoRaTransmit+0x3a8>
 80021d8:	2331      	movs	r3, #49	; 0x31
 80021da:	e026      	b.n	800222a <LoRaTransmit+0x3aa>
 80021dc:	0800cabc 	.word	0x0800cabc
 80021e0:	0800d6b8 	.word	0x0800d6b8
 80021e4:	0800caa8 	.word	0x0800caa8
 80021e8:	0800ca6c 	.word	0x0800ca6c
 80021ec:	0800cac8 	.word	0x0800cac8
 80021f0:	0800cad4 	.word	0x0800cad4
 80021f4:	0800cadc 	.word	0x0800cadc
 80021f8:	0800cb18 	.word	0x0800cb18
 80021fc:	0800cae4 	.word	0x0800cae4
 8002200:	0800cb20 	.word	0x0800cb20
 8002204:	0800cb30 	.word	0x0800cb30
 8002208:	0800cb40 	.word	0x0800cb40
 800220c:	0800cb4c 	.word	0x0800cb4c
 8002210:	0800cb58 	.word	0x0800cb58
 8002214:	0800cb68 	.word	0x0800cb68
 8002218:	0800cb74 	.word	0x0800cb74
 800221c:	0800cb80 	.word	0x0800cb80
 8002220:	0800cb8c 	.word	0x0800cb8c
 8002224:	0800cb98 	.word	0x0800cb98
 8002228:	2330      	movs	r3, #48	; 0x30
 800222a:	930c      	str	r3, [sp, #48]	; 0x30
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002230:	960a      	str	r6, [sp, #40]	; 0x28
 8002232:	9509      	str	r5, [sp, #36]	; 0x24
 8002234:	9408      	str	r4, [sp, #32]
 8002236:	9007      	str	r0, [sp, #28]
 8002238:	9106      	str	r1, [sp, #24]
 800223a:	9205      	str	r2, [sp, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	9304      	str	r3, [sp, #16]
 8002240:	4b66      	ldr	r3, [pc, #408]	; (80023dc <LoRaTransmit+0x55c>)
 8002242:	9303      	str	r3, [sp, #12]
 8002244:	f240 531c 	movw	r3, #1308	; 0x51c
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	4b65      	ldr	r3, [pc, #404]	; (80023e0 <LoRaTransmit+0x560>)
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <LoRaTransmit+0x564>)
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	4673      	mov	r3, lr
 8002254:	4a64      	ldr	r2, [pc, #400]	; (80023e8 <LoRaTransmit+0x568>)
 8002256:	4963      	ldr	r1, [pc, #396]	; (80023e4 <LoRaTransmit+0x564>)
 8002258:	2005      	movs	r0, #5
 800225a:	f000 ff7f 	bl	800315c <stm_log_write>
  uint32_t startTick = HAL_GetTick();
 800225e:	f001 f895 	bl	800338c <HAL_GetTick>
 8002262:	6238      	str	r0, [r7, #32]
  STM_LOGV("LoRaTX", "Wait for TX_DONE ...\r\n");
 8002264:	f001 f892 	bl	800338c <HAL_GetTick>
 8002268:	4603      	mov	r3, r0
 800226a:	f240 521e 	movw	r2, #1310	; 0x51e
 800226e:	9202      	str	r2, [sp, #8]
 8002270:	4a5b      	ldr	r2, [pc, #364]	; (80023e0 <LoRaTransmit+0x560>)
 8002272:	9201      	str	r2, [sp, #4]
 8002274:	4a5d      	ldr	r2, [pc, #372]	; (80023ec <LoRaTransmit+0x56c>)
 8002276:	9200      	str	r2, [sp, #0]
 8002278:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <LoRaTransmit+0x570>)
 800227a:	495c      	ldr	r1, [pc, #368]	; (80023ec <LoRaTransmit+0x56c>)
 800227c:	2005      	movs	r0, #5
 800227e:	f000 ff6d 	bl	800315c <stm_log_write>
  while ((ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos == 0u)
 8002282:	e083      	b.n	800238c <LoRaTransmit+0x50c>
  {
    if (HAL_GetTick() - startTick >= timeoutMs)
 8002284:	f001 f882 	bl	800338c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d87b      	bhi.n	800238c <LoRaTransmit+0x50c>
    {
      LORA_GET_REGISTER(RegIrqFlags);
 8002294:	2012      	movs	r0, #18
 8002296:	f7ff f94b 	bl	8001530 <ucSpi1Read>
 800229a:	4603      	mov	r3, r0
 800229c:	77fb      	strb	r3, [r7, #31]
 800229e:	f001 f875 	bl	800338c <HAL_GetTick>
 80022a2:	4686      	mov	lr, r0
 80022a4:	7ffb      	ldrb	r3, [r7, #31]
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	da01      	bge.n	80022b4 <LoRaTransmit+0x434>
 80022b0:	2231      	movs	r2, #49	; 0x31
 80022b2:	e000      	b.n	80022b6 <LoRaTransmit+0x436>
 80022b4:	2230      	movs	r2, #48	; 0x30
 80022b6:	7ff9      	ldrb	r1, [r7, #31]
 80022b8:	f001 0140 	and.w	r1, r1, #64	; 0x40
 80022bc:	2900      	cmp	r1, #0
 80022be:	d001      	beq.n	80022c4 <LoRaTransmit+0x444>
 80022c0:	2131      	movs	r1, #49	; 0x31
 80022c2:	e000      	b.n	80022c6 <LoRaTransmit+0x446>
 80022c4:	2130      	movs	r1, #48	; 0x30
 80022c6:	7ff8      	ldrb	r0, [r7, #31]
 80022c8:	f000 0020 	and.w	r0, r0, #32
 80022cc:	2800      	cmp	r0, #0
 80022ce:	d001      	beq.n	80022d4 <LoRaTransmit+0x454>
 80022d0:	2031      	movs	r0, #49	; 0x31
 80022d2:	e000      	b.n	80022d6 <LoRaTransmit+0x456>
 80022d4:	2030      	movs	r0, #48	; 0x30
 80022d6:	7ffc      	ldrb	r4, [r7, #31]
 80022d8:	f004 0410 	and.w	r4, r4, #16
 80022dc:	2c00      	cmp	r4, #0
 80022de:	d001      	beq.n	80022e4 <LoRaTransmit+0x464>
 80022e0:	2431      	movs	r4, #49	; 0x31
 80022e2:	e000      	b.n	80022e6 <LoRaTransmit+0x466>
 80022e4:	2430      	movs	r4, #48	; 0x30
 80022e6:	7ffd      	ldrb	r5, [r7, #31]
 80022e8:	f005 0508 	and.w	r5, r5, #8
 80022ec:	2d00      	cmp	r5, #0
 80022ee:	d001      	beq.n	80022f4 <LoRaTransmit+0x474>
 80022f0:	2531      	movs	r5, #49	; 0x31
 80022f2:	e000      	b.n	80022f6 <LoRaTransmit+0x476>
 80022f4:	2530      	movs	r5, #48	; 0x30
 80022f6:	7ffe      	ldrb	r6, [r7, #31]
 80022f8:	f006 0604 	and.w	r6, r6, #4
 80022fc:	2e00      	cmp	r6, #0
 80022fe:	d001      	beq.n	8002304 <LoRaTransmit+0x484>
 8002300:	2631      	movs	r6, #49	; 0x31
 8002302:	e000      	b.n	8002306 <LoRaTransmit+0x486>
 8002304:	2630      	movs	r6, #48	; 0x30
 8002306:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800230a:	f00c 0c02 	and.w	ip, ip, #2
 800230e:	f1bc 0f00 	cmp.w	ip, #0
 8002312:	d002      	beq.n	800231a <LoRaTransmit+0x49a>
 8002314:	2331      	movs	r3, #49	; 0x31
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	e001      	b.n	800231e <LoRaTransmit+0x49e>
 800231a:	2330      	movs	r3, #48	; 0x30
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	f897 c01f 	ldrb.w	ip, [r7, #31]
 8002322:	f00c 0c01 	and.w	ip, ip, #1
 8002326:	f1bc 0f00 	cmp.w	ip, #0
 800232a:	d001      	beq.n	8002330 <LoRaTransmit+0x4b0>
 800232c:	2331      	movs	r3, #49	; 0x31
 800232e:	e000      	b.n	8002332 <LoRaTransmit+0x4b2>
 8002330:	2330      	movs	r3, #48	; 0x30
 8002332:	930c      	str	r3, [sp, #48]	; 0x30
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	930b      	str	r3, [sp, #44]	; 0x2c
 8002338:	960a      	str	r6, [sp, #40]	; 0x28
 800233a:	9509      	str	r5, [sp, #36]	; 0x24
 800233c:	9408      	str	r4, [sp, #32]
 800233e:	9007      	str	r0, [sp, #28]
 8002340:	9106      	str	r1, [sp, #24]
 8002342:	9205      	str	r2, [sp, #20]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	9304      	str	r3, [sp, #16]
 8002348:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <LoRaTransmit+0x574>)
 800234a:	9303      	str	r3, [sp, #12]
 800234c:	f240 5323 	movw	r3, #1315	; 0x523
 8002350:	9302      	str	r3, [sp, #8]
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <LoRaTransmit+0x560>)
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <LoRaTransmit+0x564>)
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	4673      	mov	r3, lr
 800235c:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <LoRaTransmit+0x568>)
 800235e:	4921      	ldr	r1, [pc, #132]	; (80023e4 <LoRaTransmit+0x564>)
 8002360:	2005      	movs	r0, #5
 8002362:	f000 fefb 	bl	800315c <stm_log_write>
      STM_LOGE("LoRaTX", "TX_TIMEOUT");
 8002366:	f001 f811 	bl	800338c <HAL_GetTick>
 800236a:	4603      	mov	r3, r0
 800236c:	f240 5224 	movw	r2, #1316	; 0x524
 8002370:	9202      	str	r2, [sp, #8]
 8002372:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <LoRaTransmit+0x560>)
 8002374:	9201      	str	r2, [sp, #4]
 8002376:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <LoRaTransmit+0x56c>)
 8002378:	9200      	str	r2, [sp, #0]
 800237a:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <LoRaTransmit+0x578>)
 800237c:	491b      	ldr	r1, [pc, #108]	; (80023ec <LoRaTransmit+0x56c>)
 800237e:	2001      	movs	r0, #1
 8002380:	f000 feec 	bl	800315c <stm_log_write>
      isTransmitOk = false;
 8002384:	2300      	movs	r3, #0
 8002386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 800238a:	e009      	b.n	80023a0 <LoRaTransmit+0x520>
  while ((ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos == 0u)
 800238c:	2012      	movs	r0, #18
 800238e:	f7ff f8cf 	bl	8001530 <ucSpi1Read>
 8002392:	4603      	mov	r3, r0
 8002394:	10db      	asrs	r3, r3, #3
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	f43f af72 	beq.w	8002284 <LoRaTransmit+0x404>
    }
  }
  if (isTransmitOk)
 80023a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00e      	beq.n	80023c6 <LoRaTransmit+0x546>
    STM_LOGD("LoRaTX", "Send msg to GW success");
 80023a8:	f000 fff0 	bl	800338c <HAL_GetTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f240 522a 	movw	r2, #1322	; 0x52a
 80023b2:	9202      	str	r2, [sp, #8]
 80023b4:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <LoRaTransmit+0x560>)
 80023b6:	9201      	str	r2, [sp, #4]
 80023b8:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <LoRaTransmit+0x56c>)
 80023ba:	9200      	str	r2, [sp, #0]
 80023bc:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <LoRaTransmit+0x57c>)
 80023be:	490b      	ldr	r1, [pc, #44]	; (80023ec <LoRaTransmit+0x56c>)
 80023c0:	2004      	movs	r0, #4
 80023c2:	f000 fecb 	bl	800315c <stm_log_write>
  /* Clear TxDone Flag */
  LoRaClearITFlag(TX_DONE_Msk);
 80023c6:	2008      	movs	r0, #8
 80023c8:	f000 f864 	bl	8002494 <LoRaClearITFlag>
  vModeInit(RXCONTINUOUS_MODE);
 80023cc:	2005      	movs	r0, #5
 80023ce:	f7ff f9bb 	bl	8001748 <vModeInit>
}
 80023d2:	bf00      	nop
 80023d4:	3734      	adds	r7, #52	; 0x34
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023da:	bf00      	nop
 80023dc:	0800cabc 	.word	0x0800cabc
 80023e0:	0800d6b8 	.word	0x0800d6b8
 80023e4:	0800caa8 	.word	0x0800caa8
 80023e8:	0800ca6c 	.word	0x0800ca6c
 80023ec:	0800cb18 	.word	0x0800cb18
 80023f0:	0800cbcc 	.word	0x0800cbcc
 80023f4:	0800cc00 	.word	0x0800cc00
 80023f8:	0800cc0c 	.word	0x0800cc0c
 80023fc:	0800cc3c 	.word	0x0800cc3c

08002400 <LoRaGetITFlag>:
  vSpi1Write(RegIrqFlags, RX_DONE_Msk | PAYLOAD_CRC_ERROR_Msk);
  // LORA_GET_REGISTER(RegIrqFlags);
}

uint8_t LoRaGetITFlag(uint8_t irqFlag)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  if (irqFlag < 0 || irqFlag > 7)
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	2b07      	cmp	r3, #7
 800240e:	d901      	bls.n	8002414 <LoRaGetITFlag+0x14>
    return -1;
 8002410:	23ff      	movs	r3, #255	; 0xff
 8002412:	e03a      	b.n	800248a <LoRaGetITFlag+0x8a>

  switch (irqFlag)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	3b03      	subs	r3, #3
 8002418:	2b04      	cmp	r3, #4
 800241a:	d835      	bhi.n	8002488 <LoRaGetITFlag+0x88>
 800241c:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <LoRaGetITFlag+0x24>)
 800241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002422:	bf00      	nop
 8002424:	08002475 	.word	0x08002475
 8002428:	08002489 	.word	0x08002489
 800242c:	0800244d 	.word	0x0800244d
 8002430:	08002439 	.word	0x08002439
 8002434:	08002461 	.word	0x08002461
  {
  case RX_DONE_MskPos:
    return (ucSpi1Read(RegIrqFlags) & RX_DONE_Msk) >> RX_DONE_MskPos;
 8002438:	2012      	movs	r0, #18
 800243a:	f7ff f879 	bl	8001530 <ucSpi1Read>
 800243e:	4603      	mov	r3, r0
 8002440:	119b      	asrs	r3, r3, #6
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e01e      	b.n	800248a <LoRaGetITFlag+0x8a>
  case PAYLOAD_CRC_ERROR_MskPos:
    return (ucSpi1Read(RegIrqFlags) & PAYLOAD_CRC_ERROR_Msk) >> PAYLOAD_CRC_ERROR_MskPos;
 800244c:	2012      	movs	r0, #18
 800244e:	f7ff f86f 	bl	8001530 <ucSpi1Read>
 8002452:	4603      	mov	r3, r0
 8002454:	115b      	asrs	r3, r3, #5
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e014      	b.n	800248a <LoRaGetITFlag+0x8a>
  case RX_TIMEOUT_MskPos:
    return (ucSpi1Read(RegIrqFlags) & RX_TIMEOUT_Msk) >> RX_TIMEOUT_MskPos;
 8002460:	2012      	movs	r0, #18
 8002462:	f7ff f865 	bl	8001530 <ucSpi1Read>
 8002466:	4603      	mov	r3, r0
 8002468:	11db      	asrs	r3, r3, #7
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	e00a      	b.n	800248a <LoRaGetITFlag+0x8a>
  case TX_DONE_MskPos:
    return (ucSpi1Read(RegIrqFlags) & TX_DONE_Msk) >> TX_DONE_MskPos;
 8002474:	2012      	movs	r0, #18
 8002476:	f7ff f85b 	bl	8001530 <ucSpi1Read>
 800247a:	4603      	mov	r3, r0
 800247c:	10db      	asrs	r3, r3, #3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e000      	b.n	800248a <LoRaGetITFlag+0x8a>
    // case FHSS_CHANGE_CHANNEL_MskPos:
    //   return (ucSpi1Read(RegIrqFlags) & FHSS_CHANGE_CHANNEL_Msk) >> FHSS_CHANGE_CHANNEL_MskPos;
    // case CAD_DONE_MskPos:
    //   return (ucSpi1Read(RegIrqFlags) & CAD_DONE_Msk) >> CAD_DONE_MskPos;
  default:
    return -1;
 8002488:	23ff      	movs	r3, #255	; 0xff
  }
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop

08002494 <LoRaClearITFlag>:

void LoRaClearITFlag(uint8_t flag)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af04      	add	r7, sp, #16
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  vSpi1Write(RegIrqFlags, flag);
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	4619      	mov	r1, r3
 80024a2:	2012      	movs	r0, #18
 80024a4:	f7fe ffdc 	bl	8001460 <vSpi1Write>
  if (flag & RX_DONE_Msk) {
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00e      	beq.n	80024d0 <LoRaClearITFlag+0x3c>
    STM_LOGV("LoRa", "Clear RX_DONE_IT_FLAG");
 80024b2:	f000 ff6b 	bl	800338c <HAL_GetTick>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f240 5291 	movw	r2, #1425	; 0x591
 80024bc:	9202      	str	r2, [sp, #8]
 80024be:	4a24      	ldr	r2, [pc, #144]	; (8002550 <LoRaClearITFlag+0xbc>)
 80024c0:	9201      	str	r2, [sp, #4]
 80024c2:	4a24      	ldr	r2, [pc, #144]	; (8002554 <LoRaClearITFlag+0xc0>)
 80024c4:	9200      	str	r2, [sp, #0]
 80024c6:	4a24      	ldr	r2, [pc, #144]	; (8002558 <LoRaClearITFlag+0xc4>)
 80024c8:	4922      	ldr	r1, [pc, #136]	; (8002554 <LoRaClearITFlag+0xc0>)
 80024ca:	2005      	movs	r0, #5
 80024cc:	f000 fe46 	bl	800315c <stm_log_write>
  }
  if (flag & PAYLOAD_CRC_ERROR_Msk) {
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00e      	beq.n	80024f8 <LoRaClearITFlag+0x64>
    STM_LOGV("LoRa", "Clear PAYLOAD_CRC_ERROR_IT_FLAG");
 80024da:	f000 ff57 	bl	800338c <HAL_GetTick>
 80024de:	4603      	mov	r3, r0
 80024e0:	f240 5294 	movw	r2, #1428	; 0x594
 80024e4:	9202      	str	r2, [sp, #8]
 80024e6:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <LoRaClearITFlag+0xbc>)
 80024e8:	9201      	str	r2, [sp, #4]
 80024ea:	4a1a      	ldr	r2, [pc, #104]	; (8002554 <LoRaClearITFlag+0xc0>)
 80024ec:	9200      	str	r2, [sp, #0]
 80024ee:	4a1b      	ldr	r2, [pc, #108]	; (800255c <LoRaClearITFlag+0xc8>)
 80024f0:	4918      	ldr	r1, [pc, #96]	; (8002554 <LoRaClearITFlag+0xc0>)
 80024f2:	2005      	movs	r0, #5
 80024f4:	f000 fe32 	bl	800315c <stm_log_write>
  }
  if (flag & RX_TIMEOUT_Msk) {
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	da0e      	bge.n	800251e <LoRaClearITFlag+0x8a>
    STM_LOGV("LoRa", "Clear RX_TIMEOUT_IT_FLAG");
 8002500:	f000 ff44 	bl	800338c <HAL_GetTick>
 8002504:	4603      	mov	r3, r0
 8002506:	f240 5297 	movw	r2, #1431	; 0x597
 800250a:	9202      	str	r2, [sp, #8]
 800250c:	4a10      	ldr	r2, [pc, #64]	; (8002550 <LoRaClearITFlag+0xbc>)
 800250e:	9201      	str	r2, [sp, #4]
 8002510:	4a10      	ldr	r2, [pc, #64]	; (8002554 <LoRaClearITFlag+0xc0>)
 8002512:	9200      	str	r2, [sp, #0]
 8002514:	4a12      	ldr	r2, [pc, #72]	; (8002560 <LoRaClearITFlag+0xcc>)
 8002516:	490f      	ldr	r1, [pc, #60]	; (8002554 <LoRaClearITFlag+0xc0>)
 8002518:	2005      	movs	r0, #5
 800251a:	f000 fe1f 	bl	800315c <stm_log_write>
  }
  if (flag & TX_DONE_Msk) {
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <LoRaClearITFlag+0xb2>
    STM_LOGV("LoRa", "Clear TX_DONE_IT_FLAG");
 8002528:	f000 ff30 	bl	800338c <HAL_GetTick>
 800252c:	4603      	mov	r3, r0
 800252e:	f240 529a 	movw	r2, #1434	; 0x59a
 8002532:	9202      	str	r2, [sp, #8]
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <LoRaClearITFlag+0xbc>)
 8002536:	9201      	str	r2, [sp, #4]
 8002538:	4a06      	ldr	r2, [pc, #24]	; (8002554 <LoRaClearITFlag+0xc0>)
 800253a:	9200      	str	r2, [sp, #0]
 800253c:	4a09      	ldr	r2, [pc, #36]	; (8002564 <LoRaClearITFlag+0xd0>)
 800253e:	4905      	ldr	r1, [pc, #20]	; (8002554 <LoRaClearITFlag+0xc0>)
 8002540:	2005      	movs	r0, #5
 8002542:	f000 fe0b 	bl	800315c <stm_log_write>
  //   STM_LOGV("LoRa", "Clear FHSS_CHANGE_CHANNEL_IT_FLAG");
  // }
  // if (flag & CAD_DONE_Msk) {
  //   STM_LOGV("LoRa", "Clear CAD_DONE_IT_FLAG");
  // }
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	0800d6c8 	.word	0x0800d6c8
 8002554:	0800c9e0 	.word	0x0800c9e0
 8002558:	0800cd38 	.word	0x0800cd38
 800255c:	0800cd6c 	.word	0x0800cd6c
 8002560:	0800cda8 	.word	0x0800cda8
 8002564:	0800cde0 	.word	0x0800cde0

08002568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b087      	sub	sp, #28
 800256c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800256e:	f000 fee5 	bl	800333c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002572:	f000 f8c3 	bl	80026fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002576:	f7fe febf 	bl	80012f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800257a:	f7fe f86d 	bl	8000658 <MX_ADC1_Init>
  MX_SPI1_Init();
 800257e:	f000 fc4f 	bl	8002e20 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002582:	f000 fe3d 	bl	8003200 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  vLoraInit();
  vLoraInit(&LoraInit);
 8002586:	484c      	ldr	r0, [pc, #304]	; (80026b8 <main+0x150>)
 8002588:	f7ff fb7c 	bl	8001c84 <vLoraInit>
  reset_cause_t resetCause = resetCauseGet();
 800258c:	f000 fa9e 	bl	8002acc <resetCauseGet>
 8002590:	4603      	mov	r3, r0
 8002592:	71fb      	strb	r3, [r7, #7]
  STM_LOGI("Main", "Reset cause:  {%s}", resetCauseGetName(resetCause));
 8002594:	f000 fefa 	bl	800338c <HAL_GetTick>
 8002598:	4604      	mov	r4, r0
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fadb 	bl	8002b58 <resetCauseGetName>
 80025a2:	4603      	mov	r3, r0
 80025a4:	9303      	str	r3, [sp, #12]
 80025a6:	2385      	movs	r3, #133	; 0x85
 80025a8:	9302      	str	r3, [sp, #8]
 80025aa:	4b44      	ldr	r3, [pc, #272]	; (80026bc <main+0x154>)
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	4b44      	ldr	r3, [pc, #272]	; (80026c0 <main+0x158>)
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4623      	mov	r3, r4
 80025b4:	4a43      	ldr	r2, [pc, #268]	; (80026c4 <main+0x15c>)
 80025b6:	4942      	ldr	r1, [pc, #264]	; (80026c0 <main+0x158>)
 80025b8:	2003      	movs	r0, #3
 80025ba:	f000 fdcf 	bl	800315c <stm_log_write>
  STM_LOGI("Main", "Watchdog Init {%ums}", iwdgInit(&hiwdg, WATCHDOG_TIME));
 80025be:	f000 fee5 	bl	800338c <HAL_GetTick>
 80025c2:	4604      	mov	r4, r0
 80025c4:	f246 5190 	movw	r1, #26000	; 0x6590
 80025c8:	483f      	ldr	r0, [pc, #252]	; (80026c8 <main+0x160>)
 80025ca:	f000 fb13 	bl	8002bf4 <iwdgInit>
 80025ce:	4603      	mov	r3, r0
 80025d0:	9303      	str	r3, [sp, #12]
 80025d2:	2386      	movs	r3, #134	; 0x86
 80025d4:	9302      	str	r3, [sp, #8]
 80025d6:	4b39      	ldr	r3, [pc, #228]	; (80026bc <main+0x154>)
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <main+0x158>)
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	4623      	mov	r3, r4
 80025e0:	4a3a      	ldr	r2, [pc, #232]	; (80026cc <main+0x164>)
 80025e2:	4937      	ldr	r1, [pc, #220]	; (80026c0 <main+0x158>)
 80025e4:	2003      	movs	r0, #3
 80025e6:	f000 fdb9 	bl	800315c <stm_log_write>

  /* Retrieve old state from FLASH */
  thisNodeInit(resetCause);
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 f8e1 	bl	80027b4 <thisNodeInit>
  STM_LOGV("Main", "NodeID:   {%d}", thisNode.nodeID);
 80025f2:	f000 fecb 	bl	800338c <HAL_GetTick>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4a35      	ldr	r2, [pc, #212]	; (80026d0 <main+0x168>)
 80025fa:	7812      	ldrb	r2, [r2, #0]
 80025fc:	9203      	str	r2, [sp, #12]
 80025fe:	228a      	movs	r2, #138	; 0x8a
 8002600:	9202      	str	r2, [sp, #8]
 8002602:	4a2e      	ldr	r2, [pc, #184]	; (80026bc <main+0x154>)
 8002604:	9201      	str	r2, [sp, #4]
 8002606:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <main+0x158>)
 8002608:	9200      	str	r2, [sp, #0]
 800260a:	4a32      	ldr	r2, [pc, #200]	; (80026d4 <main+0x16c>)
 800260c:	492c      	ldr	r1, [pc, #176]	; (80026c0 <main+0x158>)
 800260e:	2005      	movs	r0, #5
 8002610:	f000 fda4 	bl	800315c <stm_log_write>
  STM_LOGV("Main", "Relay:    {%s}", WHICH_RELAY(thisNode.relayState));
 8002614:	f000 feba 	bl	800338c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <main+0x168>)
 800261c:	789b      	ldrb	r3, [r3, #2]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <main+0xca>
 8002622:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <main+0x168>)
 8002624:	789b      	ldrb	r3, [r3, #2]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <main+0xc6>
 800262a:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <main+0x170>)
 800262c:	e002      	b.n	8002634 <main+0xcc>
 800262e:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <main+0x174>)
 8002630:	e000      	b.n	8002634 <main+0xcc>
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <main+0x178>)
 8002634:	9303      	str	r3, [sp, #12]
 8002636:	238b      	movs	r3, #139	; 0x8b
 8002638:	9302      	str	r3, [sp, #8]
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <main+0x154>)
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <main+0x158>)
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	4613      	mov	r3, r2
 8002644:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <main+0x17c>)
 8002646:	491e      	ldr	r1, [pc, #120]	; (80026c0 <main+0x158>)
 8002648:	2005      	movs	r0, #5
 800264a:	f000 fd87 	bl	800315c <stm_log_write>
  STM_LOGV("Main", "Location: {%d}", thisNode.location);
 800264e:	f000 fe9d 	bl	800338c <HAL_GetTick>
 8002652:	4603      	mov	r3, r0
 8002654:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <main+0x168>)
 8002656:	7852      	ldrb	r2, [r2, #1]
 8002658:	9203      	str	r2, [sp, #12]
 800265a:	228c      	movs	r2, #140	; 0x8c
 800265c:	9202      	str	r2, [sp, #8]
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <main+0x154>)
 8002660:	9201      	str	r2, [sp, #4]
 8002662:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <main+0x158>)
 8002664:	9200      	str	r2, [sp, #0]
 8002666:	4a20      	ldr	r2, [pc, #128]	; (80026e8 <main+0x180>)
 8002668:	4915      	ldr	r1, [pc, #84]	; (80026c0 <main+0x158>)
 800266a:	2005      	movs	r0, #5
 800266c:	f000 fd76 	bl	800315c <stm_log_write>
  STM_LOGV("Main", "Error:    {%s}", WHICH_RELAY_ERR(thisNode.errCode));
 8002670:	f000 fe8c 	bl	800338c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <main+0x168>)
 8002678:	78db      	ldrb	r3, [r3, #3]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <main+0x126>
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <main+0x168>)
 8002680:	78db      	ldrb	r3, [r3, #3]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <main+0x122>
 8002686:	4b19      	ldr	r3, [pc, #100]	; (80026ec <main+0x184>)
 8002688:	e002      	b.n	8002690 <main+0x128>
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <main+0x188>)
 800268c:	e000      	b.n	8002690 <main+0x128>
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <main+0x18c>)
 8002690:	9303      	str	r3, [sp, #12]
 8002692:	238d      	movs	r3, #141	; 0x8d
 8002694:	9302      	str	r3, [sp, #8]
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <main+0x154>)
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <main+0x158>)
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	4613      	mov	r3, r2
 80026a0:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <main+0x190>)
 80026a2:	4907      	ldr	r1, [pc, #28]	; (80026c0 <main+0x158>)
 80026a4:	2005      	movs	r0, #5
 80026a6:	f000 fd59 	bl	800315c <stm_log_write>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80026aa:	f004 febd 	bl	8007428 <osKernelInitialize>
  MX_FREERTOS_Init();
 80026ae:	f7fe f91f 	bl	80008f0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80026b2:	f004 feeb 	bl	800748c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026b6:	e7fe      	b.n	80026b6 <main+0x14e>
 80026b8:	20000004 	.word	0x20000004
 80026bc:	0800d6d8 	.word	0x0800d6d8
 80026c0:	0800ce4c 	.word	0x0800ce4c
 80026c4:	0800ce14 	.word	0x0800ce14
 80026c8:	20003a34 	.word	0x20003a34
 80026cc:	0800ce54 	.word	0x0800ce54
 80026d0:	20000000 	.word	0x20000000
 80026d4:	0800ce8c 	.word	0x0800ce8c
 80026d8:	0800ceb8 	.word	0x0800ceb8
 80026dc:	0800cec4 	.word	0x0800cec4
 80026e0:	0800ced4 	.word	0x0800ced4
 80026e4:	0800cee0 	.word	0x0800cee0
 80026e8:	0800cf0c 	.word	0x0800cf0c
 80026ec:	0800cf38 	.word	0x0800cf38
 80026f0:	0800cf44 	.word	0x0800cf44
 80026f4:	0800cf50 	.word	0x0800cf50
 80026f8:	0800cf5c 	.word	0x0800cf5c

080026fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b094      	sub	sp, #80	; 0x50
 8002700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002706:	2228      	movs	r2, #40	; 0x28
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f008 fc6e 	bl	800afec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800272c:	2309      	movs	r3, #9
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002736:	2300      	movs	r3, #0
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800273a:	2301      	movs	r3, #1
 800273c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800273e:	2301      	movs	r3, #1
 8002740:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002742:	2302      	movs	r3, #2
 8002744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800274a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800274c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002750:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002756:	4618      	mov	r0, r3
 8002758:	f002 fb36 	bl	8004dc8 <HAL_RCC_OscConfig>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002762:	f000 f9a3 	bl	8002aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002766:	230f      	movs	r3, #15
 8002768:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276a:	2302      	movs	r3, #2
 800276c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002776:	2300      	movs	r3, #0
 8002778:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	2102      	movs	r1, #2
 8002780:	4618      	mov	r0, r3
 8002782:	f002 fe91 	bl	80054a8 <HAL_RCC_ClockConfig>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800278c:	f000 f98e 	bl	8002aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002790:	2302      	movs	r3, #2
 8002792:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8002794:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002798:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	4618      	mov	r0, r3
 800279e:	f003 f905 	bl	80059ac <HAL_RCCEx_PeriphCLKConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80027a8:	f000 f980 	bl	8002aac <Error_Handler>
  }
}
 80027ac:	bf00      	nop
 80027ae:	3750      	adds	r7, #80	; 0x50
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <thisNodeInit>:

/* USER CODE BEGIN 4 */
static void thisNodeInit(reset_cause_t resetCause) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af04      	add	r7, sp, #16
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  if (Flash_ReadAddress(ADDR_RELAY_STATE) == FLASH_EMPTY)
 80027be:	4833      	ldr	r0, [pc, #204]	; (800288c <thisNodeInit+0xd8>)
 80027c0:	f7fe f824 	bl	800080c <Flash_ReadAddress>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ca:	d110      	bne.n	80027ee <thisNodeInit+0x3a>
  {
    STM_LOGV("Main", "data not found, write relay data to flash");
 80027cc:	f000 fdde 	bl	800338c <HAL_GetTick>
 80027d0:	4603      	mov	r3, r0
 80027d2:	22d5      	movs	r2, #213	; 0xd5
 80027d4:	9202      	str	r2, [sp, #8]
 80027d6:	4a2e      	ldr	r2, [pc, #184]	; (8002890 <thisNodeInit+0xdc>)
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <thisNodeInit+0xe0>)
 80027dc:	9200      	str	r2, [sp, #0]
 80027de:	4a2e      	ldr	r2, [pc, #184]	; (8002898 <thisNodeInit+0xe4>)
 80027e0:	492c      	ldr	r1, [pc, #176]	; (8002894 <thisNodeInit+0xe0>)
 80027e2:	2005      	movs	r0, #5
 80027e4:	f000 fcba 	bl	800315c <stm_log_write>
    updateDataToFlash();
 80027e8:	f000 f862 	bl	80028b0 <updateDataToFlash>
 80027ec:	e029      	b.n	8002842 <thisNodeInit+0x8e>
  }
  else
  {
    STM_LOGV("Main", "detect flash data, restore old state ...");
 80027ee:	f000 fdcd 	bl	800338c <HAL_GetTick>
 80027f2:	4603      	mov	r3, r0
 80027f4:	22da      	movs	r2, #218	; 0xda
 80027f6:	9202      	str	r2, [sp, #8]
 80027f8:	4a25      	ldr	r2, [pc, #148]	; (8002890 <thisNodeInit+0xdc>)
 80027fa:	9201      	str	r2, [sp, #4]
 80027fc:	4a25      	ldr	r2, [pc, #148]	; (8002894 <thisNodeInit+0xe0>)
 80027fe:	9200      	str	r2, [sp, #0]
 8002800:	4a26      	ldr	r2, [pc, #152]	; (800289c <thisNodeInit+0xe8>)
 8002802:	4924      	ldr	r1, [pc, #144]	; (8002894 <thisNodeInit+0xe0>)
 8002804:	2005      	movs	r0, #5
 8002806:	f000 fca9 	bl	800315c <stm_log_write>
    thisNode.relayState = Flash_ReadAddress(ADDR_RELAY_STATE);
 800280a:	4820      	ldr	r0, [pc, #128]	; (800288c <thisNodeInit+0xd8>)
 800280c:	f7fd fffe 	bl	800080c <Flash_ReadAddress>
 8002810:	4603      	mov	r3, r0
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <thisNodeInit+0xec>)
 8002816:	709a      	strb	r2, [r3, #2]
    thisNode.location = Flash_ReadAddress(ADDR_LOCATION);
 8002818:	4822      	ldr	r0, [pc, #136]	; (80028a4 <thisNodeInit+0xf0>)
 800281a:	f7fd fff7 	bl	800080c <Flash_ReadAddress>
 800281e:	4603      	mov	r3, r0
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <thisNodeInit+0xec>)
 8002824:	705a      	strb	r2, [r3, #1]
    thisNode.errCode = Flash_ReadAddress(ADDR_ERROR_CODE);
 8002826:	4820      	ldr	r0, [pc, #128]	; (80028a8 <thisNodeInit+0xf4>)
 8002828:	f7fd fff0 	bl	800080c <Flash_ReadAddress>
 800282c:	4603      	mov	r3, r0
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <thisNodeInit+0xec>)
 8002832:	70da      	strb	r2, [r3, #3]
    RELAY_CONTROL(thisNode.relayState);
 8002834:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <thisNodeInit+0xec>)
 8002836:	789b      	ldrb	r3, [r3, #2]
 8002838:	461a      	mov	r2, r3
 800283a:	2102      	movs	r1, #2
 800283c:	481b      	ldr	r0, [pc, #108]	; (80028ac <thisNodeInit+0xf8>)
 800283e:	f002 f9d1 	bl	8004be4 <HAL_GPIO_WritePin>
  }

  /* Send notif gw after power on */
  uint8_t notifData[PAYLOAD_LENGTH];
  PACK_NOTIF_MSG(notifData, thisNode, resetCause);
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <thisNodeInit+0xec>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	733b      	strb	r3, [r7, #12]
 8002848:	23ff      	movs	r3, #255	; 0xff
 800284a:	737b      	strb	r3, [r7, #13]
 800284c:	2302      	movs	r3, #2
 800284e:	73bb      	strb	r3, [r7, #14]
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	23ff      	movs	r3, #255	; 0xff
 8002856:	743b      	strb	r3, [r7, #16]
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <thisNodeInit+0xec>)
 800285a:	785b      	ldrb	r3, [r3, #1]
 800285c:	747b      	strb	r3, [r7, #17]
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <thisNodeInit+0xec>)
 8002860:	789b      	ldrb	r3, [r3, #2]
 8002862:	74bb      	strb	r3, [r7, #18]
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <thisNodeInit+0xec>)
 8002866:	78db      	ldrb	r3, [r3, #3]
 8002868:	74fb      	strb	r3, [r7, #19]
 800286a:	2300      	movs	r3, #0
 800286c:	753b      	strb	r3, [r7, #20]
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	757b      	strb	r3, [r7, #21]
  LoRaTransmit(notifData, PAYLOAD_LENGTH, LORA_DELAY);
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	f04f 32ff 	mov.w	r2, #4294967295
 800287a:	210a      	movs	r1, #10
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff faff 	bl	8001e80 <LoRaTransmit>
}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	0800dc00 	.word	0x0800dc00
 8002890:	0800d6e0 	.word	0x0800d6e0
 8002894:	0800ce4c 	.word	0x0800ce4c
 8002898:	0800cf88 	.word	0x0800cf88
 800289c:	0800cfd0 	.word	0x0800cfd0
 80028a0:	20000000 	.word	0x20000000
 80028a4:	0800dc04 	.word	0x0800dc04
 80028a8:	0800dc08 	.word	0x0800dc08
 80028ac:	40010800 	.word	0x40010800

080028b0 <updateDataToFlash>:

void updateDataToFlash(void)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af04      	add	r7, sp, #16
  taskENTER_CRITICAL();
 80028b6:	f008 f889 	bl	800a9cc <vPortEnterCritical>
  ERROR_CHECK(Flash_ErasePage(ADDR_RELAY_STATE, 1));
 80028ba:	2101      	movs	r1, #1
 80028bc:	4866      	ldr	r0, [pc, #408]	; (8002a58 <updateDataToFlash+0x1a8>)
 80028be:	f7fd ffb1 	bl	8000824 <Flash_ErasePage>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d022      	beq.n	800290e <updateDataToFlash+0x5e>
 80028c8:	f000 fd60 	bl	800338c <HAL_GetTick>
 80028cc:	4604      	mov	r4, r0
 80028ce:	2101      	movs	r1, #1
 80028d0:	4861      	ldr	r0, [pc, #388]	; (8002a58 <updateDataToFlash+0x1a8>)
 80028d2:	f7fd ffa7 	bl	8000824 <Flash_ErasePage>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d00a      	beq.n	80028f2 <updateDataToFlash+0x42>
 80028dc:	2101      	movs	r1, #1
 80028de:	485e      	ldr	r0, [pc, #376]	; (8002a58 <updateDataToFlash+0x1a8>)
 80028e0:	f7fd ffa0 	bl	8000824 <Flash_ErasePage>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d101      	bne.n	80028ee <updateDataToFlash+0x3e>
 80028ea:	4b5c      	ldr	r3, [pc, #368]	; (8002a5c <updateDataToFlash+0x1ac>)
 80028ec:	e002      	b.n	80028f4 <updateDataToFlash+0x44>
 80028ee:	4b5c      	ldr	r3, [pc, #368]	; (8002a60 <updateDataToFlash+0x1b0>)
 80028f0:	e000      	b.n	80028f4 <updateDataToFlash+0x44>
 80028f2:	4b5c      	ldr	r3, [pc, #368]	; (8002a64 <updateDataToFlash+0x1b4>)
 80028f4:	9303      	str	r3, [sp, #12]
 80028f6:	23ea      	movs	r3, #234	; 0xea
 80028f8:	9302      	str	r3, [sp, #8]
 80028fa:	4b5b      	ldr	r3, [pc, #364]	; (8002a68 <updateDataToFlash+0x1b8>)
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	4b5b      	ldr	r3, [pc, #364]	; (8002a6c <updateDataToFlash+0x1bc>)
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4623      	mov	r3, r4
 8002904:	4a5a      	ldr	r2, [pc, #360]	; (8002a70 <updateDataToFlash+0x1c0>)
 8002906:	4959      	ldr	r1, [pc, #356]	; (8002a6c <updateDataToFlash+0x1bc>)
 8002908:	2001      	movs	r0, #1
 800290a:	f000 fc27 	bl	800315c <stm_log_write>
  ERROR_CHECK(Flash_WriteWord(ADDR_RELAY_STATE, (uint32_t)thisNode.relayState));
 800290e:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <updateDataToFlash+0x1c4>)
 8002910:	789b      	ldrb	r3, [r3, #2]
 8002912:	4619      	mov	r1, r3
 8002914:	4850      	ldr	r0, [pc, #320]	; (8002a58 <updateDataToFlash+0x1a8>)
 8002916:	f7fd ff21 	bl	800075c <Flash_WriteWord>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d026      	beq.n	800296e <updateDataToFlash+0xbe>
 8002920:	f000 fd34 	bl	800338c <HAL_GetTick>
 8002924:	4604      	mov	r4, r0
 8002926:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <updateDataToFlash+0x1c4>)
 8002928:	789b      	ldrb	r3, [r3, #2]
 800292a:	4619      	mov	r1, r3
 800292c:	484a      	ldr	r0, [pc, #296]	; (8002a58 <updateDataToFlash+0x1a8>)
 800292e:	f7fd ff15 	bl	800075c <Flash_WriteWord>
 8002932:	4603      	mov	r3, r0
 8002934:	2b01      	cmp	r3, #1
 8002936:	d00c      	beq.n	8002952 <updateDataToFlash+0xa2>
 8002938:	4b4e      	ldr	r3, [pc, #312]	; (8002a74 <updateDataToFlash+0x1c4>)
 800293a:	789b      	ldrb	r3, [r3, #2]
 800293c:	4619      	mov	r1, r3
 800293e:	4846      	ldr	r0, [pc, #280]	; (8002a58 <updateDataToFlash+0x1a8>)
 8002940:	f7fd ff0c 	bl	800075c <Flash_WriteWord>
 8002944:	4603      	mov	r3, r0
 8002946:	2b02      	cmp	r3, #2
 8002948:	d101      	bne.n	800294e <updateDataToFlash+0x9e>
 800294a:	4b44      	ldr	r3, [pc, #272]	; (8002a5c <updateDataToFlash+0x1ac>)
 800294c:	e002      	b.n	8002954 <updateDataToFlash+0xa4>
 800294e:	4b44      	ldr	r3, [pc, #272]	; (8002a60 <updateDataToFlash+0x1b0>)
 8002950:	e000      	b.n	8002954 <updateDataToFlash+0xa4>
 8002952:	4b44      	ldr	r3, [pc, #272]	; (8002a64 <updateDataToFlash+0x1b4>)
 8002954:	9303      	str	r3, [sp, #12]
 8002956:	23eb      	movs	r3, #235	; 0xeb
 8002958:	9302      	str	r3, [sp, #8]
 800295a:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <updateDataToFlash+0x1b8>)
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <updateDataToFlash+0x1bc>)
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	4623      	mov	r3, r4
 8002964:	4a42      	ldr	r2, [pc, #264]	; (8002a70 <updateDataToFlash+0x1c0>)
 8002966:	4941      	ldr	r1, [pc, #260]	; (8002a6c <updateDataToFlash+0x1bc>)
 8002968:	2001      	movs	r0, #1
 800296a:	f000 fbf7 	bl	800315c <stm_log_write>
  ERROR_CHECK(Flash_WriteWord(ADDR_LOCATION, (uint32_t)thisNode.location));
 800296e:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <updateDataToFlash+0x1c4>)
 8002970:	785b      	ldrb	r3, [r3, #1]
 8002972:	4619      	mov	r1, r3
 8002974:	4840      	ldr	r0, [pc, #256]	; (8002a78 <updateDataToFlash+0x1c8>)
 8002976:	f7fd fef1 	bl	800075c <Flash_WriteWord>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d026      	beq.n	80029ce <updateDataToFlash+0x11e>
 8002980:	f000 fd04 	bl	800338c <HAL_GetTick>
 8002984:	4604      	mov	r4, r0
 8002986:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <updateDataToFlash+0x1c4>)
 8002988:	785b      	ldrb	r3, [r3, #1]
 800298a:	4619      	mov	r1, r3
 800298c:	483a      	ldr	r0, [pc, #232]	; (8002a78 <updateDataToFlash+0x1c8>)
 800298e:	f7fd fee5 	bl	800075c <Flash_WriteWord>
 8002992:	4603      	mov	r3, r0
 8002994:	2b01      	cmp	r3, #1
 8002996:	d00c      	beq.n	80029b2 <updateDataToFlash+0x102>
 8002998:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <updateDataToFlash+0x1c4>)
 800299a:	785b      	ldrb	r3, [r3, #1]
 800299c:	4619      	mov	r1, r3
 800299e:	4836      	ldr	r0, [pc, #216]	; (8002a78 <updateDataToFlash+0x1c8>)
 80029a0:	f7fd fedc 	bl	800075c <Flash_WriteWord>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d101      	bne.n	80029ae <updateDataToFlash+0xfe>
 80029aa:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <updateDataToFlash+0x1ac>)
 80029ac:	e002      	b.n	80029b4 <updateDataToFlash+0x104>
 80029ae:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <updateDataToFlash+0x1b0>)
 80029b0:	e000      	b.n	80029b4 <updateDataToFlash+0x104>
 80029b2:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <updateDataToFlash+0x1b4>)
 80029b4:	9303      	str	r3, [sp, #12]
 80029b6:	23ec      	movs	r3, #236	; 0xec
 80029b8:	9302      	str	r3, [sp, #8]
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <updateDataToFlash+0x1b8>)
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <updateDataToFlash+0x1bc>)
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	4623      	mov	r3, r4
 80029c4:	4a2a      	ldr	r2, [pc, #168]	; (8002a70 <updateDataToFlash+0x1c0>)
 80029c6:	4929      	ldr	r1, [pc, #164]	; (8002a6c <updateDataToFlash+0x1bc>)
 80029c8:	2001      	movs	r0, #1
 80029ca:	f000 fbc7 	bl	800315c <stm_log_write>
  ERROR_CHECK(Flash_WriteWord(ADDR_ERROR_CODE, (uint32_t)thisNode.errCode));
 80029ce:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <updateDataToFlash+0x1c4>)
 80029d0:	78db      	ldrb	r3, [r3, #3]
 80029d2:	4619      	mov	r1, r3
 80029d4:	4829      	ldr	r0, [pc, #164]	; (8002a7c <updateDataToFlash+0x1cc>)
 80029d6:	f7fd fec1 	bl	800075c <Flash_WriteWord>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d026      	beq.n	8002a2e <updateDataToFlash+0x17e>
 80029e0:	f000 fcd4 	bl	800338c <HAL_GetTick>
 80029e4:	4604      	mov	r4, r0
 80029e6:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <updateDataToFlash+0x1c4>)
 80029e8:	78db      	ldrb	r3, [r3, #3]
 80029ea:	4619      	mov	r1, r3
 80029ec:	4823      	ldr	r0, [pc, #140]	; (8002a7c <updateDataToFlash+0x1cc>)
 80029ee:	f7fd feb5 	bl	800075c <Flash_WriteWord>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d00c      	beq.n	8002a12 <updateDataToFlash+0x162>
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <updateDataToFlash+0x1c4>)
 80029fa:	78db      	ldrb	r3, [r3, #3]
 80029fc:	4619      	mov	r1, r3
 80029fe:	481f      	ldr	r0, [pc, #124]	; (8002a7c <updateDataToFlash+0x1cc>)
 8002a00:	f7fd feac 	bl	800075c <Flash_WriteWord>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d101      	bne.n	8002a0e <updateDataToFlash+0x15e>
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <updateDataToFlash+0x1ac>)
 8002a0c:	e002      	b.n	8002a14 <updateDataToFlash+0x164>
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <updateDataToFlash+0x1b0>)
 8002a10:	e000      	b.n	8002a14 <updateDataToFlash+0x164>
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <updateDataToFlash+0x1b4>)
 8002a14:	9303      	str	r3, [sp, #12]
 8002a16:	23ed      	movs	r3, #237	; 0xed
 8002a18:	9302      	str	r3, [sp, #8]
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <updateDataToFlash+0x1b8>)
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <updateDataToFlash+0x1bc>)
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	4623      	mov	r3, r4
 8002a24:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <updateDataToFlash+0x1c0>)
 8002a26:	4911      	ldr	r1, [pc, #68]	; (8002a6c <updateDataToFlash+0x1bc>)
 8002a28:	2001      	movs	r0, #1
 8002a2a:	f000 fb97 	bl	800315c <stm_log_write>
  taskEXIT_CRITICAL();
 8002a2e:	f007 fffd 	bl	800aa2c <vPortExitCritical>
  STM_LOGD("Main", "update data to flash");
 8002a32:	f000 fcab 	bl	800338c <HAL_GetTick>
 8002a36:	4603      	mov	r3, r0
 8002a38:	22ef      	movs	r2, #239	; 0xef
 8002a3a:	9202      	str	r2, [sp, #8]
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <updateDataToFlash+0x1b8>)
 8002a3e:	9201      	str	r2, [sp, #4]
 8002a40:	4a0f      	ldr	r2, [pc, #60]	; (8002a80 <updateDataToFlash+0x1d0>)
 8002a42:	9200      	str	r2, [sp, #0]
 8002a44:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <updateDataToFlash+0x1d4>)
 8002a46:	490e      	ldr	r1, [pc, #56]	; (8002a80 <updateDataToFlash+0x1d0>)
 8002a48:	2004      	movs	r0, #4
 8002a4a:	f000 fb87 	bl	800315c <stm_log_write>
}
 8002a4e:	bf00      	nop
 8002a50:	3704      	adds	r7, #4
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd90      	pop	{r4, r7, pc}
 8002a56:	bf00      	nop
 8002a58:	0800dc00 	.word	0x0800dc00
 8002a5c:	0800d018 	.word	0x0800d018
 8002a60:	0800d024 	.word	0x0800d024
 8002a64:	0800d030 	.word	0x0800d030
 8002a68:	0800d6f0 	.word	0x0800d6f0
 8002a6c:	0800d06c 	.word	0x0800d06c
 8002a70:	0800d03c 	.word	0x0800d03c
 8002a74:	20000000 	.word	0x20000000
 8002a78:	0800dc04 	.word	0x0800dc04
 8002a7c:	0800dc08 	.word	0x0800dc08
 8002a80:	0800ce4c 	.word	0x0800ce4c
 8002a84:	0800d07c 	.word	0x0800d07c

08002a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a9a:	f000 fc65 	bl	8003368 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40000800 	.word	0x40000800

08002aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab0:	b672      	cpsid	i
}
 8002ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <Error_Handler+0x8>

08002ab6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
	...

08002acc <resetCauseGet>:
#include "misc.h"
#include "stm_log.h"

reset_cause_t resetCauseGet(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
		RCC_FLAG_WWDGRST: Window watchdog reset flag
		RCC_FLAG_LPWRRST: Low power reset flag 
	*/
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <resetCauseGet+0x84>)
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da02      	bge.n	8002ae0 <resetCauseGet+0x14>
    {
        reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	71fb      	strb	r3, [r7, #7]
 8002ade:	e02e      	b.n	8002b3e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <resetCauseGet+0x84>)
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <resetCauseGet+0x26>
    {
        reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8002aec:	2302      	movs	r3, #2
 8002aee:	71fb      	strb	r3, [r7, #7]
 8002af0:	e025      	b.n	8002b3e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8002af2:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <resetCauseGet+0x84>)
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <resetCauseGet+0x38>
    {
        reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8002afe:	2303      	movs	r3, #3
 8002b00:	71fb      	strb	r3, [r7, #7]
 8002b02:	e01c      	b.n	8002b3e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <resetCauseGet+0x84>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <resetCauseGet+0x4a>
    {
        reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 8002b10:	2304      	movs	r3, #4
 8002b12:	71fb      	strb	r3, [r7, #7]
 8002b14:	e013      	b.n	8002b3e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <resetCauseGet+0x84>)
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <resetCauseGet+0x5c>
    {
        reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8002b22:	2305      	movs	r3, #5
 8002b24:	71fb      	strb	r3, [r7, #7]
 8002b26:	e00a      	b.n	8002b3e <resetCauseGet+0x72>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <resetCauseGet+0x84>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <resetCauseGet+0x6e>
    {
        reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8002b34:	2306      	movs	r3, #6
 8002b36:	71fb      	strb	r3, [r7, #7]
 8002b38:	e001      	b.n	8002b3e <resetCauseGet+0x72>
    }
    else
    {
        reset_cause = eRESET_CAUSE_UNKNOWN;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_RCC_CLEAR_RESET_FLAGS();
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <resetCauseGet+0x88>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

    return reset_cause;
 8002b44:	79fb      	ldrb	r3, [r7, #7]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40021000 	.word	0x40021000
 8002b54:	424204e0 	.word	0x424204e0

08002b58 <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
    const char *reset_cause_name = "";
 8002b62:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <resetCauseGetName+0x78>)
 8002b64:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	2b07      	cmp	r3, #7
 8002b6a:	d82b      	bhi.n	8002bc4 <resetCauseGetName+0x6c>
 8002b6c:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <resetCauseGetName+0x1c>)
 8002b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b72:	bf00      	nop
 8002b74:	08002b95 	.word	0x08002b95
 8002b78:	08002b9b 	.word	0x08002b9b
 8002b7c:	08002ba1 	.word	0x08002ba1
 8002b80:	08002ba7 	.word	0x08002ba7
 8002b84:	08002bad 	.word	0x08002bad
 8002b88:	08002bb3 	.word	0x08002bb3
 8002b8c:	08002bb9 	.word	0x08002bb9
 8002b90:	08002bbf 	.word	0x08002bbf
    {
    case eRESET_CAUSE_UNKNOWN:
        reset_cause_name = "UNKNOWN";
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <resetCauseGetName+0x7c>)
 8002b96:	60fb      	str	r3, [r7, #12]
        break;
 8002b98:	e014      	b.n	8002bc4 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_LOW_POWER_RESET:
        reset_cause_name = "LOW_POWER_RESET";
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <resetCauseGetName+0x80>)
 8002b9c:	60fb      	str	r3, [r7, #12]
        break;
 8002b9e:	e011      	b.n	8002bc4 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
        reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <resetCauseGetName+0x84>)
 8002ba2:	60fb      	str	r3, [r7, #12]
        break;
 8002ba4:	e00e      	b.n	8002bc4 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
        reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <resetCauseGetName+0x88>)
 8002ba8:	60fb      	str	r3, [r7, #12]
        break;
 8002baa:	e00b      	b.n	8002bc4 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_SOFTWARE_RESET:
        reset_cause_name = "SOFTWARE_RESET";
 8002bac:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <resetCauseGetName+0x8c>)
 8002bae:	60fb      	str	r3, [r7, #12]
        break;
 8002bb0:	e008      	b.n	8002bc4 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
        reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <resetCauseGetName+0x90>)
 8002bb4:	60fb      	str	r3, [r7, #12]
        break;
 8002bb6:	e005      	b.n	8002bc4 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
        reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <resetCauseGetName+0x94>)
 8002bba:	60fb      	str	r3, [r7, #12]
        break;
 8002bbc:	e002      	b.n	8002bc4 <resetCauseGetName+0x6c>
    case eRESET_CAUSE_BROWNOUT_RESET:
        reset_cause_name = "BROWNOUT_RESET (BOR)";
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <resetCauseGetName+0x98>)
 8002bc0:	60fb      	str	r3, [r7, #12]
        break;
 8002bc2:	bf00      	nop
    }
    return reset_cause_name;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	0800d0b4 	.word	0x0800d0b4
 8002bd4:	0800d0b8 	.word	0x0800d0b8
 8002bd8:	0800d0c0 	.word	0x0800d0c0
 8002bdc:	0800d0d0 	.word	0x0800d0d0
 8002be0:	0800d0e8 	.word	0x0800d0e8
 8002be4:	0800d104 	.word	0x0800d104
 8002be8:	0800d114 	.word	0x0800d114
 8002bec:	0800d144 	.word	0x0800d144
 8002bf0:	0800d160 	.word	0x0800d160

08002bf4 <iwdgInit>:

uint32_t iwdgInit(IWDG_HandleTypeDef *hiwdg, uint32_t millis)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af04      	add	r7, sp, #16
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
    uint32_t configTime = millis;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
    if (configTime > PRESCALER_256_UPPER_LIMIT)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f246 6266 	movw	r2, #26214	; 0x6666
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d902      	bls.n	8002c12 <iwdgInit+0x1e>
    {
        configTime = PRESCALER_256_UPPER_LIMIT;
 8002c0c:	f246 6366 	movw	r3, #26214	; 0x6666
 8002c10:	60fb      	str	r3, [r7, #12]
    }
    /* Select INDEPENDENT_WATCHDOG */
    hiwdg->Instance = IWDG;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a19      	ldr	r2, [pc, #100]	; (8002c7c <iwdgInit+0x88>)
 8002c16:	601a      	str	r2, [r3, #0]
    /* Use prescaler LSI/128 */
    hiwdg->Init.Prescaler = IWDG_PRESCALER_128;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2205      	movs	r2, #5
 8002c1c:	605a      	str	r2, [r3, #4]
    hiwdg->Init.Reload = (int)(IWDG_RESOLUTION * ((float)configTime / PRESCALER_128_UPPER_LIMIT));
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f7fd fb4c 	bl	80002bc <__aeabi_ui2f>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4916      	ldr	r1, [pc, #88]	; (8002c80 <iwdgInit+0x8c>)
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc53 	bl	80004d4 <__aeabi_fdiv>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4914      	ldr	r1, [pc, #80]	; (8002c84 <iwdgInit+0x90>)
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fb9a 	bl	800036c <__aeabi_fmul>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd fce6 	bl	800060c <__aeabi_f2iz>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	609a      	str	r2, [r3, #8]
    if (HAL_IWDG_Init(hiwdg) != HAL_OK)
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f002 f83d 	bl	8004cc8 <HAL_IWDG_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <iwdgInit+0x7c>
    {
        STM_LOGE("IWDG", "Watchdog init failed");
 8002c54:	f000 fb9a 	bl	800338c <HAL_GetTick>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2263      	movs	r2, #99	; 0x63
 8002c5c:	9202      	str	r2, [sp, #8]
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <iwdgInit+0x94>)
 8002c60:	9201      	str	r2, [sp, #4]
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <iwdgInit+0x98>)
 8002c64:	9200      	str	r2, [sp, #0]
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <iwdgInit+0x9c>)
 8002c68:	4908      	ldr	r1, [pc, #32]	; (8002c8c <iwdgInit+0x98>)
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f000 fa76 	bl	800315c <stm_log_write>
    }
    return configTime;
 8002c70:	68fb      	ldr	r3, [r7, #12]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40003000 	.word	0x40003000
 8002c80:	464ccc00 	.word	0x464ccc00
 8002c84:	457ff000 	.word	0x457ff000
 8002c88:	0800d704 	.word	0x0800d704
 8002c8c:	0800d1b0 	.word	0x0800d1b0
 8002c90:	0800d178 	.word	0x0800d178

08002c94 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002c9c:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <RetargetInit+0x28>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002ca2:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <RetargetInit+0x2c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6898      	ldr	r0, [r3, #8]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2202      	movs	r2, #2
 8002cac:	2100      	movs	r1, #0
 8002cae:	f008 fa1b 	bl	800b0e8 <setvbuf>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20003a40 	.word	0x20003a40
 8002cc0:	20000030 	.word	0x20000030

08002cc4 <_isatty>:

int _isatty(int fd) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db04      	blt.n	8002cdc <_isatty+0x18>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	dc01      	bgt.n	8002cdc <_isatty+0x18>
    return 1;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e005      	b.n	8002ce8 <_isatty+0x24>

  errno = EBADF;
 8002cdc:	f008 f94e 	bl	800af7c <__errno>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2209      	movs	r2, #9
 8002ce4:	601a      	str	r2, [r3, #0]
  return 0;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <_write>:

int _write(int fd, char* ptr, int len) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d002      	beq.n	8002d08 <_write+0x18>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d111      	bne.n	8002d2c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <_write+0x54>)
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	f004 f93d 	bl	8006f94 <HAL_UART_Transmit>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <_write+0x38>
      return len;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	e008      	b.n	8002d3a <_write+0x4a>
    else
      return EIO;
 8002d28:	2305      	movs	r3, #5
 8002d2a:	e006      	b.n	8002d3a <_write+0x4a>
  }
  errno = EBADF;
 8002d2c:	f008 f926 	bl	800af7c <__errno>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2209      	movs	r2, #9
 8002d34:	601a      	str	r2, [r3, #0]
  return -1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20003a40 	.word	0x20003a40

08002d48 <_close>:

int _close(int fd) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db04      	blt.n	8002d60 <_close+0x18>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	dc01      	bgt.n	8002d60 <_close+0x18>
    return 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e006      	b.n	8002d6e <_close+0x26>

  errno = EBADF;
 8002d60:	f008 f90c 	bl	800af7c <__errno>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2209      	movs	r2, #9
 8002d68:	601a      	str	r2, [r3, #0]
  return -1;
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002d82:	f008 f8fb 	bl	800af7c <__errno>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2209      	movs	r2, #9
 8002d8a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_read>:

int _read(int fd, char* ptr, int len) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d110      	bne.n	8002dcc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <_read+0x4c>)
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	2201      	movs	r2, #1
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	f004 f97f 	bl	80070b8 <HAL_UART_Receive>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <_read+0x30>
      return 1;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e008      	b.n	8002dda <_read+0x42>
    else
      return EIO;
 8002dc8:	2305      	movs	r3, #5
 8002dca:	e006      	b.n	8002dda <_read+0x42>
  }
  errno = EBADF;
 8002dcc:	f008 f8d6 	bl	800af7c <__errno>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2209      	movs	r2, #9
 8002dd4:	601a      	str	r2, [r3, #0]
  return -1;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20003a40 	.word	0x20003a40

08002de8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db08      	blt.n	8002e0a <_fstat+0x22>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	dc05      	bgt.n	8002e0a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e04:	605a      	str	r2, [r3, #4]
    return 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e005      	b.n	8002e16 <_fstat+0x2e>
  }

  errno = EBADF;
 8002e0a:	f008 f8b7 	bl	800af7c <__errno>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2209      	movs	r2, #9
 8002e12:	601a      	str	r2, [r3, #0]
  return 0;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e26:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <MX_SPI1_Init+0x68>)
 8002e28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e32:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e64:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e6c:	220a      	movs	r2, #10
 8002e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e70:	4804      	ldr	r0, [pc, #16]	; (8002e84 <MX_SPI1_Init+0x64>)
 8002e72:	f002 fea5 	bl	8005bc0 <HAL_SPI_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e7c:	f7ff fe16 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20003a44 	.word	0x20003a44
 8002e88:	40013000 	.word	0x40013000

08002e8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <HAL_SPI_MspInit+0x88>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d12f      	bne.n	8002f0c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002eb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002eb6:	6193      	str	r3, [r2, #24]
 8002eb8:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6193      	str	r3, [r2, #24]
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002edc:	23a0      	movs	r3, #160	; 0xa0
 8002ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee8:	f107 0310 	add.w	r3, r7, #16
 8002eec:	4619      	mov	r1, r3
 8002eee:	480b      	ldr	r0, [pc, #44]	; (8002f1c <HAL_SPI_MspInit+0x90>)
 8002ef0:	f001 fc08 	bl	8004704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ef4:	2340      	movs	r3, #64	; 0x40
 8002ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f00:	f107 0310 	add.w	r3, r7, #16
 8002f04:	4619      	mov	r1, r3
 8002f06:	4805      	ldr	r0, [pc, #20]	; (8002f1c <HAL_SPI_MspInit+0x90>)
 8002f08:	f001 fbfc 	bl	8004704 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40013000 	.word	0x40013000
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40010800 	.word	0x40010800

08002f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f26:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <HAL_MspInit+0x68>)
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <HAL_MspInit+0x68>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6193      	str	r3, [r2, #24]
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_MspInit+0x68>)
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_MspInit+0x68>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4a11      	ldr	r2, [pc, #68]	; (8002f88 <HAL_MspInit+0x68>)
 8002f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f48:	61d3      	str	r3, [r2, #28]
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <HAL_MspInit+0x68>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	210f      	movs	r1, #15
 8002f5a:	f06f 0001 	mvn.w	r0, #1
 8002f5e:	f001 f8b5 	bl	80040cc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_MspInit+0x6c>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_MspInit+0x6c>)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40010000 	.word	0x40010000

08002f90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08c      	sub	sp, #48	; 0x30
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	201e      	movs	r0, #30
 8002fa6:	f001 f891 	bl	80040cc <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002faa:	201e      	movs	r0, #30
 8002fac:	f001 f8ba 	bl	8004124 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002fb0:	4b1e      	ldr	r3, [pc, #120]	; (800302c <HAL_InitTick+0x9c>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	4a1d      	ldr	r2, [pc, #116]	; (800302c <HAL_InitTick+0x9c>)
 8002fb6:	f043 0304 	orr.w	r3, r3, #4
 8002fba:	61d3      	str	r3, [r2, #28]
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_InitTick+0x9c>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fc8:	f107 0210 	add.w	r2, r7, #16
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 fc8a 	bl	80058ec <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fd8:	f002 fc60 	bl	800589c <HAL_RCC_GetPCLK1Freq>
 8002fdc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	4a13      	ldr	r2, [pc, #76]	; (8003030 <HAL_InitTick+0xa0>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0c9b      	lsrs	r3, r3, #18
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_InitTick+0xa4>)
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <HAL_InitTick+0xa8>)
 8002ff0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_InitTick+0xa4>)
 8002ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ff8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002ffa:	4a0e      	ldr	r2, [pc, #56]	; (8003034 <HAL_InitTick+0xa4>)
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <HAL_InitTick+0xa4>)
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_InitTick+0xa4>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800300c:	4809      	ldr	r0, [pc, #36]	; (8003034 <HAL_InitTick+0xa4>)
 800300e:	f003 fc59 	bl	80068c4 <HAL_TIM_Base_Init>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003018:	4806      	ldr	r0, [pc, #24]	; (8003034 <HAL_InitTick+0xa4>)
 800301a:	f003 fd07 	bl	8006a2c <HAL_TIM_Base_Start_IT>
 800301e:	4603      	mov	r3, r0
 8003020:	e000      	b.n	8003024 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
}
 8003024:	4618      	mov	r0, r3
 8003026:	3730      	adds	r7, #48	; 0x30
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	431bde83 	.word	0x431bde83
 8003034:	20003a9c 	.word	0x20003a9c
 8003038:	40000800 	.word	0x40000800

0800303c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003040:	e7fe      	b.n	8003040 <NMI_Handler+0x4>

08003042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003046:	e7fe      	b.n	8003046 <HardFault_Handler+0x4>

08003048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800304c:	e7fe      	b.n	800304c <MemManage_Handler+0x4>

0800304e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003052:	e7fe      	b.n	8003052 <BusFault_Handler+0x4>

08003054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003058:	e7fe      	b.n	8003058 <UsageFault_Handler+0x4>

0800305a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800306a:	2008      	movs	r0, #8
 800306c:	f001 fe14 	bl	8004c98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}

08003074 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <ADC1_2_IRQHandler+0x10>)
 800307a:	f000 fc07 	bl	800388c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200039e8 	.word	0x200039e8

08003088 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800308c:	4802      	ldr	r0, [pc, #8]	; (8003098 <TIM4_IRQHandler+0x10>)
 800308e:	f003 fd39 	bl	8006b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20003a9c 	.word	0x20003a9c

0800309c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af04      	add	r7, sp, #16
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == INTERRUPT_LORA_Pin)
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d119      	bne.n	80030e0 <HAL_GPIO_EXTI_Callback+0x44>
  {
    osStatus_t err = osSemaphoreRelease(rxDoneSemaphoreHandle);
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f004 fc93 	bl	80079dc <osSemaphoreRelease>
 80030b6:	60f8      	str	r0, [r7, #12]
    if (!err) {
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d110      	bne.n	80030e0 <HAL_GPIO_EXTI_Callback+0x44>
      printf("\r\n");
 80030be:	480b      	ldr	r0, [pc, #44]	; (80030ec <HAL_GPIO_EXTI_Callback+0x50>)
 80030c0:	f008 f80a 	bl	800b0d8 <puts>
      STM_LOGD("EXTI_ISR", "release rxDoneSemaphore ok");
 80030c4:	f000 f962 	bl	800338c <HAL_GetTick>
 80030c8:	4603      	mov	r3, r0
 80030ca:	22de      	movs	r2, #222	; 0xde
 80030cc:	9202      	str	r2, [sp, #8]
 80030ce:	4a08      	ldr	r2, [pc, #32]	; (80030f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80030d0:	9201      	str	r2, [sp, #4]
 80030d2:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <HAL_GPIO_EXTI_Callback+0x58>)
 80030d4:	9200      	str	r2, [sp, #0]
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80030d8:	4906      	ldr	r1, [pc, #24]	; (80030f4 <HAL_GPIO_EXTI_Callback+0x58>)
 80030da:	2004      	movs	r0, #4
 80030dc:	f000 f83e 	bl	800315c <stm_log_write>
    }
  }
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20003a1c 	.word	0x20003a1c
 80030ec:	0800d1b8 	.word	0x0800d1b8
 80030f0:	0800d710 	.word	0x0800d710
 80030f4:	0800d1fc 	.word	0x0800d1fc
 80030f8:	0800d1bc 	.word	0x0800d1bc

080030fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af04      	add	r7, sp, #16
 8003102:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == hadc1.Instance)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_ADC_ConvCpltCallback+0x4c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d117      	bne.n	8003140 <HAL_ADC_ConvCpltCallback+0x44>
  {
    adcLightSensor = HAL_ADC_GetValue(hadc);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fb9b 	bl	800384c <HAL_ADC_GetValue>
 8003116:	4603      	mov	r3, r0
 8003118:	4a0c      	ldr	r2, [pc, #48]	; (800314c <HAL_ADC_ConvCpltCallback+0x50>)
 800311a:	6013      	str	r3, [r2, #0]
    STM_LOGI("ADC_ISR", "lightSensor: %d", adcLightSensor);
 800311c:	f000 f936 	bl	800338c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_ADC_ConvCpltCallback+0x50>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	9303      	str	r3, [sp, #12]
 8003128:	23e8      	movs	r3, #232	; 0xe8
 800312a:	9302      	str	r3, [sp, #8]
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_ADC_ConvCpltCallback+0x54>)
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_ADC_ConvCpltCallback+0x58>)
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	4a08      	ldr	r2, [pc, #32]	; (8003158 <HAL_ADC_ConvCpltCallback+0x5c>)
 8003138:	4906      	ldr	r1, [pc, #24]	; (8003154 <HAL_ADC_ConvCpltCallback+0x58>)
 800313a:	2003      	movs	r0, #3
 800313c:	f000 f80e 	bl	800315c <stm_log_write>
  }
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	200039e8 	.word	0x200039e8
 800314c:	20003ae4 	.word	0x20003ae4
 8003150:	0800d728 	.word	0x0800d728
 8003154:	0800d23c 	.word	0x0800d23c
 8003158:	0800d208 	.word	0x0800d208

0800315c <stm_log_write>:
#include <stdarg.h>

void stm_log_write(stm_log_level_t level,
                   const char *tag,
                   const char *format, ...)
{
 800315c:	b40c      	push	{r2, r3}
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	6039      	str	r1, [r7, #0]
 8003168:	71fb      	strb	r3, [r7, #7]
    va_list arg;
    va_start(arg, format);
 800316a:	f107 031c 	add.w	r3, r7, #28
 800316e:	60fb      	str	r3, [r7, #12]
    vprintf(format, arg);
 8003170:	68f9      	ldr	r1, [r7, #12]
 8003172:	69b8      	ldr	r0, [r7, #24]
 8003174:	f008 f87e 	bl	800b274 <viprintf>
    va_end(arg);
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003182:	b002      	add	sp, #8
 8003184:	4770      	bx	lr
	...

08003188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003190:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <_sbrk+0x5c>)
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <_sbrk+0x60>)
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <_sbrk+0x64>)
 80031a6:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <_sbrk+0x68>)
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <_sbrk+0x64>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d207      	bcs.n	80031c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031b8:	f007 fee0 	bl	800af7c <__errno>
 80031bc:	4603      	mov	r3, r0
 80031be:	220c      	movs	r2, #12
 80031c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	e009      	b.n	80031dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <_sbrk+0x64>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <_sbrk+0x64>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	4a05      	ldr	r2, [pc, #20]	; (80031ec <_sbrk+0x64>)
 80031d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20005000 	.word	0x20005000
 80031e8:	00000400 	.word	0x00000400
 80031ec:	200000c4 	.word	0x200000c4
 80031f0:	20003ba0 	.word	0x20003ba0

080031f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <MX_USART1_UART_Init+0x50>)
 8003206:	4a13      	ldr	r2, [pc, #76]	; (8003254 <MX_USART1_UART_Init+0x54>)
 8003208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <MX_USART1_UART_Init+0x50>)
 800320c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <MX_USART1_UART_Init+0x50>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003218:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <MX_USART1_UART_Init+0x50>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <MX_USART1_UART_Init+0x50>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <MX_USART1_UART_Init+0x50>)
 8003226:	220c      	movs	r2, #12
 8003228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <MX_USART1_UART_Init+0x50>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <MX_USART1_UART_Init+0x50>)
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003236:	4806      	ldr	r0, [pc, #24]	; (8003250 <MX_USART1_UART_Init+0x50>)
 8003238:	f003 fe04 	bl	8006e44 <HAL_UART_Init>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003242:	f7ff fc33 	bl	8002aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  RetargetInit(&huart1);
 8003246:	4802      	ldr	r0, [pc, #8]	; (8003250 <MX_USART1_UART_Init+0x50>)
 8003248:	f7ff fd24 	bl	8002c94 <RetargetInit>
  /* USER CODE END USART1_Init 2 */

}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20003ae8 	.word	0x20003ae8
 8003254:	40013800 	.word	0x40013800

08003258 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 0310 	add.w	r3, r7, #16
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <HAL_UART_MspInit+0x8c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d131      	bne.n	80032dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_UART_MspInit+0x90>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	4a1a      	ldr	r2, [pc, #104]	; (80032e8 <HAL_UART_MspInit+0x90>)
 800327e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003282:	6193      	str	r3, [r2, #24]
 8003284:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_UART_MspInit+0x90>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_UART_MspInit+0x90>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <HAL_UART_MspInit+0x90>)
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	6193      	str	r3, [r2, #24]
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_UART_MspInit+0x90>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032b2:	2303      	movs	r3, #3
 80032b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b6:	f107 0310 	add.w	r3, r7, #16
 80032ba:	4619      	mov	r1, r3
 80032bc:	480b      	ldr	r0, [pc, #44]	; (80032ec <HAL_UART_MspInit+0x94>)
 80032be:	f001 fa21 	bl	8004704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d0:	f107 0310 	add.w	r3, r7, #16
 80032d4:	4619      	mov	r1, r3
 80032d6:	4805      	ldr	r0, [pc, #20]	; (80032ec <HAL_UART_MspInit+0x94>)
 80032d8:	f001 fa14 	bl	8004704 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80032dc:	bf00      	nop
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40013800 	.word	0x40013800
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40010800 	.word	0x40010800

080032f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80032f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80032f2:	e003      	b.n	80032fc <LoopCopyDataInit>

080032f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80032f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80032f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80032fa:	3104      	adds	r1, #4

080032fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80032fc:	480a      	ldr	r0, [pc, #40]	; (8003328 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003300:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003302:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003304:	d3f6      	bcc.n	80032f4 <CopyDataInit>
  ldr r2, =_sbss
 8003306:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003308:	e002      	b.n	8003310 <LoopFillZerobss>

0800330a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800330a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800330c:	f842 3b04 	str.w	r3, [r2], #4

08003310 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003312:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003314:	d3f9      	bcc.n	800330a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003316:	f7ff ff6d 	bl	80031f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800331a:	f007 fe35 	bl	800af88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800331e:	f7ff f923 	bl	8002568 <main>
  bx lr
 8003322:	4770      	bx	lr
  ldr r3, =_sidata
 8003324:	0800d7fc 	.word	0x0800d7fc
  ldr r0, =_sdata
 8003328:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800332c:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 8003330:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 8003334:	20003ba0 	.word	0x20003ba0

08003338 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003338:	e7fe      	b.n	8003338 <CAN1_RX1_IRQHandler>
	...

0800333c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_Init+0x28>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a07      	ldr	r2, [pc, #28]	; (8003364 <HAL_Init+0x28>)
 8003346:	f043 0310 	orr.w	r3, r3, #16
 800334a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334c:	2003      	movs	r0, #3
 800334e:	f000 fe9d 	bl	800408c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003352:	2000      	movs	r0, #0
 8003354:	f7ff fe1c 	bl	8002f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003358:	f7ff fde2 	bl	8002f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40022000 	.word	0x40022000

08003368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_IncTick+0x1c>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_IncTick+0x20>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4413      	add	r3, r2
 8003378:	4a03      	ldr	r2, [pc, #12]	; (8003388 <HAL_IncTick+0x20>)
 800337a:	6013      	str	r3, [r2, #0]
}
 800337c:	bf00      	nop
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	20000028 	.word	0x20000028
 8003388:	20003b28 	.word	0x20003b28

0800338c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return uwTick;
 8003390:	4b02      	ldr	r3, [pc, #8]	; (800339c <HAL_GetTick+0x10>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	20003b28 	.word	0x20003b28

080033a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a8:	f7ff fff0 	bl	800338c <HAL_GetTick>
 80033ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d005      	beq.n	80033c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ba:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <HAL_Delay+0x44>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033c6:	bf00      	nop
 80033c8:	f7ff ffe0 	bl	800338c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d8f7      	bhi.n	80033c8 <HAL_Delay+0x28>
  {
  }
}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000028 	.word	0x20000028

080033e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e153      	b.n	80036b2 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a9f      	ldr	r2, [pc, #636]	; (800368c <HAL_ADC_Init+0x2a4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_ADC_Init+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a9d      	ldr	r2, [pc, #628]	; (8003690 <HAL_ADC_Init+0x2a8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_ADC_Init+0x40>
 800341e:	f240 11b3 	movw	r1, #435	; 0x1b3
 8003422:	489c      	ldr	r0, [pc, #624]	; (8003694 <HAL_ADC_Init+0x2ac>)
 8003424:	f7ff fb47 	bl	8002ab6 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d009      	beq.n	8003444 <HAL_ADC_Init+0x5c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003438:	d004      	beq.n	8003444 <HAL_ADC_Init+0x5c>
 800343a:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800343e:	4895      	ldr	r0, [pc, #596]	; (8003694 <HAL_ADC_Init+0x2ac>)
 8003440:	f7ff fb39 	bl	8002ab6 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d009      	beq.n	8003460 <HAL_ADC_Init+0x78>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003454:	d004      	beq.n	8003460 <HAL_ADC_Init+0x78>
 8003456:	f240 11b5 	movw	r1, #437	; 0x1b5
 800345a:	488e      	ldr	r0, [pc, #568]	; (8003694 <HAL_ADC_Init+0x2ac>)
 800345c:	f7ff fb2b 	bl	8002ab6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	7b1b      	ldrb	r3, [r3, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_ADC_Init+0x92>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	7b1b      	ldrb	r3, [r3, #12]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d004      	beq.n	800347a <HAL_ADC_Init+0x92>
 8003470:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8003474:	4887      	ldr	r0, [pc, #540]	; (8003694 <HAL_ADC_Init+0x2ac>)
 8003476:	f7ff fb1e 	bl	8002ab6 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d022      	beq.n	80034c8 <HAL_ADC_Init+0xe0>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800348a:	d01d      	beq.n	80034c8 <HAL_ADC_Init+0xe0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003494:	d018      	beq.n	80034c8 <HAL_ADC_Init+0xe0>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800349e:	d013      	beq.n	80034c8 <HAL_ADC_Init+0xe0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80034a8:	d00e      	beq.n	80034c8 <HAL_ADC_Init+0xe0>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034b2:	d009      	beq.n	80034c8 <HAL_ADC_Init+0xe0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034bc:	d004      	beq.n	80034c8 <HAL_ADC_Init+0xe0>
 80034be:	f240 11b7 	movw	r1, #439	; 0x1b7
 80034c2:	4874      	ldr	r0, [pc, #464]	; (8003694 <HAL_ADC_Init+0x2ac>)
 80034c4:	f7ff faf7 	bl	8002ab6 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d02a      	beq.n	8003526 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_ADC_Init+0xf8>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d904      	bls.n	80034ea <HAL_ADC_Init+0x102>
 80034e0:	f240 11bb 	movw	r1, #443	; 0x1bb
 80034e4:	486b      	ldr	r0, [pc, #428]	; (8003694 <HAL_ADC_Init+0x2ac>)
 80034e6:	f7ff fae6 	bl	8002ab6 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7d1b      	ldrb	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_ADC_Init+0x11c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	7d1b      	ldrb	r3, [r3, #20]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d004      	beq.n	8003504 <HAL_ADC_Init+0x11c>
 80034fa:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80034fe:	4865      	ldr	r0, [pc, #404]	; (8003694 <HAL_ADC_Init+0x2ac>)
 8003500:	f7ff fad9 	bl	8002ab6 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7d1b      	ldrb	r3, [r3, #20]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00c      	beq.n	8003526 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_ADC_Init+0x134>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d904      	bls.n	8003526 <HAL_ADC_Init+0x13e>
 800351c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003520:	485c      	ldr	r0, [pc, #368]	; (8003694 <HAL_ADC_Init+0x2ac>)
 8003522:	f7ff fac8 	bl	8002ab6 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fd f8c9 	bl	80006d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fcb4 	bl	8003eb0 <ADC_ConversionStop_Disable>
 8003548:	4603      	mov	r3, r0
 800354a:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	f040 80a3 	bne.w	80036a0 <HAL_ADC_Init+0x2b8>
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	2b00      	cmp	r3, #0
 800355e:	f040 809f 	bne.w	80036a0 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800356a:	f023 0302 	bic.w	r3, r3, #2
 800356e:	f043 0202 	orr.w	r2, r3, #2
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800357e:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7b1b      	ldrb	r3, [r3, #12]
 8003584:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003586:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	4313      	orrs	r3, r2
 800358c:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003596:	d003      	beq.n	80035a0 <HAL_ADC_Init+0x1b8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <HAL_ADC_Init+0x1be>
 80035a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a4:	e000      	b.n	80035a8 <HAL_ADC_Init+0x1c0>
 80035a6:	2300      	movs	r3, #0
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	7d1b      	ldrb	r3, [r3, #20]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d119      	bne.n	80035ea <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	7b1b      	ldrb	r3, [r3, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	035a      	lsls	r2, r3, #13
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	e00b      	b.n	80035ea <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	f043 0220 	orr.w	r2, r3, #32
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	f043 0201 	orr.w	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_ADC_Init+0x2b0>)
 8003606:	4013      	ands	r3, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	430b      	orrs	r3, r1
 8003610:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361a:	d003      	beq.n	8003624 <HAL_ADC_Init+0x23c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d104      	bne.n	800362e <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	3b01      	subs	r3, #1
 800362a:	051b      	lsls	r3, r3, #20
 800362c:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	430a      	orrs	r2, r1
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	4b14      	ldr	r3, [pc, #80]	; (800369c <HAL_ADC_Init+0x2b4>)
 800364a:	4013      	ands	r3, r2
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	d10b      	bne.n	800366a <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	f023 0303 	bic.w	r3, r3, #3
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003668:	e022      	b.n	80036b0 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	f023 0312 	bic.w	r3, r3, #18
 8003672:	f043 0210 	orr.w	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	f043 0201 	orr.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800368a:	e011      	b.n	80036b0 <HAL_ADC_Init+0x2c8>
 800368c:	40012400 	.word	0x40012400
 8003690:	40012800 	.word	0x40012800
 8003694:	0800d244 	.word	0x0800d244
 8003698:	ffe1f7fd 	.word	0xffe1f7fd
 800369c:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	f043 0210 	orr.w	r2, r3, #16
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop

080036bc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a5c      	ldr	r2, [pc, #368]	; (8003840 <HAL_ADC_Start_IT+0x184>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d009      	beq.n	80036e6 <HAL_ADC_Start_IT+0x2a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a5b      	ldr	r2, [pc, #364]	; (8003844 <HAL_ADC_Start_IT+0x188>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_ADC_Start_IT+0x2a>
 80036dc:	f240 516c 	movw	r1, #1388	; 0x56c
 80036e0:	4859      	ldr	r0, [pc, #356]	; (8003848 <HAL_ADC_Start_IT+0x18c>)
 80036e2:	f7ff f9e8 	bl	8002ab6 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_Start_IT+0x38>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e0a0      	b.n	8003836 <HAL_ADC_Start_IT+0x17a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fb85 	bl	8003e0c <ADC_Enable>
 8003702:	4603      	mov	r3, r0
 8003704:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f040 808f 	bne.w	800382c <HAL_ADC_Start_IT+0x170>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a47      	ldr	r2, [pc, #284]	; (8003844 <HAL_ADC_Start_IT+0x188>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d105      	bne.n	8003738 <HAL_ADC_Start_IT+0x7c>
 800372c:	4b44      	ldr	r3, [pc, #272]	; (8003840 <HAL_ADC_Start_IT+0x184>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d115      	bne.n	8003764 <HAL_ADC_Start_IT+0xa8>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374e:	2b00      	cmp	r3, #0
 8003750:	d026      	beq.n	80037a0 <HAL_ADC_Start_IT+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800375a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003762:	e01d      	b.n	80037a0 <HAL_ADC_Start_IT+0xe4>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a32      	ldr	r2, [pc, #200]	; (8003840 <HAL_ADC_Start_IT+0x184>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_ADC_Start_IT+0xc8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a31      	ldr	r2, [pc, #196]	; (8003844 <HAL_ADC_Start_IT+0x188>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d10d      	bne.n	80037a0 <HAL_ADC_Start_IT+0xe4>
 8003784:	4b2e      	ldr	r3, [pc, #184]	; (8003840 <HAL_ADC_Start_IT+0x184>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <HAL_ADC_Start_IT+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003798:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <HAL_ADC_Start_IT+0xfe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	f023 0206 	bic.w	r2, r3, #6
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80037b8:	e002      	b.n	80037c0 <HAL_ADC_Start_IT+0x104>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0202 	mvn.w	r2, #2
 80037d0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0220 	orr.w	r2, r2, #32
 80037e0:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037ec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80037f0:	d113      	bne.n	800381a <HAL_ADC_Start_IT+0x15e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037f6:	4a13      	ldr	r2, [pc, #76]	; (8003844 <HAL_ADC_Start_IT+0x188>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d105      	bne.n	8003808 <HAL_ADC_Start_IT+0x14c>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80037fc:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_ADC_Start_IT+0x184>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003804:	2b00      	cmp	r3, #0
 8003806:	d108      	bne.n	800381a <HAL_ADC_Start_IT+0x15e>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	e00c      	b.n	8003834 <HAL_ADC_Start_IT+0x178>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003828:	609a      	str	r2, [r3, #8]
 800382a:	e003      	b.n	8003834 <HAL_ADC_Start_IT+0x178>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40012400 	.word	0x40012400
 8003844:	40012800 	.word	0x40012800
 8003848:	0800d244 	.word	0x0800d244

0800384c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <HAL_ADC_GetValue+0x34>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_ADC_GetValue+0x26>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a08      	ldr	r2, [pc, #32]	; (8003884 <HAL_ADC_GetValue+0x38>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_ADC_GetValue+0x26>
 8003868:	f240 61e3 	movw	r1, #1763	; 0x6e3
 800386c:	4806      	ldr	r0, [pc, #24]	; (8003888 <HAL_ADC_GetValue+0x3c>)
 800386e:	f7ff f922 	bl	8002ab6 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40012400 	.word	0x40012400
 8003884:	40012800 	.word	0x40012800
 8003888:	0800d244 	.word	0x0800d244

0800388c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a72      	ldr	r2, [pc, #456]	; (8003a64 <HAL_ADC_IRQHandler+0x1d8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_ADC_IRQHandler+0x26>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a71      	ldr	r2, [pc, #452]	; (8003a68 <HAL_ADC_IRQHandler+0x1dc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_ADC_IRQHandler+0x26>
 80038a8:	f240 61f4 	movw	r1, #1780	; 0x6f4
 80038ac:	486f      	ldr	r0, [pc, #444]	; (8003a6c <HAL_ADC_IRQHandler+0x1e0>)
 80038ae:	f7ff f902 	bl	8002ab6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	7b1b      	ldrb	r3, [r3, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_ADC_IRQHandler+0x40>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7b1b      	ldrb	r3, [r3, #12]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d004      	beq.n	80038cc <HAL_ADC_IRQHandler+0x40>
 80038c2:	f240 61f5 	movw	r1, #1781	; 0x6f5
 80038c6:	4869      	ldr	r0, [pc, #420]	; (8003a6c <HAL_ADC_IRQHandler+0x1e0>)
 80038c8:	f7ff f8f5 	bl	8002ab6 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_ADC_IRQHandler+0x50>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d904      	bls.n	80038e6 <HAL_ADC_IRQHandler+0x5a>
 80038dc:	f240 61f6 	movw	r1, #1782	; 0x6f6
 80038e0:	4862      	ldr	r0, [pc, #392]	; (8003a6c <HAL_ADC_IRQHandler+0x1e0>)
 80038e2:	f7ff f8e8 	bl	8002ab6 <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d140      	bne.n	8003976 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d139      	bne.n	8003976 <HAL_ADC_IRQHandler+0xea>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <HAL_ADC_IRQHandler+0x8e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003924:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003928:	d11d      	bne.n	8003966 <HAL_ADC_IRQHandler+0xda>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800392e:	2b00      	cmp	r3, #0
 8003930:	d119      	bne.n	8003966 <HAL_ADC_IRQHandler+0xda>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0220 	bic.w	r2, r2, #32
 8003940:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d105      	bne.n	8003966 <HAL_ADC_IRQHandler+0xda>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	f043 0201 	orr.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fbc8 	bl	80030fc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0212 	mvn.w	r2, #18
 8003974:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d14f      	bne.n	8003a24 <HAL_ADC_IRQHandler+0x198>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b04      	cmp	r3, #4
 8003990:	d148      	bne.n	8003a24 <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b00      	cmp	r3, #0
 800399c:	d105      	bne.n	80039aa <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80039b4:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80039b8:	d012      	beq.n	80039e0 <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d125      	bne.n	8003a14 <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80039d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80039d6:	d11d      	bne.n	8003a14 <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d119      	bne.n	8003a14 <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fa85 	bl	8003f24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 020c 	mvn.w	r2, #12
 8003a22:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d114      	bne.n	8003a5c <HAL_ADC_IRQHandler+0x1d0>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10d      	bne.n	8003a5c <HAL_ADC_IRQHandler+0x1d0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f80f 	bl	8003a70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f06f 0201 	mvn.w	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40012400 	.word	0x40012400
 8003a68:	40012800 	.word	0x40012800
 8003a6c:	0800d244 	.word	0x0800d244

08003a70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a88      	ldr	r2, [pc, #544]	; (8003cbc <HAL_ADC_ConfigChannel+0x238>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d009      	beq.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a86      	ldr	r2, [pc, #536]	; (8003cc0 <HAL_ADC_ConfigChannel+0x23c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
 8003aaa:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8003aae:	4885      	ldr	r0, [pc, #532]	; (8003cc4 <HAL_ADC_ConfigChannel+0x240>)
 8003ab0:	f7ff f801 	bl	8002ab6 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d048      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d044      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d040      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d03c      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d038      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	d034      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b06      	cmp	r3, #6
 8003aea:	d030      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b07      	cmp	r3, #7
 8003af2:	d02c      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d028      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b09      	cmp	r3, #9
 8003b02:	d024      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b0a      	cmp	r3, #10
 8003b0a:	d020      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b0b      	cmp	r3, #11
 8003b12:	d01c      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d018      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b0d      	cmp	r3, #13
 8003b22:	d014      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b0e      	cmp	r3, #14
 8003b2a:	d010      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b0f      	cmp	r3, #15
 8003b32:	d00c      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d008      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b11      	cmp	r3, #17
 8003b42:	d004      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0xca>
 8003b44:	f240 71d2 	movw	r1, #2002	; 0x7d2
 8003b48:	485e      	ldr	r0, [pc, #376]	; (8003cc4 <HAL_ADC_ConfigChannel+0x240>)
 8003b4a:	f7fe ffb4 	bl	8002ab6 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d040      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d03c      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d038      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d034      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d030      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b06      	cmp	r3, #6
 8003b7c:	d02c      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b07      	cmp	r3, #7
 8003b84:	d028      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d024      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b09      	cmp	r3, #9
 8003b94:	d020      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b0a      	cmp	r3, #10
 8003b9c:	d01c      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b0b      	cmp	r3, #11
 8003ba4:	d018      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b0c      	cmp	r3, #12
 8003bac:	d014      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b0d      	cmp	r3, #13
 8003bb4:	d010      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b0e      	cmp	r3, #14
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b0f      	cmp	r3, #15
 8003bc4:	d008      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b10      	cmp	r3, #16
 8003bcc:	d004      	beq.n	8003bd8 <HAL_ADC_ConfigChannel+0x154>
 8003bce:	f240 71d3 	movw	r1, #2003	; 0x7d3
 8003bd2:	483c      	ldr	r0, [pc, #240]	; (8003cc4 <HAL_ADC_ConfigChannel+0x240>)
 8003bd4:	f7fe ff6f 	bl	8002ab6 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_ADC_ConfigChannel+0x19e>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d01c      	beq.n	8003c22 <HAL_ADC_ConfigChannel+0x19e>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d018      	beq.n	8003c22 <HAL_ADC_ConfigChannel+0x19e>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d014      	beq.n	8003c22 <HAL_ADC_ConfigChannel+0x19e>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d010      	beq.n	8003c22 <HAL_ADC_ConfigChannel+0x19e>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b05      	cmp	r3, #5
 8003c06:	d00c      	beq.n	8003c22 <HAL_ADC_ConfigChannel+0x19e>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b06      	cmp	r3, #6
 8003c0e:	d008      	beq.n	8003c22 <HAL_ADC_ConfigChannel+0x19e>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b07      	cmp	r3, #7
 8003c16:	d004      	beq.n	8003c22 <HAL_ADC_ConfigChannel+0x19e>
 8003c18:	f240 71d4 	movw	r1, #2004	; 0x7d4
 8003c1c:	4829      	ldr	r0, [pc, #164]	; (8003cc4 <HAL_ADC_ConfigChannel+0x240>)
 8003c1e:	f7fe ff4a 	bl	8002ab6 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x1ac>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0e2      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x372>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b06      	cmp	r3, #6
 8003c3e:	d81c      	bhi.n	8003c7a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	3b05      	subs	r3, #5
 8003c52:	221f      	movs	r2, #31
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	4019      	ands	r1, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	3b05      	subs	r3, #5
 8003c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	635a      	str	r2, [r3, #52]	; 0x34
 8003c78:	e042      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b0c      	cmp	r3, #12
 8003c80:	d822      	bhi.n	8003cc8 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	3b23      	subs	r3, #35	; 0x23
 8003c94:	221f      	movs	r2, #31
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	4019      	ands	r1, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	3b23      	subs	r3, #35	; 0x23
 8003cae:	fa00 f203 	lsl.w	r2, r0, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	631a      	str	r2, [r3, #48]	; 0x30
 8003cba:	e021      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x27c>
 8003cbc:	40012400 	.word	0x40012400
 8003cc0:	40012800 	.word	0x40012800
 8003cc4:	0800d244 	.word	0x0800d244
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3b41      	subs	r3, #65	; 0x41
 8003cda:	221f      	movs	r2, #31
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	4019      	ands	r1, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3b41      	subs	r3, #65	; 0x41
 8003cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b09      	cmp	r3, #9
 8003d06:	d91c      	bls.n	8003d42 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68d9      	ldr	r1, [r3, #12]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	3b1e      	subs	r3, #30
 8003d1a:	2207      	movs	r2, #7
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	4019      	ands	r1, r3
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	6898      	ldr	r0, [r3, #8]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	4413      	add	r3, r2
 8003d32:	3b1e      	subs	r3, #30
 8003d34:	fa00 f203 	lsl.w	r2, r0, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	60da      	str	r2, [r3, #12]
 8003d40:	e019      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6919      	ldr	r1, [r3, #16]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	4413      	add	r3, r2
 8003d52:	2207      	movs	r2, #7
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	4019      	ands	r1, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6898      	ldr	r0, [r3, #8]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d003      	beq.n	8003d86 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d82:	2b11      	cmp	r3, #17
 8003d84:	d132      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <HAL_ADC_ConfigChannel+0x37c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d125      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d126      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003dac:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d11a      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003db6:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <HAL_ADC_ConfigChannel+0x380>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a13      	ldr	r2, [pc, #76]	; (8003e08 <HAL_ADC_ConfigChannel+0x384>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	0c9a      	lsrs	r2, r3, #18
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003dcc:	e002      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f9      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x34a>
 8003dda:	e007      	b.n	8003dec <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40012400 	.word	0x40012400
 8003e04:	20000020 	.word	0x20000020
 8003e08:	431bde83 	.word	0x431bde83

08003e0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d039      	beq.n	8003e9e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <ADC_Enable+0x9c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1b      	ldr	r2, [pc, #108]	; (8003eac <ADC_Enable+0xa0>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	0c9b      	lsrs	r3, r3, #18
 8003e46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003e48:	e002      	b.n	8003e50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f9      	bne.n	8003e4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e56:	f7ff fa99 	bl	800338c <HAL_GetTick>
 8003e5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e5c:	e018      	b.n	8003e90 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e5e:	f7ff fa95 	bl	800338c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d911      	bls.n	8003e90 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	f043 0210 	orr.w	r2, r3, #16
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e007      	b.n	8003ea0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d1df      	bne.n	8003e5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000020 	.word	0x20000020
 8003eac:	431bde83 	.word	0x431bde83

08003eb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d127      	bne.n	8003f1a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eda:	f7ff fa57 	bl	800338c <HAL_GetTick>
 8003ede:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ee0:	e014      	b.n	8003f0c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ee2:	f7ff fa53 	bl	800338c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d90d      	bls.n	8003f0c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	f043 0210 	orr.w	r2, r3, #16
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	f043 0201 	orr.w	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e007      	b.n	8003f1c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d0e3      	beq.n	8003ee2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr
	...

08003f38 <__NVIC_SetPriorityGrouping>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <__NVIC_SetPriorityGrouping+0x44>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f54:	4013      	ands	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f6a:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <__NVIC_SetPriorityGrouping+0x44>)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	60d3      	str	r3, [r2, #12]
}
 8003f70:	bf00      	nop
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <__NVIC_GetPriorityGrouping>:
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <__NVIC_GetPriorityGrouping+0x18>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	0a1b      	lsrs	r3, r3, #8
 8003f8a:	f003 0307 	and.w	r3, r3, #7
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <__NVIC_EnableIRQ>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	db0b      	blt.n	8003fc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	f003 021f 	and.w	r2, r3, #31
 8003fb4:	4906      	ldr	r1, [pc, #24]	; (8003fd0 <__NVIC_EnableIRQ+0x34>)
 8003fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	e000e100 	.word	0xe000e100

08003fd4 <__NVIC_SetPriority>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	6039      	str	r1, [r7, #0]
 8003fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	db0a      	blt.n	8003ffe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	490c      	ldr	r1, [pc, #48]	; (8004020 <__NVIC_SetPriority+0x4c>)
 8003fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff2:	0112      	lsls	r2, r2, #4
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ffc:	e00a      	b.n	8004014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	4908      	ldr	r1, [pc, #32]	; (8004024 <__NVIC_SetPriority+0x50>)
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	3b04      	subs	r3, #4
 800400c:	0112      	lsls	r2, r2, #4
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	440b      	add	r3, r1
 8004012:	761a      	strb	r2, [r3, #24]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000e100 	.word	0xe000e100
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <NVIC_EncodePriority>:
{
 8004028:	b480      	push	{r7}
 800402a:	b089      	sub	sp, #36	; 0x24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f1c3 0307 	rsb	r3, r3, #7
 8004042:	2b04      	cmp	r3, #4
 8004044:	bf28      	it	cs
 8004046:	2304      	movcs	r3, #4
 8004048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3304      	adds	r3, #4
 800404e:	2b06      	cmp	r3, #6
 8004050:	d902      	bls.n	8004058 <NVIC_EncodePriority+0x30>
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3b03      	subs	r3, #3
 8004056:	e000      	b.n	800405a <NVIC_EncodePriority+0x32>
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800405c:	f04f 32ff 	mov.w	r2, #4294967295
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	401a      	ands	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004070:	f04f 31ff 	mov.w	r1, #4294967295
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	43d9      	mvns	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004080:	4313      	orrs	r3, r2
}
 8004082:	4618      	mov	r0, r3
 8004084:	3724      	adds	r7, #36	; 0x24
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b07      	cmp	r3, #7
 8004098:	d00f      	beq.n	80040ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b06      	cmp	r3, #6
 800409e:	d00c      	beq.n	80040ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d009      	beq.n	80040ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d006      	beq.n	80040ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d003      	beq.n	80040ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80040b2:	2192      	movs	r1, #146	; 0x92
 80040b4:	4804      	ldr	r0, [pc, #16]	; (80040c8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80040b6:	f7fe fcfe 	bl	8002ab6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff ff3c 	bl	8003f38 <__NVIC_SetPriorityGrouping>
}
 80040c0:	bf00      	nop
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	0800d27c 	.word	0x0800d27c

080040cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b0f      	cmp	r3, #15
 80040e2:	d903      	bls.n	80040ec <HAL_NVIC_SetPriority+0x20>
 80040e4:	21aa      	movs	r1, #170	; 0xaa
 80040e6:	480e      	ldr	r0, [pc, #56]	; (8004120 <HAL_NVIC_SetPriority+0x54>)
 80040e8:	f7fe fce5 	bl	8002ab6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b0f      	cmp	r3, #15
 80040f0:	d903      	bls.n	80040fa <HAL_NVIC_SetPriority+0x2e>
 80040f2:	21ab      	movs	r1, #171	; 0xab
 80040f4:	480a      	ldr	r0, [pc, #40]	; (8004120 <HAL_NVIC_SetPriority+0x54>)
 80040f6:	f7fe fcde 	bl	8002ab6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040fa:	f7ff ff41 	bl	8003f80 <__NVIC_GetPriorityGrouping>
 80040fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	6978      	ldr	r0, [r7, #20]
 8004106:	f7ff ff8f 	bl	8004028 <NVIC_EncodePriority>
 800410a:	4602      	mov	r2, r0
 800410c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004110:	4611      	mov	r1, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff ff5e 	bl	8003fd4 <__NVIC_SetPriority>
}
 8004118:	bf00      	nop
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	0800d27c 	.word	0x0800d27c

08004124 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800412e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004132:	2b00      	cmp	r3, #0
 8004134:	da03      	bge.n	800413e <HAL_NVIC_EnableIRQ+0x1a>
 8004136:	21be      	movs	r1, #190	; 0xbe
 8004138:	4805      	ldr	r0, [pc, #20]	; (8004150 <HAL_NVIC_EnableIRQ+0x2c>)
 800413a:	f7fe fcbc 	bl	8002ab6 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800413e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff ff2a 	bl	8003f9c <__NVIC_EnableIRQ>
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	0800d27c 	.word	0x0800d27c

08004154 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800416e:	4b49      	ldr	r3, [pc, #292]	; (8004294 <HAL_FLASH_Program+0x140>)
 8004170:	7e1b      	ldrb	r3, [r3, #24]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_FLASH_Program+0x26>
 8004176:	2302      	movs	r3, #2
 8004178:	e088      	b.n	800428c <HAL_FLASH_Program+0x138>
 800417a:	4b46      	ldr	r3, [pc, #280]	; (8004294 <HAL_FLASH_Program+0x140>)
 800417c:	2201      	movs	r2, #1
 800417e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d009      	beq.n	800419a <HAL_FLASH_Program+0x46>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d006      	beq.n	800419a <HAL_FLASH_Program+0x46>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d003      	beq.n	800419a <HAL_FLASH_Program+0x46>
 8004192:	21b2      	movs	r1, #178	; 0xb2
 8004194:	4840      	ldr	r0, [pc, #256]	; (8004298 <HAL_FLASH_Program+0x144>)
 8004196:	f7fe fc8e 	bl	8002ab6 <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a0:	d31e      	bcc.n	80041e0 <HAL_FLASH_Program+0x8c>
 80041a2:	4b3e      	ldr	r3, [pc, #248]	; (800429c <HAL_FLASH_Program+0x148>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	d104      	bne.n	80041b4 <HAL_FLASH_Program+0x60>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4a3c      	ldr	r2, [pc, #240]	; (80042a0 <HAL_FLASH_Program+0x14c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d816      	bhi.n	80041e0 <HAL_FLASH_Program+0x8c>
 80041b2:	e019      	b.n	80041e8 <HAL_FLASH_Program+0x94>
 80041b4:	4b39      	ldr	r3, [pc, #228]	; (800429c <HAL_FLASH_Program+0x148>)
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	2b40      	cmp	r3, #64	; 0x40
 80041ba:	d104      	bne.n	80041c6 <HAL_FLASH_Program+0x72>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4a39      	ldr	r2, [pc, #228]	; (80042a4 <HAL_FLASH_Program+0x150>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d80d      	bhi.n	80041e0 <HAL_FLASH_Program+0x8c>
 80041c4:	e010      	b.n	80041e8 <HAL_FLASH_Program+0x94>
 80041c6:	4b35      	ldr	r3, [pc, #212]	; (800429c <HAL_FLASH_Program+0x148>)
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d104      	bne.n	80041d8 <HAL_FLASH_Program+0x84>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4a35      	ldr	r2, [pc, #212]	; (80042a8 <HAL_FLASH_Program+0x154>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d204      	bcs.n	80041e0 <HAL_FLASH_Program+0x8c>
 80041d6:	e007      	b.n	80041e8 <HAL_FLASH_Program+0x94>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4a34      	ldr	r2, [pc, #208]	; (80042ac <HAL_FLASH_Program+0x158>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d303      	bcc.n	80041e8 <HAL_FLASH_Program+0x94>
 80041e0:	21b3      	movs	r1, #179	; 0xb3
 80041e2:	482d      	ldr	r0, [pc, #180]	; (8004298 <HAL_FLASH_Program+0x144>)
 80041e4:	f7fe fc67 	bl	8002ab6 <assert_failed>
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041ec:	f000 f8b4 	bl	8004358 <FLASH_WaitForLastOperation>
 80041f0:	4603      	mov	r3, r0
 80041f2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d144      	bne.n	8004284 <HAL_FLASH_Program+0x130>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d102      	bne.n	8004206 <HAL_FLASH_Program+0xb2>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004200:	2301      	movs	r3, #1
 8004202:	757b      	strb	r3, [r7, #21]
 8004204:	e007      	b.n	8004216 <HAL_FLASH_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b02      	cmp	r3, #2
 800420a:	d102      	bne.n	8004212 <HAL_FLASH_Program+0xbe>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800420c:	2302      	movs	r3, #2
 800420e:	757b      	strb	r3, [r7, #21]
 8004210:	e001      	b.n	8004216 <HAL_FLASH_Program+0xc2>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004212:	2304      	movs	r3, #4
 8004214:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004216:	2300      	movs	r3, #0
 8004218:	75bb      	strb	r3, [r7, #22]
 800421a:	e02d      	b.n	8004278 <HAL_FLASH_Program+0x124>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800421c:	7dbb      	ldrb	r3, [r7, #22]
 800421e:	005a      	lsls	r2, r3, #1
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	eb02 0c03 	add.w	ip, r2, r3
 8004226:	7dbb      	ldrb	r3, [r7, #22]
 8004228:	0119      	lsls	r1, r3, #4
 800422a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800422e:	f1c1 0620 	rsb	r6, r1, #32
 8004232:	f1a1 0020 	sub.w	r0, r1, #32
 8004236:	fa22 f401 	lsr.w	r4, r2, r1
 800423a:	fa03 f606 	lsl.w	r6, r3, r6
 800423e:	4334      	orrs	r4, r6
 8004240:	fa23 f000 	lsr.w	r0, r3, r0
 8004244:	4304      	orrs	r4, r0
 8004246:	fa23 f501 	lsr.w	r5, r3, r1
 800424a:	b2a3      	uxth	r3, r4
 800424c:	4619      	mov	r1, r3
 800424e:	4660      	mov	r0, ip
 8004250:	f000 f866 	bl	8004320 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004254:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004258:	f000 f87e 	bl	8004358 <FLASH_WaitForLastOperation>
 800425c:	4603      	mov	r3, r0
 800425e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004260:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <HAL_FLASH_Program+0x15c>)
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <HAL_FLASH_Program+0x15c>)
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d107      	bne.n	8004282 <HAL_FLASH_Program+0x12e>
    for (index = 0U; index < nbiterations; index++)
 8004272:	7dbb      	ldrb	r3, [r7, #22]
 8004274:	3301      	adds	r3, #1
 8004276:	75bb      	strb	r3, [r7, #22]
 8004278:	7dba      	ldrb	r2, [r7, #22]
 800427a:	7d7b      	ldrb	r3, [r7, #21]
 800427c:	429a      	cmp	r2, r3
 800427e:	d3cd      	bcc.n	800421c <HAL_FLASH_Program+0xc8>
 8004280:	e000      	b.n	8004284 <HAL_FLASH_Program+0x130>
      {
        break;
 8004282:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_FLASH_Program+0x140>)
 8004286:	2200      	movs	r2, #0
 8004288:	761a      	strb	r2, [r3, #24]

  return status;
 800428a:	7dfb      	ldrb	r3, [r7, #23]
}
 800428c:	4618      	mov	r0, r3
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004294:	20003b30 	.word	0x20003b30
 8004298:	0800d2b8 	.word	0x0800d2b8
 800429c:	1ffff7e0 	.word	0x1ffff7e0
 80042a0:	0801ffff 	.word	0x0801ffff
 80042a4:	0800ffff 	.word	0x0800ffff
 80042a8:	08008000 	.word	0x08008000
 80042ac:	08004000 	.word	0x08004000
 80042b0:	40022000 	.word	0x40022000

080042b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042be:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <HAL_FLASH_Unlock+0x40>)
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00d      	beq.n	80042e6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <HAL_FLASH_Unlock+0x40>)
 80042cc:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <HAL_FLASH_Unlock+0x44>)
 80042ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <HAL_FLASH_Unlock+0x40>)
 80042d2:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <HAL_FLASH_Unlock+0x48>)
 80042d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042d6:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <HAL_FLASH_Unlock+0x40>)
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80042e6:	79fb      	ldrb	r3, [r7, #7]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40022000 	.word	0x40022000
 80042f8:	45670123 	.word	0x45670123
 80042fc:	cdef89ab 	.word	0xcdef89ab

08004300 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_FLASH_Lock+0x1c>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	4a04      	ldr	r2, [pc, #16]	; (800431c <HAL_FLASH_Lock+0x1c>)
 800430a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40022000 	.word	0x40022000

08004320 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800432c:	4b08      	ldr	r3, [pc, #32]	; (8004350 <FLASH_Program_HalfWord+0x30>)
 800432e:	2200      	movs	r2, #0
 8004330:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <FLASH_Program_HalfWord+0x34>)
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	4a07      	ldr	r2, [pc, #28]	; (8004354 <FLASH_Program_HalfWord+0x34>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	887a      	ldrh	r2, [r7, #2]
 8004342:	801a      	strh	r2, [r3, #0]
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	20003b30 	.word	0x20003b30
 8004354:	40022000 	.word	0x40022000

08004358 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004360:	f7ff f814 	bl	800338c <HAL_GetTick>
 8004364:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004366:	e010      	b.n	800438a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d00c      	beq.n	800438a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <FLASH_WaitForLastOperation+0x2e>
 8004376:	f7ff f809 	bl	800338c <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	d201      	bcs.n	800438a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e025      	b.n	80043d6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800438a:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <FLASH_WaitForLastOperation+0x88>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e8      	bne.n	8004368 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004396:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <FLASH_WaitForLastOperation+0x88>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80043a2:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <FLASH_WaitForLastOperation+0x88>)
 80043a4:	2220      	movs	r2, #32
 80043a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80043a8:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <FLASH_WaitForLastOperation+0x88>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10b      	bne.n	80043cc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <FLASH_WaitForLastOperation+0x88>)
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <FLASH_WaitForLastOperation+0x88>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80043cc:	f000 f80a 	bl	80043e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40022000 	.word	0x40022000

080043e4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80043ee:	4b23      	ldr	r3, [pc, #140]	; (800447c <FLASH_SetErrorCode+0x98>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80043fa:	4b21      	ldr	r3, [pc, #132]	; (8004480 <FLASH_SetErrorCode+0x9c>)
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f043 0302 	orr.w	r3, r3, #2
 8004402:	4a1f      	ldr	r2, [pc, #124]	; (8004480 <FLASH_SetErrorCode+0x9c>)
 8004404:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f043 0310 	orr.w	r3, r3, #16
 800440c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800440e:	4b1b      	ldr	r3, [pc, #108]	; (800447c <FLASH_SetErrorCode+0x98>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800441a:	4b19      	ldr	r3, [pc, #100]	; (8004480 <FLASH_SetErrorCode+0x9c>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	4a17      	ldr	r2, [pc, #92]	; (8004480 <FLASH_SetErrorCode+0x9c>)
 8004424:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f043 0304 	orr.w	r3, r3, #4
 800442c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800442e:	4b13      	ldr	r3, [pc, #76]	; (800447c <FLASH_SetErrorCode+0x98>)
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800443a:	4b11      	ldr	r3, [pc, #68]	; (8004480 <FLASH_SetErrorCode+0x9c>)
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f043 0304 	orr.w	r3, r3, #4
 8004442:	4a0f      	ldr	r2, [pc, #60]	; (8004480 <FLASH_SetErrorCode+0x9c>)
 8004444:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004446:	4b0d      	ldr	r3, [pc, #52]	; (800447c <FLASH_SetErrorCode+0x98>)
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	4a0c      	ldr	r2, [pc, #48]	; (800447c <FLASH_SetErrorCode+0x98>)
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f240 1201 	movw	r2, #257	; 0x101
 8004458:	4293      	cmp	r3, r2
 800445a:	d106      	bne.n	800446a <FLASH_SetErrorCode+0x86>
 800445c:	4b07      	ldr	r3, [pc, #28]	; (800447c <FLASH_SetErrorCode+0x98>)
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	4a06      	ldr	r2, [pc, #24]	; (800447c <FLASH_SetErrorCode+0x98>)
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	61d3      	str	r3, [r2, #28]
}  
 8004468:	e002      	b.n	8004470 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800446a:	4a04      	ldr	r2, [pc, #16]	; (800447c <FLASH_SetErrorCode+0x98>)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	60d3      	str	r3, [r2, #12]
}  
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40022000 	.word	0x40022000
 8004480:	20003b30 	.word	0x20003b30

08004484 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004496:	4b70      	ldr	r3, [pc, #448]	; (8004658 <HAL_FLASHEx_Erase+0x1d4>)
 8004498:	7e1b      	ldrb	r3, [r3, #24]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_FLASHEx_Erase+0x1e>
 800449e:	2302      	movs	r3, #2
 80044a0:	e0d5      	b.n	800464e <HAL_FLASHEx_Erase+0x1ca>
 80044a2:	4b6d      	ldr	r3, [pc, #436]	; (8004658 <HAL_FLASHEx_Erase+0x1d4>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <HAL_FLASHEx_Erase+0x3c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d003      	beq.n	80044c0 <HAL_FLASHEx_Erase+0x3c>
 80044b8:	21a8      	movs	r1, #168	; 0xa8
 80044ba:	4868      	ldr	r0, [pc, #416]	; (800465c <HAL_FLASHEx_Erase+0x1d8>)
 80044bc:	f7fe fafb 	bl	8002ab6 <assert_failed>

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d117      	bne.n	80044f8 <HAL_FLASHEx_Erase+0x74>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80044c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044cc:	f7ff ff44 	bl	8004358 <FLASH_WaitForLastOperation>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f040 80b7 	bne.w	8004646 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80044d8:	2001      	movs	r0, #1
 80044da:	f000 f8cd 	bl	8004678 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044e2:	f7ff ff39 	bl	8004358 <FLASH_WaitForLastOperation>
 80044e6:	4603      	mov	r3, r0
 80044e8:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80044ea:	4b5d      	ldr	r3, [pc, #372]	; (8004660 <HAL_FLASHEx_Erase+0x1dc>)
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	4a5c      	ldr	r2, [pc, #368]	; (8004660 <HAL_FLASHEx_Erase+0x1dc>)
 80044f0:	f023 0304 	bic.w	r3, r3, #4
 80044f4:	6113      	str	r3, [r2, #16]
 80044f6:	e0a6      	b.n	8004646 <HAL_FLASHEx_Erase+0x1c2>
  }
  else
  {
    /* Page Erase is requested */
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004500:	d322      	bcc.n	8004548 <HAL_FLASHEx_Erase+0xc4>
 8004502:	4b58      	ldr	r3, [pc, #352]	; (8004664 <HAL_FLASHEx_Erase+0x1e0>)
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	2b80      	cmp	r3, #128	; 0x80
 8004508:	d105      	bne.n	8004516 <HAL_FLASHEx_Erase+0x92>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4a56      	ldr	r2, [pc, #344]	; (8004668 <HAL_FLASHEx_Erase+0x1e4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d819      	bhi.n	8004548 <HAL_FLASHEx_Erase+0xc4>
 8004514:	e01c      	b.n	8004550 <HAL_FLASHEx_Erase+0xcc>
 8004516:	4b53      	ldr	r3, [pc, #332]	; (8004664 <HAL_FLASHEx_Erase+0x1e0>)
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	2b40      	cmp	r3, #64	; 0x40
 800451c:	d105      	bne.n	800452a <HAL_FLASHEx_Erase+0xa6>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	4a52      	ldr	r2, [pc, #328]	; (800466c <HAL_FLASHEx_Erase+0x1e8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d80f      	bhi.n	8004548 <HAL_FLASHEx_Erase+0xc4>
 8004528:	e012      	b.n	8004550 <HAL_FLASHEx_Erase+0xcc>
 800452a:	4b4e      	ldr	r3, [pc, #312]	; (8004664 <HAL_FLASHEx_Erase+0x1e0>)
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	2b20      	cmp	r3, #32
 8004530:	d105      	bne.n	800453e <HAL_FLASHEx_Erase+0xba>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	4a4e      	ldr	r2, [pc, #312]	; (8004670 <HAL_FLASHEx_Erase+0x1ec>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d205      	bcs.n	8004548 <HAL_FLASHEx_Erase+0xc4>
 800453c:	e008      	b.n	8004550 <HAL_FLASHEx_Erase+0xcc>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	4a4c      	ldr	r2, [pc, #304]	; (8004674 <HAL_FLASHEx_Erase+0x1f0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d303      	bcc.n	8004550 <HAL_FLASHEx_Erase+0xcc>
 8004548:	21e9      	movs	r1, #233	; 0xe9
 800454a:	4844      	ldr	r0, [pc, #272]	; (800465c <HAL_FLASHEx_Erase+0x1d8>)
 800454c:	f7fe fab3 	bl	8002ab6 <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 8004550:	4b44      	ldr	r3, [pc, #272]	; (8004664 <HAL_FLASHEx_Erase+0x1e0>)
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	2b80      	cmp	r3, #128	; 0x80
 8004556:	d10d      	bne.n	8004574 <HAL_FLASHEx_Erase+0xf0>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	029b      	lsls	r3, r3, #10
 8004562:	4413      	add	r3, r2
 8004564:	3b01      	subs	r3, #1
 8004566:	4a40      	ldr	r2, [pc, #256]	; (8004668 <HAL_FLASHEx_Erase+0x1e4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	bf94      	ite	ls
 800456c:	2301      	movls	r3, #1
 800456e:	2300      	movhi	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e030      	b.n	80045d6 <HAL_FLASHEx_Erase+0x152>
 8004574:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <HAL_FLASHEx_Erase+0x1e0>)
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d10d      	bne.n	8004598 <HAL_FLASHEx_Erase+0x114>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	029b      	lsls	r3, r3, #10
 8004586:	4413      	add	r3, r2
 8004588:	3b01      	subs	r3, #1
 800458a:	4a38      	ldr	r2, [pc, #224]	; (800466c <HAL_FLASHEx_Erase+0x1e8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	bf94      	ite	ls
 8004590:	2301      	movls	r3, #1
 8004592:	2300      	movhi	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e01e      	b.n	80045d6 <HAL_FLASHEx_Erase+0x152>
 8004598:	4b32      	ldr	r3, [pc, #200]	; (8004664 <HAL_FLASHEx_Erase+0x1e0>)
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	2b20      	cmp	r3, #32
 800459e:	d10d      	bne.n	80045bc <HAL_FLASHEx_Erase+0x138>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	029b      	lsls	r3, r3, #10
 80045aa:	4413      	add	r3, r2
 80045ac:	3b01      	subs	r3, #1
 80045ae:	4a30      	ldr	r2, [pc, #192]	; (8004670 <HAL_FLASHEx_Erase+0x1ec>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	bf34      	ite	cc
 80045b4:	2301      	movcc	r3, #1
 80045b6:	2300      	movcs	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e00c      	b.n	80045d6 <HAL_FLASHEx_Erase+0x152>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	029b      	lsls	r3, r3, #10
 80045c6:	4413      	add	r3, r2
 80045c8:	3b01      	subs	r3, #1
 80045ca:	4a2a      	ldr	r2, [pc, #168]	; (8004674 <HAL_FLASHEx_Erase+0x1f0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	bf34      	ite	cc
 80045d0:	2301      	movcc	r3, #1
 80045d2:	2300      	movcs	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <HAL_FLASHEx_Erase+0x15e>
 80045da:	21ea      	movs	r1, #234	; 0xea
 80045dc:	481f      	ldr	r0, [pc, #124]	; (800465c <HAL_FLASHEx_Erase+0x1d8>)
 80045de:	f7fe fa6a 	bl	8002ab6 <assert_failed>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80045e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045e6:	f7ff feb7 	bl	8004358 <FLASH_WaitForLastOperation>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d12a      	bne.n	8004646 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	f04f 32ff 	mov.w	r2, #4294967295
 80045f6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	e019      	b.n	8004634 <HAL_FLASHEx_Erase+0x1b0>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004600:	68b8      	ldr	r0, [r7, #8]
 8004602:	f000 f85f 	bl	80046c4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004606:	f24c 3050 	movw	r0, #50000	; 0xc350
 800460a:	f7ff fea5 	bl	8004358 <FLASH_WaitForLastOperation>
 800460e:	4603      	mov	r3, r0
 8004610:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <HAL_FLASHEx_Erase+0x1dc>)
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	4a12      	ldr	r2, [pc, #72]	; (8004660 <HAL_FLASHEx_Erase+0x1dc>)
 8004618:	f023 0302 	bic.w	r3, r3, #2
 800461c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_FLASHEx_Erase+0x1a8>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	601a      	str	r2, [r3, #0]
            break;
 800462a:	e00c      	b.n	8004646 <HAL_FLASHEx_Erase+0x1c2>
            address += FLASH_PAGE_SIZE)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004632:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	029a      	lsls	r2, r3, #10
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	429a      	cmp	r2, r3
 8004644:	d3dc      	bcc.n	8004600 <HAL_FLASHEx_Erase+0x17c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004646:	4b04      	ldr	r3, [pc, #16]	; (8004658 <HAL_FLASHEx_Erase+0x1d4>)
 8004648:	2200      	movs	r2, #0
 800464a:	761a      	strb	r2, [r3, #24]

  return status;
 800464c:	7bfb      	ldrb	r3, [r7, #15]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20003b30 	.word	0x20003b30
 800465c:	0800d2f4 	.word	0x0800d2f4
 8004660:	40022000 	.word	0x40022000
 8004664:	1ffff7e0 	.word	0x1ffff7e0
 8004668:	0801ffff 	.word	0x0801ffff
 800466c:	0800ffff 	.word	0x0800ffff
 8004670:	08008000 	.word	0x08008000
 8004674:	08004000 	.word	0x08004000

08004678 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d004      	beq.n	8004690 <FLASH_MassErase+0x18>
 8004686:	f240 2156 	movw	r1, #598	; 0x256
 800468a:	480b      	ldr	r0, [pc, #44]	; (80046b8 <FLASH_MassErase+0x40>)
 800468c:	f7fe fa13 	bl	8002ab6 <assert_failed>

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <FLASH_MassErase+0x44>)
 8004692:	2200      	movs	r2, #0
 8004694:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <FLASH_MassErase+0x48>)
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <FLASH_MassErase+0x48>)
 800469c:	f043 0304 	orr.w	r3, r3, #4
 80046a0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80046a2:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <FLASH_MassErase+0x48>)
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	4a06      	ldr	r2, [pc, #24]	; (80046c0 <FLASH_MassErase+0x48>)
 80046a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ac:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	0800d2f4 	.word	0x0800d2f4
 80046bc:	20003b30 	.word	0x20003b30
 80046c0:	40022000 	.word	0x40022000

080046c4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <FLASH_PageErase+0x38>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <FLASH_PageErase+0x3c>)
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <FLASH_PageErase+0x3c>)
 80046d8:	f043 0302 	orr.w	r3, r3, #2
 80046dc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80046de:	4a08      	ldr	r2, [pc, #32]	; (8004700 <FLASH_PageErase+0x3c>)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <FLASH_PageErase+0x3c>)
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	4a05      	ldr	r2, [pc, #20]	; (8004700 <FLASH_PageErase+0x3c>)
 80046ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ee:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20003b30 	.word	0x20003b30
 8004700:	40022000 	.word	0x40022000

08004704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800470e:	2300      	movs	r3, #0
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004712:	2300      	movs	r3, #0
 8004714:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4aa1      	ldr	r2, [pc, #644]	; (80049a0 <HAL_GPIO_Init+0x29c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_GPIO_Init+0x42>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4aa0      	ldr	r2, [pc, #640]	; (80049a4 <HAL_GPIO_Init+0x2a0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00f      	beq.n	8004746 <HAL_GPIO_Init+0x42>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a9f      	ldr	r2, [pc, #636]	; (80049a8 <HAL_GPIO_Init+0x2a4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00b      	beq.n	8004746 <HAL_GPIO_Init+0x42>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a9e      	ldr	r2, [pc, #632]	; (80049ac <HAL_GPIO_Init+0x2a8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d007      	beq.n	8004746 <HAL_GPIO_Init+0x42>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a9d      	ldr	r2, [pc, #628]	; (80049b0 <HAL_GPIO_Init+0x2ac>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x42>
 800473e:	21bd      	movs	r1, #189	; 0xbd
 8004740:	489c      	ldr	r0, [pc, #624]	; (80049b4 <HAL_GPIO_Init+0x2b0>)
 8004742:	f7fe f9b8 	bl	8002ab6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_GPIO_Init+0x58>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	041b      	lsls	r3, r3, #16
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_Init+0x60>
 800475c:	21be      	movs	r1, #190	; 0xbe
 800475e:	4895      	ldr	r0, [pc, #596]	; (80049b4 <HAL_GPIO_Init+0x2b0>)
 8004760:	f7fe f9a9 	bl	8002ab6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 821d 	beq.w	8004ba8 <HAL_GPIO_Init+0x4a4>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	f000 8218 	beq.w	8004ba8 <HAL_GPIO_Init+0x4a4>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b11      	cmp	r3, #17
 800477e:	f000 8213 	beq.w	8004ba8 <HAL_GPIO_Init+0x4a4>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b02      	cmp	r3, #2
 8004788:	f000 820e 	beq.w	8004ba8 <HAL_GPIO_Init+0x4a4>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b12      	cmp	r3, #18
 8004792:	f000 8209 	beq.w	8004ba8 <HAL_GPIO_Init+0x4a4>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4a87      	ldr	r2, [pc, #540]	; (80049b8 <HAL_GPIO_Init+0x2b4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	f000 8203 	beq.w	8004ba8 <HAL_GPIO_Init+0x4a4>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4a85      	ldr	r2, [pc, #532]	; (80049bc <HAL_GPIO_Init+0x2b8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	f000 81fd 	beq.w	8004ba8 <HAL_GPIO_Init+0x4a4>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4a83      	ldr	r2, [pc, #524]	; (80049c0 <HAL_GPIO_Init+0x2bc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	f000 81f7 	beq.w	8004ba8 <HAL_GPIO_Init+0x4a4>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4a81      	ldr	r2, [pc, #516]	; (80049c4 <HAL_GPIO_Init+0x2c0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	f000 81f1 	beq.w	8004ba8 <HAL_GPIO_Init+0x4a4>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4a7f      	ldr	r2, [pc, #508]	; (80049c8 <HAL_GPIO_Init+0x2c4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	f000 81eb 	beq.w	8004ba8 <HAL_GPIO_Init+0x4a4>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4a7d      	ldr	r2, [pc, #500]	; (80049cc <HAL_GPIO_Init+0x2c8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	f000 81e5 	beq.w	8004ba8 <HAL_GPIO_Init+0x4a4>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	f000 81e0 	beq.w	8004ba8 <HAL_GPIO_Init+0x4a4>
 80047e8:	21bf      	movs	r1, #191	; 0xbf
 80047ea:	4872      	ldr	r0, [pc, #456]	; (80049b4 <HAL_GPIO_Init+0x2b0>)
 80047ec:	f7fe f963 	bl	8002ab6 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047f0:	e1da      	b.n	8004ba8 <HAL_GPIO_Init+0x4a4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80047f2:	2201      	movs	r2, #1
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	429a      	cmp	r2, r3
 800480c:	f040 81c9 	bne.w	8004ba2 <HAL_GPIO_Init+0x49e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a63      	ldr	r2, [pc, #396]	; (80049a0 <HAL_GPIO_Init+0x29c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <HAL_GPIO_Init+0x13c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a62      	ldr	r2, [pc, #392]	; (80049a4 <HAL_GPIO_Init+0x2a0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00f      	beq.n	8004840 <HAL_GPIO_Init+0x13c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a61      	ldr	r2, [pc, #388]	; (80049a8 <HAL_GPIO_Init+0x2a4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00b      	beq.n	8004840 <HAL_GPIO_Init+0x13c>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a60      	ldr	r2, [pc, #384]	; (80049ac <HAL_GPIO_Init+0x2a8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <HAL_GPIO_Init+0x13c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a5f      	ldr	r2, [pc, #380]	; (80049b0 <HAL_GPIO_Init+0x2ac>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <HAL_GPIO_Init+0x13c>
 8004838:	21cd      	movs	r1, #205	; 0xcd
 800483a:	485e      	ldr	r0, [pc, #376]	; (80049b4 <HAL_GPIO_Init+0x2b0>)
 800483c:	f7fe f93b 	bl	8002ab6 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4a61      	ldr	r2, [pc, #388]	; (80049cc <HAL_GPIO_Init+0x2c8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	f000 80c2 	beq.w	80049d0 <HAL_GPIO_Init+0x2cc>
 800484c:	4a5f      	ldr	r2, [pc, #380]	; (80049cc <HAL_GPIO_Init+0x2c8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	f200 80e8 	bhi.w	8004a24 <HAL_GPIO_Init+0x320>
 8004854:	4a5a      	ldr	r2, [pc, #360]	; (80049c0 <HAL_GPIO_Init+0x2bc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	f000 80ba 	beq.w	80049d0 <HAL_GPIO_Init+0x2cc>
 800485c:	4a58      	ldr	r2, [pc, #352]	; (80049c0 <HAL_GPIO_Init+0x2bc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	f200 80e0 	bhi.w	8004a24 <HAL_GPIO_Init+0x320>
 8004864:	4a58      	ldr	r2, [pc, #352]	; (80049c8 <HAL_GPIO_Init+0x2c4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	f000 80b2 	beq.w	80049d0 <HAL_GPIO_Init+0x2cc>
 800486c:	4a56      	ldr	r2, [pc, #344]	; (80049c8 <HAL_GPIO_Init+0x2c4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	f200 80d8 	bhi.w	8004a24 <HAL_GPIO_Init+0x320>
 8004874:	4a51      	ldr	r2, [pc, #324]	; (80049bc <HAL_GPIO_Init+0x2b8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	f000 80aa 	beq.w	80049d0 <HAL_GPIO_Init+0x2cc>
 800487c:	4a4f      	ldr	r2, [pc, #316]	; (80049bc <HAL_GPIO_Init+0x2b8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	f200 80d0 	bhi.w	8004a24 <HAL_GPIO_Init+0x320>
 8004884:	4a4f      	ldr	r2, [pc, #316]	; (80049c4 <HAL_GPIO_Init+0x2c0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	f000 80a2 	beq.w	80049d0 <HAL_GPIO_Init+0x2cc>
 800488c:	4a4d      	ldr	r2, [pc, #308]	; (80049c4 <HAL_GPIO_Init+0x2c0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	f200 80c8 	bhi.w	8004a24 <HAL_GPIO_Init+0x320>
 8004894:	2b12      	cmp	r3, #18
 8004896:	d82b      	bhi.n	80048f0 <HAL_GPIO_Init+0x1ec>
 8004898:	2b12      	cmp	r3, #18
 800489a:	f200 80c3 	bhi.w	8004a24 <HAL_GPIO_Init+0x320>
 800489e:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <HAL_GPIO_Init+0x1a0>)
 80048a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a4:	080049d1 	.word	0x080049d1
 80048a8:	080048f9 	.word	0x080048f9
 80048ac:	0800494b 	.word	0x0800494b
 80048b0:	08004a1f 	.word	0x08004a1f
 80048b4:	08004a25 	.word	0x08004a25
 80048b8:	08004a25 	.word	0x08004a25
 80048bc:	08004a25 	.word	0x08004a25
 80048c0:	08004a25 	.word	0x08004a25
 80048c4:	08004a25 	.word	0x08004a25
 80048c8:	08004a25 	.word	0x08004a25
 80048cc:	08004a25 	.word	0x08004a25
 80048d0:	08004a25 	.word	0x08004a25
 80048d4:	08004a25 	.word	0x08004a25
 80048d8:	08004a25 	.word	0x08004a25
 80048dc:	08004a25 	.word	0x08004a25
 80048e0:	08004a25 	.word	0x08004a25
 80048e4:	08004a25 	.word	0x08004a25
 80048e8:	08004921 	.word	0x08004921
 80048ec:	08004975 	.word	0x08004975
 80048f0:	4a31      	ldr	r2, [pc, #196]	; (80049b8 <HAL_GPIO_Init+0x2b4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d06c      	beq.n	80049d0 <HAL_GPIO_Init+0x2cc>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80048f6:	e095      	b.n	8004a24 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d00b      	beq.n	8004918 <HAL_GPIO_Init+0x214>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d007      	beq.n	8004918 <HAL_GPIO_Init+0x214>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b03      	cmp	r3, #3
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x214>
 8004910:	21d5      	movs	r1, #213	; 0xd5
 8004912:	4828      	ldr	r0, [pc, #160]	; (80049b4 <HAL_GPIO_Init+0x2b0>)
 8004914:	f7fe f8cf 	bl	8002ab6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	623b      	str	r3, [r7, #32]
          break;
 800491e:	e082      	b.n	8004a26 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d00b      	beq.n	8004940 <HAL_GPIO_Init+0x23c>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d007      	beq.n	8004940 <HAL_GPIO_Init+0x23c>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x23c>
 8004938:	21dc      	movs	r1, #220	; 0xdc
 800493a:	481e      	ldr	r0, [pc, #120]	; (80049b4 <HAL_GPIO_Init+0x2b0>)
 800493c:	f7fe f8bb 	bl	8002ab6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	3304      	adds	r3, #4
 8004946:	623b      	str	r3, [r7, #32]
          break;
 8004948:	e06d      	b.n	8004a26 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d00b      	beq.n	800496a <HAL_GPIO_Init+0x266>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d007      	beq.n	800496a <HAL_GPIO_Init+0x266>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x266>
 8004962:	21e3      	movs	r1, #227	; 0xe3
 8004964:	4813      	ldr	r0, [pc, #76]	; (80049b4 <HAL_GPIO_Init+0x2b0>)
 8004966:	f7fe f8a6 	bl	8002ab6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	3308      	adds	r3, #8
 8004970:	623b      	str	r3, [r7, #32]
          break;
 8004972:	e058      	b.n	8004a26 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d00b      	beq.n	8004994 <HAL_GPIO_Init+0x290>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d007      	beq.n	8004994 <HAL_GPIO_Init+0x290>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b03      	cmp	r3, #3
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x290>
 800498c:	21ea      	movs	r1, #234	; 0xea
 800498e:	4809      	ldr	r0, [pc, #36]	; (80049b4 <HAL_GPIO_Init+0x2b0>)
 8004990:	f7fe f891 	bl	8002ab6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	330c      	adds	r3, #12
 800499a:	623b      	str	r3, [r7, #32]
          break;
 800499c:	e043      	b.n	8004a26 <HAL_GPIO_Init+0x322>
 800499e:	bf00      	nop
 80049a0:	40010800 	.word	0x40010800
 80049a4:	40010c00 	.word	0x40010c00
 80049a8:	40011000 	.word	0x40011000
 80049ac:	40011400 	.word	0x40011400
 80049b0:	40011800 	.word	0x40011800
 80049b4:	0800d334 	.word	0x0800d334
 80049b8:	10110000 	.word	0x10110000
 80049bc:	10210000 	.word	0x10210000
 80049c0:	10310000 	.word	0x10310000
 80049c4:	10120000 	.word	0x10120000
 80049c8:	10220000 	.word	0x10220000
 80049cc:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00b      	beq.n	80049f0 <HAL_GPIO_Init+0x2ec>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d007      	beq.n	80049f0 <HAL_GPIO_Init+0x2ec>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d003      	beq.n	80049f0 <HAL_GPIO_Init+0x2ec>
 80049e8:	21f7      	movs	r1, #247	; 0xf7
 80049ea:	4876      	ldr	r0, [pc, #472]	; (8004bc4 <HAL_GPIO_Init+0x4c0>)
 80049ec:	f7fe f863 	bl	8002ab6 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <HAL_GPIO_Init+0x2fa>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80049f8:	2304      	movs	r3, #4
 80049fa:	623b      	str	r3, [r7, #32]
          break;
 80049fc:	e013      	b.n	8004a26 <HAL_GPIO_Init+0x322>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d105      	bne.n	8004a12 <HAL_GPIO_Init+0x30e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a06:	2308      	movs	r3, #8
 8004a08:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	611a      	str	r2, [r3, #16]
          break;
 8004a10:	e009      	b.n	8004a26 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a12:	2308      	movs	r3, #8
 8004a14:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	615a      	str	r2, [r3, #20]
          break;
 8004a1c:	e003      	b.n	8004a26 <HAL_GPIO_Init+0x322>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
          break;
 8004a22:	e000      	b.n	8004a26 <HAL_GPIO_Init+0x322>
          break;
 8004a24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2bff      	cmp	r3, #255	; 0xff
 8004a2a:	d801      	bhi.n	8004a30 <HAL_GPIO_Init+0x32c>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	e001      	b.n	8004a34 <HAL_GPIO_Init+0x330>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2bff      	cmp	r3, #255	; 0xff
 8004a3a:	d802      	bhi.n	8004a42 <HAL_GPIO_Init+0x33e>
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	e002      	b.n	8004a48 <HAL_GPIO_Init+0x344>
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	3b08      	subs	r3, #8
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	210f      	movs	r1, #15
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	fa01 f303 	lsl.w	r3, r1, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	401a      	ands	r2, r3
 8004a5a:	6a39      	ldr	r1, [r7, #32]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a62:	431a      	orrs	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8096 	beq.w	8004ba2 <HAL_GPIO_Init+0x49e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a76:	4b54      	ldr	r3, [pc, #336]	; (8004bc8 <HAL_GPIO_Init+0x4c4>)
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	4a53      	ldr	r2, [pc, #332]	; (8004bc8 <HAL_GPIO_Init+0x4c4>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	6193      	str	r3, [r2, #24]
 8004a82:	4b51      	ldr	r3, [pc, #324]	; (8004bc8 <HAL_GPIO_Init+0x4c4>)
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	60bb      	str	r3, [r7, #8]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004a8e:	4a4f      	ldr	r2, [pc, #316]	; (8004bcc <HAL_GPIO_Init+0x4c8>)
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	089b      	lsrs	r3, r3, #2
 8004a94:	3302      	adds	r3, #2
 8004a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	220f      	movs	r2, #15
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a46      	ldr	r2, [pc, #280]	; (8004bd0 <HAL_GPIO_Init+0x4cc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <HAL_GPIO_Init+0x3de>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a45      	ldr	r2, [pc, #276]	; (8004bd4 <HAL_GPIO_Init+0x4d0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00d      	beq.n	8004ade <HAL_GPIO_Init+0x3da>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a44      	ldr	r2, [pc, #272]	; (8004bd8 <HAL_GPIO_Init+0x4d4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <HAL_GPIO_Init+0x3d6>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a43      	ldr	r2, [pc, #268]	; (8004bdc <HAL_GPIO_Init+0x4d8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d101      	bne.n	8004ad6 <HAL_GPIO_Init+0x3d2>
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e006      	b.n	8004ae4 <HAL_GPIO_Init+0x3e0>
 8004ad6:	2304      	movs	r3, #4
 8004ad8:	e004      	b.n	8004ae4 <HAL_GPIO_Init+0x3e0>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e002      	b.n	8004ae4 <HAL_GPIO_Init+0x3e0>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_GPIO_Init+0x3e0>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae6:	f002 0203 	and.w	r2, r2, #3
 8004aea:	0092      	lsls	r2, r2, #2
 8004aec:	4093      	lsls	r3, r2
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004af4:	4935      	ldr	r1, [pc, #212]	; (8004bcc <HAL_GPIO_Init+0x4c8>)
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	3302      	adds	r3, #2
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d006      	beq.n	8004b1c <HAL_GPIO_Init+0x418>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b0e:	4b34      	ldr	r3, [pc, #208]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4933      	ldr	r1, [pc, #204]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	600b      	str	r3, [r1, #0]
 8004b1a:	e006      	b.n	8004b2a <HAL_GPIO_Init+0x426>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b1c:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	43db      	mvns	r3, r3
 8004b24:	492e      	ldr	r1, [pc, #184]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d006      	beq.n	8004b44 <HAL_GPIO_Init+0x440>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b36:	4b2a      	ldr	r3, [pc, #168]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	4929      	ldr	r1, [pc, #164]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	604b      	str	r3, [r1, #4]
 8004b42:	e006      	b.n	8004b52 <HAL_GPIO_Init+0x44e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b44:	4b26      	ldr	r3, [pc, #152]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	4924      	ldr	r1, [pc, #144]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d006      	beq.n	8004b6c <HAL_GPIO_Init+0x468>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	491f      	ldr	r1, [pc, #124]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
 8004b6a:	e006      	b.n	8004b7a <HAL_GPIO_Init+0x476>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b6c:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	491a      	ldr	r1, [pc, #104]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d006      	beq.n	8004b94 <HAL_GPIO_Init+0x490>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b86:	4b16      	ldr	r3, [pc, #88]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	4915      	ldr	r1, [pc, #84]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60cb      	str	r3, [r1, #12]
 8004b92:	e006      	b.n	8004ba2 <HAL_GPIO_Init+0x49e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b94:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	4910      	ldr	r1, [pc, #64]	; (8004be0 <HAL_GPIO_Init+0x4dc>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f47f ae1d 	bne.w	80047f2 <HAL_GPIO_Init+0xee>
  }
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	3728      	adds	r7, #40	; 0x28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	0800d334 	.word	0x0800d334
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	40010800 	.word	0x40010800
 8004bd4:	40010c00 	.word	0x40010c00
 8004bd8:	40011000 	.word	0x40011000
 8004bdc:	40011400 	.word	0x40011400
 8004be0:	40010400 	.word	0x40010400

08004be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004bf4:	887b      	ldrh	r3, [r7, #2]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <HAL_GPIO_WritePin+0x20>
 8004bfa:	887b      	ldrh	r3, [r7, #2]
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <HAL_GPIO_WritePin+0x2a>
 8004c04:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8004c08:	480e      	ldr	r0, [pc, #56]	; (8004c44 <HAL_GPIO_WritePin+0x60>)
 8004c0a:	f7fd ff54 	bl	8002ab6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004c0e:	787b      	ldrb	r3, [r7, #1]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_GPIO_WritePin+0x40>
 8004c14:	787b      	ldrb	r3, [r7, #1]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d004      	beq.n	8004c24 <HAL_GPIO_WritePin+0x40>
 8004c1a:	f240 11d5 	movw	r1, #469	; 0x1d5
 8004c1e:	4809      	ldr	r0, [pc, #36]	; (8004c44 <HAL_GPIO_WritePin+0x60>)
 8004c20:	f7fd ff49 	bl	8002ab6 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004c24:	787b      	ldrb	r3, [r7, #1]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c2a:	887a      	ldrh	r2, [r7, #2]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c30:	e003      	b.n	8004c3a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c32:	887b      	ldrh	r3, [r7, #2]
 8004c34:	041a      	lsls	r2, r3, #16
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	611a      	str	r2, [r3, #16]
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	0800d334 	.word	0x0800d334

08004c48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004c54:	887b      	ldrh	r3, [r7, #2]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <HAL_GPIO_TogglePin+0x1c>
 8004c5a:	887b      	ldrh	r3, [r7, #2]
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <HAL_GPIO_TogglePin+0x26>
 8004c64:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8004c68:	480a      	ldr	r0, [pc, #40]	; (8004c94 <HAL_GPIO_TogglePin+0x4c>)
 8004c6a:	f7fd ff24 	bl	8002ab6 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c74:	887a      	ldrh	r2, [r7, #2]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	041a      	lsls	r2, r3, #16
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	43d9      	mvns	r1, r3
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	400b      	ands	r3, r1
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	0800d334 	.word	0x0800d334

08004c98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ca2:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d006      	beq.n	8004cbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cae:	4a05      	ldr	r2, [pc, #20]	; (8004cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe f9f0 	bl	800309c <HAL_GPIO_EXTI_Callback>
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40010400 	.word	0x40010400

08004cc8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e05d      	b.n	8004d96 <HAL_IWDG_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a30      	ldr	r2, [pc, #192]	; (8004da0 <HAL_IWDG_Init+0xd8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <HAL_IWDG_Init+0x24>
 8004ce4:	21ac      	movs	r1, #172	; 0xac
 8004ce6:	482f      	ldr	r0, [pc, #188]	; (8004da4 <HAL_IWDG_Init+0xdc>)
 8004ce8:	f7fd fee5 	bl	8002ab6 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01b      	beq.n	8004d2c <HAL_IWDG_Init+0x64>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d017      	beq.n	8004d2c <HAL_IWDG_Init+0x64>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d013      	beq.n	8004d2c <HAL_IWDG_Init+0x64>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d00f      	beq.n	8004d2c <HAL_IWDG_Init+0x64>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d00b      	beq.n	8004d2c <HAL_IWDG_Init+0x64>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b05      	cmp	r3, #5
 8004d1a:	d007      	beq.n	8004d2c <HAL_IWDG_Init+0x64>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b06      	cmp	r3, #6
 8004d22:	d003      	beq.n	8004d2c <HAL_IWDG_Init+0x64>
 8004d24:	21ad      	movs	r1, #173	; 0xad
 8004d26:	481f      	ldr	r0, [pc, #124]	; (8004da4 <HAL_IWDG_Init+0xdc>)
 8004d28:	f7fd fec5 	bl	8002ab6 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d34:	d303      	bcc.n	8004d3e <HAL_IWDG_Init+0x76>
 8004d36:	21ae      	movs	r1, #174	; 0xae
 8004d38:	481a      	ldr	r0, [pc, #104]	; (8004da4 <HAL_IWDG_Init+0xdc>)
 8004d3a:	f7fd febc 	bl	8002ab6 <assert_failed>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004d46:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f245 5255 	movw	r2, #21845	; 0x5555
 8004d50:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6852      	ldr	r2, [r2, #4]
 8004d5a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6892      	ldr	r2, [r2, #8]
 8004d64:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004d66:	f7fe fb11 	bl	800338c <HAL_GetTick>
 8004d6a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8004d6c:	e008      	b.n	8004d80 <HAL_IWDG_Init+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004d6e:	f7fe fb0d 	bl	800338c <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b26      	cmp	r3, #38	; 0x26
 8004d7a:	d901      	bls.n	8004d80 <HAL_IWDG_Init+0xb8>
    {
      return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e00a      	b.n	8004d96 <HAL_IWDG_Init+0xce>
  while (hiwdg->Instance->SR != 0x00u)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f1      	bne.n	8004d6e <HAL_IWDG_Init+0xa6>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004d92:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40003000 	.word	0x40003000
 8004da4:	0800d370 	.word	0x0800d370

08004da8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004db8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
	...

08004dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e35c      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01c      	beq.n	8004e1c <HAL_RCC_OscConfig+0x54>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d116      	bne.n	8004e1c <HAL_RCC_OscConfig+0x54>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d110      	bne.n	8004e1c <HAL_RCC_OscConfig+0x54>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <HAL_RCC_OscConfig+0x54>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d104      	bne.n	8004e1c <HAL_RCC_OscConfig+0x54>
 8004e12:	f240 1167 	movw	r1, #359	; 0x167
 8004e16:	48a5      	ldr	r0, [pc, #660]	; (80050ac <HAL_RCC_OscConfig+0x2e4>)
 8004e18:	f7fd fe4d 	bl	8002ab6 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 809a 	beq.w	8004f5e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00e      	beq.n	8004e50 <HAL_RCC_OscConfig+0x88>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3a:	d009      	beq.n	8004e50 <HAL_RCC_OscConfig+0x88>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e44:	d004      	beq.n	8004e50 <HAL_RCC_OscConfig+0x88>
 8004e46:	f240 116d 	movw	r1, #365	; 0x16d
 8004e4a:	4898      	ldr	r0, [pc, #608]	; (80050ac <HAL_RCC_OscConfig+0x2e4>)
 8004e4c:	f7fd fe33 	bl	8002ab6 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e50:	4b97      	ldr	r3, [pc, #604]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 030c 	and.w	r3, r3, #12
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d00c      	beq.n	8004e76 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e5c:	4b94      	ldr	r3, [pc, #592]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 030c 	and.w	r3, r3, #12
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d112      	bne.n	8004e8e <HAL_RCC_OscConfig+0xc6>
 8004e68:	4b91      	ldr	r3, [pc, #580]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e74:	d10b      	bne.n	8004e8e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e76:	4b8e      	ldr	r3, [pc, #568]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d06c      	beq.n	8004f5c <HAL_RCC_OscConfig+0x194>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d168      	bne.n	8004f5c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e302      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e96:	d106      	bne.n	8004ea6 <HAL_RCC_OscConfig+0xde>
 8004e98:	4b85      	ldr	r3, [pc, #532]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a84      	ldr	r2, [pc, #528]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	e02e      	b.n	8004f04 <HAL_RCC_OscConfig+0x13c>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x100>
 8004eae:	4b80      	ldr	r3, [pc, #512]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a7f      	ldr	r2, [pc, #508]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	4b7d      	ldr	r3, [pc, #500]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a7c      	ldr	r2, [pc, #496]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e01d      	b.n	8004f04 <HAL_RCC_OscConfig+0x13c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCC_OscConfig+0x124>
 8004ed2:	4b77      	ldr	r3, [pc, #476]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a76      	ldr	r2, [pc, #472]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	4b74      	ldr	r3, [pc, #464]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a73      	ldr	r2, [pc, #460]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e00b      	b.n	8004f04 <HAL_RCC_OscConfig+0x13c>
 8004eec:	4b70      	ldr	r3, [pc, #448]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a6f      	ldr	r2, [pc, #444]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	4b6d      	ldr	r3, [pc, #436]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a6c      	ldr	r2, [pc, #432]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d013      	beq.n	8004f34 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fe fa3e 	bl	800338c <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f14:	f7fe fa3a 	bl	800338c <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	; 0x64
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e2b6      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f26:	4b62      	ldr	r3, [pc, #392]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0x14c>
 8004f32:	e014      	b.n	8004f5e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fe fa2a 	bl	800338c <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f3c:	f7fe fa26 	bl	800338c <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	; 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e2a2      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4e:	4b58      	ldr	r3, [pc, #352]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x174>
 8004f5a:	e000      	b.n	8004f5e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d079      	beq.n	800505e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d008      	beq.n	8004f84 <HAL_RCC_OscConfig+0x1bc>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d004      	beq.n	8004f84 <HAL_RCC_OscConfig+0x1bc>
 8004f7a:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004f7e:	484b      	ldr	r0, [pc, #300]	; (80050ac <HAL_RCC_OscConfig+0x2e4>)
 8004f80:	f7fd fd99 	bl	8002ab6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	2b1f      	cmp	r3, #31
 8004f8a:	d904      	bls.n	8004f96 <HAL_RCC_OscConfig+0x1ce>
 8004f8c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004f90:	4846      	ldr	r0, [pc, #280]	; (80050ac <HAL_RCC_OscConfig+0x2e4>)
 8004f92:	f7fd fd90 	bl	8002ab6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f96:	4b46      	ldr	r3, [pc, #280]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004fa2:	4b43      	ldr	r3, [pc, #268]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d11c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x220>
 8004fae:	4b40      	ldr	r3, [pc, #256]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d116      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fba:	4b3d      	ldr	r3, [pc, #244]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x20a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d001      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e260      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd2:	4b37      	ldr	r3, [pc, #220]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4933      	ldr	r1, [pc, #204]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe6:	e03a      	b.n	800505e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d020      	beq.n	8005032 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff0:	4b30      	ldr	r3, [pc, #192]	; (80050b4 <HAL_RCC_OscConfig+0x2ec>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff6:	f7fe f9c9 	bl	800338c <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffe:	f7fe f9c5 	bl	800338c <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e241      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005010:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501c:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4921      	ldr	r1, [pc, #132]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 800502c:	4313      	orrs	r3, r2
 800502e:	600b      	str	r3, [r1, #0]
 8005030:	e015      	b.n	800505e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005032:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <HAL_RCC_OscConfig+0x2ec>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7fe f9a8 	bl	800338c <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005040:	f7fe f9a4 	bl	800338c <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e220      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005052:	4b17      	ldr	r3, [pc, #92]	; (80050b0 <HAL_RCC_OscConfig+0x2e8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d048      	beq.n	80050fc <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d008      	beq.n	8005084 <HAL_RCC_OscConfig+0x2bc>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d004      	beq.n	8005084 <HAL_RCC_OscConfig+0x2bc>
 800507a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800507e:	480b      	ldr	r0, [pc, #44]	; (80050ac <HAL_RCC_OscConfig+0x2e4>)
 8005080:	f7fd fd19 	bl	8002ab6 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d021      	beq.n	80050d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800508c:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <HAL_RCC_OscConfig+0x2f0>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005092:	f7fe f97b 	bl	800338c <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005098:	e010      	b.n	80050bc <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800509a:	f7fe f977 	bl	800338c <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d909      	bls.n	80050bc <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e1f3      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
 80050ac:	0800d3ac 	.word	0x0800d3ac
 80050b0:	40021000 	.word	0x40021000
 80050b4:	42420000 	.word	0x42420000
 80050b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050bc:	4b67      	ldr	r3, [pc, #412]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0e8      	beq.n	800509a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80050c8:	2001      	movs	r0, #1
 80050ca:	f000 fc51 	bl	8005970 <RCC_Delay>
 80050ce:	e015      	b.n	80050fc <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050d0:	4b63      	ldr	r3, [pc, #396]	; (8005260 <HAL_RCC_OscConfig+0x498>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d6:	f7fe f959 	bl	800338c <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050de:	f7fe f955 	bl	800338c <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e1d1      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f0:	4b5a      	ldr	r3, [pc, #360]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f0      	bne.n	80050de <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80c0 	beq.w	800528a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510a:	2300      	movs	r3, #0
 800510c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00c      	beq.n	8005130 <HAL_RCC_OscConfig+0x368>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d008      	beq.n	8005130 <HAL_RCC_OscConfig+0x368>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b05      	cmp	r3, #5
 8005124:	d004      	beq.n	8005130 <HAL_RCC_OscConfig+0x368>
 8005126:	f240 2111 	movw	r1, #529	; 0x211
 800512a:	484e      	ldr	r0, [pc, #312]	; (8005264 <HAL_RCC_OscConfig+0x49c>)
 800512c:	f7fd fcc3 	bl	8002ab6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005130:	4b4a      	ldr	r3, [pc, #296]	; (800525c <HAL_RCC_OscConfig+0x494>)
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10d      	bne.n	8005158 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800513c:	4b47      	ldr	r3, [pc, #284]	; (800525c <HAL_RCC_OscConfig+0x494>)
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	4a46      	ldr	r2, [pc, #280]	; (800525c <HAL_RCC_OscConfig+0x494>)
 8005142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005146:	61d3      	str	r3, [r2, #28]
 8005148:	4b44      	ldr	r3, [pc, #272]	; (800525c <HAL_RCC_OscConfig+0x494>)
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005154:	2301      	movs	r3, #1
 8005156:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005158:	4b43      	ldr	r3, [pc, #268]	; (8005268 <HAL_RCC_OscConfig+0x4a0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d118      	bne.n	8005196 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005164:	4b40      	ldr	r3, [pc, #256]	; (8005268 <HAL_RCC_OscConfig+0x4a0>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a3f      	ldr	r2, [pc, #252]	; (8005268 <HAL_RCC_OscConfig+0x4a0>)
 800516a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005170:	f7fe f90c 	bl	800338c <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005178:	f7fe f908 	bl	800338c <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	; 0x64
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e184      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518a:	4b37      	ldr	r3, [pc, #220]	; (8005268 <HAL_RCC_OscConfig+0x4a0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d106      	bne.n	80051ac <HAL_RCC_OscConfig+0x3e4>
 800519e:	4b2f      	ldr	r3, [pc, #188]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	4a2e      	ldr	r2, [pc, #184]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	6213      	str	r3, [r2, #32]
 80051aa:	e02d      	b.n	8005208 <HAL_RCC_OscConfig+0x440>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10c      	bne.n	80051ce <HAL_RCC_OscConfig+0x406>
 80051b4:	4b29      	ldr	r3, [pc, #164]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	4a28      	ldr	r2, [pc, #160]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	6213      	str	r3, [r2, #32]
 80051c0:	4b26      	ldr	r3, [pc, #152]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	4a25      	ldr	r2, [pc, #148]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051c6:	f023 0304 	bic.w	r3, r3, #4
 80051ca:	6213      	str	r3, [r2, #32]
 80051cc:	e01c      	b.n	8005208 <HAL_RCC_OscConfig+0x440>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2b05      	cmp	r3, #5
 80051d4:	d10c      	bne.n	80051f0 <HAL_RCC_OscConfig+0x428>
 80051d6:	4b21      	ldr	r3, [pc, #132]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	4a20      	ldr	r2, [pc, #128]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051dc:	f043 0304 	orr.w	r3, r3, #4
 80051e0:	6213      	str	r3, [r2, #32]
 80051e2:	4b1e      	ldr	r3, [pc, #120]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	4a1d      	ldr	r2, [pc, #116]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	6213      	str	r3, [r2, #32]
 80051ee:	e00b      	b.n	8005208 <HAL_RCC_OscConfig+0x440>
 80051f0:	4b1a      	ldr	r3, [pc, #104]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051f6:	f023 0301 	bic.w	r3, r3, #1
 80051fa:	6213      	str	r3, [r2, #32]
 80051fc:	4b17      	ldr	r3, [pc, #92]	; (800525c <HAL_RCC_OscConfig+0x494>)
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	4a16      	ldr	r2, [pc, #88]	; (800525c <HAL_RCC_OscConfig+0x494>)
 8005202:	f023 0304 	bic.w	r3, r3, #4
 8005206:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d015      	beq.n	800523c <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005210:	f7fe f8bc 	bl	800338c <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005216:	e00a      	b.n	800522e <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005218:	f7fe f8b8 	bl	800338c <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f241 3288 	movw	r2, #5000	; 0x1388
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e132      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522e:	4b0b      	ldr	r3, [pc, #44]	; (800525c <HAL_RCC_OscConfig+0x494>)
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0ee      	beq.n	8005218 <HAL_RCC_OscConfig+0x450>
 800523a:	e01d      	b.n	8005278 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523c:	f7fe f8a6 	bl	800338c <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005242:	e013      	b.n	800526c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005244:	f7fe f8a2 	bl	800338c <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005252:	4293      	cmp	r3, r2
 8005254:	d90a      	bls.n	800526c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e11c      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
 800525a:	bf00      	nop
 800525c:	40021000 	.word	0x40021000
 8005260:	42420480 	.word	0x42420480
 8005264:	0800d3ac 	.word	0x0800d3ac
 8005268:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800526c:	4b8b      	ldr	r3, [pc, #556]	; (800549c <HAL_RCC_OscConfig+0x6d4>)
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e5      	bne.n	8005244 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005278:	7dfb      	ldrb	r3, [r7, #23]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d105      	bne.n	800528a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800527e:	4b87      	ldr	r3, [pc, #540]	; (800549c <HAL_RCC_OscConfig+0x6d4>)
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	4a86      	ldr	r2, [pc, #536]	; (800549c <HAL_RCC_OscConfig+0x6d4>)
 8005284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005288:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <HAL_RCC_OscConfig+0x4e4>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d008      	beq.n	80052ac <HAL_RCC_OscConfig+0x4e4>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d004      	beq.n	80052ac <HAL_RCC_OscConfig+0x4e4>
 80052a2:	f240 21af 	movw	r1, #687	; 0x2af
 80052a6:	487e      	ldr	r0, [pc, #504]	; (80054a0 <HAL_RCC_OscConfig+0x6d8>)
 80052a8:	f7fd fc05 	bl	8002ab6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80ee 	beq.w	8005492 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052b6:	4b79      	ldr	r3, [pc, #484]	; (800549c <HAL_RCC_OscConfig+0x6d4>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f003 030c 	and.w	r3, r3, #12
 80052be:	2b08      	cmp	r3, #8
 80052c0:	f000 80ce 	beq.w	8005460 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	f040 80b2 	bne.w	8005432 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_RCC_OscConfig+0x522>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052de:	d004      	beq.n	80052ea <HAL_RCC_OscConfig+0x522>
 80052e0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80052e4:	486e      	ldr	r0, [pc, #440]	; (80054a0 <HAL_RCC_OscConfig+0x6d8>)
 80052e6:	f7fd fbe6 	bl	8002ab6 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d04a      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052fa:	d045      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005304:	d040      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800530e:	d03b      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005318:	d036      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005322:	d031      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800532c:	d02c      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005336:	d027      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005340:	d022      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800534a:	d01d      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005354:	d018      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800535e:	d013      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005368:	d00e      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8005372:	d009      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800537c:	d004      	beq.n	8005388 <HAL_RCC_OscConfig+0x5c0>
 800537e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8005382:	4847      	ldr	r0, [pc, #284]	; (80054a0 <HAL_RCC_OscConfig+0x6d8>)
 8005384:	f7fd fb97 	bl	8002ab6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005388:	4b46      	ldr	r3, [pc, #280]	; (80054a4 <HAL_RCC_OscConfig+0x6dc>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538e:	f7fd fffd 	bl	800338c <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005396:	f7fd fff9 	bl	800338c <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e075      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053a8:	4b3c      	ldr	r3, [pc, #240]	; (800549c <HAL_RCC_OscConfig+0x6d4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f0      	bne.n	8005396 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053bc:	d116      	bne.n	80053ec <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <HAL_RCC_OscConfig+0x612>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ce:	d004      	beq.n	80053da <HAL_RCC_OscConfig+0x612>
 80053d0:	f240 21cf 	movw	r1, #719	; 0x2cf
 80053d4:	4832      	ldr	r0, [pc, #200]	; (80054a0 <HAL_RCC_OscConfig+0x6d8>)
 80053d6:	f7fd fb6e 	bl	8002ab6 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053da:	4b30      	ldr	r3, [pc, #192]	; (800549c <HAL_RCC_OscConfig+0x6d4>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	492d      	ldr	r1, [pc, #180]	; (800549c <HAL_RCC_OscConfig+0x6d4>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053ec:	4b2b      	ldr	r3, [pc, #172]	; (800549c <HAL_RCC_OscConfig+0x6d4>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a19      	ldr	r1, [r3, #32]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	430b      	orrs	r3, r1
 80053fe:	4927      	ldr	r1, [pc, #156]	; (800549c <HAL_RCC_OscConfig+0x6d4>)
 8005400:	4313      	orrs	r3, r2
 8005402:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005404:	4b27      	ldr	r3, [pc, #156]	; (80054a4 <HAL_RCC_OscConfig+0x6dc>)
 8005406:	2201      	movs	r2, #1
 8005408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540a:	f7fd ffbf 	bl	800338c <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005412:	f7fd ffbb 	bl	800338c <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e037      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005424:	4b1d      	ldr	r3, [pc, #116]	; (800549c <HAL_RCC_OscConfig+0x6d4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0f0      	beq.n	8005412 <HAL_RCC_OscConfig+0x64a>
 8005430:	e02f      	b.n	8005492 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005432:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <HAL_RCC_OscConfig+0x6dc>)
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fd ffa8 	bl	800338c <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005440:	f7fd ffa4 	bl	800338c <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e020      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005452:	4b12      	ldr	r3, [pc, #72]	; (800549c <HAL_RCC_OscConfig+0x6d4>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x678>
 800545e:	e018      	b.n	8005492 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e013      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800546c:	4b0b      	ldr	r3, [pc, #44]	; (800549c <HAL_RCC_OscConfig+0x6d4>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	429a      	cmp	r2, r3
 800547e:	d106      	bne.n	800548e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d001      	beq.n	8005492 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000
 80054a0:	0800d3ac 	.word	0x0800d3ac
 80054a4:	42420060 	.word	0x42420060

080054a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e176      	b.n	80057aa <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d116      	bne.n	80054f6 <HAL_RCC_ClockConfig+0x4e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d110      	bne.n	80054f6 <HAL_RCC_ClockConfig+0x4e>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <HAL_RCC_ClockConfig+0x4e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d104      	bne.n	80054f6 <HAL_RCC_ClockConfig+0x4e>
 80054ec:	f44f 714e 	mov.w	r1, #824	; 0x338
 80054f0:	4874      	ldr	r0, [pc, #464]	; (80056c4 <HAL_RCC_ClockConfig+0x21c>)
 80054f2:	f7fd fae0 	bl	8002ab6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCC_ClockConfig+0x6a>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d007      	beq.n	8005512 <HAL_RCC_ClockConfig+0x6a>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d004      	beq.n	8005512 <HAL_RCC_ClockConfig+0x6a>
 8005508:	f240 3139 	movw	r1, #825	; 0x339
 800550c:	486d      	ldr	r0, [pc, #436]	; (80056c4 <HAL_RCC_ClockConfig+0x21c>)
 800550e:	f7fd fad2 	bl	8002ab6 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005512:	4b6d      	ldr	r3, [pc, #436]	; (80056c8 <HAL_RCC_ClockConfig+0x220>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d910      	bls.n	8005542 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005520:	4b69      	ldr	r3, [pc, #420]	; (80056c8 <HAL_RCC_ClockConfig+0x220>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f023 0207 	bic.w	r2, r3, #7
 8005528:	4967      	ldr	r1, [pc, #412]	; (80056c8 <HAL_RCC_ClockConfig+0x220>)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005530:	4b65      	ldr	r3, [pc, #404]	; (80056c8 <HAL_RCC_ClockConfig+0x220>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d001      	beq.n	8005542 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e133      	b.n	80057aa <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d049      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800555a:	4b5c      	ldr	r3, [pc, #368]	; (80056cc <HAL_RCC_ClockConfig+0x224>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4a5b      	ldr	r2, [pc, #364]	; (80056cc <HAL_RCC_ClockConfig+0x224>)
 8005560:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005564:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d005      	beq.n	800557e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005572:	4b56      	ldr	r3, [pc, #344]	; (80056cc <HAL_RCC_ClockConfig+0x224>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4a55      	ldr	r2, [pc, #340]	; (80056cc <HAL_RCC_ClockConfig+0x224>)
 8005578:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800557c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d024      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x128>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	d020      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x128>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b90      	cmp	r3, #144	; 0x90
 8005594:	d01c      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x128>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2ba0      	cmp	r3, #160	; 0xa0
 800559c:	d018      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x128>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2bb0      	cmp	r3, #176	; 0xb0
 80055a4:	d014      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x128>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2bc0      	cmp	r3, #192	; 0xc0
 80055ac:	d010      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x128>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2bd0      	cmp	r3, #208	; 0xd0
 80055b4:	d00c      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x128>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2be0      	cmp	r3, #224	; 0xe0
 80055bc:	d008      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x128>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2bf0      	cmp	r3, #240	; 0xf0
 80055c4:	d004      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x128>
 80055c6:	f240 315f 	movw	r1, #863	; 0x35f
 80055ca:	483e      	ldr	r0, [pc, #248]	; (80056c4 <HAL_RCC_ClockConfig+0x21c>)
 80055cc:	f7fd fa73 	bl	8002ab6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d0:	4b3e      	ldr	r3, [pc, #248]	; (80056cc <HAL_RCC_ClockConfig+0x224>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	493b      	ldr	r1, [pc, #236]	; (80056cc <HAL_RCC_ClockConfig+0x224>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d051      	beq.n	8005692 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_RCC_ClockConfig+0x168>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d008      	beq.n	8005610 <HAL_RCC_ClockConfig+0x168>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d004      	beq.n	8005610 <HAL_RCC_ClockConfig+0x168>
 8005606:	f240 3166 	movw	r1, #870	; 0x366
 800560a:	482e      	ldr	r0, [pc, #184]	; (80056c4 <HAL_RCC_ClockConfig+0x21c>)
 800560c:	f7fd fa53 	bl	8002ab6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d107      	bne.n	8005628 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005618:	4b2c      	ldr	r3, [pc, #176]	; (80056cc <HAL_RCC_ClockConfig+0x224>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d115      	bne.n	8005650 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0c0      	b.n	80057aa <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d107      	bne.n	8005640 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005630:	4b26      	ldr	r3, [pc, #152]	; (80056cc <HAL_RCC_ClockConfig+0x224>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d109      	bne.n	8005650 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0b4      	b.n	80057aa <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005640:	4b22      	ldr	r3, [pc, #136]	; (80056cc <HAL_RCC_ClockConfig+0x224>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e0ac      	b.n	80057aa <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005650:	4b1e      	ldr	r3, [pc, #120]	; (80056cc <HAL_RCC_ClockConfig+0x224>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f023 0203 	bic.w	r2, r3, #3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	491b      	ldr	r1, [pc, #108]	; (80056cc <HAL_RCC_ClockConfig+0x224>)
 800565e:	4313      	orrs	r3, r2
 8005660:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005662:	f7fd fe93 	bl	800338c <HAL_GetTick>
 8005666:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005668:	e00a      	b.n	8005680 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800566a:	f7fd fe8f 	bl	800338c <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	f241 3288 	movw	r2, #5000	; 0x1388
 8005678:	4293      	cmp	r3, r2
 800567a:	d901      	bls.n	8005680 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e094      	b.n	80057aa <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005680:	4b12      	ldr	r3, [pc, #72]	; (80056cc <HAL_RCC_ClockConfig+0x224>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f003 020c 	and.w	r2, r3, #12
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	429a      	cmp	r2, r3
 8005690:	d1eb      	bne.n	800566a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005692:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <HAL_RCC_ClockConfig+0x220>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d217      	bcs.n	80056d0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a0:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <HAL_RCC_ClockConfig+0x220>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f023 0207 	bic.w	r2, r3, #7
 80056a8:	4907      	ldr	r1, [pc, #28]	; (80056c8 <HAL_RCC_ClockConfig+0x220>)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <HAL_RCC_ClockConfig+0x220>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d008      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e073      	b.n	80057aa <HAL_RCC_ClockConfig+0x302>
 80056c2:	bf00      	nop
 80056c4:	0800d3ac 	.word	0x0800d3ac
 80056c8:	40022000 	.word	0x40022000
 80056cc:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d025      	beq.n	8005728 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d018      	beq.n	8005716 <HAL_RCC_ClockConfig+0x26e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ec:	d013      	beq.n	8005716 <HAL_RCC_ClockConfig+0x26e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80056f6:	d00e      	beq.n	8005716 <HAL_RCC_ClockConfig+0x26e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005700:	d009      	beq.n	8005716 <HAL_RCC_ClockConfig+0x26e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800570a:	d004      	beq.n	8005716 <HAL_RCC_ClockConfig+0x26e>
 800570c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8005710:	4828      	ldr	r0, [pc, #160]	; (80057b4 <HAL_RCC_ClockConfig+0x30c>)
 8005712:	f7fd f9d0 	bl	8002ab6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005716:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <HAL_RCC_ClockConfig+0x310>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	4925      	ldr	r1, [pc, #148]	; (80057b8 <HAL_RCC_ClockConfig+0x310>)
 8005724:	4313      	orrs	r3, r2
 8005726:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b00      	cmp	r3, #0
 8005732:	d026      	beq.n	8005782 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d018      	beq.n	800576e <HAL_RCC_ClockConfig+0x2c6>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005744:	d013      	beq.n	800576e <HAL_RCC_ClockConfig+0x2c6>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800574e:	d00e      	beq.n	800576e <HAL_RCC_ClockConfig+0x2c6>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005758:	d009      	beq.n	800576e <HAL_RCC_ClockConfig+0x2c6>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005762:	d004      	beq.n	800576e <HAL_RCC_ClockConfig+0x2c6>
 8005764:	f240 31ab 	movw	r1, #939	; 0x3ab
 8005768:	4812      	ldr	r0, [pc, #72]	; (80057b4 <HAL_RCC_ClockConfig+0x30c>)
 800576a:	f7fd f9a4 	bl	8002ab6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800576e:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <HAL_RCC_ClockConfig+0x310>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	490e      	ldr	r1, [pc, #56]	; (80057b8 <HAL_RCC_ClockConfig+0x310>)
 800577e:	4313      	orrs	r3, r2
 8005780:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005782:	f000 f821 	bl	80057c8 <HAL_RCC_GetSysClockFreq>
 8005786:	4602      	mov	r2, r0
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <HAL_RCC_ClockConfig+0x310>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	091b      	lsrs	r3, r3, #4
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	490a      	ldr	r1, [pc, #40]	; (80057bc <HAL_RCC_ClockConfig+0x314>)
 8005794:	5ccb      	ldrb	r3, [r1, r3]
 8005796:	fa22 f303 	lsr.w	r3, r2, r3
 800579a:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <HAL_RCC_ClockConfig+0x318>)
 800579c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800579e:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <HAL_RCC_ClockConfig+0x31c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fd fbf4 	bl	8002f90 <HAL_InitTick>

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	0800d3ac 	.word	0x0800d3ac
 80057b8:	40021000 	.word	0x40021000
 80057bc:	0800d744 	.word	0x0800d744
 80057c0:	20000020 	.word	0x20000020
 80057c4:	20000024 	.word	0x20000024

080057c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c8:	b490      	push	{r4, r7}
 80057ca:	b08a      	sub	sp, #40	; 0x28
 80057cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80057ce:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <HAL_RCC_GetSysClockFreq+0xb0>)
 80057d0:	1d3c      	adds	r4, r7, #4
 80057d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80057d8:	f240 2301 	movw	r3, #513	; 0x201
 80057dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	2300      	movs	r3, #0
 80057e4:	61bb      	str	r3, [r7, #24]
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80057f2:	4b22      	ldr	r3, [pc, #136]	; (800587c <HAL_RCC_GetSysClockFreq+0xb4>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d002      	beq.n	8005808 <HAL_RCC_GetSysClockFreq+0x40>
 8005802:	2b08      	cmp	r3, #8
 8005804:	d003      	beq.n	800580e <HAL_RCC_GetSysClockFreq+0x46>
 8005806:	e02d      	b.n	8005864 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005808:	4b1d      	ldr	r3, [pc, #116]	; (8005880 <HAL_RCC_GetSysClockFreq+0xb8>)
 800580a:	623b      	str	r3, [r7, #32]
      break;
 800580c:	e02d      	b.n	800586a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	0c9b      	lsrs	r3, r3, #18
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800581a:	4413      	add	r3, r2
 800581c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005820:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d013      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800582c:	4b13      	ldr	r3, [pc, #76]	; (800587c <HAL_RCC_GetSysClockFreq+0xb4>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	0c5b      	lsrs	r3, r3, #17
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800583a:	4413      	add	r3, r2
 800583c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005840:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	4a0e      	ldr	r2, [pc, #56]	; (8005880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005846:	fb02 f203 	mul.w	r2, r2, r3
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
 8005852:	e004      	b.n	800585e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4a0b      	ldr	r2, [pc, #44]	; (8005884 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005858:	fb02 f303 	mul.w	r3, r2, r3
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	623b      	str	r3, [r7, #32]
      break;
 8005862:	e002      	b.n	800586a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005864:	4b06      	ldr	r3, [pc, #24]	; (8005880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005866:	623b      	str	r3, [r7, #32]
      break;
 8005868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800586a:	6a3b      	ldr	r3, [r7, #32]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3728      	adds	r7, #40	; 0x28
 8005870:	46bd      	mov	sp, r7
 8005872:	bc90      	pop	{r4, r7}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	0800d3e4 	.word	0x0800d3e4
 800587c:	40021000 	.word	0x40021000
 8005880:	007a1200 	.word	0x007a1200
 8005884:	003d0900 	.word	0x003d0900

08005888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800588c:	4b02      	ldr	r3, [pc, #8]	; (8005898 <HAL_RCC_GetHCLKFreq+0x10>)
 800588e:	681b      	ldr	r3, [r3, #0]
}
 8005890:	4618      	mov	r0, r3
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr
 8005898:	20000020 	.word	0x20000020

0800589c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058a0:	f7ff fff2 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 80058a4:	4602      	mov	r2, r0
 80058a6:	4b05      	ldr	r3, [pc, #20]	; (80058bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	0a1b      	lsrs	r3, r3, #8
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	4903      	ldr	r1, [pc, #12]	; (80058c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058b2:	5ccb      	ldrb	r3, [r1, r3]
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40021000 	.word	0x40021000
 80058c0:	0800d754 	.word	0x0800d754

080058c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058c8:	f7ff ffde 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 80058cc:	4602      	mov	r2, r0
 80058ce:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	0adb      	lsrs	r3, r3, #11
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	4903      	ldr	r1, [pc, #12]	; (80058e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058da:	5ccb      	ldrb	r3, [r1, r3]
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40021000 	.word	0x40021000
 80058e8:	0800d754 	.word	0x0800d754

080058ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <HAL_RCC_GetClockConfig+0x1a>
 80058fc:	f240 5123 	movw	r1, #1315	; 0x523
 8005900:	4818      	ldr	r0, [pc, #96]	; (8005964 <HAL_RCC_GetClockConfig+0x78>)
 8005902:	f7fd f8d8 	bl	8002ab6 <assert_failed>
  assert_param(pFLatency != NULL);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <HAL_RCC_GetClockConfig+0x2a>
 800590c:	f240 5124 	movw	r1, #1316	; 0x524
 8005910:	4814      	ldr	r0, [pc, #80]	; (8005964 <HAL_RCC_GetClockConfig+0x78>)
 8005912:	f7fd f8d0 	bl	8002ab6 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	220f      	movs	r2, #15
 800591a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800591c:	4b12      	ldr	r3, [pc, #72]	; (8005968 <HAL_RCC_GetClockConfig+0x7c>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f003 0203 	and.w	r2, r3, #3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005928:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <HAL_RCC_GetClockConfig+0x7c>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005934:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <HAL_RCC_GetClockConfig+0x7c>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005940:	4b09      	ldr	r3, [pc, #36]	; (8005968 <HAL_RCC_GetClockConfig+0x7c>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	08db      	lsrs	r3, r3, #3
 8005946:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <HAL_RCC_GetClockConfig+0x80>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0207 	and.w	r2, r3, #7
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	0800d3ac 	.word	0x0800d3ac
 8005968:	40021000 	.word	0x40021000
 800596c:	40022000 	.word	0x40022000

08005970 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005978:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <RCC_Delay+0x34>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a0a      	ldr	r2, [pc, #40]	; (80059a8 <RCC_Delay+0x38>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	0a5b      	lsrs	r3, r3, #9
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800598c:	bf00      	nop
  }
  while (Delay --);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1e5a      	subs	r2, r3, #1
 8005992:	60fa      	str	r2, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f9      	bne.n	800598c <RCC_Delay+0x1c>
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr
 80059a4:	20000020 	.word	0x20000020
 80059a8:	10624dd3 	.word	0x10624dd3

080059ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10f      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0310 	and.w	r3, r3, #16
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d103      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80059e0:	216c      	movs	r1, #108	; 0x6c
 80059e2:	4873      	ldr	r0, [pc, #460]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80059e4:	f7fd f867 	bl	8002ab6 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8095 	beq.w	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d012      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a06:	d00d      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a10:	d008      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a1a:	d003      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005a1c:	2172      	movs	r1, #114	; 0x72
 8005a1e:	4864      	ldr	r0, [pc, #400]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005a20:	f7fd f849 	bl	8002ab6 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8005a24:	2300      	movs	r3, #0
 8005a26:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a28:	4b62      	ldr	r3, [pc, #392]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10d      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a34:	4b5f      	ldr	r3, [pc, #380]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	4a5e      	ldr	r2, [pc, #376]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	61d3      	str	r3, [r2, #28]
 8005a40:	4b5c      	ldr	r3, [pc, #368]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a48:	60bb      	str	r3, [r7, #8]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a50:	4b59      	ldr	r3, [pc, #356]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d118      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a5c:	4b56      	ldr	r3, [pc, #344]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a55      	ldr	r2, [pc, #340]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a68:	f7fd fc90 	bl	800338c <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6e:	e008      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a70:	f7fd fc8c 	bl	800338c <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b64      	cmp	r3, #100	; 0x64
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e092      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a82:	4b4d      	ldr	r3, [pc, #308]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0f0      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a8e:	4b49      	ldr	r3, [pc, #292]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d02e      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x150>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d027      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005aac:	4b41      	ldr	r3, [pc, #260]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ab6:	4b41      	ldr	r3, [pc, #260]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005ab8:	2201      	movs	r2, #1
 8005aba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005abc:	4b3f      	ldr	r3, [pc, #252]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ac2:	4a3c      	ldr	r2, [pc, #240]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d014      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad2:	f7fd fc5b 	bl	800338c <HAL_GetTick>
 8005ad6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad8:	e00a      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ada:	f7fd fc57 	bl	800338c <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e05b      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af0:	4b30      	ldr	r3, [pc, #192]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0ee      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005afc:	4b2d      	ldr	r3, [pc, #180]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	492a      	ldr	r1, [pc, #168]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d105      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b14:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	4a26      	ldr	r2, [pc, #152]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01f      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d012      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b3c:	d00d      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b46:	d008      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b50:	d003      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005b52:	21b9      	movs	r1, #185	; 0xb9
 8005b54:	4816      	ldr	r0, [pc, #88]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005b56:	f7fc ffae 	bl	8002ab6 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b5a:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	4913      	ldr	r1, [pc, #76]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d016      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b80:	d008      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005b8a:	f240 1115 	movw	r1, #277	; 0x115
 8005b8e:	4808      	ldr	r0, [pc, #32]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005b90:	f7fc ff91 	bl	8002ab6 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4904      	ldr	r1, [pc, #16]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	0800d3f4 	.word	0x0800d3f4
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	40007000 	.word	0x40007000
 8005bbc:	42420440 	.word	0x42420440

08005bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e16d      	b.n	8005eae <HAL_SPI_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a6b      	ldr	r2, [pc, #428]	; (8005d84 <HAL_SPI_Init+0x1c4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d009      	beq.n	8005bf0 <HAL_SPI_Init+0x30>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a69      	ldr	r2, [pc, #420]	; (8005d88 <HAL_SPI_Init+0x1c8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <HAL_SPI_Init+0x30>
 8005be6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005bea:	4868      	ldr	r0, [pc, #416]	; (8005d8c <HAL_SPI_Init+0x1cc>)
 8005bec:	f7fc ff63 	bl	8002ab6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d009      	beq.n	8005c0c <HAL_SPI_Init+0x4c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c00:	d004      	beq.n	8005c0c <HAL_SPI_Init+0x4c>
 8005c02:	f240 1159 	movw	r1, #345	; 0x159
 8005c06:	4861      	ldr	r0, [pc, #388]	; (8005d8c <HAL_SPI_Init+0x1cc>)
 8005c08:	f7fc ff55 	bl	8002ab6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00e      	beq.n	8005c32 <HAL_SPI_Init+0x72>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1c:	d009      	beq.n	8005c32 <HAL_SPI_Init+0x72>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c26:	d004      	beq.n	8005c32 <HAL_SPI_Init+0x72>
 8005c28:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8005c2c:	4857      	ldr	r0, [pc, #348]	; (8005d8c <HAL_SPI_Init+0x1cc>)
 8005c2e:	f7fc ff42 	bl	8002ab6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c3a:	d008      	beq.n	8005c4e <HAL_SPI_Init+0x8e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d004      	beq.n	8005c4e <HAL_SPI_Init+0x8e>
 8005c44:	f240 115b 	movw	r1, #347	; 0x15b
 8005c48:	4850      	ldr	r0, [pc, #320]	; (8005d8c <HAL_SPI_Init+0x1cc>)
 8005c4a:	f7fc ff34 	bl	8002ab6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c56:	d00d      	beq.n	8005c74 <HAL_SPI_Init+0xb4>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d009      	beq.n	8005c74 <HAL_SPI_Init+0xb4>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c68:	d004      	beq.n	8005c74 <HAL_SPI_Init+0xb4>
 8005c6a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8005c6e:	4847      	ldr	r0, [pc, #284]	; (8005d8c <HAL_SPI_Init+0x1cc>)
 8005c70:	f7fc ff21 	bl	8002ab6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d020      	beq.n	8005cbe <HAL_SPI_Init+0xfe>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d01c      	beq.n	8005cbe <HAL_SPI_Init+0xfe>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d018      	beq.n	8005cbe <HAL_SPI_Init+0xfe>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	2b18      	cmp	r3, #24
 8005c92:	d014      	beq.n	8005cbe <HAL_SPI_Init+0xfe>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d010      	beq.n	8005cbe <HAL_SPI_Init+0xfe>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	2b28      	cmp	r3, #40	; 0x28
 8005ca2:	d00c      	beq.n	8005cbe <HAL_SPI_Init+0xfe>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	2b30      	cmp	r3, #48	; 0x30
 8005caa:	d008      	beq.n	8005cbe <HAL_SPI_Init+0xfe>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	2b38      	cmp	r3, #56	; 0x38
 8005cb2:	d004      	beq.n	8005cbe <HAL_SPI_Init+0xfe>
 8005cb4:	f240 115d 	movw	r1, #349	; 0x15d
 8005cb8:	4834      	ldr	r0, [pc, #208]	; (8005d8c <HAL_SPI_Init+0x1cc>)
 8005cba:	f7fc fefc 	bl	8002ab6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <HAL_SPI_Init+0x118>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	2b80      	cmp	r3, #128	; 0x80
 8005ccc:	d004      	beq.n	8005cd8 <HAL_SPI_Init+0x118>
 8005cce:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005cd2:	482e      	ldr	r0, [pc, #184]	; (8005d8c <HAL_SPI_Init+0x1cc>)
 8005cd4:	f7fc feef 	bl	8002ab6 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <HAL_SPI_Init+0x12a>
 8005ce0:	f240 1161 	movw	r1, #353	; 0x161
 8005ce4:	4829      	ldr	r0, [pc, #164]	; (8005d8c <HAL_SPI_Init+0x1cc>)
 8005ce6:	f7fc fee6 	bl	8002ab6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d14e      	bne.n	8005d90 <HAL_SPI_Init+0x1d0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d008      	beq.n	8005d0c <HAL_SPI_Init+0x14c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d004      	beq.n	8005d0c <HAL_SPI_Init+0x14c>
 8005d02:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8005d06:	4821      	ldr	r0, [pc, #132]	; (8005d8c <HAL_SPI_Init+0x1cc>)
 8005d08:	f7fc fed5 	bl	8002ab6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_SPI_Init+0x166>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d004      	beq.n	8005d26 <HAL_SPI_Init+0x166>
 8005d1c:	f240 1165 	movw	r1, #357	; 0x165
 8005d20:	481a      	ldr	r0, [pc, #104]	; (8005d8c <HAL_SPI_Init+0x1cc>)
 8005d22:	f7fc fec8 	bl	8002ab6 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2e:	d125      	bne.n	8005d7c <HAL_SPI_Init+0x1bc>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d056      	beq.n	8005de6 <HAL_SPI_Init+0x226>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d052      	beq.n	8005de6 <HAL_SPI_Init+0x226>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d04e      	beq.n	8005de6 <HAL_SPI_Init+0x226>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	2b18      	cmp	r3, #24
 8005d4e:	d04a      	beq.n	8005de6 <HAL_SPI_Init+0x226>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d046      	beq.n	8005de6 <HAL_SPI_Init+0x226>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	2b28      	cmp	r3, #40	; 0x28
 8005d5e:	d042      	beq.n	8005de6 <HAL_SPI_Init+0x226>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	2b30      	cmp	r3, #48	; 0x30
 8005d66:	d03e      	beq.n	8005de6 <HAL_SPI_Init+0x226>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	2b38      	cmp	r3, #56	; 0x38
 8005d6e:	d03a      	beq.n	8005de6 <HAL_SPI_Init+0x226>
 8005d70:	f240 1169 	movw	r1, #361	; 0x169
 8005d74:	4805      	ldr	r0, [pc, #20]	; (8005d8c <HAL_SPI_Init+0x1cc>)
 8005d76:	f7fc fe9e 	bl	8002ab6 <assert_failed>
 8005d7a:	e034      	b.n	8005de6 <HAL_SPI_Init+0x226>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	61da      	str	r2, [r3, #28]
 8005d82:	e030      	b.n	8005de6 <HAL_SPI_Init+0x226>
 8005d84:	40013000 	.word	0x40013000
 8005d88:	40003800 	.word	0x40003800
 8005d8c:	0800d440 	.word	0x0800d440
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d020      	beq.n	8005dda <HAL_SPI_Init+0x21a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d01c      	beq.n	8005dda <HAL_SPI_Init+0x21a>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d018      	beq.n	8005dda <HAL_SPI_Init+0x21a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	2b18      	cmp	r3, #24
 8005dae:	d014      	beq.n	8005dda <HAL_SPI_Init+0x21a>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d010      	beq.n	8005dda <HAL_SPI_Init+0x21a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	2b28      	cmp	r3, #40	; 0x28
 8005dbe:	d00c      	beq.n	8005dda <HAL_SPI_Init+0x21a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	2b30      	cmp	r3, #48	; 0x30
 8005dc6:	d008      	beq.n	8005dda <HAL_SPI_Init+0x21a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	2b38      	cmp	r3, #56	; 0x38
 8005dce:	d004      	beq.n	8005dda <HAL_SPI_Init+0x21a>
 8005dd0:	f240 1173 	movw	r1, #371	; 0x173
 8005dd4:	4838      	ldr	r0, [pc, #224]	; (8005eb8 <HAL_SPI_Init+0x2f8>)
 8005dd6:	f7fc fe6e 	bl	8002ab6 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d106      	bne.n	8005e06 <HAL_SPI_Init+0x246>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fd f843 	bl	8002e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	ea42 0103 	orr.w	r1, r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	0c1a      	lsrs	r2, r3, #16
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f002 0204 	and.w	r2, r2, #4
 8005e8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	0800d440 	.word	0x0800d440

08005ebc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d009      	beq.n	8005eec <HAL_SPI_Transmit+0x30>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee0:	d004      	beq.n	8005eec <HAL_SPI_Transmit+0x30>
 8005ee2:	f240 3122 	movw	r1, #802	; 0x322
 8005ee6:	4893      	ldr	r0, [pc, #588]	; (8006134 <HAL_SPI_Transmit+0x278>)
 8005ee8:	f7fc fde5 	bl	8002ab6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_SPI_Transmit+0x3e>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e128      	b.n	800614c <HAL_SPI_Transmit+0x290>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f02:	f7fd fa43 	bl	800338c <HAL_GetTick>
 8005f06:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d002      	beq.n	8005f1e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8005f18:	2302      	movs	r3, #2
 8005f1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f1c:	e10d      	b.n	800613a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_SPI_Transmit+0x6e>
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f2e:	e104      	b.n	800613a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2203      	movs	r2, #3
 8005f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	88fa      	ldrh	r2, [r7, #6]
 8005f48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	88fa      	ldrh	r2, [r7, #6]
 8005f4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f76:	d10f      	bne.n	8005f98 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa2:	2b40      	cmp	r3, #64	; 0x40
 8005fa4:	d007      	beq.n	8005fb6 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fbe:	d14b      	bne.n	8006058 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_SPI_Transmit+0x112>
 8005fc8:	8afb      	ldrh	r3, [r7, #22]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d13e      	bne.n	800604c <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	881a      	ldrh	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	1c9a      	adds	r2, r3, #2
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ff2:	e02b      	b.n	800604c <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d112      	bne.n	8006028 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	881a      	ldrh	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	1c9a      	adds	r2, r3, #2
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	86da      	strh	r2, [r3, #54]	; 0x36
 8006026:	e011      	b.n	800604c <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006028:	f7fd f9b0 	bl	800338c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d803      	bhi.n	8006040 <HAL_SPI_Transmit+0x184>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603e:	d102      	bne.n	8006046 <HAL_SPI_Transmit+0x18a>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d102      	bne.n	800604c <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	77fb      	strb	r3, [r7, #31]
          goto error;
 800604a:	e076      	b.n	800613a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1ce      	bne.n	8005ff4 <HAL_SPI_Transmit+0x138>
 8006056:	e04c      	b.n	80060f2 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <HAL_SPI_Transmit+0x1aa>
 8006060:	8afb      	ldrh	r3, [r7, #22]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d140      	bne.n	80060e8 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	330c      	adds	r3, #12
 8006070:	7812      	ldrb	r2, [r2, #0]
 8006072:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800608c:	e02c      	b.n	80060e8 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b02      	cmp	r3, #2
 800609a:	d113      	bne.n	80060c4 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	330c      	adds	r3, #12
 80060a6:	7812      	ldrb	r2, [r2, #0]
 80060a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80060c2:	e011      	b.n	80060e8 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c4:	f7fd f962 	bl	800338c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d803      	bhi.n	80060dc <HAL_SPI_Transmit+0x220>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060da:	d102      	bne.n	80060e2 <HAL_SPI_Transmit+0x226>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060e6:	e028      	b.n	800613a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1cd      	bne.n	800608e <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 fbc6 	bl	8006888 <SPI_EndRxTxTransaction>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2220      	movs	r2, #32
 8006106:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	613b      	str	r3, [r7, #16]
 8006124:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	2b00      	cmp	r3, #0
 800612c:	d004      	beq.n	8006138 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	77fb      	strb	r3, [r7, #31]
 8006132:	e002      	b.n	800613a <HAL_SPI_Transmit+0x27e>
 8006134:	0800d440 	.word	0x0800d440
  }

error:
 8006138:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800614a:	7ffb      	ldrb	r3, [r7, #31]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006170:	d112      	bne.n	8006198 <HAL_SPI_Receive+0x44>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10e      	bne.n	8006198 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2204      	movs	r2, #4
 800617e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006182:	88fa      	ldrh	r2, [r7, #6]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	4613      	mov	r3, r2
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f8f2 	bl	8006378 <HAL_SPI_TransmitReceive>
 8006194:	4603      	mov	r3, r0
 8006196:	e0ea      	b.n	800636e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_SPI_Receive+0x52>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e0e3      	b.n	800636e <HAL_SPI_Receive+0x21a>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ae:	f7fd f8ed 	bl	800338c <HAL_GetTick>
 80061b2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d002      	beq.n	80061c6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80061c0:	2302      	movs	r3, #2
 80061c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061c4:	e0ca      	b.n	800635c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_SPI_Receive+0x7e>
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d102      	bne.n	80061d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061d6:	e0c1      	b.n	800635c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2204      	movs	r2, #4
 80061dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	88fa      	ldrh	r2, [r7, #6]
 80061f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	88fa      	ldrh	r2, [r7, #6]
 80061f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621e:	d10f      	bne.n	8006240 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800622e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800623e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624a:	2b40      	cmp	r3, #64	; 0x40
 800624c:	d007      	beq.n	800625e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800625c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d162      	bne.n	800632c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006266:	e02e      	b.n	80062c6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b01      	cmp	r3, #1
 8006274:	d115      	bne.n	80062a2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f103 020c 	add.w	r2, r3, #12
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062a0:	e011      	b.n	80062c6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062a2:	f7fd f873 	bl	800338c <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d803      	bhi.n	80062ba <HAL_SPI_Receive+0x166>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	d102      	bne.n	80062c0 <HAL_SPI_Receive+0x16c>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80062c4:	e04a      	b.n	800635c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1cb      	bne.n	8006268 <HAL_SPI_Receive+0x114>
 80062d0:	e031      	b.n	8006336 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d113      	bne.n	8006308 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	b292      	uxth	r2, r2
 80062ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	1c9a      	adds	r2, r3, #2
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006306:	e011      	b.n	800632c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006308:	f7fd f840 	bl	800338c <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d803      	bhi.n	8006320 <HAL_SPI_Receive+0x1cc>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631e:	d102      	bne.n	8006326 <HAL_SPI_Receive+0x1d2>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	75fb      	strb	r3, [r7, #23]
          goto error;
 800632a:	e017      	b.n	800635c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006330:	b29b      	uxth	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1cd      	bne.n	80062d2 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 fa52 	bl	80067e4 <SPI_EndRxTransaction>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	75fb      	strb	r3, [r7, #23]
 8006358:	e000      	b.n	800635c <HAL_SPI_Receive+0x208>
  }

error :
 800635a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800636c:	7dfb      	ldrb	r3, [r7, #23]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08c      	sub	sp, #48	; 0x30
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006386:	2301      	movs	r3, #1
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <HAL_SPI_TransmitReceive+0x2a>
 8006398:	f240 419e 	movw	r1, #1182	; 0x49e
 800639c:	4884      	ldr	r0, [pc, #528]	; (80065b0 <HAL_SPI_TransmitReceive+0x238>)
 800639e:	f7fc fb8a 	bl	8002ab6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_SPI_TransmitReceive+0x38>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e18d      	b.n	80066cc <HAL_SPI_TransmitReceive+0x354>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063b8:	f7fc ffe8 	bl	800338c <HAL_GetTick>
 80063bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80063ce:	887b      	ldrh	r3, [r7, #2]
 80063d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d00f      	beq.n	80063fa <HAL_SPI_TransmitReceive+0x82>
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063e0:	d107      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d103      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x7a>
 80063ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d003      	beq.n	80063fa <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80063f2:	2302      	movs	r3, #2
 80063f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80063f8:	e15e      	b.n	80066b8 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_SPI_TransmitReceive+0x94>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HAL_SPI_TransmitReceive+0x94>
 8006406:	887b      	ldrh	r3, [r7, #2]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d103      	bne.n	8006414 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006412:	e151      	b.n	80066b8 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b04      	cmp	r3, #4
 800641e:	d003      	beq.n	8006428 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2205      	movs	r2, #5
 8006424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	887a      	ldrh	r2, [r7, #2]
 8006438:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	887a      	ldrh	r2, [r7, #2]
 800643e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	887a      	ldrh	r2, [r7, #2]
 800644a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	887a      	ldrh	r2, [r7, #2]
 8006450:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006468:	2b40      	cmp	r3, #64	; 0x40
 800646a:	d007      	beq.n	800647c <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800647a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006484:	d178      	bne.n	8006578 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_SPI_TransmitReceive+0x11c>
 800648e:	8b7b      	ldrh	r3, [r7, #26]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d166      	bne.n	8006562 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	881a      	ldrh	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a4:	1c9a      	adds	r2, r3, #2
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064b8:	e053      	b.n	8006562 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d11b      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x188>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d016      	beq.n	8006500 <HAL_SPI_TransmitReceive+0x188>
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d113      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	881a      	ldrh	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	1c9a      	adds	r2, r3, #2
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b01      	cmp	r3, #1
 800650c:	d119      	bne.n	8006542 <HAL_SPI_TransmitReceive+0x1ca>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d014      	beq.n	8006542 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	b292      	uxth	r2, r2
 8006524:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	1c9a      	adds	r2, r3, #2
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800653e:	2301      	movs	r3, #1
 8006540:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006542:	f7fc ff23 	bl	800338c <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800654e:	429a      	cmp	r2, r3
 8006550:	d807      	bhi.n	8006562 <HAL_SPI_TransmitReceive+0x1ea>
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006558:	d003      	beq.n	8006562 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006560:	e0aa      	b.n	80066b8 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1a6      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x142>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1a1      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x142>
 8006576:	e07f      	b.n	8006678 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <HAL_SPI_TransmitReceive+0x20e>
 8006580:	8b7b      	ldrh	r3, [r7, #26]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d16e      	bne.n	8006664 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	7812      	ldrb	r2, [r2, #0]
 8006592:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ac:	e05a      	b.n	8006664 <HAL_SPI_TransmitReceive+0x2ec>
 80065ae:	bf00      	nop
 80065b0:	0800d440 	.word	0x0800d440
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d11c      	bne.n	80065fc <HAL_SPI_TransmitReceive+0x284>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d017      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x284>
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d114      	bne.n	80065fc <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	7812      	ldrb	r2, [r2, #0]
 80065de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b01      	cmp	r3, #1
 8006608:	d119      	bne.n	800663e <HAL_SPI_TransmitReceive+0x2c6>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d014      	beq.n	800663e <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800663a:	2301      	movs	r3, #1
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800663e:	f7fc fea5 	bl	800338c <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800664a:	429a      	cmp	r2, r3
 800664c:	d803      	bhi.n	8006656 <HAL_SPI_TransmitReceive+0x2de>
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d102      	bne.n	800665c <HAL_SPI_TransmitReceive+0x2e4>
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	2b00      	cmp	r3, #0
 800665a:	d103      	bne.n	8006664 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006662:	e029      	b.n	80066b8 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1a2      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x23c>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d19d      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x23c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f903 	bl	8006888 <SPI_EndRxTxTransaction>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d006      	beq.n	8006696 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006694:	e010      	b.n	80066b8 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10b      	bne.n	80066b6 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	e000      	b.n	80066b8 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80066b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3730      	adds	r7, #48	; 0x30
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066e4:	f7fc fe52 	bl	800338c <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	4413      	add	r3, r2
 80066f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066f4:	f7fc fe4a 	bl	800338c <HAL_GetTick>
 80066f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066fa:	4b39      	ldr	r3, [pc, #228]	; (80067e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	015b      	lsls	r3, r3, #5
 8006700:	0d1b      	lsrs	r3, r3, #20
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	fb02 f303 	mul.w	r3, r2, r3
 8006708:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800670a:	e054      	b.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d050      	beq.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006714:	f7fc fe3a 	bl	800338c <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	429a      	cmp	r2, r3
 8006722:	d902      	bls.n	800672a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d13d      	bne.n	80067a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006742:	d111      	bne.n	8006768 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800674c:	d004      	beq.n	8006758 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006756:	d107      	bne.n	8006768 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006770:	d10f      	bne.n	8006792 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006790:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e017      	b.n	80067d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4013      	ands	r3, r2
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	bf0c      	ite	eq
 80067c6:	2301      	moveq	r3, #1
 80067c8:	2300      	movne	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d19b      	bne.n	800670c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000020 	.word	0x20000020

080067e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067f8:	d111      	bne.n	800681e <SPI_EndRxTransaction+0x3a>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006802:	d004      	beq.n	800680e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680c:	d107      	bne.n	800681e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800681c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006826:	d117      	bne.n	8006858 <SPI_EndRxTransaction+0x74>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006830:	d112      	bne.n	8006858 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2200      	movs	r2, #0
 800683a:	2101      	movs	r1, #1
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7ff ff49 	bl	80066d4 <SPI_WaitFlagStateUntilTimeout>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01a      	beq.n	800687e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684c:	f043 0220 	orr.w	r2, r3, #32
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e013      	b.n	8006880 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2200      	movs	r2, #0
 8006860:	2180      	movs	r1, #128	; 0x80
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f7ff ff36 	bl	80066d4 <SPI_WaitFlagStateUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006872:	f043 0220 	orr.w	r2, r3, #32
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e000      	b.n	8006880 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af02      	add	r7, sp, #8
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2200      	movs	r2, #0
 800689c:	2180      	movs	r1, #128	; 0x80
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7ff ff18 	bl	80066d4 <SPI_WaitFlagStateUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ae:	f043 0220 	orr.w	r2, r3, #32
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e000      	b.n	80068bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e093      	b.n	80069fe <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a4b      	ldr	r2, [pc, #300]	; (8006a08 <HAL_TIM_Base_Init+0x144>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d013      	beq.n	8006908 <HAL_TIM_Base_Init+0x44>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e8:	d00e      	beq.n	8006908 <HAL_TIM_Base_Init+0x44>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a47      	ldr	r2, [pc, #284]	; (8006a0c <HAL_TIM_Base_Init+0x148>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d009      	beq.n	8006908 <HAL_TIM_Base_Init+0x44>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a45      	ldr	r2, [pc, #276]	; (8006a10 <HAL_TIM_Base_Init+0x14c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d004      	beq.n	8006908 <HAL_TIM_Base_Init+0x44>
 80068fe:	f240 1113 	movw	r1, #275	; 0x113
 8006902:	4844      	ldr	r0, [pc, #272]	; (8006a14 <HAL_TIM_Base_Init+0x150>)
 8006904:	f7fc f8d7 	bl	8002ab6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d014      	beq.n	800693a <HAL_TIM_Base_Init+0x76>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b10      	cmp	r3, #16
 8006916:	d010      	beq.n	800693a <HAL_TIM_Base_Init+0x76>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b20      	cmp	r3, #32
 800691e:	d00c      	beq.n	800693a <HAL_TIM_Base_Init+0x76>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d008      	beq.n	800693a <HAL_TIM_Base_Init+0x76>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2b60      	cmp	r3, #96	; 0x60
 800692e:	d004      	beq.n	800693a <HAL_TIM_Base_Init+0x76>
 8006930:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006934:	4837      	ldr	r0, [pc, #220]	; (8006a14 <HAL_TIM_Base_Init+0x150>)
 8006936:	f7fc f8be 	bl	8002ab6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00e      	beq.n	8006960 <HAL_TIM_Base_Init+0x9c>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694a:	d009      	beq.n	8006960 <HAL_TIM_Base_Init+0x9c>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006954:	d004      	beq.n	8006960 <HAL_TIM_Base_Init+0x9c>
 8006956:	f240 1115 	movw	r1, #277	; 0x115
 800695a:	482e      	ldr	r0, [pc, #184]	; (8006a14 <HAL_TIM_Base_Init+0x150>)
 800695c:	f7fc f8ab 	bl	8002ab6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d008      	beq.n	800697a <HAL_TIM_Base_Init+0xb6>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	2b80      	cmp	r3, #128	; 0x80
 800696e:	d004      	beq.n	800697a <HAL_TIM_Base_Init+0xb6>
 8006970:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006974:	4827      	ldr	r0, [pc, #156]	; (8006a14 <HAL_TIM_Base_Init+0x150>)
 8006976:	f7fc f89e 	bl	8002ab6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f842 	bl	8006a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f000 f9d8 	bl	8006d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	40012c00 	.word	0x40012c00
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	0800d478 	.word	0x0800d478

08006a18 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr
	...

08006a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a2e      	ldr	r2, [pc, #184]	; (8006af4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <HAL_TIM_Base_Start_IT+0x3a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a46:	d00e      	beq.n	8006a66 <HAL_TIM_Base_Start_IT+0x3a>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a2a      	ldr	r2, [pc, #168]	; (8006af8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d009      	beq.n	8006a66 <HAL_TIM_Base_Start_IT+0x3a>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a29      	ldr	r2, [pc, #164]	; (8006afc <HAL_TIM_Base_Start_IT+0xd0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d004      	beq.n	8006a66 <HAL_TIM_Base_Start_IT+0x3a>
 8006a5c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006a60:	4827      	ldr	r0, [pc, #156]	; (8006b00 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a62:	f7fc f828 	bl	8002ab6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d001      	beq.n	8006a76 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e03a      	b.n	8006aec <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f042 0201 	orr.w	r2, r2, #1
 8006a8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_TIM_Base_Start_IT+0x8a>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIM_Base_Start_IT+0x8a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIM_Base_Start_IT+0x8a>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a12      	ldr	r2, [pc, #72]	; (8006afc <HAL_TIM_Base_Start_IT+0xd0>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d111      	bne.n	8006ada <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b06      	cmp	r3, #6
 8006ac6:	d010      	beq.n	8006aea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad8:	e007      	b.n	8006aea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0201 	orr.w	r2, r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40012c00 	.word	0x40012c00
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	0800d478 	.word	0x0800d478

08006b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d122      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d11b      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0202 	mvn.w	r2, #2
 8006b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f8ed 	bl	8006d26 <HAL_TIM_IC_CaptureCallback>
 8006b4c:	e005      	b.n	8006b5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f8e0 	bl	8006d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f8ef 	bl	8006d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d122      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d11b      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0204 	mvn.w	r2, #4
 8006b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8c3 	bl	8006d26 <HAL_TIM_IC_CaptureCallback>
 8006ba0:	e005      	b.n	8006bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f8b6 	bl	8006d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f8c5 	bl	8006d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d122      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d11b      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f06f 0208 	mvn.w	r2, #8
 8006bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2204      	movs	r2, #4
 8006bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f899 	bl	8006d26 <HAL_TIM_IC_CaptureCallback>
 8006bf4:	e005      	b.n	8006c02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f88c 	bl	8006d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f89b 	bl	8006d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 0310 	and.w	r3, r3, #16
 8006c12:	2b10      	cmp	r3, #16
 8006c14:	d122      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d11b      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0210 	mvn.w	r2, #16
 8006c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2208      	movs	r2, #8
 8006c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f86f 	bl	8006d26 <HAL_TIM_IC_CaptureCallback>
 8006c48:	e005      	b.n	8006c56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f862 	bl	8006d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f871 	bl	8006d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d10e      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d107      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0201 	mvn.w	r2, #1
 8006c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fb ff00 	bl	8002a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b80      	cmp	r3, #128	; 0x80
 8006c94:	d10e      	bne.n	8006cb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca0:	2b80      	cmp	r3, #128	; 0x80
 8006ca2:	d107      	bne.n	8006cb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f8bf 	bl	8006e32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbe:	2b40      	cmp	r3, #64	; 0x40
 8006cc0:	d10e      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ccc:	2b40      	cmp	r3, #64	; 0x40
 8006cce:	d107      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f835 	bl	8006d4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d10e      	bne.n	8006d0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d107      	bne.n	8006d0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f06f 0220 	mvn.w	r2, #32
 8006d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f88a 	bl	8006e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr

08006d26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr

08006d4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr

08006d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a29      	ldr	r2, [pc, #164]	; (8006e14 <TIM_Base_SetConfig+0xb8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00b      	beq.n	8006d8c <TIM_Base_SetConfig+0x30>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7a:	d007      	beq.n	8006d8c <TIM_Base_SetConfig+0x30>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a26      	ldr	r2, [pc, #152]	; (8006e18 <TIM_Base_SetConfig+0xbc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d003      	beq.n	8006d8c <TIM_Base_SetConfig+0x30>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a25      	ldr	r2, [pc, #148]	; (8006e1c <TIM_Base_SetConfig+0xc0>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d108      	bne.n	8006d9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a1c      	ldr	r2, [pc, #112]	; (8006e14 <TIM_Base_SetConfig+0xb8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00b      	beq.n	8006dbe <TIM_Base_SetConfig+0x62>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dac:	d007      	beq.n	8006dbe <TIM_Base_SetConfig+0x62>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a19      	ldr	r2, [pc, #100]	; (8006e18 <TIM_Base_SetConfig+0xbc>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d003      	beq.n	8006dbe <TIM_Base_SetConfig+0x62>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a18      	ldr	r2, [pc, #96]	; (8006e1c <TIM_Base_SetConfig+0xc0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d108      	bne.n	8006dd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a07      	ldr	r2, [pc, #28]	; (8006e14 <TIM_Base_SetConfig+0xb8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d103      	bne.n	8006e04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	615a      	str	r2, [r3, #20]
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40000400 	.word	0x40000400
 8006e1c:	40000800 	.word	0x40000800

08006e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bc80      	pop	{r7}
 8006e30:	4770      	bx	lr

08006e32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr

08006e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e092      	b.n	8006f7c <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d02c      	beq.n	8006eb8 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a48      	ldr	r2, [pc, #288]	; (8006f84 <HAL_UART_Init+0x140>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00e      	beq.n	8006e86 <HAL_UART_Init+0x42>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a46      	ldr	r2, [pc, #280]	; (8006f88 <HAL_UART_Init+0x144>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d009      	beq.n	8006e86 <HAL_UART_Init+0x42>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a45      	ldr	r2, [pc, #276]	; (8006f8c <HAL_UART_Init+0x148>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_UART_Init+0x42>
 8006e7c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006e80:	4843      	ldr	r0, [pc, #268]	; (8006f90 <HAL_UART_Init+0x14c>)
 8006e82:	f7fb fe18 	bl	8002ab6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d028      	beq.n	8006ee0 <HAL_UART_Init+0x9c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e96:	d023      	beq.n	8006ee0 <HAL_UART_Init+0x9c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea0:	d01e      	beq.n	8006ee0 <HAL_UART_Init+0x9c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eaa:	d019      	beq.n	8006ee0 <HAL_UART_Init+0x9c>
 8006eac:	f240 1147 	movw	r1, #327	; 0x147
 8006eb0:	4837      	ldr	r0, [pc, #220]	; (8006f90 <HAL_UART_Init+0x14c>)
 8006eb2:	f7fb fe00 	bl	8002ab6 <assert_failed>
 8006eb6:	e013      	b.n	8006ee0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a31      	ldr	r2, [pc, #196]	; (8006f84 <HAL_UART_Init+0x140>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d00e      	beq.n	8006ee0 <HAL_UART_Init+0x9c>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a30      	ldr	r2, [pc, #192]	; (8006f88 <HAL_UART_Init+0x144>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d009      	beq.n	8006ee0 <HAL_UART_Init+0x9c>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a2e      	ldr	r2, [pc, #184]	; (8006f8c <HAL_UART_Init+0x148>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d004      	beq.n	8006ee0 <HAL_UART_Init+0x9c>
 8006ed6:	f240 114b 	movw	r1, #331	; 0x14b
 8006eda:	482d      	ldr	r0, [pc, #180]	; (8006f90 <HAL_UART_Init+0x14c>)
 8006edc:	f7fb fdeb 	bl	8002ab6 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d009      	beq.n	8006efc <HAL_UART_Init+0xb8>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef0:	d004      	beq.n	8006efc <HAL_UART_Init+0xb8>
 8006ef2:	f240 114d 	movw	r1, #333	; 0x14d
 8006ef6:	4826      	ldr	r0, [pc, #152]	; (8006f90 <HAL_UART_Init+0x14c>)
 8006ef8:	f7fb fddd 	bl	8002ab6 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d106      	bne.n	8006f16 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7fc f9a1 	bl	8003258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2224      	movs	r2, #36	; 0x24
 8006f1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f2c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f9ac 	bl	800728c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691a      	ldr	r2, [r3, #16]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f42:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695a      	ldr	r2, [r3, #20]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f52:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f62:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40013800 	.word	0x40013800
 8006f88:	40004400 	.word	0x40004400
 8006f8c:	40004800 	.word	0x40004800
 8006f90:	0800d4b0 	.word	0x0800d4b0

08006f94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	; 0x28
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d17c      	bne.n	80070ae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <HAL_UART_Transmit+0x2c>
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e075      	b.n	80070b0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d101      	bne.n	8006fd2 <HAL_UART_Transmit+0x3e>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	e06e      	b.n	80070b0 <HAL_UART_Transmit+0x11c>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2221      	movs	r2, #33	; 0x21
 8006fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006fe8:	f7fc f9d0 	bl	800338c <HAL_GetTick>
 8006fec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	88fa      	ldrh	r2, [r7, #6]
 8006ff8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007002:	d108      	bne.n	8007016 <HAL_UART_Transmit+0x82>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800700c:	2300      	movs	r3, #0
 800700e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	61bb      	str	r3, [r7, #24]
 8007014:	e003      	b.n	800701e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007026:	e02a      	b.n	800707e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2200      	movs	r2, #0
 8007030:	2180      	movs	r1, #128	; 0x80
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 f8df 	bl	80071f6 <UART_WaitOnFlagUntilTimeout>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e036      	b.n	80070b0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10b      	bne.n	8007060 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007056:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	3302      	adds	r3, #2
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e007      	b.n	8007070 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	781a      	ldrb	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	3301      	adds	r3, #1
 800706e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007074:	b29b      	uxth	r3, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	b29a      	uxth	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007082:	b29b      	uxth	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1cf      	bne.n	8007028 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2200      	movs	r2, #0
 8007090:	2140      	movs	r1, #64	; 0x40
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 f8af 	bl	80071f6 <UART_WaitOnFlagUntilTimeout>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e006      	b.n	80070b0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e000      	b.n	80070b0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070ae:	2302      	movs	r3, #2
  }
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3720      	adds	r7, #32
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08a      	sub	sp, #40	; 0x28
 80070bc:	af02      	add	r7, sp, #8
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	4613      	mov	r3, r2
 80070c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b20      	cmp	r3, #32
 80070d6:	f040 8089 	bne.w	80071ec <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <HAL_UART_Receive+0x2e>
 80070e0:	88fb      	ldrh	r3, [r7, #6]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e081      	b.n	80071ee <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d101      	bne.n	80070f8 <HAL_UART_Receive+0x40>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e07a      	b.n	80071ee <HAL_UART_Receive+0x136>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2222      	movs	r2, #34	; 0x22
 800710a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800710e:	f7fc f93d 	bl	800338c <HAL_GetTick>
 8007112:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	88fa      	ldrh	r2, [r7, #6]
 8007118:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	88fa      	ldrh	r2, [r7, #6]
 800711e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007128:	d108      	bne.n	800713c <HAL_UART_Receive+0x84>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	61bb      	str	r3, [r7, #24]
 800713a:	e003      	b.n	8007144 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007140:	2300      	movs	r3, #0
 8007142:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800714c:	e043      	b.n	80071d6 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2200      	movs	r2, #0
 8007156:	2120      	movs	r1, #32
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f84c 	bl	80071f6 <UART_WaitOnFlagUntilTimeout>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e042      	b.n	80071ee <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10c      	bne.n	8007188 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	b29b      	uxth	r3, r3
 8007176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717a:	b29a      	uxth	r2, r3
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	3302      	adds	r3, #2
 8007184:	61bb      	str	r3, [r7, #24]
 8007186:	e01f      	b.n	80071c8 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007190:	d007      	beq.n	80071a2 <HAL_UART_Receive+0xea>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <HAL_UART_Receive+0xf8>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	e008      	b.n	80071c2 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	3301      	adds	r3, #1
 80071c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071da:	b29b      	uxth	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1b6      	bne.n	800714e <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2220      	movs	r2, #32
 80071e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e000      	b.n	80071ee <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80071ec:	2302      	movs	r3, #2
  }
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	603b      	str	r3, [r7, #0]
 8007202:	4613      	mov	r3, r2
 8007204:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007206:	e02c      	b.n	8007262 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720e:	d028      	beq.n	8007262 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d007      	beq.n	8007226 <UART_WaitOnFlagUntilTimeout+0x30>
 8007216:	f7fc f8b9 	bl	800338c <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	429a      	cmp	r2, r3
 8007224:	d21d      	bcs.n	8007262 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007234:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	695a      	ldr	r2, [r3, #20]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0201 	bic.w	r2, r2, #1
 8007244:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2220      	movs	r2, #32
 8007252:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e00f      	b.n	8007282 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4013      	ands	r3, r2
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	429a      	cmp	r2, r3
 8007270:	bf0c      	ite	eq
 8007272:	2301      	moveq	r3, #1
 8007274:	2300      	movne	r3, #0
 8007276:	b2db      	uxtb	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	429a      	cmp	r2, r3
 800727e:	d0c3      	beq.n	8007208 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4a5f      	ldr	r2, [pc, #380]	; (8007418 <UART_SetConfig+0x18c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d904      	bls.n	80072a8 <UART_SetConfig+0x1c>
 800729e:	f640 31f6 	movw	r1, #3062	; 0xbf6
 80072a2:	485e      	ldr	r0, [pc, #376]	; (800741c <UART_SetConfig+0x190>)
 80072a4:	f7fb fc07 	bl	8002ab6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <UART_SetConfig+0x38>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b8:	d004      	beq.n	80072c4 <UART_SetConfig+0x38>
 80072ba:	f640 31f7 	movw	r1, #3063	; 0xbf7
 80072be:	4857      	ldr	r0, [pc, #348]	; (800741c <UART_SetConfig+0x190>)
 80072c0:	f7fb fbf9 	bl	8002ab6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00e      	beq.n	80072ea <UART_SetConfig+0x5e>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d4:	d009      	beq.n	80072ea <UART_SetConfig+0x5e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80072de:	d004      	beq.n	80072ea <UART_SetConfig+0x5e>
 80072e0:	f640 31f8 	movw	r1, #3064	; 0xbf8
 80072e4:	484d      	ldr	r0, [pc, #308]	; (800741c <UART_SetConfig+0x190>)
 80072e6:	f7fb fbe6 	bl	8002ab6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695a      	ldr	r2, [r3, #20]
 80072ee:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80072f2:	4013      	ands	r3, r2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d103      	bne.n	8007300 <UART_SetConfig+0x74>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <UART_SetConfig+0x7e>
 8007300:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8007304:	4845      	ldr	r0, [pc, #276]	; (800741c <UART_SetConfig+0x190>)
 8007306:	f7fb fbd6 	bl	8002ab6 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	4313      	orrs	r3, r2
 8007330:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800733c:	f023 030c 	bic.w	r3, r3, #12
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6812      	ldr	r2, [r2, #0]
 8007344:	68b9      	ldr	r1, [r7, #8]
 8007346:	430b      	orrs	r3, r1
 8007348:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699a      	ldr	r2, [r3, #24]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a2e      	ldr	r2, [pc, #184]	; (8007420 <UART_SetConfig+0x194>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d103      	bne.n	8007372 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800736a:	f7fe faab 	bl	80058c4 <HAL_RCC_GetPCLK2Freq>
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	e002      	b.n	8007378 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007372:	f7fe fa93 	bl	800589c <HAL_RCC_GetPCLK1Freq>
 8007376:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009a      	lsls	r2, r3, #2
 8007382:	441a      	add	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	fbb2 f3f3 	udiv	r3, r2, r3
 800738e:	4a25      	ldr	r2, [pc, #148]	; (8007424 <UART_SetConfig+0x198>)
 8007390:	fba2 2303 	umull	r2, r3, r2, r3
 8007394:	095b      	lsrs	r3, r3, #5
 8007396:	0119      	lsls	r1, r3, #4
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009a      	lsls	r2, r3, #2
 80073a2:	441a      	add	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80073ae:	4b1d      	ldr	r3, [pc, #116]	; (8007424 <UART_SetConfig+0x198>)
 80073b0:	fba3 0302 	umull	r0, r3, r3, r2
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	2064      	movs	r0, #100	; 0x64
 80073b8:	fb00 f303 	mul.w	r3, r0, r3
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	3332      	adds	r3, #50	; 0x32
 80073c2:	4a18      	ldr	r2, [pc, #96]	; (8007424 <UART_SetConfig+0x198>)
 80073c4:	fba2 2303 	umull	r2, r3, r2, r3
 80073c8:	095b      	lsrs	r3, r3, #5
 80073ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ce:	4419      	add	r1, r3
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4613      	mov	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	009a      	lsls	r2, r3, #2
 80073da:	441a      	add	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80073e6:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <UART_SetConfig+0x198>)
 80073e8:	fba3 0302 	umull	r0, r3, r3, r2
 80073ec:	095b      	lsrs	r3, r3, #5
 80073ee:	2064      	movs	r0, #100	; 0x64
 80073f0:	fb00 f303 	mul.w	r3, r0, r3
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	3332      	adds	r3, #50	; 0x32
 80073fa:	4a0a      	ldr	r2, [pc, #40]	; (8007424 <UART_SetConfig+0x198>)
 80073fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	f003 020f 	and.w	r2, r3, #15
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	440a      	add	r2, r1
 800740c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800740e:	bf00      	nop
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	0044aa20 	.word	0x0044aa20
 800741c:	0800d4b0 	.word	0x0800d4b0
 8007420:	40013800 	.word	0x40013800
 8007424:	51eb851f 	.word	0x51eb851f

08007428 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800742e:	f3ef 8305 	mrs	r3, IPSR
 8007432:	60bb      	str	r3, [r7, #8]
  return(result);
 8007434:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10f      	bne.n	800745a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800743a:	f3ef 8310 	mrs	r3, PRIMASK
 800743e:	607b      	str	r3, [r7, #4]
  return(result);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d109      	bne.n	800745a <osKernelInitialize+0x32>
 8007446:	4b10      	ldr	r3, [pc, #64]	; (8007488 <osKernelInitialize+0x60>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d109      	bne.n	8007462 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800744e:	f3ef 8311 	mrs	r3, BASEPRI
 8007452:	603b      	str	r3, [r7, #0]
  return(result);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800745a:	f06f 0305 	mvn.w	r3, #5
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	e00c      	b.n	800747c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007462:	4b09      	ldr	r3, [pc, #36]	; (8007488 <osKernelInitialize+0x60>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d105      	bne.n	8007476 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800746a:	4b07      	ldr	r3, [pc, #28]	; (8007488 <osKernelInitialize+0x60>)
 800746c:	2201      	movs	r2, #1
 800746e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	e002      	b.n	800747c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007476:	f04f 33ff 	mov.w	r3, #4294967295
 800747a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800747c:	68fb      	ldr	r3, [r7, #12]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr
 8007488:	200000c8 	.word	0x200000c8

0800748c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007492:	f3ef 8305 	mrs	r3, IPSR
 8007496:	60bb      	str	r3, [r7, #8]
  return(result);
 8007498:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10f      	bne.n	80074be <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800749e:	f3ef 8310 	mrs	r3, PRIMASK
 80074a2:	607b      	str	r3, [r7, #4]
  return(result);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d109      	bne.n	80074be <osKernelStart+0x32>
 80074aa:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <osKernelStart+0x64>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d109      	bne.n	80074c6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074b2:	f3ef 8311 	mrs	r3, BASEPRI
 80074b6:	603b      	str	r3, [r7, #0]
  return(result);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80074be:	f06f 0305 	mvn.w	r3, #5
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e00e      	b.n	80074e4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80074c6:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <osKernelStart+0x64>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d107      	bne.n	80074de <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80074ce:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <osKernelStart+0x64>)
 80074d0:	2202      	movs	r2, #2
 80074d2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80074d4:	f002 f824 	bl	8009520 <vTaskStartScheduler>
      stat = osOK;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	e002      	b.n	80074e4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80074de:	f04f 33ff 	mov.w	r3, #4294967295
 80074e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80074e4:	68fb      	ldr	r3, [r7, #12]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	200000c8 	.word	0x200000c8

080074f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b092      	sub	sp, #72	; 0x48
 80074f8:	af04      	add	r7, sp, #16
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007500:	2300      	movs	r3, #0
 8007502:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007504:	f3ef 8305 	mrs	r3, IPSR
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800750c:	2b00      	cmp	r3, #0
 800750e:	f040 8094 	bne.w	800763a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007512:	f3ef 8310 	mrs	r3, PRIMASK
 8007516:	623b      	str	r3, [r7, #32]
  return(result);
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	2b00      	cmp	r3, #0
 800751c:	f040 808d 	bne.w	800763a <osThreadNew+0x146>
 8007520:	4b48      	ldr	r3, [pc, #288]	; (8007644 <osThreadNew+0x150>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b02      	cmp	r3, #2
 8007526:	d106      	bne.n	8007536 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007528:	f3ef 8311 	mrs	r3, BASEPRI
 800752c:	61fb      	str	r3, [r7, #28]
  return(result);
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	2b00      	cmp	r3, #0
 8007532:	f040 8082 	bne.w	800763a <osThreadNew+0x146>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d07e      	beq.n	800763a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800753c:	2340      	movs	r3, #64	; 0x40
 800753e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007540:	2318      	movs	r3, #24
 8007542:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007544:	2300      	movs	r3, #0
 8007546:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007548:	f107 031b 	add.w	r3, r7, #27
 800754c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800754e:	f04f 33ff 	mov.w	r3, #4294967295
 8007552:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d045      	beq.n	80075e6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <osThreadNew+0x74>
        name = attr->name;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	2b00      	cmp	r3, #0
 800757a:	d008      	beq.n	800758e <osThreadNew+0x9a>
 800757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757e:	2b38      	cmp	r3, #56	; 0x38
 8007580:	d805      	bhi.n	800758e <osThreadNew+0x9a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <osThreadNew+0x9e>
        return (NULL);
 800758e:	2300      	movs	r3, #0
 8007590:	e054      	b.n	800763c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	089b      	lsrs	r3, r3, #2
 80075a0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00e      	beq.n	80075c8 <osThreadNew+0xd4>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	2b6f      	cmp	r3, #111	; 0x6f
 80075b0:	d90a      	bls.n	80075c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d006      	beq.n	80075c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <osThreadNew+0xd4>
        mem = 1;
 80075c2:	2301      	movs	r3, #1
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80075c6:	e010      	b.n	80075ea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10c      	bne.n	80075ea <osThreadNew+0xf6>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d108      	bne.n	80075ea <osThreadNew+0xf6>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d104      	bne.n	80075ea <osThreadNew+0xf6>
          mem = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80075e4:	e001      	b.n	80075ea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d110      	bne.n	8007612 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075f8:	9202      	str	r2, [sp, #8]
 80075fa:	9301      	str	r3, [sp, #4]
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007604:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f001 fdba 	bl	8009180 <xTaskCreateStatic>
 800760c:	4603      	mov	r3, r0
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	e013      	b.n	800763a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	2b00      	cmp	r3, #0
 8007616:	d110      	bne.n	800763a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	b29a      	uxth	r2, r3
 800761c:	f107 0314 	add.w	r3, r7, #20
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f001 fe04 	bl	8009238 <xTaskCreate>
 8007630:	4603      	mov	r3, r0
 8007632:	2b01      	cmp	r3, #1
 8007634:	d001      	beq.n	800763a <osThreadNew+0x146>
          hTask = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800763a:	697b      	ldr	r3, [r7, #20]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3738      	adds	r7, #56	; 0x38
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	200000c8 	.word	0x200000c8

08007648 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007650:	f3ef 8305 	mrs	r3, IPSR
 8007654:	613b      	str	r3, [r7, #16]
  return(result);
 8007656:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10f      	bne.n	800767c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800765c:	f3ef 8310 	mrs	r3, PRIMASK
 8007660:	60fb      	str	r3, [r7, #12]
  return(result);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d109      	bne.n	800767c <osDelay+0x34>
 8007668:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <osDelay+0x58>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b02      	cmp	r3, #2
 800766e:	d109      	bne.n	8007684 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007670:	f3ef 8311 	mrs	r3, BASEPRI
 8007674:	60bb      	str	r3, [r7, #8]
  return(result);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <osDelay+0x3c>
    stat = osErrorISR;
 800767c:	f06f 0305 	mvn.w	r3, #5
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	e007      	b.n	8007694 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007684:	2300      	movs	r3, #0
 8007686:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <osDelay+0x4c>
      vTaskDelay(ticks);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 ff12 	bl	80094b8 <vTaskDelay>
    }
  }

  return (stat);
 8007694:	697b      	ldr	r3, [r7, #20]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	200000c8 	.word	0x200000c8

080076a4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08a      	sub	sp, #40	; 0x28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076b0:	f3ef 8305 	mrs	r3, IPSR
 80076b4:	613b      	str	r3, [r7, #16]
  return(result);
 80076b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f040 8085 	bne.w	80077c8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076be:	f3ef 8310 	mrs	r3, PRIMASK
 80076c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d17e      	bne.n	80077c8 <osMutexNew+0x124>
 80076ca:	4b42      	ldr	r3, [pc, #264]	; (80077d4 <osMutexNew+0x130>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d105      	bne.n	80076de <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076d2:	f3ef 8311 	mrs	r3, BASEPRI
 80076d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d174      	bne.n	80077c8 <osMutexNew+0x124>
    if (attr != NULL) {
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <osMutexNew+0x48>
      type = attr->attr_bits;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	623b      	str	r3, [r7, #32]
 80076ea:	e001      	b.n	80076f0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <osMutexNew+0x5c>
      rmtx = 1U;
 80076fa:	2301      	movs	r3, #1
 80076fc:	61fb      	str	r3, [r7, #28]
 80076fe:	e001      	b.n	8007704 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	f003 0308 	and.w	r3, r3, #8
 800770a:	2b00      	cmp	r3, #0
 800770c:	d15c      	bne.n	80077c8 <osMutexNew+0x124>
      mem = -1;
 800770e:	f04f 33ff 	mov.w	r3, #4294967295
 8007712:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d015      	beq.n	8007746 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d006      	beq.n	8007730 <osMutexNew+0x8c>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	2b4f      	cmp	r3, #79	; 0x4f
 8007728:	d902      	bls.n	8007730 <osMutexNew+0x8c>
          mem = 1;
 800772a:	2301      	movs	r3, #1
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	e00c      	b.n	800774a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d108      	bne.n	800774a <osMutexNew+0xa6>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d104      	bne.n	800774a <osMutexNew+0xa6>
            mem = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	61bb      	str	r3, [r7, #24]
 8007744:	e001      	b.n	800774a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007746:	2300      	movs	r3, #0
 8007748:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d112      	bne.n	8007776 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d007      	beq.n	8007766 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	4619      	mov	r1, r3
 800775c:	2004      	movs	r0, #4
 800775e:	f000 fdcd 	bl	80082fc <xQueueCreateMutexStatic>
 8007762:	6278      	str	r0, [r7, #36]	; 0x24
 8007764:	e016      	b.n	8007794 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	4619      	mov	r1, r3
 800776c:	2001      	movs	r0, #1
 800776e:	f000 fdc5 	bl	80082fc <xQueueCreateMutexStatic>
 8007772:	6278      	str	r0, [r7, #36]	; 0x24
 8007774:	e00e      	b.n	8007794 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10b      	bne.n	8007794 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d004      	beq.n	800778c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007782:	2004      	movs	r0, #4
 8007784:	f000 fda2 	bl	80082cc <xQueueCreateMutex>
 8007788:	6278      	str	r0, [r7, #36]	; 0x24
 800778a:	e003      	b.n	8007794 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800778c:	2001      	movs	r0, #1
 800778e:	f000 fd9d 	bl	80082cc <xQueueCreateMutex>
 8007792:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00c      	beq.n	80077b4 <osMutexNew+0x110>
        if (attr != NULL) {
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <osMutexNew+0x104>
          name = attr->name;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	617b      	str	r3, [r7, #20]
 80077a6:	e001      	b.n	80077ac <osMutexNew+0x108>
        } else {
          name = NULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80077ac:	6979      	ldr	r1, [r7, #20]
 80077ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077b0:	f001 fc60 	bl	8009074 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d006      	beq.n	80077c8 <osMutexNew+0x124>
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	f043 0301 	orr.w	r3, r3, #1
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3728      	adds	r7, #40	; 0x28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	200000c8 	.word	0x200000c8

080077d8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08c      	sub	sp, #48	; 0x30
 80077dc:	af02      	add	r7, sp, #8
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e8:	f3ef 8305 	mrs	r3, IPSR
 80077ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80077ee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f040 8086 	bne.w	8007902 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f6:	f3ef 8310 	mrs	r3, PRIMASK
 80077fa:	617b      	str	r3, [r7, #20]
  return(result);
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d17f      	bne.n	8007902 <osSemaphoreNew+0x12a>
 8007802:	4b42      	ldr	r3, [pc, #264]	; (800790c <osSemaphoreNew+0x134>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d105      	bne.n	8007816 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800780a:	f3ef 8311 	mrs	r3, BASEPRI
 800780e:	613b      	str	r3, [r7, #16]
  return(result);
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d175      	bne.n	8007902 <osSemaphoreNew+0x12a>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d072      	beq.n	8007902 <osSemaphoreNew+0x12a>
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	429a      	cmp	r2, r3
 8007822:	d86e      	bhi.n	8007902 <osSemaphoreNew+0x12a>
    mem = -1;
 8007824:	f04f 33ff 	mov.w	r3, #4294967295
 8007828:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d015      	beq.n	800785c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d006      	beq.n	8007846 <osSemaphoreNew+0x6e>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	2b4f      	cmp	r3, #79	; 0x4f
 800783e:	d902      	bls.n	8007846 <osSemaphoreNew+0x6e>
        mem = 1;
 8007840:	2301      	movs	r3, #1
 8007842:	623b      	str	r3, [r7, #32]
 8007844:	e00c      	b.n	8007860 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d108      	bne.n	8007860 <osSemaphoreNew+0x88>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <osSemaphoreNew+0x88>
          mem = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	623b      	str	r3, [r7, #32]
 800785a:	e001      	b.n	8007860 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007866:	d04c      	beq.n	8007902 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d128      	bne.n	80078c0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d10a      	bne.n	800788a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	2203      	movs	r2, #3
 800787a:	9200      	str	r2, [sp, #0]
 800787c:	2200      	movs	r2, #0
 800787e:	2100      	movs	r1, #0
 8007880:	2001      	movs	r0, #1
 8007882:	f000 fc31 	bl	80080e8 <xQueueGenericCreateStatic>
 8007886:	6278      	str	r0, [r7, #36]	; 0x24
 8007888:	e005      	b.n	8007896 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800788a:	2203      	movs	r2, #3
 800788c:	2100      	movs	r1, #0
 800788e:	2001      	movs	r0, #1
 8007890:	f000 fca1 	bl	80081d6 <xQueueGenericCreate>
 8007894:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d022      	beq.n	80078e2 <osSemaphoreNew+0x10a>
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d01f      	beq.n	80078e2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80078a2:	2300      	movs	r3, #0
 80078a4:	2200      	movs	r2, #0
 80078a6:	2100      	movs	r1, #0
 80078a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078aa:	f000 fdad 	bl	8008408 <xQueueGenericSend>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d016      	beq.n	80078e2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80078b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078b6:	f001 fa93 	bl	8008de0 <vQueueDelete>
            hSemaphore = NULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
 80078be:	e010      	b.n	80078e2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d108      	bne.n	80078d8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	461a      	mov	r2, r3
 80078cc:	68b9      	ldr	r1, [r7, #8]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 fd2f 	bl	8008332 <xQueueCreateCountingSemaphoreStatic>
 80078d4:	6278      	str	r0, [r7, #36]	; 0x24
 80078d6:	e004      	b.n	80078e2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80078d8:	68b9      	ldr	r1, [r7, #8]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 fd60 	bl	80083a0 <xQueueCreateCountingSemaphore>
 80078e0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00c      	beq.n	8007902 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <osSemaphoreNew+0x11e>
          name = attr->name;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	61fb      	str	r3, [r7, #28]
 80078f4:	e001      	b.n	80078fa <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80078fa:	69f9      	ldr	r1, [r7, #28]
 80078fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078fe:	f001 fbb9 	bl	8009074 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007904:	4618      	mov	r0, r3
 8007906:	3728      	adds	r7, #40	; 0x28
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	200000c8 	.word	0x200000c8

08007910 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800791e:	2300      	movs	r3, #0
 8007920:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d103      	bne.n	8007930 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007928:	f06f 0303 	mvn.w	r3, #3
 800792c:	61fb      	str	r3, [r7, #28]
 800792e:	e04b      	b.n	80079c8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007930:	f3ef 8305 	mrs	r3, IPSR
 8007934:	617b      	str	r3, [r7, #20]
  return(result);
 8007936:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10f      	bne.n	800795c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800793c:	f3ef 8310 	mrs	r3, PRIMASK
 8007940:	613b      	str	r3, [r7, #16]
  return(result);
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d109      	bne.n	800795c <osSemaphoreAcquire+0x4c>
 8007948:	4b22      	ldr	r3, [pc, #136]	; (80079d4 <osSemaphoreAcquire+0xc4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d128      	bne.n	80079a2 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007950:	f3ef 8311 	mrs	r3, BASEPRI
 8007954:	60fb      	str	r3, [r7, #12]
  return(result);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d022      	beq.n	80079a2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007962:	f06f 0303 	mvn.w	r3, #3
 8007966:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007968:	e02d      	b.n	80079c6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800796a:	2300      	movs	r3, #0
 800796c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800796e:	f107 0308 	add.w	r3, r7, #8
 8007972:	461a      	mov	r2, r3
 8007974:	2100      	movs	r1, #0
 8007976:	69b8      	ldr	r0, [r7, #24]
 8007978:	f001 f956 	bl	8008c28 <xQueueReceiveFromISR>
 800797c:	4603      	mov	r3, r0
 800797e:	2b01      	cmp	r3, #1
 8007980:	d003      	beq.n	800798a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007982:	f06f 0302 	mvn.w	r3, #2
 8007986:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007988:	e01d      	b.n	80079c6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01a      	beq.n	80079c6 <osSemaphoreAcquire+0xb6>
 8007990:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <osSemaphoreAcquire+0xc8>)
 8007992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80079a0:	e011      	b.n	80079c6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	69b8      	ldr	r0, [r7, #24]
 80079a6:	f001 f833 	bl	8008a10 <xQueueSemaphoreTake>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d00b      	beq.n	80079c8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80079b6:	f06f 0301 	mvn.w	r3, #1
 80079ba:	61fb      	str	r3, [r7, #28]
 80079bc:	e004      	b.n	80079c8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80079be:	f06f 0302 	mvn.w	r3, #2
 80079c2:	61fb      	str	r3, [r7, #28]
 80079c4:	e000      	b.n	80079c8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80079c6:	bf00      	nop
      }
    }
  }

  return (stat);
 80079c8:	69fb      	ldr	r3, [r7, #28]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3720      	adds	r7, #32
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	200000c8 	.word	0x200000c8
 80079d8:	e000ed04 	.word	0xe000ed04

080079dc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d103      	bne.n	80079fa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80079f2:	f06f 0303 	mvn.w	r3, #3
 80079f6:	61fb      	str	r3, [r7, #28]
 80079f8:	e03e      	b.n	8007a78 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079fa:	f3ef 8305 	mrs	r3, IPSR
 80079fe:	617b      	str	r3, [r7, #20]
  return(result);
 8007a00:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10f      	bne.n	8007a26 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a06:	f3ef 8310 	mrs	r3, PRIMASK
 8007a0a:	613b      	str	r3, [r7, #16]
  return(result);
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d109      	bne.n	8007a26 <osSemaphoreRelease+0x4a>
 8007a12:	4b1c      	ldr	r3, [pc, #112]	; (8007a84 <osSemaphoreRelease+0xa8>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d120      	bne.n	8007a5c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8007a1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d01a      	beq.n	8007a5c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a2a:	f107 0308 	add.w	r3, r7, #8
 8007a2e:	4619      	mov	r1, r3
 8007a30:	69b8      	ldr	r0, [r7, #24]
 8007a32:	f000 fe7f 	bl	8008734 <xQueueGiveFromISR>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d003      	beq.n	8007a44 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007a3c:	f06f 0302 	mvn.w	r3, #2
 8007a40:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a42:	e018      	b.n	8007a76 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d015      	beq.n	8007a76 <osSemaphoreRelease+0x9a>
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <osSemaphoreRelease+0xac>)
 8007a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a5a:	e00c      	b.n	8007a76 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2100      	movs	r1, #0
 8007a62:	69b8      	ldr	r0, [r7, #24]
 8007a64:	f000 fcd0 	bl	8008408 <xQueueGenericSend>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d004      	beq.n	8007a78 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007a6e:	f06f 0302 	mvn.w	r3, #2
 8007a72:	61fb      	str	r3, [r7, #28]
 8007a74:	e000      	b.n	8007a78 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a76:	bf00      	nop
    }
  }

  return (stat);
 8007a78:	69fb      	ldr	r3, [r7, #28]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3720      	adds	r7, #32
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	200000c8 	.word	0x200000c8
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08c      	sub	sp, #48	; 0x30
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a9c:	f3ef 8305 	mrs	r3, IPSR
 8007aa0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007aa2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d16f      	bne.n	8007b88 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8007aac:	617b      	str	r3, [r7, #20]
  return(result);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d169      	bne.n	8007b88 <osMessageQueueNew+0xfc>
 8007ab4:	4b37      	ldr	r3, [pc, #220]	; (8007b94 <osMessageQueueNew+0x108>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d105      	bne.n	8007ac8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007abc:	f3ef 8311 	mrs	r3, BASEPRI
 8007ac0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d15f      	bne.n	8007b88 <osMessageQueueNew+0xfc>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d05c      	beq.n	8007b88 <osMessageQueueNew+0xfc>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d059      	beq.n	8007b88 <osMessageQueueNew+0xfc>
    mem = -1;
 8007ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d029      	beq.n	8007b34 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d012      	beq.n	8007b0e <osMessageQueueNew+0x82>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2b4f      	cmp	r3, #79	; 0x4f
 8007aee:	d90e      	bls.n	8007b0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	695a      	ldr	r2, [r3, #20]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	fb01 f303 	mul.w	r3, r1, r3
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d302      	bcc.n	8007b0e <osMessageQueueNew+0x82>
        mem = 1;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	623b      	str	r3, [r7, #32]
 8007b0c:	e014      	b.n	8007b38 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d110      	bne.n	8007b38 <osMessageQueueNew+0xac>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10c      	bne.n	8007b38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d108      	bne.n	8007b38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <osMessageQueueNew+0xac>
          mem = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	623b      	str	r3, [r7, #32]
 8007b32:	e001      	b.n	8007b38 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d10b      	bne.n	8007b56 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	2100      	movs	r1, #0
 8007b48:	9100      	str	r1, [sp, #0]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 facb 	bl	80080e8 <xQueueGenericCreateStatic>
 8007b52:	6278      	str	r0, [r7, #36]	; 0x24
 8007b54:	e008      	b.n	8007b68 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d105      	bne.n	8007b68 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fb38 	bl	80081d6 <xQueueGenericCreate>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00c      	beq.n	8007b88 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <osMessageQueueNew+0xf0>
        name = attr->name;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	61fb      	str	r3, [r7, #28]
 8007b7a:	e001      	b.n	8007b80 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007b80:	69f9      	ldr	r1, [r7, #28]
 8007b82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b84:	f001 fa76 	bl	8009074 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3728      	adds	r7, #40	; 0x28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	200000c8 	.word	0x200000c8

08007b98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bb0:	f3ef 8305 	mrs	r3, IPSR
 8007bb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007bb6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10f      	bne.n	8007bdc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d109      	bne.n	8007bdc <osMessageQueuePut+0x44>
 8007bc8:	4b2b      	ldr	r3, [pc, #172]	; (8007c78 <osMessageQueuePut+0xe0>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d12e      	bne.n	8007c2e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bd0:	f3ef 8311 	mrs	r3, BASEPRI
 8007bd4:	617b      	str	r3, [r7, #20]
  return(result);
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d028      	beq.n	8007c2e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <osMessageQueuePut+0x56>
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <osMessageQueuePut+0x56>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007bee:	f06f 0303 	mvn.w	r3, #3
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bf4:	e039      	b.n	8007c6a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007bfa:	f107 0210 	add.w	r2, r7, #16
 8007bfe:	2300      	movs	r3, #0
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	6a38      	ldr	r0, [r7, #32]
 8007c04:	f000 fcfe 	bl	8008604 <xQueueGenericSendFromISR>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d003      	beq.n	8007c16 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007c0e:	f06f 0302 	mvn.w	r3, #2
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c14:	e029      	b.n	8007c6a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d026      	beq.n	8007c6a <osMessageQueuePut+0xd2>
 8007c1c:	4b17      	ldr	r3, [pc, #92]	; (8007c7c <osMessageQueuePut+0xe4>)
 8007c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c2c:	e01d      	b.n	8007c6a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <osMessageQueuePut+0xa2>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d103      	bne.n	8007c42 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007c3a:	f06f 0303 	mvn.w	r3, #3
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c40:	e014      	b.n	8007c6c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007c42:	2300      	movs	r3, #0
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	68b9      	ldr	r1, [r7, #8]
 8007c48:	6a38      	ldr	r0, [r7, #32]
 8007c4a:	f000 fbdd 	bl	8008408 <xQueueGenericSend>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d00b      	beq.n	8007c6c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007c5a:	f06f 0301 	mvn.w	r3, #1
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c60:	e004      	b.n	8007c6c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007c62:	f06f 0302 	mvn.w	r3, #2
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
 8007c68:	e000      	b.n	8007c6c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c6a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3728      	adds	r7, #40	; 0x28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	200000c8 	.word	0x200000c8
 8007c7c:	e000ed04 	.word	0xe000ed04

08007c80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08a      	sub	sp, #40	; 0x28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c96:	f3ef 8305 	mrs	r3, IPSR
 8007c9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8007c9c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10f      	bne.n	8007cc2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ca6:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <osMessageQueueGet+0x42>
 8007cae:	4b2b      	ldr	r3, [pc, #172]	; (8007d5c <osMessageQueueGet+0xdc>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d12e      	bne.n	8007d14 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cb6:	f3ef 8311 	mrs	r3, BASEPRI
 8007cba:	617b      	str	r3, [r7, #20]
  return(result);
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d028      	beq.n	8007d14 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <osMessageQueueGet+0x54>
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <osMessageQueueGet+0x54>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007cd4:	f06f 0303 	mvn.w	r3, #3
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cda:	e038      	b.n	8007d4e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007ce0:	f107 0310 	add.w	r3, r7, #16
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	6a38      	ldr	r0, [r7, #32]
 8007cea:	f000 ff9d 	bl	8008c28 <xQueueReceiveFromISR>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d003      	beq.n	8007cfc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007cf4:	f06f 0302 	mvn.w	r3, #2
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cfa:	e028      	b.n	8007d4e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d025      	beq.n	8007d4e <osMessageQueueGet+0xce>
 8007d02:	4b17      	ldr	r3, [pc, #92]	; (8007d60 <osMessageQueueGet+0xe0>)
 8007d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d12:	e01c      	b.n	8007d4e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <osMessageQueueGet+0xa0>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007d20:	f06f 0303 	mvn.w	r3, #3
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
 8007d26:	e013      	b.n	8007d50 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	68b9      	ldr	r1, [r7, #8]
 8007d2c:	6a38      	ldr	r0, [r7, #32]
 8007d2e:	f000 fd8f 	bl	8008850 <xQueueReceive>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d00b      	beq.n	8007d50 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007d3e:	f06f 0301 	mvn.w	r3, #1
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
 8007d44:	e004      	b.n	8007d50 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007d46:	f06f 0302 	mvn.w	r3, #2
 8007d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d4c:	e000      	b.n	8007d50 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d4e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3728      	adds	r7, #40	; 0x28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	200000c8 	.word	0x200000c8
 8007d60:	e000ed04 	.word	0xe000ed04

08007d64 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <osMessageQueueGetCount+0x18>
    count = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	61fb      	str	r3, [r7, #28]
 8007d7a:	e01e      	b.n	8007dba <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d7c:	f3ef 8305 	mrs	r3, IPSR
 8007d80:	617b      	str	r3, [r7, #20]
  return(result);
 8007d82:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10f      	bne.n	8007da8 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d88:	f3ef 8310 	mrs	r3, PRIMASK
 8007d8c:	613b      	str	r3, [r7, #16]
  return(result);
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d109      	bne.n	8007da8 <osMessageQueueGetCount+0x44>
 8007d94:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <osMessageQueueGetCount+0x60>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d10a      	bne.n	8007db2 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d9c:	f3ef 8311 	mrs	r3, BASEPRI
 8007da0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d004      	beq.n	8007db2 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007da8:	69b8      	ldr	r0, [r7, #24]
 8007daa:	f000 fffe 	bl	8008daa <uxQueueMessagesWaitingFromISR>
 8007dae:	61f8      	str	r0, [r7, #28]
 8007db0:	e003      	b.n	8007dba <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007db2:	69b8      	ldr	r0, [r7, #24]
 8007db4:	f000 ffb8 	bl	8008d28 <uxQueueMessagesWaiting>
 8007db8:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007dba:	69fb      	ldr	r3, [r7, #28]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3720      	adds	r7, #32
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	200000c8 	.word	0x200000c8

08007dc8 <osMessageQueueGetSpace>:

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08c      	sub	sp, #48	; 0x30
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d102      	bne.n	8007de0 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dde:	e034      	b.n	8007e4a <osMessageQueueGetSpace+0x82>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007de0:	f3ef 8305 	mrs	r3, IPSR
 8007de4:	623b      	str	r3, [r7, #32]
  return(result);
 8007de6:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10f      	bne.n	8007e0c <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dec:	f3ef 8310 	mrs	r3, PRIMASK
 8007df0:	61fb      	str	r3, [r7, #28]
  return(result);
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d109      	bne.n	8007e0c <osMessageQueueGetSpace+0x44>
 8007df8:	4b16      	ldr	r3, [pc, #88]	; (8007e54 <osMessageQueueGetSpace+0x8c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d120      	bne.n	8007e42 <osMessageQueueGetSpace+0x7a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e00:	f3ef 8311 	mrs	r3, BASEPRI
 8007e04:	61bb      	str	r3, [r7, #24]
  return(result);
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01a      	beq.n	8007e42 <osMessageQueueGetSpace+0x7a>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e0c:	f3ef 8211 	mrs	r2, BASEPRI
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	613a      	str	r2, [r7, #16]
 8007e22:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e24:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e3e:	bf00      	nop

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 8007e40:	e003      	b.n	8007e4a <osMessageQueueGetSpace+0x82>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8007e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e44:	f000 ff8e 	bl	8008d64 <uxQueueSpacesAvailable>
 8007e48:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3730      	adds	r7, #48	; 0x30
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	200000c8 	.word	0x200000c8

08007e58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4a06      	ldr	r2, [pc, #24]	; (8007e80 <vApplicationGetIdleTaskMemory+0x28>)
 8007e68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4a05      	ldr	r2, [pc, #20]	; (8007e84 <vApplicationGetIdleTaskMemory+0x2c>)
 8007e6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2240      	movs	r2, #64	; 0x40
 8007e74:	601a      	str	r2, [r3, #0]
}
 8007e76:	bf00      	nop
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bc80      	pop	{r7}
 8007e7e:	4770      	bx	lr
 8007e80:	200000cc 	.word	0x200000cc
 8007e84:	2000013c 	.word	0x2000013c

08007e88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4a06      	ldr	r2, [pc, #24]	; (8007eb0 <vApplicationGetTimerTaskMemory+0x28>)
 8007e98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	4a05      	ldr	r2, [pc, #20]	; (8007eb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007e9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2280      	movs	r2, #128	; 0x80
 8007ea4:	601a      	str	r2, [r3, #0]
}
 8007ea6:	bf00      	nop
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr
 8007eb0:	2000023c 	.word	0x2000023c
 8007eb4:	200002ac 	.word	0x200002ac

08007eb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f103 0208 	add.w	r2, r3, #8
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f103 0208 	add.w	r2, r3, #8
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f103 0208 	add.w	r2, r3, #8
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bc80      	pop	{r7}
 8007ef4:	4770      	bx	lr

08007ef6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bc80      	pop	{r7}
 8007f0c:	4770      	bx	lr

08007f0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b085      	sub	sp, #20
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	689a      	ldr	r2, [r3, #8]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	1c5a      	adds	r2, r3, #1
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	601a      	str	r2, [r3, #0]
}
 8007f4a:	bf00      	nop
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bc80      	pop	{r7}
 8007f52:	4770      	bx	lr

08007f54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6a:	d103      	bne.n	8007f74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	e00c      	b.n	8007f8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3308      	adds	r3, #8
 8007f78:	60fb      	str	r3, [r7, #12]
 8007f7a:	e002      	b.n	8007f82 <vListInsert+0x2e>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d2f6      	bcs.n	8007f7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	601a      	str	r2, [r3, #0]
}
 8007fba:	bf00      	nop
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bc80      	pop	{r7}
 8007fc2:	4770      	bx	lr

08007fc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	6892      	ldr	r2, [r2, #8]
 8007fda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6852      	ldr	r2, [r2, #4]
 8007fe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d103      	bne.n	8007ff8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	1e5a      	subs	r2, r3, #1
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	bc80      	pop	{r7}
 8008014:	4770      	bx	lr
	...

08008018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xQueueGenericReset+0x2a>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	60bb      	str	r3, [r7, #8]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008042:	f002 fcc3 	bl	800a9cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804e:	68f9      	ldr	r1, [r7, #12]
 8008050:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008052:	fb01 f303 	mul.w	r3, r1, r3
 8008056:	441a      	add	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008072:	3b01      	subs	r3, #1
 8008074:	68f9      	ldr	r1, [r7, #12]
 8008076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008078:	fb01 f303 	mul.w	r3, r1, r3
 800807c:	441a      	add	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	22ff      	movs	r2, #255	; 0xff
 8008086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	22ff      	movs	r2, #255	; 0xff
 800808e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d114      	bne.n	80080c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01a      	beq.n	80080d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3310      	adds	r3, #16
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 fce3 	bl	8009a70 <xTaskRemoveFromEventList>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d012      	beq.n	80080d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080b0:	4b0c      	ldr	r3, [pc, #48]	; (80080e4 <xQueueGenericReset+0xcc>)
 80080b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	e009      	b.n	80080d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3310      	adds	r3, #16
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff fef6 	bl	8007eb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3324      	adds	r3, #36	; 0x24
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7ff fef1 	bl	8007eb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80080d6:	f002 fca9 	bl	800aa2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80080da:	2301      	movs	r3, #1
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	e000ed04 	.word	0xe000ed04

080080e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08e      	sub	sp, #56	; 0x38
 80080ec:	af02      	add	r7, sp, #8
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10a      	bne.n	800812e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
}
 800812a:	bf00      	nop
 800812c:	e7fe      	b.n	800812c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <xQueueGenericCreateStatic+0x52>
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <xQueueGenericCreateStatic+0x56>
 800813a:	2301      	movs	r3, #1
 800813c:	e000      	b.n	8008140 <xQueueGenericCreateStatic+0x58>
 800813e:	2300      	movs	r3, #0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10a      	bne.n	800815a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	623b      	str	r3, [r7, #32]
}
 8008156:	bf00      	nop
 8008158:	e7fe      	b.n	8008158 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <xQueueGenericCreateStatic+0x7e>
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <xQueueGenericCreateStatic+0x82>
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <xQueueGenericCreateStatic+0x84>
 800816a:	2300      	movs	r3, #0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10a      	bne.n	8008186 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	61fb      	str	r3, [r7, #28]
}
 8008182:	bf00      	nop
 8008184:	e7fe      	b.n	8008184 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008186:	2350      	movs	r3, #80	; 0x50
 8008188:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b50      	cmp	r3, #80	; 0x50
 800818e:	d00a      	beq.n	80081a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	61bb      	str	r3, [r7, #24]
}
 80081a2:	bf00      	nop
 80081a4:	e7fe      	b.n	80081a4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80081aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00d      	beq.n	80081cc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80081bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	4613      	mov	r3, r2
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	68b9      	ldr	r1, [r7, #8]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 f843 	bl	8008252 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80081cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3730      	adds	r7, #48	; 0x30
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b08a      	sub	sp, #40	; 0x28
 80081da:	af02      	add	r7, sp, #8
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	4613      	mov	r3, r2
 80081e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <xQueueGenericCreate+0x2a>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	613b      	str	r3, [r7, #16]
}
 80081fc:	bf00      	nop
 80081fe:	e7fe      	b.n	80081fe <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d102      	bne.n	800820c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008206:	2300      	movs	r3, #0
 8008208:	61fb      	str	r3, [r7, #28]
 800820a:	e004      	b.n	8008216 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	fb02 f303 	mul.w	r3, r2, r3
 8008214:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	3350      	adds	r3, #80	; 0x50
 800821a:	4618      	mov	r0, r3
 800821c:	f002 fcd6 	bl	800abcc <pvPortMalloc>
 8008220:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00f      	beq.n	8008248 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	3350      	adds	r3, #80	; 0x50
 800822c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008236:	79fa      	ldrb	r2, [r7, #7]
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	4613      	mov	r3, r2
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 f805 	bl	8008252 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008248:	69bb      	ldr	r3, [r7, #24]
	}
 800824a:	4618      	mov	r0, r3
 800824c:	3720      	adds	r7, #32
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	60b9      	str	r1, [r7, #8]
 800825c:	607a      	str	r2, [r7, #4]
 800825e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d103      	bne.n	800826e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	e002      	b.n	8008274 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008280:	2101      	movs	r1, #1
 8008282:	69b8      	ldr	r0, [r7, #24]
 8008284:	f7ff fec8 	bl	8008018 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	78fa      	ldrb	r2, [r7, #3]
 800828c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008290:	bf00      	nop
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00e      	beq.n	80082c4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80082b8:	2300      	movs	r3, #0
 80082ba:	2200      	movs	r2, #0
 80082bc:	2100      	movs	r1, #0
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f8a2 	bl	8008408 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80082d6:	2301      	movs	r3, #1
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	2300      	movs	r3, #0
 80082dc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	461a      	mov	r2, r3
 80082e2:	6939      	ldr	r1, [r7, #16]
 80082e4:	6978      	ldr	r0, [r7, #20]
 80082e6:	f7ff ff76 	bl	80081d6 <xQueueGenericCreate>
 80082ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7ff ffd3 	bl	8008298 <prvInitialiseMutex>

		return pxNewQueue;
 80082f2:	68fb      	ldr	r3, [r7, #12]
	}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af02      	add	r7, sp, #8
 8008302:	4603      	mov	r3, r0
 8008304:	6039      	str	r1, [r7, #0]
 8008306:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008308:	2301      	movs	r3, #1
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	2300      	movs	r3, #0
 800830e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2200      	movs	r2, #0
 8008318:	6939      	ldr	r1, [r7, #16]
 800831a:	6978      	ldr	r0, [r7, #20]
 800831c:	f7ff fee4 	bl	80080e8 <xQueueGenericCreateStatic>
 8008320:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f7ff ffb8 	bl	8008298 <prvInitialiseMutex>

		return pxNewQueue;
 8008328:	68fb      	ldr	r3, [r7, #12]
	}
 800832a:	4618      	mov	r0, r3
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008332:	b580      	push	{r7, lr}
 8008334:	b08a      	sub	sp, #40	; 0x28
 8008336:	af02      	add	r7, sp, #8
 8008338:	60f8      	str	r0, [r7, #12]
 800833a:	60b9      	str	r1, [r7, #8]
 800833c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	61bb      	str	r3, [r7, #24]
}
 8008356:	bf00      	nop
 8008358:	e7fe      	b.n	8008358 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	429a      	cmp	r2, r3
 8008360:	d90a      	bls.n	8008378 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	617b      	str	r3, [r7, #20]
}
 8008374:	bf00      	nop
 8008376:	e7fe      	b.n	8008376 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008378:	2302      	movs	r3, #2
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	2100      	movs	r1, #0
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f7ff feb0 	bl	80080e8 <xQueueGenericCreateStatic>
 8008388:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008396:	69fb      	ldr	r3, [r7, #28]
	}
 8008398:	4618      	mov	r0, r3
 800839a:	3720      	adds	r7, #32
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10a      	bne.n	80083c6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	613b      	str	r3, [r7, #16]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d90a      	bls.n	80083e4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60fb      	str	r3, [r7, #12]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80083e4:	2202      	movs	r2, #2
 80083e6:	2100      	movs	r1, #0
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff fef4 	bl	80081d6 <xQueueGenericCreate>
 80083ee:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80083fc:	697b      	ldr	r3, [r7, #20]
	}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08e      	sub	sp, #56	; 0x38
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008416:	2300      	movs	r3, #0
 8008418:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <xQueueGenericSend+0x32>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008436:	bf00      	nop
 8008438:	e7fe      	b.n	8008438 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d103      	bne.n	8008448 <xQueueGenericSend+0x40>
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <xQueueGenericSend+0x44>
 8008448:	2301      	movs	r3, #1
 800844a:	e000      	b.n	800844e <xQueueGenericSend+0x46>
 800844c:	2300      	movs	r3, #0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10a      	bne.n	8008468 <xQueueGenericSend+0x60>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008464:	bf00      	nop
 8008466:	e7fe      	b.n	8008466 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d103      	bne.n	8008476 <xQueueGenericSend+0x6e>
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008472:	2b01      	cmp	r3, #1
 8008474:	d101      	bne.n	800847a <xQueueGenericSend+0x72>
 8008476:	2301      	movs	r3, #1
 8008478:	e000      	b.n	800847c <xQueueGenericSend+0x74>
 800847a:	2300      	movs	r3, #0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10a      	bne.n	8008496 <xQueueGenericSend+0x8e>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	623b      	str	r3, [r7, #32]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008496:	f001 fcad 	bl	8009df4 <xTaskGetSchedulerState>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <xQueueGenericSend+0x9e>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <xQueueGenericSend+0xa2>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <xQueueGenericSend+0xa4>
 80084aa:	2300      	movs	r3, #0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10a      	bne.n	80084c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	61fb      	str	r3, [r7, #28]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084c6:	f002 fa81 	bl	800a9cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d302      	bcc.n	80084dc <xQueueGenericSend+0xd4>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d129      	bne.n	8008530 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	68b9      	ldr	r1, [r7, #8]
 80084e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084e2:	f000 fcb7 	bl	8008e54 <prvCopyDataToQueue>
 80084e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d010      	beq.n	8008512 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f2:	3324      	adds	r3, #36	; 0x24
 80084f4:	4618      	mov	r0, r3
 80084f6:	f001 fabb 	bl	8009a70 <xTaskRemoveFromEventList>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d013      	beq.n	8008528 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008500:	4b3f      	ldr	r3, [pc, #252]	; (8008600 <xQueueGenericSend+0x1f8>)
 8008502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	e00a      	b.n	8008528 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d007      	beq.n	8008528 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008518:	4b39      	ldr	r3, [pc, #228]	; (8008600 <xQueueGenericSend+0x1f8>)
 800851a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008528:	f002 fa80 	bl	800aa2c <vPortExitCritical>
				return pdPASS;
 800852c:	2301      	movs	r3, #1
 800852e:	e063      	b.n	80085f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d103      	bne.n	800853e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008536:	f002 fa79 	bl	800aa2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800853a:	2300      	movs	r3, #0
 800853c:	e05c      	b.n	80085f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008540:	2b00      	cmp	r3, #0
 8008542:	d106      	bne.n	8008552 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008544:	f107 0314 	add.w	r3, r7, #20
 8008548:	4618      	mov	r0, r3
 800854a:	f001 faf5 	bl	8009b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800854e:	2301      	movs	r3, #1
 8008550:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008552:	f002 fa6b 	bl	800aa2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008556:	f001 f84b 	bl	80095f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800855a:	f002 fa37 	bl	800a9cc <vPortEnterCritical>
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008564:	b25b      	sxtb	r3, r3
 8008566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856a:	d103      	bne.n	8008574 <xQueueGenericSend+0x16c>
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800857a:	b25b      	sxtb	r3, r3
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d103      	bne.n	800858a <xQueueGenericSend+0x182>
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800858a:	f002 fa4f 	bl	800aa2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800858e:	1d3a      	adds	r2, r7, #4
 8008590:	f107 0314 	add.w	r3, r7, #20
 8008594:	4611      	mov	r1, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fae4 	bl	8009b64 <xTaskCheckForTimeOut>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d124      	bne.n	80085ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80085a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085a4:	f000 fd4e 	bl	8009044 <prvIsQueueFull>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d018      	beq.n	80085e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	3310      	adds	r3, #16
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	4611      	mov	r1, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f001 fa0a 	bl	80099d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80085bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085be:	f000 fcd9 	bl	8008f74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80085c2:	f001 f823 	bl	800960c <xTaskResumeAll>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f47f af7c 	bne.w	80084c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80085ce:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <xQueueGenericSend+0x1f8>)
 80085d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	e772      	b.n	80084c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80085e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085e2:	f000 fcc7 	bl	8008f74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085e6:	f001 f811 	bl	800960c <xTaskResumeAll>
 80085ea:	e76c      	b.n	80084c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ee:	f000 fcc1 	bl	8008f74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085f2:	f001 f80b 	bl	800960c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085f6:	2300      	movs	r3, #0
		}
	}
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3738      	adds	r7, #56	; 0x38
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	e000ed04 	.word	0xe000ed04

08008604 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08e      	sub	sp, #56	; 0x38
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d103      	bne.n	8008640 <xQueueGenericSendFromISR+0x3c>
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <xQueueGenericSendFromISR+0x40>
 8008640:	2301      	movs	r3, #1
 8008642:	e000      	b.n	8008646 <xQueueGenericSendFromISR+0x42>
 8008644:	2300      	movs	r3, #0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	623b      	str	r3, [r7, #32]
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2b02      	cmp	r3, #2
 8008664:	d103      	bne.n	800866e <xQueueGenericSendFromISR+0x6a>
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866a:	2b01      	cmp	r3, #1
 800866c:	d101      	bne.n	8008672 <xQueueGenericSendFromISR+0x6e>
 800866e:	2301      	movs	r3, #1
 8008670:	e000      	b.n	8008674 <xQueueGenericSendFromISR+0x70>
 8008672:	2300      	movs	r3, #0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10a      	bne.n	800868e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	61fb      	str	r3, [r7, #28]
}
 800868a:	bf00      	nop
 800868c:	e7fe      	b.n	800868c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800868e:	f002 fa5f 	bl	800ab50 <vPortValidateInterruptPriority>
	__asm volatile
 8008692:	f3ef 8211 	mrs	r2, BASEPRI
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	61ba      	str	r2, [r7, #24]
 80086a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80086aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d302      	bcc.n	80086c0 <xQueueGenericSendFromISR+0xbc>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d12c      	bne.n	800871a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	68b9      	ldr	r1, [r7, #8]
 80086ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086d0:	f000 fbc0 	bl	8008e54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80086d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086dc:	d112      	bne.n	8008704 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d016      	beq.n	8008714 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	3324      	adds	r3, #36	; 0x24
 80086ea:	4618      	mov	r0, r3
 80086ec:	f001 f9c0 	bl	8009a70 <xTaskRemoveFromEventList>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00e      	beq.n	8008714 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00b      	beq.n	8008714 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	601a      	str	r2, [r3, #0]
 8008702:	e007      	b.n	8008714 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008704:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008708:	3301      	adds	r3, #1
 800870a:	b2db      	uxtb	r3, r3
 800870c:	b25a      	sxtb	r2, r3
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008714:	2301      	movs	r3, #1
 8008716:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008718:	e001      	b.n	800871e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800871a:	2300      	movs	r3, #0
 800871c:	637b      	str	r3, [r7, #52]	; 0x34
 800871e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008720:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f383 8811 	msr	BASEPRI, r3
}
 8008728:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800872a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800872c:	4618      	mov	r0, r3
 800872e:	3738      	adds	r7, #56	; 0x38
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b08e      	sub	sp, #56	; 0x38
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10a      	bne.n	800875e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	623b      	str	r3, [r7, #32]
}
 800875a:	bf00      	nop
 800875c:	e7fe      	b.n	800875c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00a      	beq.n	800877c <xQueueGiveFromISR+0x48>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	61fb      	str	r3, [r7, #28]
}
 8008778:	bf00      	nop
 800877a:	e7fe      	b.n	800877a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d103      	bne.n	800878c <xQueueGiveFromISR+0x58>
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d101      	bne.n	8008790 <xQueueGiveFromISR+0x5c>
 800878c:	2301      	movs	r3, #1
 800878e:	e000      	b.n	8008792 <xQueueGiveFromISR+0x5e>
 8008790:	2300      	movs	r3, #0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10a      	bne.n	80087ac <xQueueGiveFromISR+0x78>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	61bb      	str	r3, [r7, #24]
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087ac:	f002 f9d0 	bl	800ab50 <vPortValidateInterruptPriority>
	__asm volatile
 80087b0:	f3ef 8211 	mrs	r2, BASEPRI
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	617a      	str	r2, [r7, #20]
 80087c6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80087c8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087d8:	429a      	cmp	r2, r3
 80087da:	d22b      	bcs.n	8008834 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f6:	d112      	bne.n	800881e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d016      	beq.n	800882e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	3324      	adds	r3, #36	; 0x24
 8008804:	4618      	mov	r0, r3
 8008806:	f001 f933 	bl	8009a70 <xTaskRemoveFromEventList>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00e      	beq.n	800882e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00b      	beq.n	800882e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2201      	movs	r2, #1
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	e007      	b.n	800882e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800881e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008822:	3301      	adds	r3, #1
 8008824:	b2db      	uxtb	r3, r3
 8008826:	b25a      	sxtb	r2, r3
 8008828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800882e:	2301      	movs	r3, #1
 8008830:	637b      	str	r3, [r7, #52]	; 0x34
 8008832:	e001      	b.n	8008838 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008834:	2300      	movs	r3, #0
 8008836:	637b      	str	r3, [r7, #52]	; 0x34
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f383 8811 	msr	BASEPRI, r3
}
 8008842:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008846:	4618      	mov	r0, r3
 8008848:	3738      	adds	r7, #56	; 0x38
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08c      	sub	sp, #48	; 0x30
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800885c:	2300      	movs	r3, #0
 800885e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10a      	bne.n	8008880 <xQueueReceive+0x30>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	623b      	str	r3, [r7, #32]
}
 800887c:	bf00      	nop
 800887e:	e7fe      	b.n	800887e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d103      	bne.n	800888e <xQueueReceive+0x3e>
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <xQueueReceive+0x42>
 800888e:	2301      	movs	r3, #1
 8008890:	e000      	b.n	8008894 <xQueueReceive+0x44>
 8008892:	2300      	movs	r3, #0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10a      	bne.n	80088ae <xQueueReceive+0x5e>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	61fb      	str	r3, [r7, #28]
}
 80088aa:	bf00      	nop
 80088ac:	e7fe      	b.n	80088ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088ae:	f001 faa1 	bl	8009df4 <xTaskGetSchedulerState>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d102      	bne.n	80088be <xQueueReceive+0x6e>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <xQueueReceive+0x72>
 80088be:	2301      	movs	r3, #1
 80088c0:	e000      	b.n	80088c4 <xQueueReceive+0x74>
 80088c2:	2300      	movs	r3, #0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10a      	bne.n	80088de <xQueueReceive+0x8e>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	61bb      	str	r3, [r7, #24]
}
 80088da:	bf00      	nop
 80088dc:	e7fe      	b.n	80088dc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80088de:	f002 f875 	bl	800a9cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d01f      	beq.n	800892e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f2:	f000 fb19 	bl	8008f28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	1e5a      	subs	r2, r3, #1
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00f      	beq.n	8008926 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008908:	3310      	adds	r3, #16
 800890a:	4618      	mov	r0, r3
 800890c:	f001 f8b0 	bl	8009a70 <xTaskRemoveFromEventList>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d007      	beq.n	8008926 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008916:	4b3d      	ldr	r3, [pc, #244]	; (8008a0c <xQueueReceive+0x1bc>)
 8008918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008926:	f002 f881 	bl	800aa2c <vPortExitCritical>
				return pdPASS;
 800892a:	2301      	movs	r3, #1
 800892c:	e069      	b.n	8008a02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d103      	bne.n	800893c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008934:	f002 f87a 	bl	800aa2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008938:	2300      	movs	r3, #0
 800893a:	e062      	b.n	8008a02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d106      	bne.n	8008950 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008942:	f107 0310 	add.w	r3, r7, #16
 8008946:	4618      	mov	r0, r3
 8008948:	f001 f8f6 	bl	8009b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008950:	f002 f86c 	bl	800aa2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008954:	f000 fe4c 	bl	80095f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008958:	f002 f838 	bl	800a9cc <vPortEnterCritical>
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008962:	b25b      	sxtb	r3, r3
 8008964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008968:	d103      	bne.n	8008972 <xQueueReceive+0x122>
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008978:	b25b      	sxtb	r3, r3
 800897a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897e:	d103      	bne.n	8008988 <xQueueReceive+0x138>
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008988:	f002 f850 	bl	800aa2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800898c:	1d3a      	adds	r2, r7, #4
 800898e:	f107 0310 	add.w	r3, r7, #16
 8008992:	4611      	mov	r1, r2
 8008994:	4618      	mov	r0, r3
 8008996:	f001 f8e5 	bl	8009b64 <xTaskCheckForTimeOut>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d123      	bne.n	80089e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089a2:	f000 fb39 	bl	8009018 <prvIsQueueEmpty>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d017      	beq.n	80089dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ae:	3324      	adds	r3, #36	; 0x24
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	4611      	mov	r1, r2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 f80b 	bl	80099d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089bc:	f000 fada 	bl	8008f74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089c0:	f000 fe24 	bl	800960c <xTaskResumeAll>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d189      	bne.n	80088de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80089ca:	4b10      	ldr	r3, [pc, #64]	; (8008a0c <xQueueReceive+0x1bc>)
 80089cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	e780      	b.n	80088de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80089dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089de:	f000 fac9 	bl	8008f74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089e2:	f000 fe13 	bl	800960c <xTaskResumeAll>
 80089e6:	e77a      	b.n	80088de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ea:	f000 fac3 	bl	8008f74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089ee:	f000 fe0d 	bl	800960c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089f4:	f000 fb10 	bl	8009018 <prvIsQueueEmpty>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f43f af6f 	beq.w	80088de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3730      	adds	r7, #48	; 0x30
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	e000ed04 	.word	0xe000ed04

08008a10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08e      	sub	sp, #56	; 0x38
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008a22:	2300      	movs	r3, #0
 8008a24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10a      	bne.n	8008a42 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	623b      	str	r3, [r7, #32]
}
 8008a3e:	bf00      	nop
 8008a40:	e7fe      	b.n	8008a40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	61fb      	str	r3, [r7, #28]
}
 8008a5c:	bf00      	nop
 8008a5e:	e7fe      	b.n	8008a5e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a60:	f001 f9c8 	bl	8009df4 <xTaskGetSchedulerState>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d102      	bne.n	8008a70 <xQueueSemaphoreTake+0x60>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <xQueueSemaphoreTake+0x64>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <xQueueSemaphoreTake+0x66>
 8008a74:	2300      	movs	r3, #0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10a      	bne.n	8008a90 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	61bb      	str	r3, [r7, #24]
}
 8008a8c:	bf00      	nop
 8008a8e:	e7fe      	b.n	8008a8e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a90:	f001 ff9c 	bl	800a9cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a98:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d024      	beq.n	8008aea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	1e5a      	subs	r2, r3, #1
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d104      	bne.n	8008aba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008ab0:	f001 fb20 	bl	800a0f4 <pvTaskIncrementMutexHeldCount>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00f      	beq.n	8008ae2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	3310      	adds	r3, #16
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 ffd2 	bl	8009a70 <xTaskRemoveFromEventList>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d007      	beq.n	8008ae2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ad2:	4b54      	ldr	r3, [pc, #336]	; (8008c24 <xQueueSemaphoreTake+0x214>)
 8008ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ae2:	f001 ffa3 	bl	800aa2c <vPortExitCritical>
				return pdPASS;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e097      	b.n	8008c1a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d111      	bne.n	8008b14 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	617b      	str	r3, [r7, #20]
}
 8008b08:	bf00      	nop
 8008b0a:	e7fe      	b.n	8008b0a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008b0c:	f001 ff8e 	bl	800aa2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b10:	2300      	movs	r3, #0
 8008b12:	e082      	b.n	8008c1a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d106      	bne.n	8008b28 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b1a:	f107 030c 	add.w	r3, r7, #12
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f001 f80a 	bl	8009b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b28:	f001 ff80 	bl	800aa2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b2c:	f000 fd60 	bl	80095f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b30:	f001 ff4c 	bl	800a9cc <vPortEnterCritical>
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b3a:	b25b      	sxtb	r3, r3
 8008b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b40:	d103      	bne.n	8008b4a <xQueueSemaphoreTake+0x13a>
 8008b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b50:	b25b      	sxtb	r3, r3
 8008b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b56:	d103      	bne.n	8008b60 <xQueueSemaphoreTake+0x150>
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b60:	f001 ff64 	bl	800aa2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b64:	463a      	mov	r2, r7
 8008b66:	f107 030c 	add.w	r3, r7, #12
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 fff9 	bl	8009b64 <xTaskCheckForTimeOut>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d132      	bne.n	8008bde <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b7a:	f000 fa4d 	bl	8009018 <prvIsQueueEmpty>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d026      	beq.n	8008bd2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d109      	bne.n	8008ba0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008b8c:	f001 ff1e 	bl	800a9cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f001 f94b 	bl	8009e30 <xTaskPriorityInherit>
 8008b9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008b9c:	f001 ff46 	bl	800aa2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	3324      	adds	r3, #36	; 0x24
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 ff11 	bl	80099d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bb0:	f000 f9e0 	bl	8008f74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bb4:	f000 fd2a 	bl	800960c <xTaskResumeAll>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f47f af68 	bne.w	8008a90 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008bc0:	4b18      	ldr	r3, [pc, #96]	; (8008c24 <xQueueSemaphoreTake+0x214>)
 8008bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	e75e      	b.n	8008a90 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008bd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bd4:	f000 f9ce 	bl	8008f74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bd8:	f000 fd18 	bl	800960c <xTaskResumeAll>
 8008bdc:	e758      	b.n	8008a90 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008be0:	f000 f9c8 	bl	8008f74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008be4:	f000 fd12 	bl	800960c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008be8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bea:	f000 fa15 	bl	8009018 <prvIsQueueEmpty>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f43f af4d 	beq.w	8008a90 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00d      	beq.n	8008c18 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008bfc:	f001 fee6 	bl	800a9cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c02:	f000 f910 	bl	8008e26 <prvGetDisinheritPriorityAfterTimeout>
 8008c06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f001 f9ea 	bl	8009fe8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008c14:	f001 ff0a 	bl	800aa2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3738      	adds	r7, #56	; 0x38
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	e000ed04 	.word	0xe000ed04

08008c28 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08e      	sub	sp, #56	; 0x38
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10a      	bne.n	8008c54 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	623b      	str	r3, [r7, #32]
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d103      	bne.n	8008c62 <xQueueReceiveFromISR+0x3a>
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <xQueueReceiveFromISR+0x3e>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <xQueueReceiveFromISR+0x40>
 8008c66:	2300      	movs	r3, #0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	61fb      	str	r3, [r7, #28]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c82:	f001 ff65 	bl	800ab50 <vPortValidateInterruptPriority>
	__asm volatile
 8008c86:	f3ef 8211 	mrs	r2, BASEPRI
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	61ba      	str	r2, [r7, #24]
 8008c9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008c9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d02f      	beq.n	8008d0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cb8:	68b9      	ldr	r1, [r7, #8]
 8008cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cbc:	f000 f934 	bl	8008f28 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	1e5a      	subs	r2, r3, #1
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008cc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd0:	d112      	bne.n	8008cf8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d016      	beq.n	8008d08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	3310      	adds	r3, #16
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 fec6 	bl	8009a70 <xTaskRemoveFromEventList>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00e      	beq.n	8008d08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	e007      	b.n	8008d08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	b25a      	sxtb	r2, r3
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d0c:	e001      	b.n	8008d12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	637b      	str	r3, [r7, #52]	; 0x34
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f383 8811 	msr	BASEPRI, r3
}
 8008d1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3738      	adds	r7, #56	; 0x38
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10a      	bne.n	8008d4c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	60bb      	str	r3, [r7, #8]
}
 8008d48:	bf00      	nop
 8008d4a:	e7fe      	b.n	8008d4a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008d4c:	f001 fe3e 	bl	800a9cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d54:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008d56:	f001 fe69 	bl	800aa2c <vPortExitCritical>

	return uxReturn;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10a      	bne.n	8008d8c <uxQueueSpacesAvailable+0x28>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	60fb      	str	r3, [r7, #12]
}
 8008d88:	bf00      	nop
 8008d8a:	e7fe      	b.n	8008d8a <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8008d8c:	f001 fe1e 	bl	800a9cc <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008d9c:	f001 fe46 	bl	800aa2c <vPortExitCritical>

	return uxReturn;
 8008da0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008daa:	b480      	push	{r7}
 8008dac:	b085      	sub	sp, #20
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	60bb      	str	r3, [r7, #8]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd2:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bc80      	pop	{r7}
 8008dde:	4770      	bx	lr

08008de0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10a      	bne.n	8008e08 <vQueueDelete+0x28>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	60bb      	str	r3, [r7, #8]
}
 8008e04:	bf00      	nop
 8008e06:	e7fe      	b.n	8008e06 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 f95b 	bl	80090c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d102      	bne.n	8008e1e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f001 ff9b 	bl	800ad54 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008e1e:	bf00      	nop
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e26:	b480      	push	{r7}
 8008e28:	b085      	sub	sp, #20
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d006      	beq.n	8008e44 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	e001      	b.n	8008e48 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e44:	2300      	movs	r3, #0
 8008e46:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e48:	68fb      	ldr	r3, [r7, #12]
	}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bc80      	pop	{r7}
 8008e52:	4770      	bx	lr

08008e54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e60:	2300      	movs	r3, #0
 8008e62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10d      	bne.n	8008e8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d14d      	bne.n	8008f16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 f844 	bl	8009f0c <xTaskPriorityDisinherit>
 8008e84:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	605a      	str	r2, [r3, #4]
 8008e8c:	e043      	b.n	8008f16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d119      	bne.n	8008ec8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6898      	ldr	r0, [r3, #8]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	68b9      	ldr	r1, [r7, #8]
 8008ea0:	f002 f896 	bl	800afd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eac:	441a      	add	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d32b      	bcc.n	8008f16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	609a      	str	r2, [r3, #8]
 8008ec6:	e026      	b.n	8008f16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	68d8      	ldr	r0, [r3, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	f002 f87c 	bl	800afd0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	68da      	ldr	r2, [r3, #12]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee0:	425b      	negs	r3, r3
 8008ee2:	441a      	add	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d207      	bcs.n	8008f04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efc:	425b      	negs	r3, r3
 8008efe:	441a      	add	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d105      	bne.n	8008f16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	1c5a      	adds	r2, r3, #1
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f1e:	697b      	ldr	r3, [r7, #20]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3718      	adds	r7, #24
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d018      	beq.n	8008f6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	441a      	add	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d303      	bcc.n	8008f5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68d9      	ldr	r1, [r3, #12]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f64:	461a      	mov	r2, r3
 8008f66:	6838      	ldr	r0, [r7, #0]
 8008f68:	f002 f832 	bl	800afd0 <memcpy>
	}
}
 8008f6c:	bf00      	nop
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f7c:	f001 fd26 	bl	800a9cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f88:	e011      	b.n	8008fae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d012      	beq.n	8008fb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3324      	adds	r3, #36	; 0x24
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fd6a 	bl	8009a70 <xTaskRemoveFromEventList>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fa2:	f000 fe41 	bl	8009c28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dce9      	bgt.n	8008f8a <prvUnlockQueue+0x16>
 8008fb6:	e000      	b.n	8008fba <prvUnlockQueue+0x46>
					break;
 8008fb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	22ff      	movs	r2, #255	; 0xff
 8008fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008fc2:	f001 fd33 	bl	800aa2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fc6:	f001 fd01 	bl	800a9cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fd2:	e011      	b.n	8008ff8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d012      	beq.n	8009002 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3310      	adds	r3, #16
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 fd45 	bl	8009a70 <xTaskRemoveFromEventList>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fec:	f000 fe1c 	bl	8009c28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dce9      	bgt.n	8008fd4 <prvUnlockQueue+0x60>
 8009000:	e000      	b.n	8009004 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009002:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	22ff      	movs	r2, #255	; 0xff
 8009008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800900c:	f001 fd0e 	bl	800aa2c <vPortExitCritical>
}
 8009010:	bf00      	nop
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009020:	f001 fcd4 	bl	800a9cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009028:	2b00      	cmp	r3, #0
 800902a:	d102      	bne.n	8009032 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800902c:	2301      	movs	r3, #1
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	e001      	b.n	8009036 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009032:	2300      	movs	r3, #0
 8009034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009036:	f001 fcf9 	bl	800aa2c <vPortExitCritical>

	return xReturn;
 800903a:	68fb      	ldr	r3, [r7, #12]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800904c:	f001 fcbe 	bl	800a9cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009058:	429a      	cmp	r2, r3
 800905a:	d102      	bne.n	8009062 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800905c:	2301      	movs	r3, #1
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	e001      	b.n	8009066 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009066:	f001 fce1 	bl	800aa2c <vPortExitCritical>

	return xReturn;
 800906a:	68fb      	ldr	r3, [r7, #12]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]
 8009082:	e014      	b.n	80090ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009084:	4a0e      	ldr	r2, [pc, #56]	; (80090c0 <vQueueAddToRegistry+0x4c>)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10b      	bne.n	80090a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009090:	490b      	ldr	r1, [pc, #44]	; (80090c0 <vQueueAddToRegistry+0x4c>)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800909a:	4a09      	ldr	r2, [pc, #36]	; (80090c0 <vQueueAddToRegistry+0x4c>)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	4413      	add	r3, r2
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090a6:	e006      	b.n	80090b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3301      	adds	r3, #1
 80090ac:	60fb      	str	r3, [r7, #12]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b07      	cmp	r3, #7
 80090b2:	d9e7      	bls.n	8009084 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bc80      	pop	{r7}
 80090be:	4770      	bx	lr
 80090c0:	20003b50 	.word	0x20003b50

080090c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090cc:	2300      	movs	r3, #0
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	e016      	b.n	8009100 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80090d2:	4a10      	ldr	r2, [pc, #64]	; (8009114 <vQueueUnregisterQueue+0x50>)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	4413      	add	r3, r2
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d10b      	bne.n	80090fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80090e2:	4a0c      	ldr	r2, [pc, #48]	; (8009114 <vQueueUnregisterQueue+0x50>)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2100      	movs	r1, #0
 80090e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80090ec:	4a09      	ldr	r2, [pc, #36]	; (8009114 <vQueueUnregisterQueue+0x50>)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	4413      	add	r3, r2
 80090f4:	2200      	movs	r2, #0
 80090f6:	605a      	str	r2, [r3, #4]
				break;
 80090f8:	e006      	b.n	8009108 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3301      	adds	r3, #1
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b07      	cmp	r3, #7
 8009104:	d9e5      	bls.n	80090d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009106:	bf00      	nop
 8009108:	bf00      	nop
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	bc80      	pop	{r7}
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	20003b50 	.word	0x20003b50

08009118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009128:	f001 fc50 	bl	800a9cc <vPortEnterCritical>
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009132:	b25b      	sxtb	r3, r3
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009138:	d103      	bne.n	8009142 <vQueueWaitForMessageRestricted+0x2a>
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009148:	b25b      	sxtb	r3, r3
 800914a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914e:	d103      	bne.n	8009158 <vQueueWaitForMessageRestricted+0x40>
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2200      	movs	r2, #0
 8009154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009158:	f001 fc68 	bl	800aa2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009160:	2b00      	cmp	r3, #0
 8009162:	d106      	bne.n	8009172 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	3324      	adds	r3, #36	; 0x24
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fc53 	bl	8009a18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009172:	6978      	ldr	r0, [r7, #20]
 8009174:	f7ff fefe 	bl	8008f74 <prvUnlockQueue>
	}
 8009178:	bf00      	nop
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08e      	sub	sp, #56	; 0x38
 8009184:	af04      	add	r7, sp, #16
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800918e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10a      	bne.n	80091aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	623b      	str	r3, [r7, #32]
}
 80091a6:	bf00      	nop
 80091a8:	e7fe      	b.n	80091a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	61fb      	str	r3, [r7, #28]
}
 80091c2:	bf00      	nop
 80091c4:	e7fe      	b.n	80091c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091c6:	2370      	movs	r3, #112	; 0x70
 80091c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	2b70      	cmp	r3, #112	; 0x70
 80091ce:	d00a      	beq.n	80091e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	61bb      	str	r3, [r7, #24]
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d01e      	beq.n	800922a <xTaskCreateStatic+0xaa>
 80091ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d01b      	beq.n	800922a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	2202      	movs	r2, #2
 8009200:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009204:	2300      	movs	r3, #0
 8009206:	9303      	str	r3, [sp, #12]
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	9302      	str	r3, [sp, #8]
 800920c:	f107 0314 	add.w	r3, r7, #20
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	68b9      	ldr	r1, [r7, #8]
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 f850 	bl	80092c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009222:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009224:	f000 f8d8 	bl	80093d8 <prvAddNewTaskToReadyList>
 8009228:	e001      	b.n	800922e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800922e:	697b      	ldr	r3, [r7, #20]
	}
 8009230:	4618      	mov	r0, r3
 8009232:	3728      	adds	r7, #40	; 0x28
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08c      	sub	sp, #48	; 0x30
 800923c:	af04      	add	r7, sp, #16
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	4613      	mov	r3, r2
 8009246:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009248:	88fb      	ldrh	r3, [r7, #6]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4618      	mov	r0, r3
 800924e:	f001 fcbd 	bl	800abcc <pvPortMalloc>
 8009252:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00e      	beq.n	8009278 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800925a:	2070      	movs	r0, #112	; 0x70
 800925c:	f001 fcb6 	bl	800abcc <pvPortMalloc>
 8009260:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	631a      	str	r2, [r3, #48]	; 0x30
 800926e:	e005      	b.n	800927c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009270:	6978      	ldr	r0, [r7, #20]
 8009272:	f001 fd6f 	bl	800ad54 <vPortFree>
 8009276:	e001      	b.n	800927c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009278:	2300      	movs	r3, #0
 800927a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d017      	beq.n	80092b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800928a:	88fa      	ldrh	r2, [r7, #6]
 800928c:	2300      	movs	r3, #0
 800928e:	9303      	str	r3, [sp, #12]
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	9302      	str	r3, [sp, #8]
 8009294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009296:	9301      	str	r3, [sp, #4]
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 f80e 	bl	80092c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092a6:	69f8      	ldr	r0, [r7, #28]
 80092a8:	f000 f896 	bl	80093d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092ac:	2301      	movs	r3, #1
 80092ae:	61bb      	str	r3, [r7, #24]
 80092b0:	e002      	b.n	80092b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092b2:	f04f 33ff 	mov.w	r3, #4294967295
 80092b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092b8:	69bb      	ldr	r3, [r7, #24]
	}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3720      	adds	r7, #32
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b088      	sub	sp, #32
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	607a      	str	r2, [r7, #4]
 80092ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	461a      	mov	r2, r3
 80092da:	21a5      	movs	r1, #165	; 0xa5
 80092dc:	f001 fe86 	bl	800afec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092ea:	3b01      	subs	r3, #1
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	f023 0307 	bic.w	r3, r3, #7
 80092f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	f003 0307 	and.w	r3, r3, #7
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00a      	beq.n	800931a <prvInitialiseNewTask+0x58>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	617b      	str	r3, [r7, #20]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800931a:	2300      	movs	r3, #0
 800931c:	61fb      	str	r3, [r7, #28]
 800931e:	e012      	b.n	8009346 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	4413      	add	r3, r2
 8009326:	7819      	ldrb	r1, [r3, #0]
 8009328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	4413      	add	r3, r2
 800932e:	3334      	adds	r3, #52	; 0x34
 8009330:	460a      	mov	r2, r1
 8009332:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	4413      	add	r3, r2
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d006      	beq.n	800934e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	3301      	adds	r3, #1
 8009344:	61fb      	str	r3, [r7, #28]
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	2b1f      	cmp	r3, #31
 800934a:	d9e9      	bls.n	8009320 <prvInitialiseNewTask+0x5e>
 800934c:	e000      	b.n	8009350 <prvInitialiseNewTask+0x8e>
		{
			break;
 800934e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009352:	2200      	movs	r2, #0
 8009354:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	2b37      	cmp	r3, #55	; 0x37
 800935c:	d901      	bls.n	8009362 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800935e:	2337      	movs	r3, #55	; 0x37
 8009360:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009366:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800936c:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	2200      	movs	r2, #0
 8009372:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	3304      	adds	r3, #4
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe fdbc 	bl	8007ef6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	3318      	adds	r3, #24
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fdb7 	bl	8007ef6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800938c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009390:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	2200      	movs	r2, #0
 80093a2:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a6:	2200      	movs	r2, #0
 80093a8:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	68f9      	ldr	r1, [r7, #12]
 80093b6:	69b8      	ldr	r0, [r7, #24]
 80093b8:	f001 fa16 	bl	800a7e8 <pxPortInitialiseStack>
 80093bc:	4602      	mov	r2, r0
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80093c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ce:	bf00      	nop
 80093d0:	3720      	adds	r7, #32
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093e0:	f001 faf4 	bl	800a9cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093e4:	4b2d      	ldr	r3, [pc, #180]	; (800949c <prvAddNewTaskToReadyList+0xc4>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3301      	adds	r3, #1
 80093ea:	4a2c      	ldr	r2, [pc, #176]	; (800949c <prvAddNewTaskToReadyList+0xc4>)
 80093ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093ee:	4b2c      	ldr	r3, [pc, #176]	; (80094a0 <prvAddNewTaskToReadyList+0xc8>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d109      	bne.n	800940a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093f6:	4a2a      	ldr	r2, [pc, #168]	; (80094a0 <prvAddNewTaskToReadyList+0xc8>)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093fc:	4b27      	ldr	r3, [pc, #156]	; (800949c <prvAddNewTaskToReadyList+0xc4>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d110      	bne.n	8009426 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009404:	f000 fc34 	bl	8009c70 <prvInitialiseTaskLists>
 8009408:	e00d      	b.n	8009426 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800940a:	4b26      	ldr	r3, [pc, #152]	; (80094a4 <prvAddNewTaskToReadyList+0xcc>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d109      	bne.n	8009426 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009412:	4b23      	ldr	r3, [pc, #140]	; (80094a0 <prvAddNewTaskToReadyList+0xc8>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	429a      	cmp	r2, r3
 800941e:	d802      	bhi.n	8009426 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009420:	4a1f      	ldr	r2, [pc, #124]	; (80094a0 <prvAddNewTaskToReadyList+0xc8>)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009426:	4b20      	ldr	r3, [pc, #128]	; (80094a8 <prvAddNewTaskToReadyList+0xd0>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3301      	adds	r3, #1
 800942c:	4a1e      	ldr	r2, [pc, #120]	; (80094a8 <prvAddNewTaskToReadyList+0xd0>)
 800942e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009430:	4b1d      	ldr	r3, [pc, #116]	; (80094a8 <prvAddNewTaskToReadyList+0xd0>)
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800943c:	4b1b      	ldr	r3, [pc, #108]	; (80094ac <prvAddNewTaskToReadyList+0xd4>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	429a      	cmp	r2, r3
 8009442:	d903      	bls.n	800944c <prvAddNewTaskToReadyList+0x74>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009448:	4a18      	ldr	r2, [pc, #96]	; (80094ac <prvAddNewTaskToReadyList+0xd4>)
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009450:	4613      	mov	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4413      	add	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4a15      	ldr	r2, [pc, #84]	; (80094b0 <prvAddNewTaskToReadyList+0xd8>)
 800945a:	441a      	add	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3304      	adds	r3, #4
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	f7fe fd53 	bl	8007f0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009468:	f001 fae0 	bl	800aa2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800946c:	4b0d      	ldr	r3, [pc, #52]	; (80094a4 <prvAddNewTaskToReadyList+0xcc>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00e      	beq.n	8009492 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009474:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <prvAddNewTaskToReadyList+0xc8>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947e:	429a      	cmp	r2, r3
 8009480:	d207      	bcs.n	8009492 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009482:	4b0c      	ldr	r3, [pc, #48]	; (80094b4 <prvAddNewTaskToReadyList+0xdc>)
 8009484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009492:	bf00      	nop
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20000980 	.word	0x20000980
 80094a0:	200004ac 	.word	0x200004ac
 80094a4:	2000098c 	.word	0x2000098c
 80094a8:	2000099c 	.word	0x2000099c
 80094ac:	20000988 	.word	0x20000988
 80094b0:	200004b0 	.word	0x200004b0
 80094b4:	e000ed04 	.word	0xe000ed04

080094b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094c0:	2300      	movs	r3, #0
 80094c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d017      	beq.n	80094fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094ca:	4b13      	ldr	r3, [pc, #76]	; (8009518 <vTaskDelay+0x60>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <vTaskDelay+0x30>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	60bb      	str	r3, [r7, #8]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094e8:	f000 f882 	bl	80095f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094ec:	2100      	movs	r1, #0
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fe14 	bl	800a11c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094f4:	f000 f88a 	bl	800960c <xTaskResumeAll>
 80094f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d107      	bne.n	8009510 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009500:	4b06      	ldr	r3, [pc, #24]	; (800951c <vTaskDelay+0x64>)
 8009502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009510:	bf00      	nop
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	200009a8 	.word	0x200009a8
 800951c:	e000ed04 	.word	0xe000ed04

08009520 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b08a      	sub	sp, #40	; 0x28
 8009524:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800952a:	2300      	movs	r3, #0
 800952c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800952e:	463a      	mov	r2, r7
 8009530:	1d39      	adds	r1, r7, #4
 8009532:	f107 0308 	add.w	r3, r7, #8
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fc8e 	bl	8007e58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	9202      	str	r2, [sp, #8]
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	2300      	movs	r3, #0
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	2300      	movs	r3, #0
 800954c:	460a      	mov	r2, r1
 800954e:	4922      	ldr	r1, [pc, #136]	; (80095d8 <vTaskStartScheduler+0xb8>)
 8009550:	4822      	ldr	r0, [pc, #136]	; (80095dc <vTaskStartScheduler+0xbc>)
 8009552:	f7ff fe15 	bl	8009180 <xTaskCreateStatic>
 8009556:	4603      	mov	r3, r0
 8009558:	4a21      	ldr	r2, [pc, #132]	; (80095e0 <vTaskStartScheduler+0xc0>)
 800955a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800955c:	4b20      	ldr	r3, [pc, #128]	; (80095e0 <vTaskStartScheduler+0xc0>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d002      	beq.n	800956a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009564:	2301      	movs	r3, #1
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	e001      	b.n	800956e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800956a:	2300      	movs	r3, #0
 800956c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d102      	bne.n	800957a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009574:	f000 fe26 	bl	800a1c4 <xTimerCreateTimerTask>
 8009578:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d118      	bne.n	80095b2 <vTaskStartScheduler+0x92>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	613b      	str	r3, [r7, #16]
}
 8009592:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009594:	4b13      	ldr	r3, [pc, #76]	; (80095e4 <vTaskStartScheduler+0xc4>)
 8009596:	f04f 32ff 	mov.w	r2, #4294967295
 800959a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800959c:	4b12      	ldr	r3, [pc, #72]	; (80095e8 <vTaskStartScheduler+0xc8>)
 800959e:	2201      	movs	r2, #1
 80095a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80095a2:	4b12      	ldr	r3, [pc, #72]	; (80095ec <vTaskStartScheduler+0xcc>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80095a8:	f7f7 f994 	bl	80008d4 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095ac:	f001 f99c 	bl	800a8e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095b0:	e00e      	b.n	80095d0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b8:	d10a      	bne.n	80095d0 <vTaskStartScheduler+0xb0>
	__asm volatile
 80095ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095be:	f383 8811 	msr	BASEPRI, r3
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	60fb      	str	r3, [r7, #12]
}
 80095cc:	bf00      	nop
 80095ce:	e7fe      	b.n	80095ce <vTaskStartScheduler+0xae>
}
 80095d0:	bf00      	nop
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	0800d4ec 	.word	0x0800d4ec
 80095dc:	08009c41 	.word	0x08009c41
 80095e0:	200009a4 	.word	0x200009a4
 80095e4:	200009a0 	.word	0x200009a0
 80095e8:	2000098c 	.word	0x2000098c
 80095ec:	20000984 	.word	0x20000984

080095f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095f0:	b480      	push	{r7}
 80095f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80095f4:	4b04      	ldr	r3, [pc, #16]	; (8009608 <vTaskSuspendAll+0x18>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3301      	adds	r3, #1
 80095fa:	4a03      	ldr	r2, [pc, #12]	; (8009608 <vTaskSuspendAll+0x18>)
 80095fc:	6013      	str	r3, [r2, #0]
}
 80095fe:	bf00      	nop
 8009600:	46bd      	mov	sp, r7
 8009602:	bc80      	pop	{r7}
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	200009a8 	.word	0x200009a8

0800960c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009612:	2300      	movs	r3, #0
 8009614:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009616:	2300      	movs	r3, #0
 8009618:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800961a:	4b42      	ldr	r3, [pc, #264]	; (8009724 <xTaskResumeAll+0x118>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10a      	bne.n	8009638 <xTaskResumeAll+0x2c>
	__asm volatile
 8009622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	603b      	str	r3, [r7, #0]
}
 8009634:	bf00      	nop
 8009636:	e7fe      	b.n	8009636 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009638:	f001 f9c8 	bl	800a9cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800963c:	4b39      	ldr	r3, [pc, #228]	; (8009724 <xTaskResumeAll+0x118>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3b01      	subs	r3, #1
 8009642:	4a38      	ldr	r2, [pc, #224]	; (8009724 <xTaskResumeAll+0x118>)
 8009644:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009646:	4b37      	ldr	r3, [pc, #220]	; (8009724 <xTaskResumeAll+0x118>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d162      	bne.n	8009714 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800964e:	4b36      	ldr	r3, [pc, #216]	; (8009728 <xTaskResumeAll+0x11c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d05e      	beq.n	8009714 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009656:	e02f      	b.n	80096b8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009658:	4b34      	ldr	r3, [pc, #208]	; (800972c <xTaskResumeAll+0x120>)
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	3318      	adds	r3, #24
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe fcad 	bl	8007fc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3304      	adds	r3, #4
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe fca8 	bl	8007fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009678:	4b2d      	ldr	r3, [pc, #180]	; (8009730 <xTaskResumeAll+0x124>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	429a      	cmp	r2, r3
 800967e:	d903      	bls.n	8009688 <xTaskResumeAll+0x7c>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009684:	4a2a      	ldr	r2, [pc, #168]	; (8009730 <xTaskResumeAll+0x124>)
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968c:	4613      	mov	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4a27      	ldr	r2, [pc, #156]	; (8009734 <xTaskResumeAll+0x128>)
 8009696:	441a      	add	r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3304      	adds	r3, #4
 800969c:	4619      	mov	r1, r3
 800969e:	4610      	mov	r0, r2
 80096a0:	f7fe fc35 	bl	8007f0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a8:	4b23      	ldr	r3, [pc, #140]	; (8009738 <xTaskResumeAll+0x12c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d302      	bcc.n	80096b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80096b2:	4b22      	ldr	r3, [pc, #136]	; (800973c <xTaskResumeAll+0x130>)
 80096b4:	2201      	movs	r2, #1
 80096b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096b8:	4b1c      	ldr	r3, [pc, #112]	; (800972c <xTaskResumeAll+0x120>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1cb      	bne.n	8009658 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096c6:	f000 fb71 	bl	8009dac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80096ca:	4b1d      	ldr	r3, [pc, #116]	; (8009740 <xTaskResumeAll+0x134>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d010      	beq.n	80096f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096d6:	f000 f845 	bl	8009764 <xTaskIncrementTick>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80096e0:	4b16      	ldr	r3, [pc, #88]	; (800973c <xTaskResumeAll+0x130>)
 80096e2:	2201      	movs	r2, #1
 80096e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1f1      	bne.n	80096d6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80096f2:	4b13      	ldr	r3, [pc, #76]	; (8009740 <xTaskResumeAll+0x134>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096f8:	4b10      	ldr	r3, [pc, #64]	; (800973c <xTaskResumeAll+0x130>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d009      	beq.n	8009714 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009700:	2301      	movs	r3, #1
 8009702:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009704:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <xTaskResumeAll+0x138>)
 8009706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009714:	f001 f98a 	bl	800aa2c <vPortExitCritical>

	return xAlreadyYielded;
 8009718:	68bb      	ldr	r3, [r7, #8]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	200009a8 	.word	0x200009a8
 8009728:	20000980 	.word	0x20000980
 800972c:	20000940 	.word	0x20000940
 8009730:	20000988 	.word	0x20000988
 8009734:	200004b0 	.word	0x200004b0
 8009738:	200004ac 	.word	0x200004ac
 800973c:	20000994 	.word	0x20000994
 8009740:	20000990 	.word	0x20000990
 8009744:	e000ed04 	.word	0xe000ed04

08009748 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800974e:	4b04      	ldr	r3, [pc, #16]	; (8009760 <xTaskGetTickCount+0x18>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009754:	687b      	ldr	r3, [r7, #4]
}
 8009756:	4618      	mov	r0, r3
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	bc80      	pop	{r7}
 800975e:	4770      	bx	lr
 8009760:	20000984 	.word	0x20000984

08009764 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800976a:	2300      	movs	r3, #0
 800976c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800976e:	4b51      	ldr	r3, [pc, #324]	; (80098b4 <xTaskIncrementTick+0x150>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f040 808e 	bne.w	8009894 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009778:	4b4f      	ldr	r3, [pc, #316]	; (80098b8 <xTaskIncrementTick+0x154>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3301      	adds	r3, #1
 800977e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009780:	4a4d      	ldr	r2, [pc, #308]	; (80098b8 <xTaskIncrementTick+0x154>)
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d120      	bne.n	80097ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800978c:	4b4b      	ldr	r3, [pc, #300]	; (80098bc <xTaskIncrementTick+0x158>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00a      	beq.n	80097ac <xTaskIncrementTick+0x48>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	603b      	str	r3, [r7, #0]
}
 80097a8:	bf00      	nop
 80097aa:	e7fe      	b.n	80097aa <xTaskIncrementTick+0x46>
 80097ac:	4b43      	ldr	r3, [pc, #268]	; (80098bc <xTaskIncrementTick+0x158>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	60fb      	str	r3, [r7, #12]
 80097b2:	4b43      	ldr	r3, [pc, #268]	; (80098c0 <xTaskIncrementTick+0x15c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a41      	ldr	r2, [pc, #260]	; (80098bc <xTaskIncrementTick+0x158>)
 80097b8:	6013      	str	r3, [r2, #0]
 80097ba:	4a41      	ldr	r2, [pc, #260]	; (80098c0 <xTaskIncrementTick+0x15c>)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	4b40      	ldr	r3, [pc, #256]	; (80098c4 <xTaskIncrementTick+0x160>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3301      	adds	r3, #1
 80097c6:	4a3f      	ldr	r2, [pc, #252]	; (80098c4 <xTaskIncrementTick+0x160>)
 80097c8:	6013      	str	r3, [r2, #0]
 80097ca:	f000 faef 	bl	8009dac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097ce:	4b3e      	ldr	r3, [pc, #248]	; (80098c8 <xTaskIncrementTick+0x164>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d34e      	bcc.n	8009876 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097d8:	4b38      	ldr	r3, [pc, #224]	; (80098bc <xTaskIncrementTick+0x158>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <xTaskIncrementTick+0x82>
 80097e2:	2301      	movs	r3, #1
 80097e4:	e000      	b.n	80097e8 <xTaskIncrementTick+0x84>
 80097e6:	2300      	movs	r3, #0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d004      	beq.n	80097f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ec:	4b36      	ldr	r3, [pc, #216]	; (80098c8 <xTaskIncrementTick+0x164>)
 80097ee:	f04f 32ff 	mov.w	r2, #4294967295
 80097f2:	601a      	str	r2, [r3, #0]
					break;
 80097f4:	e03f      	b.n	8009876 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80097f6:	4b31      	ldr	r3, [pc, #196]	; (80098bc <xTaskIncrementTick+0x158>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	429a      	cmp	r2, r3
 800980c:	d203      	bcs.n	8009816 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800980e:	4a2e      	ldr	r2, [pc, #184]	; (80098c8 <xTaskIncrementTick+0x164>)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6013      	str	r3, [r2, #0]
						break;
 8009814:	e02f      	b.n	8009876 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	3304      	adds	r3, #4
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe fbd2 	bl	8007fc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	3318      	adds	r3, #24
 800982c:	4618      	mov	r0, r3
 800982e:	f7fe fbc9 	bl	8007fc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009836:	4b25      	ldr	r3, [pc, #148]	; (80098cc <xTaskIncrementTick+0x168>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d903      	bls.n	8009846 <xTaskIncrementTick+0xe2>
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009842:	4a22      	ldr	r2, [pc, #136]	; (80098cc <xTaskIncrementTick+0x168>)
 8009844:	6013      	str	r3, [r2, #0]
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984a:	4613      	mov	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4a1f      	ldr	r2, [pc, #124]	; (80098d0 <xTaskIncrementTick+0x16c>)
 8009854:	441a      	add	r2, r3
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	3304      	adds	r3, #4
 800985a:	4619      	mov	r1, r3
 800985c:	4610      	mov	r0, r2
 800985e:	f7fe fb56 	bl	8007f0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009866:	4b1b      	ldr	r3, [pc, #108]	; (80098d4 <xTaskIncrementTick+0x170>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986c:	429a      	cmp	r2, r3
 800986e:	d3b3      	bcc.n	80097d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009870:	2301      	movs	r3, #1
 8009872:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009874:	e7b0      	b.n	80097d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009876:	4b17      	ldr	r3, [pc, #92]	; (80098d4 <xTaskIncrementTick+0x170>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987c:	4914      	ldr	r1, [pc, #80]	; (80098d0 <xTaskIncrementTick+0x16c>)
 800987e:	4613      	mov	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	440b      	add	r3, r1
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d907      	bls.n	800989e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800988e:	2301      	movs	r3, #1
 8009890:	617b      	str	r3, [r7, #20]
 8009892:	e004      	b.n	800989e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009894:	4b10      	ldr	r3, [pc, #64]	; (80098d8 <xTaskIncrementTick+0x174>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3301      	adds	r3, #1
 800989a:	4a0f      	ldr	r2, [pc, #60]	; (80098d8 <xTaskIncrementTick+0x174>)
 800989c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800989e:	4b0f      	ldr	r3, [pc, #60]	; (80098dc <xTaskIncrementTick+0x178>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80098a6:	2301      	movs	r3, #1
 80098a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80098aa:	697b      	ldr	r3, [r7, #20]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	200009a8 	.word	0x200009a8
 80098b8:	20000984 	.word	0x20000984
 80098bc:	20000938 	.word	0x20000938
 80098c0:	2000093c 	.word	0x2000093c
 80098c4:	20000998 	.word	0x20000998
 80098c8:	200009a0 	.word	0x200009a0
 80098cc:	20000988 	.word	0x20000988
 80098d0:	200004b0 	.word	0x200004b0
 80098d4:	200004ac 	.word	0x200004ac
 80098d8:	20000990 	.word	0x20000990
 80098dc:	20000994 	.word	0x20000994

080098e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098e6:	4b33      	ldr	r3, [pc, #204]	; (80099b4 <vTaskSwitchContext+0xd4>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098ee:	4b32      	ldr	r3, [pc, #200]	; (80099b8 <vTaskSwitchContext+0xd8>)
 80098f0:	2201      	movs	r2, #1
 80098f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098f4:	e05a      	b.n	80099ac <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 80098f6:	4b30      	ldr	r3, [pc, #192]	; (80099b8 <vTaskSwitchContext+0xd8>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80098fc:	f7f6 fff0 	bl	80008e0 <getRunTimeCounterValue>
 8009900:	4603      	mov	r3, r0
 8009902:	4a2e      	ldr	r2, [pc, #184]	; (80099bc <vTaskSwitchContext+0xdc>)
 8009904:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009906:	4b2d      	ldr	r3, [pc, #180]	; (80099bc <vTaskSwitchContext+0xdc>)
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	4b2d      	ldr	r3, [pc, #180]	; (80099c0 <vTaskSwitchContext+0xe0>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	429a      	cmp	r2, r3
 8009910:	d909      	bls.n	8009926 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009912:	4b2c      	ldr	r3, [pc, #176]	; (80099c4 <vTaskSwitchContext+0xe4>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8009918:	4a28      	ldr	r2, [pc, #160]	; (80099bc <vTaskSwitchContext+0xdc>)
 800991a:	6810      	ldr	r0, [r2, #0]
 800991c:	4a28      	ldr	r2, [pc, #160]	; (80099c0 <vTaskSwitchContext+0xe0>)
 800991e:	6812      	ldr	r2, [r2, #0]
 8009920:	1a82      	subs	r2, r0, r2
 8009922:	440a      	add	r2, r1
 8009924:	665a      	str	r2, [r3, #100]	; 0x64
				ulTaskSwitchedInTime = ulTotalRunTime;
 8009926:	4b25      	ldr	r3, [pc, #148]	; (80099bc <vTaskSwitchContext+0xdc>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a25      	ldr	r2, [pc, #148]	; (80099c0 <vTaskSwitchContext+0xe0>)
 800992c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800992e:	4b26      	ldr	r3, [pc, #152]	; (80099c8 <vTaskSwitchContext+0xe8>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	e010      	b.n	8009958 <vTaskSwitchContext+0x78>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10a      	bne.n	8009952 <vTaskSwitchContext+0x72>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	607b      	str	r3, [r7, #4]
}
 800994e:	bf00      	nop
 8009950:	e7fe      	b.n	8009950 <vTaskSwitchContext+0x70>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3b01      	subs	r3, #1
 8009956:	60fb      	str	r3, [r7, #12]
 8009958:	491c      	ldr	r1, [pc, #112]	; (80099cc <vTaskSwitchContext+0xec>)
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	4613      	mov	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	440b      	add	r3, r1
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d0e4      	beq.n	8009936 <vTaskSwitchContext+0x56>
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	4613      	mov	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4a15      	ldr	r2, [pc, #84]	; (80099cc <vTaskSwitchContext+0xec>)
 8009978:	4413      	add	r3, r2
 800997a:	60bb      	str	r3, [r7, #8]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	605a      	str	r2, [r3, #4]
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	685a      	ldr	r2, [r3, #4]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	3308      	adds	r3, #8
 800998e:	429a      	cmp	r2, r3
 8009990:	d104      	bne.n	800999c <vTaskSwitchContext+0xbc>
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	605a      	str	r2, [r3, #4]
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	4a08      	ldr	r2, [pc, #32]	; (80099c4 <vTaskSwitchContext+0xe4>)
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	4a08      	ldr	r2, [pc, #32]	; (80099c8 <vTaskSwitchContext+0xe8>)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6013      	str	r3, [r2, #0]
}
 80099ac:	bf00      	nop
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	200009a8 	.word	0x200009a8
 80099b8:	20000994 	.word	0x20000994
 80099bc:	200009b0 	.word	0x200009b0
 80099c0:	200009ac 	.word	0x200009ac
 80099c4:	200004ac 	.word	0x200004ac
 80099c8:	20000988 	.word	0x20000988
 80099cc:	200004b0 	.word	0x200004b0

080099d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099f6:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <vTaskPlaceOnEventList+0x44>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3318      	adds	r3, #24
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7fe faa8 	bl	8007f54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a04:	2101      	movs	r1, #1
 8009a06:	6838      	ldr	r0, [r7, #0]
 8009a08:	f000 fb88 	bl	800a11c <prvAddCurrentTaskToDelayedList>
}
 8009a0c:	bf00      	nop
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	200004ac 	.word	0x200004ac

08009a18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10a      	bne.n	8009a40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	617b      	str	r3, [r7, #20]
}
 8009a3c:	bf00      	nop
 8009a3e:	e7fe      	b.n	8009a3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a40:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <vTaskPlaceOnEventListRestricted+0x54>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	3318      	adds	r3, #24
 8009a46:	4619      	mov	r1, r3
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f7fe fa60 	bl	8007f0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009a54:	f04f 33ff 	mov.w	r3, #4294967295
 8009a58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	68b8      	ldr	r0, [r7, #8]
 8009a5e:	f000 fb5d 	bl	800a11c <prvAddCurrentTaskToDelayedList>
	}
 8009a62:	bf00      	nop
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	200004ac 	.word	0x200004ac

08009a70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10a      	bne.n	8009a9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60fb      	str	r3, [r7, #12]
}
 8009a98:	bf00      	nop
 8009a9a:	e7fe      	b.n	8009a9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	3318      	adds	r3, #24
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fa8f 	bl	8007fc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aa6:	4b1e      	ldr	r3, [pc, #120]	; (8009b20 <xTaskRemoveFromEventList+0xb0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d11d      	bne.n	8009aea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe fa86 	bl	8007fc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009abc:	4b19      	ldr	r3, [pc, #100]	; (8009b24 <xTaskRemoveFromEventList+0xb4>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d903      	bls.n	8009acc <xTaskRemoveFromEventList+0x5c>
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	4a16      	ldr	r2, [pc, #88]	; (8009b24 <xTaskRemoveFromEventList+0xb4>)
 8009aca:	6013      	str	r3, [r2, #0]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4a13      	ldr	r2, [pc, #76]	; (8009b28 <xTaskRemoveFromEventList+0xb8>)
 8009ada:	441a      	add	r2, r3
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	f7fe fa13 	bl	8007f0e <vListInsertEnd>
 8009ae8:	e005      	b.n	8009af6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	3318      	adds	r3, #24
 8009aee:	4619      	mov	r1, r3
 8009af0:	480e      	ldr	r0, [pc, #56]	; (8009b2c <xTaskRemoveFromEventList+0xbc>)
 8009af2:	f7fe fa0c 	bl	8007f0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009afa:	4b0d      	ldr	r3, [pc, #52]	; (8009b30 <xTaskRemoveFromEventList+0xc0>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d905      	bls.n	8009b10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b04:	2301      	movs	r3, #1
 8009b06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b08:	4b0a      	ldr	r3, [pc, #40]	; (8009b34 <xTaskRemoveFromEventList+0xc4>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	e001      	b.n	8009b14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b10:	2300      	movs	r3, #0
 8009b12:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009b14:	697b      	ldr	r3, [r7, #20]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	200009a8 	.word	0x200009a8
 8009b24:	20000988 	.word	0x20000988
 8009b28:	200004b0 	.word	0x200004b0
 8009b2c:	20000940 	.word	0x20000940
 8009b30:	200004ac 	.word	0x200004ac
 8009b34:	20000994 	.word	0x20000994

08009b38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b40:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <vTaskInternalSetTimeOutState+0x24>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b48:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <vTaskInternalSetTimeOutState+0x28>)
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	605a      	str	r2, [r3, #4]
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bc80      	pop	{r7}
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	20000998 	.word	0x20000998
 8009b60:	20000984 	.word	0x20000984

08009b64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b088      	sub	sp, #32
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	613b      	str	r3, [r7, #16]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10a      	bne.n	8009ba6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	60fb      	str	r3, [r7, #12]
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009ba6:	f000 ff11 	bl	800a9cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009baa:	4b1d      	ldr	r3, [pc, #116]	; (8009c20 <xTaskCheckForTimeOut+0xbc>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc2:	d102      	bne.n	8009bca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	61fb      	str	r3, [r7, #28]
 8009bc8:	e023      	b.n	8009c12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	4b15      	ldr	r3, [pc, #84]	; (8009c24 <xTaskCheckForTimeOut+0xc0>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d007      	beq.n	8009be6 <xTaskCheckForTimeOut+0x82>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d302      	bcc.n	8009be6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	61fb      	str	r3, [r7, #28]
 8009be4:	e015      	b.n	8009c12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d20b      	bcs.n	8009c08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	1ad2      	subs	r2, r2, r3
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff ff9b 	bl	8009b38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c02:	2300      	movs	r3, #0
 8009c04:	61fb      	str	r3, [r7, #28]
 8009c06:	e004      	b.n	8009c12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c12:	f000 ff0b 	bl	800aa2c <vPortExitCritical>

	return xReturn;
 8009c16:	69fb      	ldr	r3, [r7, #28]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	20000984 	.word	0x20000984
 8009c24:	20000998 	.word	0x20000998

08009c28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c2c:	4b03      	ldr	r3, [pc, #12]	; (8009c3c <vTaskMissedYield+0x14>)
 8009c2e:	2201      	movs	r2, #1
 8009c30:	601a      	str	r2, [r3, #0]
}
 8009c32:	bf00      	nop
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	20000994 	.word	0x20000994

08009c40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c48:	f000 f852 	bl	8009cf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <prvIdleTask+0x28>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d9f9      	bls.n	8009c48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <prvIdleTask+0x2c>)
 8009c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c64:	e7f0      	b.n	8009c48 <prvIdleTask+0x8>
 8009c66:	bf00      	nop
 8009c68:	200004b0 	.word	0x200004b0
 8009c6c:	e000ed04 	.word	0xe000ed04

08009c70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c76:	2300      	movs	r3, #0
 8009c78:	607b      	str	r3, [r7, #4]
 8009c7a:	e00c      	b.n	8009c96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4a12      	ldr	r2, [pc, #72]	; (8009cd0 <prvInitialiseTaskLists+0x60>)
 8009c88:	4413      	add	r3, r2
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe f914 	bl	8007eb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3301      	adds	r3, #1
 8009c94:	607b      	str	r3, [r7, #4]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b37      	cmp	r3, #55	; 0x37
 8009c9a:	d9ef      	bls.n	8009c7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c9c:	480d      	ldr	r0, [pc, #52]	; (8009cd4 <prvInitialiseTaskLists+0x64>)
 8009c9e:	f7fe f90b 	bl	8007eb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ca2:	480d      	ldr	r0, [pc, #52]	; (8009cd8 <prvInitialiseTaskLists+0x68>)
 8009ca4:	f7fe f908 	bl	8007eb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ca8:	480c      	ldr	r0, [pc, #48]	; (8009cdc <prvInitialiseTaskLists+0x6c>)
 8009caa:	f7fe f905 	bl	8007eb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cae:	480c      	ldr	r0, [pc, #48]	; (8009ce0 <prvInitialiseTaskLists+0x70>)
 8009cb0:	f7fe f902 	bl	8007eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cb4:	480b      	ldr	r0, [pc, #44]	; (8009ce4 <prvInitialiseTaskLists+0x74>)
 8009cb6:	f7fe f8ff 	bl	8007eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cba:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <prvInitialiseTaskLists+0x78>)
 8009cbc:	4a05      	ldr	r2, [pc, #20]	; (8009cd4 <prvInitialiseTaskLists+0x64>)
 8009cbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <prvInitialiseTaskLists+0x7c>)
 8009cc2:	4a05      	ldr	r2, [pc, #20]	; (8009cd8 <prvInitialiseTaskLists+0x68>)
 8009cc4:	601a      	str	r2, [r3, #0]
}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	200004b0 	.word	0x200004b0
 8009cd4:	20000910 	.word	0x20000910
 8009cd8:	20000924 	.word	0x20000924
 8009cdc:	20000940 	.word	0x20000940
 8009ce0:	20000954 	.word	0x20000954
 8009ce4:	2000096c 	.word	0x2000096c
 8009ce8:	20000938 	.word	0x20000938
 8009cec:	2000093c 	.word	0x2000093c

08009cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cf6:	e019      	b.n	8009d2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cf8:	f000 fe68 	bl	800a9cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009cfc:	4b10      	ldr	r3, [pc, #64]	; (8009d40 <prvCheckTasksWaitingTermination+0x50>)
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe f95b 	bl	8007fc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d0e:	4b0d      	ldr	r3, [pc, #52]	; (8009d44 <prvCheckTasksWaitingTermination+0x54>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3b01      	subs	r3, #1
 8009d14:	4a0b      	ldr	r2, [pc, #44]	; (8009d44 <prvCheckTasksWaitingTermination+0x54>)
 8009d16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d18:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <prvCheckTasksWaitingTermination+0x58>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	4a0a      	ldr	r2, [pc, #40]	; (8009d48 <prvCheckTasksWaitingTermination+0x58>)
 8009d20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d22:	f000 fe83 	bl	800aa2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f810 	bl	8009d4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d2c:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <prvCheckTasksWaitingTermination+0x58>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e1      	bne.n	8009cf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d34:	bf00      	nop
 8009d36:	bf00      	nop
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20000954 	.word	0x20000954
 8009d44:	20000980 	.word	0x20000980
 8009d48:	20000968 	.word	0x20000968

08009d4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d108      	bne.n	8009d70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 fff6 	bl	800ad54 <vPortFree>
				vPortFree( pxTCB );
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fff3 	bl	800ad54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d6e:	e018      	b.n	8009da2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d103      	bne.n	8009d82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 ffea 	bl	800ad54 <vPortFree>
	}
 8009d80:	e00f      	b.n	8009da2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d00a      	beq.n	8009da2 <prvDeleteTCB+0x56>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	60fb      	str	r3, [r7, #12]
}
 8009d9e:	bf00      	nop
 8009da0:	e7fe      	b.n	8009da0 <prvDeleteTCB+0x54>
	}
 8009da2:	bf00      	nop
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009db2:	4b0e      	ldr	r3, [pc, #56]	; (8009dec <prvResetNextTaskUnblockTime+0x40>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <prvResetNextTaskUnblockTime+0x14>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e000      	b.n	8009dc2 <prvResetNextTaskUnblockTime+0x16>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d004      	beq.n	8009dd0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dc6:	4b0a      	ldr	r3, [pc, #40]	; (8009df0 <prvResetNextTaskUnblockTime+0x44>)
 8009dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dcc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009dce:	e008      	b.n	8009de2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009dd0:	4b06      	ldr	r3, [pc, #24]	; (8009dec <prvResetNextTaskUnblockTime+0x40>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	4a04      	ldr	r2, [pc, #16]	; (8009df0 <prvResetNextTaskUnblockTime+0x44>)
 8009de0:	6013      	str	r3, [r2, #0]
}
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bc80      	pop	{r7}
 8009dea:	4770      	bx	lr
 8009dec:	20000938 	.word	0x20000938
 8009df0:	200009a0 	.word	0x200009a0

08009df4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009dfa:	4b0b      	ldr	r3, [pc, #44]	; (8009e28 <xTaskGetSchedulerState+0x34>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d102      	bne.n	8009e08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e02:	2301      	movs	r3, #1
 8009e04:	607b      	str	r3, [r7, #4]
 8009e06:	e008      	b.n	8009e1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e08:	4b08      	ldr	r3, [pc, #32]	; (8009e2c <xTaskGetSchedulerState+0x38>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d102      	bne.n	8009e16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e10:	2302      	movs	r3, #2
 8009e12:	607b      	str	r3, [r7, #4]
 8009e14:	e001      	b.n	8009e1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e16:	2300      	movs	r3, #0
 8009e18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e1a:	687b      	ldr	r3, [r7, #4]
	}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	2000098c 	.word	0x2000098c
 8009e2c:	200009a8 	.word	0x200009a8

08009e30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d056      	beq.n	8009ef4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4a:	4b2d      	ldr	r3, [pc, #180]	; (8009f00 <xTaskPriorityInherit+0xd0>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d246      	bcs.n	8009ee2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	db06      	blt.n	8009e6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e5c:	4b28      	ldr	r3, [pc, #160]	; (8009f00 <xTaskPriorityInherit+0xd0>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6959      	ldr	r1, [r3, #20]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e72:	4613      	mov	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4413      	add	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4a22      	ldr	r2, [pc, #136]	; (8009f04 <xTaskPriorityInherit+0xd4>)
 8009e7c:	4413      	add	r3, r2
 8009e7e:	4299      	cmp	r1, r3
 8009e80:	d101      	bne.n	8009e86 <xTaskPriorityInherit+0x56>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e000      	b.n	8009e88 <xTaskPriorityInherit+0x58>
 8009e86:	2300      	movs	r3, #0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d022      	beq.n	8009ed2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	3304      	adds	r3, #4
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fe f897 	bl	8007fc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e96:	4b1a      	ldr	r3, [pc, #104]	; (8009f00 <xTaskPriorityInherit+0xd0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea4:	4b18      	ldr	r3, [pc, #96]	; (8009f08 <xTaskPriorityInherit+0xd8>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d903      	bls.n	8009eb4 <xTaskPriorityInherit+0x84>
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	4a15      	ldr	r2, [pc, #84]	; (8009f08 <xTaskPriorityInherit+0xd8>)
 8009eb2:	6013      	str	r3, [r2, #0]
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb8:	4613      	mov	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4a10      	ldr	r2, [pc, #64]	; (8009f04 <xTaskPriorityInherit+0xd4>)
 8009ec2:	441a      	add	r2, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4610      	mov	r0, r2
 8009ecc:	f7fe f81f 	bl	8007f0e <vListInsertEnd>
 8009ed0:	e004      	b.n	8009edc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ed2:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <xTaskPriorityInherit+0xd0>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009edc:	2301      	movs	r3, #1
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	e008      	b.n	8009ef4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ee6:	4b06      	ldr	r3, [pc, #24]	; (8009f00 <xTaskPriorityInherit+0xd0>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d201      	bcs.n	8009ef4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
	}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	200004ac 	.word	0x200004ac
 8009f04:	200004b0 	.word	0x200004b0
 8009f08:	20000988 	.word	0x20000988

08009f0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d056      	beq.n	8009fd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f22:	4b2e      	ldr	r3, [pc, #184]	; (8009fdc <xTaskPriorityDisinherit+0xd0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d00a      	beq.n	8009f42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	60fb      	str	r3, [r7, #12]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d10a      	bne.n	8009f60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	60bb      	str	r3, [r7, #8]
}
 8009f5c:	bf00      	nop
 8009f5e:	e7fe      	b.n	8009f5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f64:	1e5a      	subs	r2, r3, #1
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d02c      	beq.n	8009fd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d128      	bne.n	8009fd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	3304      	adds	r3, #4
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe f81e 	bl	8007fc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa0:	4b0f      	ldr	r3, [pc, #60]	; (8009fe0 <xTaskPriorityDisinherit+0xd4>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d903      	bls.n	8009fb0 <xTaskPriorityDisinherit+0xa4>
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fac:	4a0c      	ldr	r2, [pc, #48]	; (8009fe0 <xTaskPriorityDisinherit+0xd4>)
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4a09      	ldr	r2, [pc, #36]	; (8009fe4 <xTaskPriorityDisinherit+0xd8>)
 8009fbe:	441a      	add	r2, r3
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	f7fd ffa1 	bl	8007f0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fd0:	697b      	ldr	r3, [r7, #20]
	}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	200004ac 	.word	0x200004ac
 8009fe0:	20000988 	.word	0x20000988
 8009fe4:	200004b0 	.word	0x200004b0

08009fe8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d06f      	beq.n	800a0e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10a      	bne.n	800a01e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	60fb      	str	r3, [r7, #12]
}
 800a01a:	bf00      	nop
 800a01c:	e7fe      	b.n	800a01c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	429a      	cmp	r2, r3
 800a026:	d902      	bls.n	800a02e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	61fb      	str	r3, [r7, #28]
 800a02c:	e002      	b.n	800a034 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a032:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	69fa      	ldr	r2, [r7, #28]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d050      	beq.n	800a0e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	429a      	cmp	r2, r3
 800a046:	d14b      	bne.n	800a0e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a048:	4b27      	ldr	r3, [pc, #156]	; (800a0e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	69ba      	ldr	r2, [r7, #24]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d10a      	bne.n	800a068 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	60bb      	str	r3, [r7, #8]
}
 800a064:	bf00      	nop
 800a066:	e7fe      	b.n	800a066 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	69fa      	ldr	r2, [r7, #28]
 800a072:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	db04      	blt.n	800a086 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	6959      	ldr	r1, [r3, #20]
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	4613      	mov	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4a15      	ldr	r2, [pc, #84]	; (800a0ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a096:	4413      	add	r3, r2
 800a098:	4299      	cmp	r1, r3
 800a09a:	d101      	bne.n	800a0a0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800a09c:	2301      	movs	r3, #1
 800a09e:	e000      	b.n	800a0a2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d01c      	beq.n	800a0e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fd ff8a 	bl	8007fc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b4:	4b0e      	ldr	r3, [pc, #56]	; (800a0f0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d903      	bls.n	800a0c4 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c0:	4a0b      	ldr	r2, [pc, #44]	; (800a0f0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a0c2:	6013      	str	r3, [r2, #0]
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4a06      	ldr	r2, [pc, #24]	; (800a0ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a0d2:	441a      	add	r2, r3
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4610      	mov	r0, r2
 800a0dc:	f7fd ff17 	bl	8007f0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0e0:	bf00      	nop
 800a0e2:	3720      	adds	r7, #32
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	200004ac 	.word	0x200004ac
 800a0ec:	200004b0 	.word	0x200004b0
 800a0f0:	20000988 	.word	0x20000988

0800a0f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a0f4:	b480      	push	{r7}
 800a0f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a0f8:	4b07      	ldr	r3, [pc, #28]	; (800a118 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d004      	beq.n	800a10a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a100:	4b05      	ldr	r3, [pc, #20]	; (800a118 <pvTaskIncrementMutexHeldCount+0x24>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a106:	3201      	adds	r2, #1
 800a108:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800a10a:	4b03      	ldr	r3, [pc, #12]	; (800a118 <pvTaskIncrementMutexHeldCount+0x24>)
 800a10c:	681b      	ldr	r3, [r3, #0]
	}
 800a10e:	4618      	mov	r0, r3
 800a110:	46bd      	mov	sp, r7
 800a112:	bc80      	pop	{r7}
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	200004ac 	.word	0x200004ac

0800a11c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a126:	4b21      	ldr	r3, [pc, #132]	; (800a1ac <prvAddCurrentTaskToDelayedList+0x90>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a12c:	4b20      	ldr	r3, [pc, #128]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3304      	adds	r3, #4
 800a132:	4618      	mov	r0, r3
 800a134:	f7fd ff46 	bl	8007fc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13e:	d10a      	bne.n	800a156 <prvAddCurrentTaskToDelayedList+0x3a>
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d007      	beq.n	800a156 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a146:	4b1a      	ldr	r3, [pc, #104]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3304      	adds	r3, #4
 800a14c:	4619      	mov	r1, r3
 800a14e:	4819      	ldr	r0, [pc, #100]	; (800a1b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a150:	f7fd fedd 	bl	8007f0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a154:	e026      	b.n	800a1a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4413      	add	r3, r2
 800a15c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a15e:	4b14      	ldr	r3, [pc, #80]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d209      	bcs.n	800a182 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a16e:	4b12      	ldr	r3, [pc, #72]	; (800a1b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	4b0f      	ldr	r3, [pc, #60]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3304      	adds	r3, #4
 800a178:	4619      	mov	r1, r3
 800a17a:	4610      	mov	r0, r2
 800a17c:	f7fd feea 	bl	8007f54 <vListInsert>
}
 800a180:	e010      	b.n	800a1a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a182:	4b0e      	ldr	r3, [pc, #56]	; (800a1bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3304      	adds	r3, #4
 800a18c:	4619      	mov	r1, r3
 800a18e:	4610      	mov	r0, r2
 800a190:	f7fd fee0 	bl	8007f54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a194:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d202      	bcs.n	800a1a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a19e:	4a08      	ldr	r2, [pc, #32]	; (800a1c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	6013      	str	r3, [r2, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	20000984 	.word	0x20000984
 800a1b0:	200004ac 	.word	0x200004ac
 800a1b4:	2000096c 	.word	0x2000096c
 800a1b8:	2000093c 	.word	0x2000093c
 800a1bc:	20000938 	.word	0x20000938
 800a1c0:	200009a0 	.word	0x200009a0

0800a1c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08a      	sub	sp, #40	; 0x28
 800a1c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1ce:	f000 facb 	bl	800a768 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1d2:	4b1c      	ldr	r3, [pc, #112]	; (800a244 <xTimerCreateTimerTask+0x80>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d021      	beq.n	800a21e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1e2:	1d3a      	adds	r2, r7, #4
 800a1e4:	f107 0108 	add.w	r1, r7, #8
 800a1e8:	f107 030c 	add.w	r3, r7, #12
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7fd fe4b 	bl	8007e88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1f2:	6879      	ldr	r1, [r7, #4]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	9202      	str	r2, [sp, #8]
 800a1fa:	9301      	str	r3, [sp, #4]
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	2300      	movs	r3, #0
 800a202:	460a      	mov	r2, r1
 800a204:	4910      	ldr	r1, [pc, #64]	; (800a248 <xTimerCreateTimerTask+0x84>)
 800a206:	4811      	ldr	r0, [pc, #68]	; (800a24c <xTimerCreateTimerTask+0x88>)
 800a208:	f7fe ffba 	bl	8009180 <xTaskCreateStatic>
 800a20c:	4603      	mov	r3, r0
 800a20e:	4a10      	ldr	r2, [pc, #64]	; (800a250 <xTimerCreateTimerTask+0x8c>)
 800a210:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a212:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <xTimerCreateTimerTask+0x8c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a21a:	2301      	movs	r3, #1
 800a21c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	613b      	str	r3, [r7, #16]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a23a:	697b      	ldr	r3, [r7, #20]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	200009e4 	.word	0x200009e4
 800a248:	0800d51c 	.word	0x0800d51c
 800a24c:	0800a371 	.word	0x0800a371
 800a250:	200009e8 	.word	0x200009e8

0800a254 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08a      	sub	sp, #40	; 0x28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a262:	2300      	movs	r3, #0
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	623b      	str	r3, [r7, #32]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a282:	4b1a      	ldr	r3, [pc, #104]	; (800a2ec <xTimerGenericCommand+0x98>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d02a      	beq.n	800a2e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2b05      	cmp	r3, #5
 800a29a:	dc18      	bgt.n	800a2ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a29c:	f7ff fdaa 	bl	8009df4 <xTaskGetSchedulerState>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d109      	bne.n	800a2ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a2a6:	4b11      	ldr	r3, [pc, #68]	; (800a2ec <xTimerGenericCommand+0x98>)
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	f107 0110 	add.w	r1, r7, #16
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2b2:	f7fe f8a9 	bl	8008408 <xQueueGenericSend>
 800a2b6:	6278      	str	r0, [r7, #36]	; 0x24
 800a2b8:	e012      	b.n	800a2e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a2ba:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <xTimerGenericCommand+0x98>)
 800a2bc:	6818      	ldr	r0, [r3, #0]
 800a2be:	f107 0110 	add.w	r1, r7, #16
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f7fe f89f 	bl	8008408 <xQueueGenericSend>
 800a2ca:	6278      	str	r0, [r7, #36]	; 0x24
 800a2cc:	e008      	b.n	800a2e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2ce:	4b07      	ldr	r3, [pc, #28]	; (800a2ec <xTimerGenericCommand+0x98>)
 800a2d0:	6818      	ldr	r0, [r3, #0]
 800a2d2:	f107 0110 	add.w	r1, r7, #16
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	f7fe f993 	bl	8008604 <xQueueGenericSendFromISR>
 800a2de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3728      	adds	r7, #40	; 0x28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	200009e4 	.word	0x200009e4

0800a2f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2fa:	4b1c      	ldr	r3, [pc, #112]	; (800a36c <prvProcessExpiredTimer+0x7c>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	3304      	adds	r3, #4
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fd fe5b 	bl	8007fc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d122      	bne.n	800a35c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	699a      	ldr	r2, [r3, #24]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	18d1      	adds	r1, r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	6978      	ldr	r0, [r7, #20]
 800a324:	f000 f8c8 	bl	800a4b8 <prvInsertTimerInActiveList>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d016      	beq.n	800a35c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a32e:	2300      	movs	r3, #0
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	2300      	movs	r3, #0
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	2100      	movs	r1, #0
 800a338:	6978      	ldr	r0, [r7, #20]
 800a33a:	f7ff ff8b 	bl	800a254 <xTimerGenericCommand>
 800a33e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10a      	bne.n	800a35c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	60fb      	str	r3, [r7, #12]
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a360:	6978      	ldr	r0, [r7, #20]
 800a362:	4798      	blx	r3
}
 800a364:	bf00      	nop
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	200009dc 	.word	0x200009dc

0800a370 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a378:	f107 0308 	add.w	r3, r7, #8
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 f857 	bl	800a430 <prvGetNextExpireTime>
 800a382:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	4619      	mov	r1, r3
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 f803 	bl	800a394 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a38e:	f000 f8d5 	bl	800a53c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a392:	e7f1      	b.n	800a378 <prvTimerTask+0x8>

0800a394 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a39e:	f7ff f927 	bl	80095f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3a2:	f107 0308 	add.w	r3, r7, #8
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 f866 	bl	800a478 <prvSampleTimeNow>
 800a3ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d130      	bne.n	800a416 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10a      	bne.n	800a3d0 <prvProcessTimerOrBlockTask+0x3c>
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d806      	bhi.n	800a3d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3c2:	f7ff f923 	bl	800960c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3c6:	68f9      	ldr	r1, [r7, #12]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f7ff ff91 	bl	800a2f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3ce:	e024      	b.n	800a41a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d008      	beq.n	800a3e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3d6:	4b13      	ldr	r3, [pc, #76]	; (800a424 <prvProcessTimerOrBlockTask+0x90>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	bf0c      	ite	eq
 800a3e0:	2301      	moveq	r3, #1
 800a3e2:	2300      	movne	r3, #0
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3e8:	4b0f      	ldr	r3, [pc, #60]	; (800a428 <prvProcessTimerOrBlockTask+0x94>)
 800a3ea:	6818      	ldr	r0, [r3, #0]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f7fe fe8f 	bl	8009118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3fa:	f7ff f907 	bl	800960c <xTaskResumeAll>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10a      	bne.n	800a41a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a404:	4b09      	ldr	r3, [pc, #36]	; (800a42c <prvProcessTimerOrBlockTask+0x98>)
 800a406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	f3bf 8f6f 	isb	sy
}
 800a414:	e001      	b.n	800a41a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a416:	f7ff f8f9 	bl	800960c <xTaskResumeAll>
}
 800a41a:	bf00      	nop
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	200009e0 	.word	0x200009e0
 800a428:	200009e4 	.word	0x200009e4
 800a42c:	e000ed04 	.word	0xe000ed04

0800a430 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a438:	4b0e      	ldr	r3, [pc, #56]	; (800a474 <prvGetNextExpireTime+0x44>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	bf0c      	ite	eq
 800a442:	2301      	moveq	r3, #1
 800a444:	2300      	movne	r3, #0
 800a446:	b2db      	uxtb	r3, r3
 800a448:	461a      	mov	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d105      	bne.n	800a462 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a456:	4b07      	ldr	r3, [pc, #28]	; (800a474 <prvGetNextExpireTime+0x44>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	e001      	b.n	800a466 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a462:	2300      	movs	r3, #0
 800a464:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a466:	68fb      	ldr	r3, [r7, #12]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bc80      	pop	{r7}
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	200009dc 	.word	0x200009dc

0800a478 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a480:	f7ff f962 	bl	8009748 <xTaskGetTickCount>
 800a484:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a486:	4b0b      	ldr	r3, [pc, #44]	; (800a4b4 <prvSampleTimeNow+0x3c>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d205      	bcs.n	800a49c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a490:	f000 f908 	bl	800a6a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	601a      	str	r2, [r3, #0]
 800a49a:	e002      	b.n	800a4a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a4a2:	4a04      	ldr	r2, [pc, #16]	; (800a4b4 <prvSampleTimeNow+0x3c>)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	200009ec 	.word	0x200009ec

0800a4b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
 800a4c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d812      	bhi.n	800a504 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	1ad2      	subs	r2, r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d302      	bcc.n	800a4f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	617b      	str	r3, [r7, #20]
 800a4f0:	e01b      	b.n	800a52a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4f2:	4b10      	ldr	r3, [pc, #64]	; (800a534 <prvInsertTimerInActiveList+0x7c>)
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	f7fd fd29 	bl	8007f54 <vListInsert>
 800a502:	e012      	b.n	800a52a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d206      	bcs.n	800a51a <prvInsertTimerInActiveList+0x62>
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	429a      	cmp	r2, r3
 800a512:	d302      	bcc.n	800a51a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a514:	2301      	movs	r3, #1
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	e007      	b.n	800a52a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a51a:	4b07      	ldr	r3, [pc, #28]	; (800a538 <prvInsertTimerInActiveList+0x80>)
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3304      	adds	r3, #4
 800a522:	4619      	mov	r1, r3
 800a524:	4610      	mov	r0, r2
 800a526:	f7fd fd15 	bl	8007f54 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a52a:	697b      	ldr	r3, [r7, #20]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	200009e0 	.word	0x200009e0
 800a538:	200009dc 	.word	0x200009dc

0800a53c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b08e      	sub	sp, #56	; 0x38
 800a540:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a542:	e09d      	b.n	800a680 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	da18      	bge.n	800a57c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a54a:	1d3b      	adds	r3, r7, #4
 800a54c:	3304      	adds	r3, #4
 800a54e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10a      	bne.n	800a56c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	61fb      	str	r3, [r7, #28]
}
 800a568:	bf00      	nop
 800a56a:	e7fe      	b.n	800a56a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a572:	6850      	ldr	r0, [r2, #4]
 800a574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a576:	6892      	ldr	r2, [r2, #8]
 800a578:	4611      	mov	r1, r2
 800a57a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	db7d      	blt.n	800a67e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d004      	beq.n	800a598 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a590:	3304      	adds	r3, #4
 800a592:	4618      	mov	r0, r3
 800a594:	f7fd fd16 	bl	8007fc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a598:	463b      	mov	r3, r7
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff ff6c 	bl	800a478 <prvSampleTimeNow>
 800a5a0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b09      	cmp	r3, #9
 800a5a6:	d86b      	bhi.n	800a680 <prvProcessReceivedCommands+0x144>
 800a5a8:	a201      	add	r2, pc, #4	; (adr r2, 800a5b0 <prvProcessReceivedCommands+0x74>)
 800a5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ae:	bf00      	nop
 800a5b0:	0800a5d9 	.word	0x0800a5d9
 800a5b4:	0800a5d9 	.word	0x0800a5d9
 800a5b8:	0800a5d9 	.word	0x0800a5d9
 800a5bc:	0800a681 	.word	0x0800a681
 800a5c0:	0800a635 	.word	0x0800a635
 800a5c4:	0800a66d 	.word	0x0800a66d
 800a5c8:	0800a5d9 	.word	0x0800a5d9
 800a5cc:	0800a5d9 	.word	0x0800a5d9
 800a5d0:	0800a681 	.word	0x0800a681
 800a5d4:	0800a635 	.word	0x0800a635
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	18d1      	adds	r1, r2, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e6:	f7ff ff67 	bl	800a4b8 <prvInsertTimerInActiveList>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d047      	beq.n	800a680 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d13f      	bne.n	800a680 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	441a      	add	r2, r3
 800a608:	2300      	movs	r3, #0
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	2300      	movs	r3, #0
 800a60e:	2100      	movs	r1, #0
 800a610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a612:	f7ff fe1f 	bl	800a254 <xTimerGenericCommand>
 800a616:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d130      	bne.n	800a680 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	61bb      	str	r3, [r7, #24]
}
 800a630:	bf00      	nop
 800a632:	e7fe      	b.n	800a632 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a638:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10a      	bne.n	800a658 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	617b      	str	r3, [r7, #20]
}
 800a654:	bf00      	nop
 800a656:	e7fe      	b.n	800a656 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65a:	699a      	ldr	r2, [r3, #24]
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	18d1      	adds	r1, r2, r3
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a666:	f7ff ff27 	bl	800a4b8 <prvInsertTimerInActiveList>
					break;
 800a66a:	e009      	b.n	800a680 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a672:	2b00      	cmp	r3, #0
 800a674:	d104      	bne.n	800a680 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a678:	f000 fb6c 	bl	800ad54 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a67c:	e000      	b.n	800a680 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a67e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a680:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <prvProcessReceivedCommands+0x164>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	1d39      	adds	r1, r7, #4
 800a686:	2200      	movs	r2, #0
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fe f8e1 	bl	8008850 <xQueueReceive>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	f47f af57 	bne.w	800a544 <prvProcessReceivedCommands+0x8>
	}
}
 800a696:	bf00      	nop
 800a698:	bf00      	nop
 800a69a:	3730      	adds	r7, #48	; 0x30
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	200009e4 	.word	0x200009e4

0800a6a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6aa:	e045      	b.n	800a738 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6ac:	4b2c      	ldr	r3, [pc, #176]	; (800a760 <prvSwitchTimerLists+0xbc>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6b6:	4b2a      	ldr	r3, [pc, #168]	; (800a760 <prvSwitchTimerLists+0xbc>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fd fc7d 	bl	8007fc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	69db      	ldr	r3, [r3, #28]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d12e      	bne.n	800a738 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d90e      	bls.n	800a70a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6f8:	4b19      	ldr	r3, [pc, #100]	; (800a760 <prvSwitchTimerLists+0xbc>)
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	3304      	adds	r3, #4
 800a700:	4619      	mov	r1, r3
 800a702:	4610      	mov	r0, r2
 800a704:	f7fd fc26 	bl	8007f54 <vListInsert>
 800a708:	e016      	b.n	800a738 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a70a:	2300      	movs	r3, #0
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	2300      	movs	r3, #0
 800a710:	693a      	ldr	r2, [r7, #16]
 800a712:	2100      	movs	r1, #0
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f7ff fd9d 	bl	800a254 <xTimerGenericCommand>
 800a71a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10a      	bne.n	800a738 <prvSwitchTimerLists+0x94>
	__asm volatile
 800a722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a726:	f383 8811 	msr	BASEPRI, r3
 800a72a:	f3bf 8f6f 	isb	sy
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	603b      	str	r3, [r7, #0]
}
 800a734:	bf00      	nop
 800a736:	e7fe      	b.n	800a736 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a738:	4b09      	ldr	r3, [pc, #36]	; (800a760 <prvSwitchTimerLists+0xbc>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1b4      	bne.n	800a6ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a742:	4b07      	ldr	r3, [pc, #28]	; (800a760 <prvSwitchTimerLists+0xbc>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a748:	4b06      	ldr	r3, [pc, #24]	; (800a764 <prvSwitchTimerLists+0xc0>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a04      	ldr	r2, [pc, #16]	; (800a760 <prvSwitchTimerLists+0xbc>)
 800a74e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a750:	4a04      	ldr	r2, [pc, #16]	; (800a764 <prvSwitchTimerLists+0xc0>)
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	6013      	str	r3, [r2, #0]
}
 800a756:	bf00      	nop
 800a758:	3718      	adds	r7, #24
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	200009dc 	.word	0x200009dc
 800a764:	200009e0 	.word	0x200009e0

0800a768 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a76e:	f000 f92d 	bl	800a9cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a772:	4b15      	ldr	r3, [pc, #84]	; (800a7c8 <prvCheckForValidListAndQueue+0x60>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d120      	bne.n	800a7bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a77a:	4814      	ldr	r0, [pc, #80]	; (800a7cc <prvCheckForValidListAndQueue+0x64>)
 800a77c:	f7fd fb9c 	bl	8007eb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a780:	4813      	ldr	r0, [pc, #76]	; (800a7d0 <prvCheckForValidListAndQueue+0x68>)
 800a782:	f7fd fb99 	bl	8007eb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a786:	4b13      	ldr	r3, [pc, #76]	; (800a7d4 <prvCheckForValidListAndQueue+0x6c>)
 800a788:	4a10      	ldr	r2, [pc, #64]	; (800a7cc <prvCheckForValidListAndQueue+0x64>)
 800a78a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a78c:	4b12      	ldr	r3, [pc, #72]	; (800a7d8 <prvCheckForValidListAndQueue+0x70>)
 800a78e:	4a10      	ldr	r2, [pc, #64]	; (800a7d0 <prvCheckForValidListAndQueue+0x68>)
 800a790:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a792:	2300      	movs	r3, #0
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	4b11      	ldr	r3, [pc, #68]	; (800a7dc <prvCheckForValidListAndQueue+0x74>)
 800a798:	4a11      	ldr	r2, [pc, #68]	; (800a7e0 <prvCheckForValidListAndQueue+0x78>)
 800a79a:	2110      	movs	r1, #16
 800a79c:	200a      	movs	r0, #10
 800a79e:	f7fd fca3 	bl	80080e8 <xQueueGenericCreateStatic>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	4a08      	ldr	r2, [pc, #32]	; (800a7c8 <prvCheckForValidListAndQueue+0x60>)
 800a7a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a7a8:	4b07      	ldr	r3, [pc, #28]	; (800a7c8 <prvCheckForValidListAndQueue+0x60>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d005      	beq.n	800a7bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a7b0:	4b05      	ldr	r3, [pc, #20]	; (800a7c8 <prvCheckForValidListAndQueue+0x60>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	490b      	ldr	r1, [pc, #44]	; (800a7e4 <prvCheckForValidListAndQueue+0x7c>)
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fe fc5c 	bl	8009074 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7bc:	f000 f936 	bl	800aa2c <vPortExitCritical>
}
 800a7c0:	bf00      	nop
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	200009e4 	.word	0x200009e4
 800a7cc:	200009b4 	.word	0x200009b4
 800a7d0:	200009c8 	.word	0x200009c8
 800a7d4:	200009dc 	.word	0x200009dc
 800a7d8:	200009e0 	.word	0x200009e0
 800a7dc:	20000a90 	.word	0x20000a90
 800a7e0:	200009f0 	.word	0x200009f0
 800a7e4:	0800d524 	.word	0x0800d524

0800a7e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	3b04      	subs	r3, #4
 800a7f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	3b04      	subs	r3, #4
 800a806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	f023 0201 	bic.w	r2, r3, #1
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3b04      	subs	r3, #4
 800a816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a818:	4a08      	ldr	r2, [pc, #32]	; (800a83c <pxPortInitialiseStack+0x54>)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3b14      	subs	r3, #20
 800a822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	3b20      	subs	r3, #32
 800a82e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a830:	68fb      	ldr	r3, [r7, #12]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	bc80      	pop	{r7}
 800a83a:	4770      	bx	lr
 800a83c:	0800a841 	.word	0x0800a841

0800a840 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a846:	2300      	movs	r3, #0
 800a848:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a84a:	4b12      	ldr	r3, [pc, #72]	; (800a894 <prvTaskExitError+0x54>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a852:	d00a      	beq.n	800a86a <prvTaskExitError+0x2a>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	60fb      	str	r3, [r7, #12]
}
 800a866:	bf00      	nop
 800a868:	e7fe      	b.n	800a868 <prvTaskExitError+0x28>
	__asm volatile
 800a86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86e:	f383 8811 	msr	BASEPRI, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	60bb      	str	r3, [r7, #8]
}
 800a87c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a87e:	bf00      	nop
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d0fc      	beq.n	800a880 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a886:	bf00      	nop
 800a888:	bf00      	nop
 800a88a:	3714      	adds	r7, #20
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bc80      	pop	{r7}
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	2000002c 	.word	0x2000002c
	...

0800a8a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8a0:	4b07      	ldr	r3, [pc, #28]	; (800a8c0 <pxCurrentTCBConst2>)
 800a8a2:	6819      	ldr	r1, [r3, #0]
 800a8a4:	6808      	ldr	r0, [r1, #0]
 800a8a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a8aa:	f380 8809 	msr	PSP, r0
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f04f 0000 	mov.w	r0, #0
 800a8b6:	f380 8811 	msr	BASEPRI, r0
 800a8ba:	f04e 0e0d 	orr.w	lr, lr, #13
 800a8be:	4770      	bx	lr

0800a8c0 <pxCurrentTCBConst2>:
 800a8c0:	200004ac 	.word	0x200004ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a8c4:	bf00      	nop
 800a8c6:	bf00      	nop

0800a8c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a8c8:	4806      	ldr	r0, [pc, #24]	; (800a8e4 <prvPortStartFirstTask+0x1c>)
 800a8ca:	6800      	ldr	r0, [r0, #0]
 800a8cc:	6800      	ldr	r0, [r0, #0]
 800a8ce:	f380 8808 	msr	MSP, r0
 800a8d2:	b662      	cpsie	i
 800a8d4:	b661      	cpsie	f
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	df00      	svc	0
 800a8e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8e2:	bf00      	nop
 800a8e4:	e000ed08 	.word	0xe000ed08

0800a8e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8ee:	4b32      	ldr	r3, [pc, #200]	; (800a9b8 <xPortStartScheduler+0xd0>)
 800a8f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	22ff      	movs	r2, #255	; 0xff
 800a8fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	b2db      	uxtb	r3, r3
 800a906:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a908:	78fb      	ldrb	r3, [r7, #3]
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a910:	b2da      	uxtb	r2, r3
 800a912:	4b2a      	ldr	r3, [pc, #168]	; (800a9bc <xPortStartScheduler+0xd4>)
 800a914:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a916:	4b2a      	ldr	r3, [pc, #168]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a918:	2207      	movs	r2, #7
 800a91a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a91c:	e009      	b.n	800a932 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a91e:	4b28      	ldr	r3, [pc, #160]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3b01      	subs	r3, #1
 800a924:	4a26      	ldr	r2, [pc, #152]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a926:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a932:	78fb      	ldrb	r3, [r7, #3]
 800a934:	b2db      	uxtb	r3, r3
 800a936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a93a:	2b80      	cmp	r3, #128	; 0x80
 800a93c:	d0ef      	beq.n	800a91e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a93e:	4b20      	ldr	r3, [pc, #128]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f1c3 0307 	rsb	r3, r3, #7
 800a946:	2b04      	cmp	r3, #4
 800a948:	d00a      	beq.n	800a960 <xPortStartScheduler+0x78>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	60bb      	str	r3, [r7, #8]
}
 800a95c:	bf00      	nop
 800a95e:	e7fe      	b.n	800a95e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a960:	4b17      	ldr	r3, [pc, #92]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	021b      	lsls	r3, r3, #8
 800a966:	4a16      	ldr	r2, [pc, #88]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a968:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a96a:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a972:	4a13      	ldr	r2, [pc, #76]	; (800a9c0 <xPortStartScheduler+0xd8>)
 800a974:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a97e:	4b11      	ldr	r3, [pc, #68]	; (800a9c4 <xPortStartScheduler+0xdc>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a10      	ldr	r2, [pc, #64]	; (800a9c4 <xPortStartScheduler+0xdc>)
 800a984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a988:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a98a:	4b0e      	ldr	r3, [pc, #56]	; (800a9c4 <xPortStartScheduler+0xdc>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a0d      	ldr	r2, [pc, #52]	; (800a9c4 <xPortStartScheduler+0xdc>)
 800a990:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a994:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a996:	f000 f8b9 	bl	800ab0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a99a:	4b0b      	ldr	r3, [pc, #44]	; (800a9c8 <xPortStartScheduler+0xe0>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9a0:	f7ff ff92 	bl	800a8c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9a4:	f7fe ff9c 	bl	80098e0 <vTaskSwitchContext>
	prvTaskExitError();
 800a9a8:	f7ff ff4a 	bl	800a840 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	e000e400 	.word	0xe000e400
 800a9bc:	20000ae0 	.word	0x20000ae0
 800a9c0:	20000ae4 	.word	0x20000ae4
 800a9c4:	e000ed20 	.word	0xe000ed20
 800a9c8:	2000002c 	.word	0x2000002c

0800a9cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	607b      	str	r3, [r7, #4]
}
 800a9e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <vPortEnterCritical+0x58>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	4a0d      	ldr	r2, [pc, #52]	; (800aa24 <vPortEnterCritical+0x58>)
 800a9ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9f0:	4b0c      	ldr	r3, [pc, #48]	; (800aa24 <vPortEnterCritical+0x58>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d10f      	bne.n	800aa18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9f8:	4b0b      	ldr	r3, [pc, #44]	; (800aa28 <vPortEnterCritical+0x5c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00a      	beq.n	800aa18 <vPortEnterCritical+0x4c>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	603b      	str	r3, [r7, #0]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <vPortEnterCritical+0x4a>
	}
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bc80      	pop	{r7}
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	2000002c 	.word	0x2000002c
 800aa28:	e000ed04 	.word	0xe000ed04

0800aa2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa32:	4b11      	ldr	r3, [pc, #68]	; (800aa78 <vPortExitCritical+0x4c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10a      	bne.n	800aa50 <vPortExitCritical+0x24>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	607b      	str	r3, [r7, #4]
}
 800aa4c:	bf00      	nop
 800aa4e:	e7fe      	b.n	800aa4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa50:	4b09      	ldr	r3, [pc, #36]	; (800aa78 <vPortExitCritical+0x4c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	3b01      	subs	r3, #1
 800aa56:	4a08      	ldr	r2, [pc, #32]	; (800aa78 <vPortExitCritical+0x4c>)
 800aa58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa5a:	4b07      	ldr	r3, [pc, #28]	; (800aa78 <vPortExitCritical+0x4c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d105      	bne.n	800aa6e <vPortExitCritical+0x42>
 800aa62:	2300      	movs	r3, #0
 800aa64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	f383 8811 	msr	BASEPRI, r3
}
 800aa6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa6e:	bf00      	nop
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bc80      	pop	{r7}
 800aa76:	4770      	bx	lr
 800aa78:	2000002c 	.word	0x2000002c
 800aa7c:	00000000 	.word	0x00000000

0800aa80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa80:	f3ef 8009 	mrs	r0, PSP
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	4b0d      	ldr	r3, [pc, #52]	; (800aac0 <pxCurrentTCBConst>)
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aa90:	6010      	str	r0, [r2, #0]
 800aa92:	e92d 4008 	stmdb	sp!, {r3, lr}
 800aa96:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa9a:	f380 8811 	msr	BASEPRI, r0
 800aa9e:	f7fe ff1f 	bl	80098e0 <vTaskSwitchContext>
 800aaa2:	f04f 0000 	mov.w	r0, #0
 800aaa6:	f380 8811 	msr	BASEPRI, r0
 800aaaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aaae:	6819      	ldr	r1, [r3, #0]
 800aab0:	6808      	ldr	r0, [r1, #0]
 800aab2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aab6:	f380 8809 	msr	PSP, r0
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	4770      	bx	lr

0800aac0 <pxCurrentTCBConst>:
 800aac0:	200004ac 	.word	0x200004ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aac4:	bf00      	nop
 800aac6:	bf00      	nop

0800aac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	607b      	str	r3, [r7, #4]
}
 800aae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aae2:	f7fe fe3f 	bl	8009764 <xTaskIncrementTick>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d003      	beq.n	800aaf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aaec:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <SysTick_Handler+0x40>)
 800aaee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf2:	601a      	str	r2, [r3, #0]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	f383 8811 	msr	BASEPRI, r3
}
 800aafe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab00:	bf00      	nop
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	e000ed04 	.word	0xe000ed04

0800ab0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab10:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <vPortSetupTimerInterrupt+0x30>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab16:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <vPortSetupTimerInterrupt+0x34>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab1c:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <vPortSetupTimerInterrupt+0x38>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a09      	ldr	r2, [pc, #36]	; (800ab48 <vPortSetupTimerInterrupt+0x3c>)
 800ab22:	fba2 2303 	umull	r2, r3, r2, r3
 800ab26:	095b      	lsrs	r3, r3, #5
 800ab28:	4a08      	ldr	r2, [pc, #32]	; (800ab4c <vPortSetupTimerInterrupt+0x40>)
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab2e:	4b03      	ldr	r3, [pc, #12]	; (800ab3c <vPortSetupTimerInterrupt+0x30>)
 800ab30:	2207      	movs	r2, #7
 800ab32:	601a      	str	r2, [r3, #0]
}
 800ab34:	bf00      	nop
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bc80      	pop	{r7}
 800ab3a:	4770      	bx	lr
 800ab3c:	e000e010 	.word	0xe000e010
 800ab40:	e000e018 	.word	0xe000e018
 800ab44:	20000020 	.word	0x20000020
 800ab48:	51eb851f 	.word	0x51eb851f
 800ab4c:	e000e014 	.word	0xe000e014

0800ab50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab56:	f3ef 8305 	mrs	r3, IPSR
 800ab5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b0f      	cmp	r3, #15
 800ab60:	d914      	bls.n	800ab8c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab62:	4a16      	ldr	r2, [pc, #88]	; (800abbc <vPortValidateInterruptPriority+0x6c>)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	4413      	add	r3, r2
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab6c:	4b14      	ldr	r3, [pc, #80]	; (800abc0 <vPortValidateInterruptPriority+0x70>)
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	7afa      	ldrb	r2, [r7, #11]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d20a      	bcs.n	800ab8c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	607b      	str	r3, [r7, #4]
}
 800ab88:	bf00      	nop
 800ab8a:	e7fe      	b.n	800ab8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <vPortValidateInterruptPriority+0x74>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab94:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <vPortValidateInterruptPriority+0x78>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d90a      	bls.n	800abb2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	603b      	str	r3, [r7, #0]
}
 800abae:	bf00      	nop
 800abb0:	e7fe      	b.n	800abb0 <vPortValidateInterruptPriority+0x60>
	}
 800abb2:	bf00      	nop
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bc80      	pop	{r7}
 800abba:	4770      	bx	lr
 800abbc:	e000e3f0 	.word	0xe000e3f0
 800abc0:	20000ae0 	.word	0x20000ae0
 800abc4:	e000ed0c 	.word	0xe000ed0c
 800abc8:	20000ae4 	.word	0x20000ae4

0800abcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08a      	sub	sp, #40	; 0x28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abd4:	2300      	movs	r3, #0
 800abd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abd8:	f7fe fd0a 	bl	80095f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abdc:	4b58      	ldr	r3, [pc, #352]	; (800ad40 <pvPortMalloc+0x174>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abe4:	f000 f910 	bl	800ae08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abe8:	4b56      	ldr	r3, [pc, #344]	; (800ad44 <pvPortMalloc+0x178>)
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4013      	ands	r3, r2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f040 808e 	bne.w	800ad12 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d01d      	beq.n	800ac38 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800abfc:	2208      	movs	r2, #8
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4413      	add	r3, r2
 800ac02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f003 0307 	and.w	r3, r3, #7
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d014      	beq.n	800ac38 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f023 0307 	bic.w	r3, r3, #7
 800ac14:	3308      	adds	r3, #8
 800ac16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f003 0307 	and.w	r3, r3, #7
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00a      	beq.n	800ac38 <pvPortMalloc+0x6c>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	617b      	str	r3, [r7, #20]
}
 800ac34:	bf00      	nop
 800ac36:	e7fe      	b.n	800ac36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d069      	beq.n	800ad12 <pvPortMalloc+0x146>
 800ac3e:	4b42      	ldr	r3, [pc, #264]	; (800ad48 <pvPortMalloc+0x17c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d864      	bhi.n	800ad12 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac48:	4b40      	ldr	r3, [pc, #256]	; (800ad4c <pvPortMalloc+0x180>)
 800ac4a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac4c:	4b3f      	ldr	r3, [pc, #252]	; (800ad4c <pvPortMalloc+0x180>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac52:	e004      	b.n	800ac5e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac56:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d903      	bls.n	800ac70 <pvPortMalloc+0xa4>
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1f1      	bne.n	800ac54 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac70:	4b33      	ldr	r3, [pc, #204]	; (800ad40 <pvPortMalloc+0x174>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d04b      	beq.n	800ad12 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac7a:	6a3b      	ldr	r3, [r7, #32]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2208      	movs	r2, #8
 800ac80:	4413      	add	r3, r2
 800ac82:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	1ad2      	subs	r2, r2, r3
 800ac94:	2308      	movs	r3, #8
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d91f      	bls.n	800acdc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4413      	add	r3, r2
 800aca2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	f003 0307 	and.w	r3, r3, #7
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <pvPortMalloc+0xf8>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	613b      	str	r3, [r7, #16]
}
 800acc0:	bf00      	nop
 800acc2:	e7fe      	b.n	800acc2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc6:	685a      	ldr	r2, [r3, #4]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	1ad2      	subs	r2, r2, r3
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acd6:	69b8      	ldr	r0, [r7, #24]
 800acd8:	f000 f8f8 	bl	800aecc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acdc:	4b1a      	ldr	r3, [pc, #104]	; (800ad48 <pvPortMalloc+0x17c>)
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	4a18      	ldr	r2, [pc, #96]	; (800ad48 <pvPortMalloc+0x17c>)
 800ace8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acea:	4b17      	ldr	r3, [pc, #92]	; (800ad48 <pvPortMalloc+0x17c>)
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	4b18      	ldr	r3, [pc, #96]	; (800ad50 <pvPortMalloc+0x184>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d203      	bcs.n	800acfe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acf6:	4b14      	ldr	r3, [pc, #80]	; (800ad48 <pvPortMalloc+0x17c>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a15      	ldr	r2, [pc, #84]	; (800ad50 <pvPortMalloc+0x184>)
 800acfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	4b10      	ldr	r3, [pc, #64]	; (800ad44 <pvPortMalloc+0x178>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	431a      	orrs	r2, r3
 800ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	2200      	movs	r2, #0
 800ad10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad12:	f7fe fc7b 	bl	800960c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	f003 0307 	and.w	r3, r3, #7
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00a      	beq.n	800ad36 <pvPortMalloc+0x16a>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	60fb      	str	r3, [r7, #12]
}
 800ad32:	bf00      	nop
 800ad34:	e7fe      	b.n	800ad34 <pvPortMalloc+0x168>
	return pvReturn;
 800ad36:	69fb      	ldr	r3, [r7, #28]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3728      	adds	r7, #40	; 0x28
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	200039d0 	.word	0x200039d0
 800ad44:	200039dc 	.word	0x200039dc
 800ad48:	200039d4 	.word	0x200039d4
 800ad4c:	200039c8 	.word	0x200039c8
 800ad50:	200039d8 	.word	0x200039d8

0800ad54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d048      	beq.n	800adf8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad66:	2308      	movs	r3, #8
 800ad68:	425b      	negs	r3, r3
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	685a      	ldr	r2, [r3, #4]
 800ad78:	4b21      	ldr	r3, [pc, #132]	; (800ae00 <vPortFree+0xac>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10a      	bne.n	800ad98 <vPortFree+0x44>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	60fb      	str	r3, [r7, #12]
}
 800ad94:	bf00      	nop
 800ad96:	e7fe      	b.n	800ad96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00a      	beq.n	800adb6 <vPortFree+0x62>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	60bb      	str	r3, [r7, #8]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	685a      	ldr	r2, [r3, #4]
 800adba:	4b11      	ldr	r3, [pc, #68]	; (800ae00 <vPortFree+0xac>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4013      	ands	r3, r2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d019      	beq.n	800adf8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d115      	bne.n	800adf8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	685a      	ldr	r2, [r3, #4]
 800add0:	4b0b      	ldr	r3, [pc, #44]	; (800ae00 <vPortFree+0xac>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	43db      	mvns	r3, r3
 800add6:	401a      	ands	r2, r3
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800addc:	f7fe fc08 	bl	80095f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	4b07      	ldr	r3, [pc, #28]	; (800ae04 <vPortFree+0xb0>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4413      	add	r3, r2
 800adea:	4a06      	ldr	r2, [pc, #24]	; (800ae04 <vPortFree+0xb0>)
 800adec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adee:	6938      	ldr	r0, [r7, #16]
 800adf0:	f000 f86c 	bl	800aecc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800adf4:	f7fe fc0a 	bl	800960c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adf8:	bf00      	nop
 800adfa:	3718      	adds	r7, #24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	200039dc 	.word	0x200039dc
 800ae04:	200039d4 	.word	0x200039d4

0800ae08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae0e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800ae12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae14:	4b27      	ldr	r3, [pc, #156]	; (800aeb4 <prvHeapInit+0xac>)
 800ae16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f003 0307 	and.w	r3, r3, #7
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00c      	beq.n	800ae3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3307      	adds	r3, #7
 800ae26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f023 0307 	bic.w	r3, r3, #7
 800ae2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	4a1f      	ldr	r2, [pc, #124]	; (800aeb4 <prvHeapInit+0xac>)
 800ae38:	4413      	add	r3, r2
 800ae3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae40:	4a1d      	ldr	r2, [pc, #116]	; (800aeb8 <prvHeapInit+0xb0>)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae46:	4b1c      	ldr	r3, [pc, #112]	; (800aeb8 <prvHeapInit+0xb0>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	4413      	add	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae54:	2208      	movs	r2, #8
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	1a9b      	subs	r3, r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f023 0307 	bic.w	r3, r3, #7
 800ae62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4a15      	ldr	r2, [pc, #84]	; (800aebc <prvHeapInit+0xb4>)
 800ae68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae6a:	4b14      	ldr	r3, [pc, #80]	; (800aebc <prvHeapInit+0xb4>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae72:	4b12      	ldr	r3, [pc, #72]	; (800aebc <prvHeapInit+0xb4>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2200      	movs	r2, #0
 800ae78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	1ad2      	subs	r2, r2, r3
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae88:	4b0c      	ldr	r3, [pc, #48]	; (800aebc <prvHeapInit+0xb4>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	4a0a      	ldr	r2, [pc, #40]	; (800aec0 <prvHeapInit+0xb8>)
 800ae96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	4a09      	ldr	r2, [pc, #36]	; (800aec4 <prvHeapInit+0xbc>)
 800ae9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aea0:	4b09      	ldr	r3, [pc, #36]	; (800aec8 <prvHeapInit+0xc0>)
 800aea2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aea6:	601a      	str	r2, [r3, #0]
}
 800aea8:	bf00      	nop
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bc80      	pop	{r7}
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	20000ae8 	.word	0x20000ae8
 800aeb8:	200039c8 	.word	0x200039c8
 800aebc:	200039d0 	.word	0x200039d0
 800aec0:	200039d8 	.word	0x200039d8
 800aec4:	200039d4 	.word	0x200039d4
 800aec8:	200039dc 	.word	0x200039dc

0800aecc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aed4:	4b27      	ldr	r3, [pc, #156]	; (800af74 <prvInsertBlockIntoFreeList+0xa8>)
 800aed6:	60fb      	str	r3, [r7, #12]
 800aed8:	e002      	b.n	800aee0 <prvInsertBlockIntoFreeList+0x14>
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	60fb      	str	r3, [r7, #12]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d8f7      	bhi.n	800aeda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	4413      	add	r3, r2
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d108      	bne.n	800af0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	441a      	add	r2, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	441a      	add	r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d118      	bne.n	800af54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	4b14      	ldr	r3, [pc, #80]	; (800af78 <prvInsertBlockIntoFreeList+0xac>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d00d      	beq.n	800af4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	441a      	add	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	e008      	b.n	800af5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af4a:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <prvInsertBlockIntoFreeList+0xac>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	e003      	b.n	800af5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	429a      	cmp	r2, r3
 800af62:	d002      	beq.n	800af6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af6a:	bf00      	nop
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	bc80      	pop	{r7}
 800af72:	4770      	bx	lr
 800af74:	200039c8 	.word	0x200039c8
 800af78:	200039d0 	.word	0x200039d0

0800af7c <__errno>:
 800af7c:	4b01      	ldr	r3, [pc, #4]	; (800af84 <__errno+0x8>)
 800af7e:	6818      	ldr	r0, [r3, #0]
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	20000030 	.word	0x20000030

0800af88 <__libc_init_array>:
 800af88:	b570      	push	{r4, r5, r6, lr}
 800af8a:	2600      	movs	r6, #0
 800af8c:	4d0c      	ldr	r5, [pc, #48]	; (800afc0 <__libc_init_array+0x38>)
 800af8e:	4c0d      	ldr	r4, [pc, #52]	; (800afc4 <__libc_init_array+0x3c>)
 800af90:	1b64      	subs	r4, r4, r5
 800af92:	10a4      	asrs	r4, r4, #2
 800af94:	42a6      	cmp	r6, r4
 800af96:	d109      	bne.n	800afac <__libc_init_array+0x24>
 800af98:	f001 f8d2 	bl	800c140 <_init>
 800af9c:	2600      	movs	r6, #0
 800af9e:	4d0a      	ldr	r5, [pc, #40]	; (800afc8 <__libc_init_array+0x40>)
 800afa0:	4c0a      	ldr	r4, [pc, #40]	; (800afcc <__libc_init_array+0x44>)
 800afa2:	1b64      	subs	r4, r4, r5
 800afa4:	10a4      	asrs	r4, r4, #2
 800afa6:	42a6      	cmp	r6, r4
 800afa8:	d105      	bne.n	800afb6 <__libc_init_array+0x2e>
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb0:	4798      	blx	r3
 800afb2:	3601      	adds	r6, #1
 800afb4:	e7ee      	b.n	800af94 <__libc_init_array+0xc>
 800afb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800afba:	4798      	blx	r3
 800afbc:	3601      	adds	r6, #1
 800afbe:	e7f2      	b.n	800afa6 <__libc_init_array+0x1e>
 800afc0:	0800d7f4 	.word	0x0800d7f4
 800afc4:	0800d7f4 	.word	0x0800d7f4
 800afc8:	0800d7f4 	.word	0x0800d7f4
 800afcc:	0800d7f8 	.word	0x0800d7f8

0800afd0 <memcpy>:
 800afd0:	440a      	add	r2, r1
 800afd2:	4291      	cmp	r1, r2
 800afd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800afd8:	d100      	bne.n	800afdc <memcpy+0xc>
 800afda:	4770      	bx	lr
 800afdc:	b510      	push	{r4, lr}
 800afde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afe2:	4291      	cmp	r1, r2
 800afe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afe8:	d1f9      	bne.n	800afde <memcpy+0xe>
 800afea:	bd10      	pop	{r4, pc}

0800afec <memset>:
 800afec:	4603      	mov	r3, r0
 800afee:	4402      	add	r2, r0
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d100      	bne.n	800aff6 <memset+0xa>
 800aff4:	4770      	bx	lr
 800aff6:	f803 1b01 	strb.w	r1, [r3], #1
 800affa:	e7f9      	b.n	800aff0 <memset+0x4>

0800affc <_puts_r>:
 800affc:	b570      	push	{r4, r5, r6, lr}
 800affe:	460e      	mov	r6, r1
 800b000:	4605      	mov	r5, r0
 800b002:	b118      	cbz	r0, 800b00c <_puts_r+0x10>
 800b004:	6983      	ldr	r3, [r0, #24]
 800b006:	b90b      	cbnz	r3, 800b00c <_puts_r+0x10>
 800b008:	f000 fb24 	bl	800b654 <__sinit>
 800b00c:	69ab      	ldr	r3, [r5, #24]
 800b00e:	68ac      	ldr	r4, [r5, #8]
 800b010:	b913      	cbnz	r3, 800b018 <_puts_r+0x1c>
 800b012:	4628      	mov	r0, r5
 800b014:	f000 fb1e 	bl	800b654 <__sinit>
 800b018:	4b2c      	ldr	r3, [pc, #176]	; (800b0cc <_puts_r+0xd0>)
 800b01a:	429c      	cmp	r4, r3
 800b01c:	d120      	bne.n	800b060 <_puts_r+0x64>
 800b01e:	686c      	ldr	r4, [r5, #4]
 800b020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b022:	07db      	lsls	r3, r3, #31
 800b024:	d405      	bmi.n	800b032 <_puts_r+0x36>
 800b026:	89a3      	ldrh	r3, [r4, #12]
 800b028:	0598      	lsls	r0, r3, #22
 800b02a:	d402      	bmi.n	800b032 <_puts_r+0x36>
 800b02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b02e:	f000 fbaf 	bl	800b790 <__retarget_lock_acquire_recursive>
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	0719      	lsls	r1, r3, #28
 800b036:	d51d      	bpl.n	800b074 <_puts_r+0x78>
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	b1db      	cbz	r3, 800b074 <_puts_r+0x78>
 800b03c:	3e01      	subs	r6, #1
 800b03e:	68a3      	ldr	r3, [r4, #8]
 800b040:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b044:	3b01      	subs	r3, #1
 800b046:	60a3      	str	r3, [r4, #8]
 800b048:	bb39      	cbnz	r1, 800b09a <_puts_r+0x9e>
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	da38      	bge.n	800b0c0 <_puts_r+0xc4>
 800b04e:	4622      	mov	r2, r4
 800b050:	210a      	movs	r1, #10
 800b052:	4628      	mov	r0, r5
 800b054:	f000 f924 	bl	800b2a0 <__swbuf_r>
 800b058:	3001      	adds	r0, #1
 800b05a:	d011      	beq.n	800b080 <_puts_r+0x84>
 800b05c:	250a      	movs	r5, #10
 800b05e:	e011      	b.n	800b084 <_puts_r+0x88>
 800b060:	4b1b      	ldr	r3, [pc, #108]	; (800b0d0 <_puts_r+0xd4>)
 800b062:	429c      	cmp	r4, r3
 800b064:	d101      	bne.n	800b06a <_puts_r+0x6e>
 800b066:	68ac      	ldr	r4, [r5, #8]
 800b068:	e7da      	b.n	800b020 <_puts_r+0x24>
 800b06a:	4b1a      	ldr	r3, [pc, #104]	; (800b0d4 <_puts_r+0xd8>)
 800b06c:	429c      	cmp	r4, r3
 800b06e:	bf08      	it	eq
 800b070:	68ec      	ldreq	r4, [r5, #12]
 800b072:	e7d5      	b.n	800b020 <_puts_r+0x24>
 800b074:	4621      	mov	r1, r4
 800b076:	4628      	mov	r0, r5
 800b078:	f000 f964 	bl	800b344 <__swsetup_r>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d0dd      	beq.n	800b03c <_puts_r+0x40>
 800b080:	f04f 35ff 	mov.w	r5, #4294967295
 800b084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b086:	07da      	lsls	r2, r3, #31
 800b088:	d405      	bmi.n	800b096 <_puts_r+0x9a>
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	059b      	lsls	r3, r3, #22
 800b08e:	d402      	bmi.n	800b096 <_puts_r+0x9a>
 800b090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b092:	f000 fb7e 	bl	800b792 <__retarget_lock_release_recursive>
 800b096:	4628      	mov	r0, r5
 800b098:	bd70      	pop	{r4, r5, r6, pc}
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	da04      	bge.n	800b0a8 <_puts_r+0xac>
 800b09e:	69a2      	ldr	r2, [r4, #24]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	dc06      	bgt.n	800b0b2 <_puts_r+0xb6>
 800b0a4:	290a      	cmp	r1, #10
 800b0a6:	d004      	beq.n	800b0b2 <_puts_r+0xb6>
 800b0a8:	6823      	ldr	r3, [r4, #0]
 800b0aa:	1c5a      	adds	r2, r3, #1
 800b0ac:	6022      	str	r2, [r4, #0]
 800b0ae:	7019      	strb	r1, [r3, #0]
 800b0b0:	e7c5      	b.n	800b03e <_puts_r+0x42>
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	f000 f8f3 	bl	800b2a0 <__swbuf_r>
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	d1bf      	bne.n	800b03e <_puts_r+0x42>
 800b0be:	e7df      	b.n	800b080 <_puts_r+0x84>
 800b0c0:	250a      	movs	r5, #10
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	1c5a      	adds	r2, r3, #1
 800b0c6:	6022      	str	r2, [r4, #0]
 800b0c8:	701d      	strb	r5, [r3, #0]
 800b0ca:	e7db      	b.n	800b084 <_puts_r+0x88>
 800b0cc:	0800d780 	.word	0x0800d780
 800b0d0:	0800d7a0 	.word	0x0800d7a0
 800b0d4:	0800d760 	.word	0x0800d760

0800b0d8 <puts>:
 800b0d8:	4b02      	ldr	r3, [pc, #8]	; (800b0e4 <puts+0xc>)
 800b0da:	4601      	mov	r1, r0
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	f7ff bf8d 	b.w	800affc <_puts_r>
 800b0e2:	bf00      	nop
 800b0e4:	20000030 	.word	0x20000030

0800b0e8 <setvbuf>:
 800b0e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0ec:	461d      	mov	r5, r3
 800b0ee:	4b5d      	ldr	r3, [pc, #372]	; (800b264 <setvbuf+0x17c>)
 800b0f0:	4604      	mov	r4, r0
 800b0f2:	681f      	ldr	r7, [r3, #0]
 800b0f4:	460e      	mov	r6, r1
 800b0f6:	4690      	mov	r8, r2
 800b0f8:	b127      	cbz	r7, 800b104 <setvbuf+0x1c>
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	b913      	cbnz	r3, 800b104 <setvbuf+0x1c>
 800b0fe:	4638      	mov	r0, r7
 800b100:	f000 faa8 	bl	800b654 <__sinit>
 800b104:	4b58      	ldr	r3, [pc, #352]	; (800b268 <setvbuf+0x180>)
 800b106:	429c      	cmp	r4, r3
 800b108:	d167      	bne.n	800b1da <setvbuf+0xf2>
 800b10a:	687c      	ldr	r4, [r7, #4]
 800b10c:	f1b8 0f02 	cmp.w	r8, #2
 800b110:	d006      	beq.n	800b120 <setvbuf+0x38>
 800b112:	f1b8 0f01 	cmp.w	r8, #1
 800b116:	f200 809f 	bhi.w	800b258 <setvbuf+0x170>
 800b11a:	2d00      	cmp	r5, #0
 800b11c:	f2c0 809c 	blt.w	800b258 <setvbuf+0x170>
 800b120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b122:	07db      	lsls	r3, r3, #31
 800b124:	d405      	bmi.n	800b132 <setvbuf+0x4a>
 800b126:	89a3      	ldrh	r3, [r4, #12]
 800b128:	0598      	lsls	r0, r3, #22
 800b12a:	d402      	bmi.n	800b132 <setvbuf+0x4a>
 800b12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b12e:	f000 fb2f 	bl	800b790 <__retarget_lock_acquire_recursive>
 800b132:	4621      	mov	r1, r4
 800b134:	4638      	mov	r0, r7
 800b136:	f000 f9f9 	bl	800b52c <_fflush_r>
 800b13a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b13c:	b141      	cbz	r1, 800b150 <setvbuf+0x68>
 800b13e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b142:	4299      	cmp	r1, r3
 800b144:	d002      	beq.n	800b14c <setvbuf+0x64>
 800b146:	4638      	mov	r0, r7
 800b148:	f000 fb90 	bl	800b86c <_free_r>
 800b14c:	2300      	movs	r3, #0
 800b14e:	6363      	str	r3, [r4, #52]	; 0x34
 800b150:	2300      	movs	r3, #0
 800b152:	61a3      	str	r3, [r4, #24]
 800b154:	6063      	str	r3, [r4, #4]
 800b156:	89a3      	ldrh	r3, [r4, #12]
 800b158:	0619      	lsls	r1, r3, #24
 800b15a:	d503      	bpl.n	800b164 <setvbuf+0x7c>
 800b15c:	4638      	mov	r0, r7
 800b15e:	6921      	ldr	r1, [r4, #16]
 800b160:	f000 fb84 	bl	800b86c <_free_r>
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	f1b8 0f02 	cmp.w	r8, #2
 800b16a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b16e:	f023 0303 	bic.w	r3, r3, #3
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	d06c      	beq.n	800b250 <setvbuf+0x168>
 800b176:	ab01      	add	r3, sp, #4
 800b178:	466a      	mov	r2, sp
 800b17a:	4621      	mov	r1, r4
 800b17c:	4638      	mov	r0, r7
 800b17e:	f000 fb09 	bl	800b794 <__swhatbuf_r>
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	4318      	orrs	r0, r3
 800b186:	81a0      	strh	r0, [r4, #12]
 800b188:	2d00      	cmp	r5, #0
 800b18a:	d130      	bne.n	800b1ee <setvbuf+0x106>
 800b18c:	9d00      	ldr	r5, [sp, #0]
 800b18e:	4628      	mov	r0, r5
 800b190:	f000 fb64 	bl	800b85c <malloc>
 800b194:	4606      	mov	r6, r0
 800b196:	2800      	cmp	r0, #0
 800b198:	d155      	bne.n	800b246 <setvbuf+0x15e>
 800b19a:	f8dd 9000 	ldr.w	r9, [sp]
 800b19e:	45a9      	cmp	r9, r5
 800b1a0:	d14a      	bne.n	800b238 <setvbuf+0x150>
 800b1a2:	f04f 35ff 	mov.w	r5, #4294967295
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	60a2      	str	r2, [r4, #8]
 800b1aa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b1ae:	6022      	str	r2, [r4, #0]
 800b1b0:	6122      	str	r2, [r4, #16]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b8:	6162      	str	r2, [r4, #20]
 800b1ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1bc:	f043 0302 	orr.w	r3, r3, #2
 800b1c0:	07d2      	lsls	r2, r2, #31
 800b1c2:	81a3      	strh	r3, [r4, #12]
 800b1c4:	d405      	bmi.n	800b1d2 <setvbuf+0xea>
 800b1c6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b1ca:	d102      	bne.n	800b1d2 <setvbuf+0xea>
 800b1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1ce:	f000 fae0 	bl	800b792 <__retarget_lock_release_recursive>
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	b003      	add	sp, #12
 800b1d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1da:	4b24      	ldr	r3, [pc, #144]	; (800b26c <setvbuf+0x184>)
 800b1dc:	429c      	cmp	r4, r3
 800b1de:	d101      	bne.n	800b1e4 <setvbuf+0xfc>
 800b1e0:	68bc      	ldr	r4, [r7, #8]
 800b1e2:	e793      	b.n	800b10c <setvbuf+0x24>
 800b1e4:	4b22      	ldr	r3, [pc, #136]	; (800b270 <setvbuf+0x188>)
 800b1e6:	429c      	cmp	r4, r3
 800b1e8:	bf08      	it	eq
 800b1ea:	68fc      	ldreq	r4, [r7, #12]
 800b1ec:	e78e      	b.n	800b10c <setvbuf+0x24>
 800b1ee:	2e00      	cmp	r6, #0
 800b1f0:	d0cd      	beq.n	800b18e <setvbuf+0xa6>
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	b913      	cbnz	r3, 800b1fc <setvbuf+0x114>
 800b1f6:	4638      	mov	r0, r7
 800b1f8:	f000 fa2c 	bl	800b654 <__sinit>
 800b1fc:	f1b8 0f01 	cmp.w	r8, #1
 800b200:	bf08      	it	eq
 800b202:	89a3      	ldrheq	r3, [r4, #12]
 800b204:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b208:	bf04      	itt	eq
 800b20a:	f043 0301 	orreq.w	r3, r3, #1
 800b20e:	81a3      	strheq	r3, [r4, #12]
 800b210:	89a2      	ldrh	r2, [r4, #12]
 800b212:	6026      	str	r6, [r4, #0]
 800b214:	f012 0308 	ands.w	r3, r2, #8
 800b218:	d01c      	beq.n	800b254 <setvbuf+0x16c>
 800b21a:	07d3      	lsls	r3, r2, #31
 800b21c:	bf41      	itttt	mi
 800b21e:	2300      	movmi	r3, #0
 800b220:	426d      	negmi	r5, r5
 800b222:	60a3      	strmi	r3, [r4, #8]
 800b224:	61a5      	strmi	r5, [r4, #24]
 800b226:	bf58      	it	pl
 800b228:	60a5      	strpl	r5, [r4, #8]
 800b22a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b22c:	f015 0501 	ands.w	r5, r5, #1
 800b230:	d115      	bne.n	800b25e <setvbuf+0x176>
 800b232:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b236:	e7c8      	b.n	800b1ca <setvbuf+0xe2>
 800b238:	4648      	mov	r0, r9
 800b23a:	f000 fb0f 	bl	800b85c <malloc>
 800b23e:	4606      	mov	r6, r0
 800b240:	2800      	cmp	r0, #0
 800b242:	d0ae      	beq.n	800b1a2 <setvbuf+0xba>
 800b244:	464d      	mov	r5, r9
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b24c:	81a3      	strh	r3, [r4, #12]
 800b24e:	e7d0      	b.n	800b1f2 <setvbuf+0x10a>
 800b250:	2500      	movs	r5, #0
 800b252:	e7a8      	b.n	800b1a6 <setvbuf+0xbe>
 800b254:	60a3      	str	r3, [r4, #8]
 800b256:	e7e8      	b.n	800b22a <setvbuf+0x142>
 800b258:	f04f 35ff 	mov.w	r5, #4294967295
 800b25c:	e7b9      	b.n	800b1d2 <setvbuf+0xea>
 800b25e:	2500      	movs	r5, #0
 800b260:	e7b7      	b.n	800b1d2 <setvbuf+0xea>
 800b262:	bf00      	nop
 800b264:	20000030 	.word	0x20000030
 800b268:	0800d780 	.word	0x0800d780
 800b26c:	0800d7a0 	.word	0x0800d7a0
 800b270:	0800d760 	.word	0x0800d760

0800b274 <viprintf>:
 800b274:	4b09      	ldr	r3, [pc, #36]	; (800b29c <viprintf+0x28>)
 800b276:	b570      	push	{r4, r5, r6, lr}
 800b278:	681c      	ldr	r4, [r3, #0]
 800b27a:	4605      	mov	r5, r0
 800b27c:	460e      	mov	r6, r1
 800b27e:	b124      	cbz	r4, 800b28a <viprintf+0x16>
 800b280:	69a3      	ldr	r3, [r4, #24]
 800b282:	b913      	cbnz	r3, 800b28a <viprintf+0x16>
 800b284:	4620      	mov	r0, r4
 800b286:	f000 f9e5 	bl	800b654 <__sinit>
 800b28a:	4633      	mov	r3, r6
 800b28c:	462a      	mov	r2, r5
 800b28e:	4620      	mov	r0, r4
 800b290:	68a1      	ldr	r1, [r4, #8]
 800b292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b296:	f000 bbb7 	b.w	800ba08 <_vfiprintf_r>
 800b29a:	bf00      	nop
 800b29c:	20000030 	.word	0x20000030

0800b2a0 <__swbuf_r>:
 800b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a2:	460e      	mov	r6, r1
 800b2a4:	4614      	mov	r4, r2
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	b118      	cbz	r0, 800b2b2 <__swbuf_r+0x12>
 800b2aa:	6983      	ldr	r3, [r0, #24]
 800b2ac:	b90b      	cbnz	r3, 800b2b2 <__swbuf_r+0x12>
 800b2ae:	f000 f9d1 	bl	800b654 <__sinit>
 800b2b2:	4b21      	ldr	r3, [pc, #132]	; (800b338 <__swbuf_r+0x98>)
 800b2b4:	429c      	cmp	r4, r3
 800b2b6:	d12b      	bne.n	800b310 <__swbuf_r+0x70>
 800b2b8:	686c      	ldr	r4, [r5, #4]
 800b2ba:	69a3      	ldr	r3, [r4, #24]
 800b2bc:	60a3      	str	r3, [r4, #8]
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	071a      	lsls	r2, r3, #28
 800b2c2:	d52f      	bpl.n	800b324 <__swbuf_r+0x84>
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	b36b      	cbz	r3, 800b324 <__swbuf_r+0x84>
 800b2c8:	6923      	ldr	r3, [r4, #16]
 800b2ca:	6820      	ldr	r0, [r4, #0]
 800b2cc:	b2f6      	uxtb	r6, r6
 800b2ce:	1ac0      	subs	r0, r0, r3
 800b2d0:	6963      	ldr	r3, [r4, #20]
 800b2d2:	4637      	mov	r7, r6
 800b2d4:	4283      	cmp	r3, r0
 800b2d6:	dc04      	bgt.n	800b2e2 <__swbuf_r+0x42>
 800b2d8:	4621      	mov	r1, r4
 800b2da:	4628      	mov	r0, r5
 800b2dc:	f000 f926 	bl	800b52c <_fflush_r>
 800b2e0:	bb30      	cbnz	r0, 800b330 <__swbuf_r+0x90>
 800b2e2:	68a3      	ldr	r3, [r4, #8]
 800b2e4:	3001      	adds	r0, #1
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	60a3      	str	r3, [r4, #8]
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	1c5a      	adds	r2, r3, #1
 800b2ee:	6022      	str	r2, [r4, #0]
 800b2f0:	701e      	strb	r6, [r3, #0]
 800b2f2:	6963      	ldr	r3, [r4, #20]
 800b2f4:	4283      	cmp	r3, r0
 800b2f6:	d004      	beq.n	800b302 <__swbuf_r+0x62>
 800b2f8:	89a3      	ldrh	r3, [r4, #12]
 800b2fa:	07db      	lsls	r3, r3, #31
 800b2fc:	d506      	bpl.n	800b30c <__swbuf_r+0x6c>
 800b2fe:	2e0a      	cmp	r6, #10
 800b300:	d104      	bne.n	800b30c <__swbuf_r+0x6c>
 800b302:	4621      	mov	r1, r4
 800b304:	4628      	mov	r0, r5
 800b306:	f000 f911 	bl	800b52c <_fflush_r>
 800b30a:	b988      	cbnz	r0, 800b330 <__swbuf_r+0x90>
 800b30c:	4638      	mov	r0, r7
 800b30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b310:	4b0a      	ldr	r3, [pc, #40]	; (800b33c <__swbuf_r+0x9c>)
 800b312:	429c      	cmp	r4, r3
 800b314:	d101      	bne.n	800b31a <__swbuf_r+0x7a>
 800b316:	68ac      	ldr	r4, [r5, #8]
 800b318:	e7cf      	b.n	800b2ba <__swbuf_r+0x1a>
 800b31a:	4b09      	ldr	r3, [pc, #36]	; (800b340 <__swbuf_r+0xa0>)
 800b31c:	429c      	cmp	r4, r3
 800b31e:	bf08      	it	eq
 800b320:	68ec      	ldreq	r4, [r5, #12]
 800b322:	e7ca      	b.n	800b2ba <__swbuf_r+0x1a>
 800b324:	4621      	mov	r1, r4
 800b326:	4628      	mov	r0, r5
 800b328:	f000 f80c 	bl	800b344 <__swsetup_r>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d0cb      	beq.n	800b2c8 <__swbuf_r+0x28>
 800b330:	f04f 37ff 	mov.w	r7, #4294967295
 800b334:	e7ea      	b.n	800b30c <__swbuf_r+0x6c>
 800b336:	bf00      	nop
 800b338:	0800d780 	.word	0x0800d780
 800b33c:	0800d7a0 	.word	0x0800d7a0
 800b340:	0800d760 	.word	0x0800d760

0800b344 <__swsetup_r>:
 800b344:	4b32      	ldr	r3, [pc, #200]	; (800b410 <__swsetup_r+0xcc>)
 800b346:	b570      	push	{r4, r5, r6, lr}
 800b348:	681d      	ldr	r5, [r3, #0]
 800b34a:	4606      	mov	r6, r0
 800b34c:	460c      	mov	r4, r1
 800b34e:	b125      	cbz	r5, 800b35a <__swsetup_r+0x16>
 800b350:	69ab      	ldr	r3, [r5, #24]
 800b352:	b913      	cbnz	r3, 800b35a <__swsetup_r+0x16>
 800b354:	4628      	mov	r0, r5
 800b356:	f000 f97d 	bl	800b654 <__sinit>
 800b35a:	4b2e      	ldr	r3, [pc, #184]	; (800b414 <__swsetup_r+0xd0>)
 800b35c:	429c      	cmp	r4, r3
 800b35e:	d10f      	bne.n	800b380 <__swsetup_r+0x3c>
 800b360:	686c      	ldr	r4, [r5, #4]
 800b362:	89a3      	ldrh	r3, [r4, #12]
 800b364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b368:	0719      	lsls	r1, r3, #28
 800b36a:	d42c      	bmi.n	800b3c6 <__swsetup_r+0x82>
 800b36c:	06dd      	lsls	r5, r3, #27
 800b36e:	d411      	bmi.n	800b394 <__swsetup_r+0x50>
 800b370:	2309      	movs	r3, #9
 800b372:	6033      	str	r3, [r6, #0]
 800b374:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b378:	f04f 30ff 	mov.w	r0, #4294967295
 800b37c:	81a3      	strh	r3, [r4, #12]
 800b37e:	e03e      	b.n	800b3fe <__swsetup_r+0xba>
 800b380:	4b25      	ldr	r3, [pc, #148]	; (800b418 <__swsetup_r+0xd4>)
 800b382:	429c      	cmp	r4, r3
 800b384:	d101      	bne.n	800b38a <__swsetup_r+0x46>
 800b386:	68ac      	ldr	r4, [r5, #8]
 800b388:	e7eb      	b.n	800b362 <__swsetup_r+0x1e>
 800b38a:	4b24      	ldr	r3, [pc, #144]	; (800b41c <__swsetup_r+0xd8>)
 800b38c:	429c      	cmp	r4, r3
 800b38e:	bf08      	it	eq
 800b390:	68ec      	ldreq	r4, [r5, #12]
 800b392:	e7e6      	b.n	800b362 <__swsetup_r+0x1e>
 800b394:	0758      	lsls	r0, r3, #29
 800b396:	d512      	bpl.n	800b3be <__swsetup_r+0x7a>
 800b398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b39a:	b141      	cbz	r1, 800b3ae <__swsetup_r+0x6a>
 800b39c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3a0:	4299      	cmp	r1, r3
 800b3a2:	d002      	beq.n	800b3aa <__swsetup_r+0x66>
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f000 fa61 	bl	800b86c <_free_r>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	6363      	str	r3, [r4, #52]	; 0x34
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3b4:	81a3      	strh	r3, [r4, #12]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	6063      	str	r3, [r4, #4]
 800b3ba:	6923      	ldr	r3, [r4, #16]
 800b3bc:	6023      	str	r3, [r4, #0]
 800b3be:	89a3      	ldrh	r3, [r4, #12]
 800b3c0:	f043 0308 	orr.w	r3, r3, #8
 800b3c4:	81a3      	strh	r3, [r4, #12]
 800b3c6:	6923      	ldr	r3, [r4, #16]
 800b3c8:	b94b      	cbnz	r3, 800b3de <__swsetup_r+0x9a>
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3d4:	d003      	beq.n	800b3de <__swsetup_r+0x9a>
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f000 f9ff 	bl	800b7dc <__smakebuf_r>
 800b3de:	89a0      	ldrh	r0, [r4, #12]
 800b3e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3e4:	f010 0301 	ands.w	r3, r0, #1
 800b3e8:	d00a      	beq.n	800b400 <__swsetup_r+0xbc>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60a3      	str	r3, [r4, #8]
 800b3ee:	6963      	ldr	r3, [r4, #20]
 800b3f0:	425b      	negs	r3, r3
 800b3f2:	61a3      	str	r3, [r4, #24]
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	b943      	cbnz	r3, 800b40a <__swsetup_r+0xc6>
 800b3f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3fc:	d1ba      	bne.n	800b374 <__swsetup_r+0x30>
 800b3fe:	bd70      	pop	{r4, r5, r6, pc}
 800b400:	0781      	lsls	r1, r0, #30
 800b402:	bf58      	it	pl
 800b404:	6963      	ldrpl	r3, [r4, #20]
 800b406:	60a3      	str	r3, [r4, #8]
 800b408:	e7f4      	b.n	800b3f4 <__swsetup_r+0xb0>
 800b40a:	2000      	movs	r0, #0
 800b40c:	e7f7      	b.n	800b3fe <__swsetup_r+0xba>
 800b40e:	bf00      	nop
 800b410:	20000030 	.word	0x20000030
 800b414:	0800d780 	.word	0x0800d780
 800b418:	0800d7a0 	.word	0x0800d7a0
 800b41c:	0800d760 	.word	0x0800d760

0800b420 <__sflush_r>:
 800b420:	898a      	ldrh	r2, [r1, #12]
 800b422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b426:	4605      	mov	r5, r0
 800b428:	0710      	lsls	r0, r2, #28
 800b42a:	460c      	mov	r4, r1
 800b42c:	d458      	bmi.n	800b4e0 <__sflush_r+0xc0>
 800b42e:	684b      	ldr	r3, [r1, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	dc05      	bgt.n	800b440 <__sflush_r+0x20>
 800b434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b436:	2b00      	cmp	r3, #0
 800b438:	dc02      	bgt.n	800b440 <__sflush_r+0x20>
 800b43a:	2000      	movs	r0, #0
 800b43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b442:	2e00      	cmp	r6, #0
 800b444:	d0f9      	beq.n	800b43a <__sflush_r+0x1a>
 800b446:	2300      	movs	r3, #0
 800b448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b44c:	682f      	ldr	r7, [r5, #0]
 800b44e:	602b      	str	r3, [r5, #0]
 800b450:	d032      	beq.n	800b4b8 <__sflush_r+0x98>
 800b452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	075a      	lsls	r2, r3, #29
 800b458:	d505      	bpl.n	800b466 <__sflush_r+0x46>
 800b45a:	6863      	ldr	r3, [r4, #4]
 800b45c:	1ac0      	subs	r0, r0, r3
 800b45e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b460:	b10b      	cbz	r3, 800b466 <__sflush_r+0x46>
 800b462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b464:	1ac0      	subs	r0, r0, r3
 800b466:	2300      	movs	r3, #0
 800b468:	4602      	mov	r2, r0
 800b46a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b46c:	4628      	mov	r0, r5
 800b46e:	6a21      	ldr	r1, [r4, #32]
 800b470:	47b0      	blx	r6
 800b472:	1c43      	adds	r3, r0, #1
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	d106      	bne.n	800b486 <__sflush_r+0x66>
 800b478:	6829      	ldr	r1, [r5, #0]
 800b47a:	291d      	cmp	r1, #29
 800b47c:	d82c      	bhi.n	800b4d8 <__sflush_r+0xb8>
 800b47e:	4a2a      	ldr	r2, [pc, #168]	; (800b528 <__sflush_r+0x108>)
 800b480:	40ca      	lsrs	r2, r1
 800b482:	07d6      	lsls	r6, r2, #31
 800b484:	d528      	bpl.n	800b4d8 <__sflush_r+0xb8>
 800b486:	2200      	movs	r2, #0
 800b488:	6062      	str	r2, [r4, #4]
 800b48a:	6922      	ldr	r2, [r4, #16]
 800b48c:	04d9      	lsls	r1, r3, #19
 800b48e:	6022      	str	r2, [r4, #0]
 800b490:	d504      	bpl.n	800b49c <__sflush_r+0x7c>
 800b492:	1c42      	adds	r2, r0, #1
 800b494:	d101      	bne.n	800b49a <__sflush_r+0x7a>
 800b496:	682b      	ldr	r3, [r5, #0]
 800b498:	b903      	cbnz	r3, 800b49c <__sflush_r+0x7c>
 800b49a:	6560      	str	r0, [r4, #84]	; 0x54
 800b49c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b49e:	602f      	str	r7, [r5, #0]
 800b4a0:	2900      	cmp	r1, #0
 800b4a2:	d0ca      	beq.n	800b43a <__sflush_r+0x1a>
 800b4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4a8:	4299      	cmp	r1, r3
 800b4aa:	d002      	beq.n	800b4b2 <__sflush_r+0x92>
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	f000 f9dd 	bl	800b86c <_free_r>
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	6360      	str	r0, [r4, #52]	; 0x34
 800b4b6:	e7c1      	b.n	800b43c <__sflush_r+0x1c>
 800b4b8:	6a21      	ldr	r1, [r4, #32]
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	4628      	mov	r0, r5
 800b4be:	47b0      	blx	r6
 800b4c0:	1c41      	adds	r1, r0, #1
 800b4c2:	d1c7      	bne.n	800b454 <__sflush_r+0x34>
 800b4c4:	682b      	ldr	r3, [r5, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d0c4      	beq.n	800b454 <__sflush_r+0x34>
 800b4ca:	2b1d      	cmp	r3, #29
 800b4cc:	d001      	beq.n	800b4d2 <__sflush_r+0xb2>
 800b4ce:	2b16      	cmp	r3, #22
 800b4d0:	d101      	bne.n	800b4d6 <__sflush_r+0xb6>
 800b4d2:	602f      	str	r7, [r5, #0]
 800b4d4:	e7b1      	b.n	800b43a <__sflush_r+0x1a>
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4dc:	81a3      	strh	r3, [r4, #12]
 800b4de:	e7ad      	b.n	800b43c <__sflush_r+0x1c>
 800b4e0:	690f      	ldr	r7, [r1, #16]
 800b4e2:	2f00      	cmp	r7, #0
 800b4e4:	d0a9      	beq.n	800b43a <__sflush_r+0x1a>
 800b4e6:	0793      	lsls	r3, r2, #30
 800b4e8:	bf18      	it	ne
 800b4ea:	2300      	movne	r3, #0
 800b4ec:	680e      	ldr	r6, [r1, #0]
 800b4ee:	bf08      	it	eq
 800b4f0:	694b      	ldreq	r3, [r1, #20]
 800b4f2:	eba6 0807 	sub.w	r8, r6, r7
 800b4f6:	600f      	str	r7, [r1, #0]
 800b4f8:	608b      	str	r3, [r1, #8]
 800b4fa:	f1b8 0f00 	cmp.w	r8, #0
 800b4fe:	dd9c      	ble.n	800b43a <__sflush_r+0x1a>
 800b500:	4643      	mov	r3, r8
 800b502:	463a      	mov	r2, r7
 800b504:	4628      	mov	r0, r5
 800b506:	6a21      	ldr	r1, [r4, #32]
 800b508:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b50a:	47b0      	blx	r6
 800b50c:	2800      	cmp	r0, #0
 800b50e:	dc06      	bgt.n	800b51e <__sflush_r+0xfe>
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	f04f 30ff 	mov.w	r0, #4294967295
 800b516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b51a:	81a3      	strh	r3, [r4, #12]
 800b51c:	e78e      	b.n	800b43c <__sflush_r+0x1c>
 800b51e:	4407      	add	r7, r0
 800b520:	eba8 0800 	sub.w	r8, r8, r0
 800b524:	e7e9      	b.n	800b4fa <__sflush_r+0xda>
 800b526:	bf00      	nop
 800b528:	20400001 	.word	0x20400001

0800b52c <_fflush_r>:
 800b52c:	b538      	push	{r3, r4, r5, lr}
 800b52e:	690b      	ldr	r3, [r1, #16]
 800b530:	4605      	mov	r5, r0
 800b532:	460c      	mov	r4, r1
 800b534:	b913      	cbnz	r3, 800b53c <_fflush_r+0x10>
 800b536:	2500      	movs	r5, #0
 800b538:	4628      	mov	r0, r5
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	b118      	cbz	r0, 800b546 <_fflush_r+0x1a>
 800b53e:	6983      	ldr	r3, [r0, #24]
 800b540:	b90b      	cbnz	r3, 800b546 <_fflush_r+0x1a>
 800b542:	f000 f887 	bl	800b654 <__sinit>
 800b546:	4b14      	ldr	r3, [pc, #80]	; (800b598 <_fflush_r+0x6c>)
 800b548:	429c      	cmp	r4, r3
 800b54a:	d11b      	bne.n	800b584 <_fflush_r+0x58>
 800b54c:	686c      	ldr	r4, [r5, #4]
 800b54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0ef      	beq.n	800b536 <_fflush_r+0xa>
 800b556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b558:	07d0      	lsls	r0, r2, #31
 800b55a:	d404      	bmi.n	800b566 <_fflush_r+0x3a>
 800b55c:	0599      	lsls	r1, r3, #22
 800b55e:	d402      	bmi.n	800b566 <_fflush_r+0x3a>
 800b560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b562:	f000 f915 	bl	800b790 <__retarget_lock_acquire_recursive>
 800b566:	4628      	mov	r0, r5
 800b568:	4621      	mov	r1, r4
 800b56a:	f7ff ff59 	bl	800b420 <__sflush_r>
 800b56e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b570:	4605      	mov	r5, r0
 800b572:	07da      	lsls	r2, r3, #31
 800b574:	d4e0      	bmi.n	800b538 <_fflush_r+0xc>
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	059b      	lsls	r3, r3, #22
 800b57a:	d4dd      	bmi.n	800b538 <_fflush_r+0xc>
 800b57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b57e:	f000 f908 	bl	800b792 <__retarget_lock_release_recursive>
 800b582:	e7d9      	b.n	800b538 <_fflush_r+0xc>
 800b584:	4b05      	ldr	r3, [pc, #20]	; (800b59c <_fflush_r+0x70>)
 800b586:	429c      	cmp	r4, r3
 800b588:	d101      	bne.n	800b58e <_fflush_r+0x62>
 800b58a:	68ac      	ldr	r4, [r5, #8]
 800b58c:	e7df      	b.n	800b54e <_fflush_r+0x22>
 800b58e:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <_fflush_r+0x74>)
 800b590:	429c      	cmp	r4, r3
 800b592:	bf08      	it	eq
 800b594:	68ec      	ldreq	r4, [r5, #12]
 800b596:	e7da      	b.n	800b54e <_fflush_r+0x22>
 800b598:	0800d780 	.word	0x0800d780
 800b59c:	0800d7a0 	.word	0x0800d7a0
 800b5a0:	0800d760 	.word	0x0800d760

0800b5a4 <std>:
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	b510      	push	{r4, lr}
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	e9c0 3300 	strd	r3, r3, [r0]
 800b5ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5b2:	6083      	str	r3, [r0, #8]
 800b5b4:	8181      	strh	r1, [r0, #12]
 800b5b6:	6643      	str	r3, [r0, #100]	; 0x64
 800b5b8:	81c2      	strh	r2, [r0, #14]
 800b5ba:	6183      	str	r3, [r0, #24]
 800b5bc:	4619      	mov	r1, r3
 800b5be:	2208      	movs	r2, #8
 800b5c0:	305c      	adds	r0, #92	; 0x5c
 800b5c2:	f7ff fd13 	bl	800afec <memset>
 800b5c6:	4b05      	ldr	r3, [pc, #20]	; (800b5dc <std+0x38>)
 800b5c8:	6224      	str	r4, [r4, #32]
 800b5ca:	6263      	str	r3, [r4, #36]	; 0x24
 800b5cc:	4b04      	ldr	r3, [pc, #16]	; (800b5e0 <std+0x3c>)
 800b5ce:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5d0:	4b04      	ldr	r3, [pc, #16]	; (800b5e4 <std+0x40>)
 800b5d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5d4:	4b04      	ldr	r3, [pc, #16]	; (800b5e8 <std+0x44>)
 800b5d6:	6323      	str	r3, [r4, #48]	; 0x30
 800b5d8:	bd10      	pop	{r4, pc}
 800b5da:	bf00      	nop
 800b5dc:	0800bfb5 	.word	0x0800bfb5
 800b5e0:	0800bfd7 	.word	0x0800bfd7
 800b5e4:	0800c00f 	.word	0x0800c00f
 800b5e8:	0800c033 	.word	0x0800c033

0800b5ec <_cleanup_r>:
 800b5ec:	4901      	ldr	r1, [pc, #4]	; (800b5f4 <_cleanup_r+0x8>)
 800b5ee:	f000 b8af 	b.w	800b750 <_fwalk_reent>
 800b5f2:	bf00      	nop
 800b5f4:	0800b52d 	.word	0x0800b52d

0800b5f8 <__sfmoreglue>:
 800b5f8:	b570      	push	{r4, r5, r6, lr}
 800b5fa:	2568      	movs	r5, #104	; 0x68
 800b5fc:	1e4a      	subs	r2, r1, #1
 800b5fe:	4355      	muls	r5, r2
 800b600:	460e      	mov	r6, r1
 800b602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b606:	f000 f97d 	bl	800b904 <_malloc_r>
 800b60a:	4604      	mov	r4, r0
 800b60c:	b140      	cbz	r0, 800b620 <__sfmoreglue+0x28>
 800b60e:	2100      	movs	r1, #0
 800b610:	e9c0 1600 	strd	r1, r6, [r0]
 800b614:	300c      	adds	r0, #12
 800b616:	60a0      	str	r0, [r4, #8]
 800b618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b61c:	f7ff fce6 	bl	800afec <memset>
 800b620:	4620      	mov	r0, r4
 800b622:	bd70      	pop	{r4, r5, r6, pc}

0800b624 <__sfp_lock_acquire>:
 800b624:	4801      	ldr	r0, [pc, #4]	; (800b62c <__sfp_lock_acquire+0x8>)
 800b626:	f000 b8b3 	b.w	800b790 <__retarget_lock_acquire_recursive>
 800b62a:	bf00      	nop
 800b62c:	20003b98 	.word	0x20003b98

0800b630 <__sfp_lock_release>:
 800b630:	4801      	ldr	r0, [pc, #4]	; (800b638 <__sfp_lock_release+0x8>)
 800b632:	f000 b8ae 	b.w	800b792 <__retarget_lock_release_recursive>
 800b636:	bf00      	nop
 800b638:	20003b98 	.word	0x20003b98

0800b63c <__sinit_lock_acquire>:
 800b63c:	4801      	ldr	r0, [pc, #4]	; (800b644 <__sinit_lock_acquire+0x8>)
 800b63e:	f000 b8a7 	b.w	800b790 <__retarget_lock_acquire_recursive>
 800b642:	bf00      	nop
 800b644:	20003b93 	.word	0x20003b93

0800b648 <__sinit_lock_release>:
 800b648:	4801      	ldr	r0, [pc, #4]	; (800b650 <__sinit_lock_release+0x8>)
 800b64a:	f000 b8a2 	b.w	800b792 <__retarget_lock_release_recursive>
 800b64e:	bf00      	nop
 800b650:	20003b93 	.word	0x20003b93

0800b654 <__sinit>:
 800b654:	b510      	push	{r4, lr}
 800b656:	4604      	mov	r4, r0
 800b658:	f7ff fff0 	bl	800b63c <__sinit_lock_acquire>
 800b65c:	69a3      	ldr	r3, [r4, #24]
 800b65e:	b11b      	cbz	r3, 800b668 <__sinit+0x14>
 800b660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b664:	f7ff bff0 	b.w	800b648 <__sinit_lock_release>
 800b668:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b66c:	6523      	str	r3, [r4, #80]	; 0x50
 800b66e:	4b13      	ldr	r3, [pc, #76]	; (800b6bc <__sinit+0x68>)
 800b670:	4a13      	ldr	r2, [pc, #76]	; (800b6c0 <__sinit+0x6c>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	62a2      	str	r2, [r4, #40]	; 0x28
 800b676:	42a3      	cmp	r3, r4
 800b678:	bf08      	it	eq
 800b67a:	2301      	moveq	r3, #1
 800b67c:	4620      	mov	r0, r4
 800b67e:	bf08      	it	eq
 800b680:	61a3      	streq	r3, [r4, #24]
 800b682:	f000 f81f 	bl	800b6c4 <__sfp>
 800b686:	6060      	str	r0, [r4, #4]
 800b688:	4620      	mov	r0, r4
 800b68a:	f000 f81b 	bl	800b6c4 <__sfp>
 800b68e:	60a0      	str	r0, [r4, #8]
 800b690:	4620      	mov	r0, r4
 800b692:	f000 f817 	bl	800b6c4 <__sfp>
 800b696:	2200      	movs	r2, #0
 800b698:	2104      	movs	r1, #4
 800b69a:	60e0      	str	r0, [r4, #12]
 800b69c:	6860      	ldr	r0, [r4, #4]
 800b69e:	f7ff ff81 	bl	800b5a4 <std>
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	2109      	movs	r1, #9
 800b6a6:	68a0      	ldr	r0, [r4, #8]
 800b6a8:	f7ff ff7c 	bl	800b5a4 <std>
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	2112      	movs	r1, #18
 800b6b0:	68e0      	ldr	r0, [r4, #12]
 800b6b2:	f7ff ff77 	bl	800b5a4 <std>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	61a3      	str	r3, [r4, #24]
 800b6ba:	e7d1      	b.n	800b660 <__sinit+0xc>
 800b6bc:	0800d75c 	.word	0x0800d75c
 800b6c0:	0800b5ed 	.word	0x0800b5ed

0800b6c4 <__sfp>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	4607      	mov	r7, r0
 800b6c8:	f7ff ffac 	bl	800b624 <__sfp_lock_acquire>
 800b6cc:	4b1e      	ldr	r3, [pc, #120]	; (800b748 <__sfp+0x84>)
 800b6ce:	681e      	ldr	r6, [r3, #0]
 800b6d0:	69b3      	ldr	r3, [r6, #24]
 800b6d2:	b913      	cbnz	r3, 800b6da <__sfp+0x16>
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	f7ff ffbd 	bl	800b654 <__sinit>
 800b6da:	3648      	adds	r6, #72	; 0x48
 800b6dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	d503      	bpl.n	800b6ec <__sfp+0x28>
 800b6e4:	6833      	ldr	r3, [r6, #0]
 800b6e6:	b30b      	cbz	r3, 800b72c <__sfp+0x68>
 800b6e8:	6836      	ldr	r6, [r6, #0]
 800b6ea:	e7f7      	b.n	800b6dc <__sfp+0x18>
 800b6ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6f0:	b9d5      	cbnz	r5, 800b728 <__sfp+0x64>
 800b6f2:	4b16      	ldr	r3, [pc, #88]	; (800b74c <__sfp+0x88>)
 800b6f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6f8:	60e3      	str	r3, [r4, #12]
 800b6fa:	6665      	str	r5, [r4, #100]	; 0x64
 800b6fc:	f000 f847 	bl	800b78e <__retarget_lock_init_recursive>
 800b700:	f7ff ff96 	bl	800b630 <__sfp_lock_release>
 800b704:	2208      	movs	r2, #8
 800b706:	4629      	mov	r1, r5
 800b708:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b70c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b710:	6025      	str	r5, [r4, #0]
 800b712:	61a5      	str	r5, [r4, #24]
 800b714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b718:	f7ff fc68 	bl	800afec <memset>
 800b71c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b724:	4620      	mov	r0, r4
 800b726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b728:	3468      	adds	r4, #104	; 0x68
 800b72a:	e7d9      	b.n	800b6e0 <__sfp+0x1c>
 800b72c:	2104      	movs	r1, #4
 800b72e:	4638      	mov	r0, r7
 800b730:	f7ff ff62 	bl	800b5f8 <__sfmoreglue>
 800b734:	4604      	mov	r4, r0
 800b736:	6030      	str	r0, [r6, #0]
 800b738:	2800      	cmp	r0, #0
 800b73a:	d1d5      	bne.n	800b6e8 <__sfp+0x24>
 800b73c:	f7ff ff78 	bl	800b630 <__sfp_lock_release>
 800b740:	230c      	movs	r3, #12
 800b742:	603b      	str	r3, [r7, #0]
 800b744:	e7ee      	b.n	800b724 <__sfp+0x60>
 800b746:	bf00      	nop
 800b748:	0800d75c 	.word	0x0800d75c
 800b74c:	ffff0001 	.word	0xffff0001

0800b750 <_fwalk_reent>:
 800b750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b754:	4606      	mov	r6, r0
 800b756:	4688      	mov	r8, r1
 800b758:	2700      	movs	r7, #0
 800b75a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b75e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b762:	f1b9 0901 	subs.w	r9, r9, #1
 800b766:	d505      	bpl.n	800b774 <_fwalk_reent+0x24>
 800b768:	6824      	ldr	r4, [r4, #0]
 800b76a:	2c00      	cmp	r4, #0
 800b76c:	d1f7      	bne.n	800b75e <_fwalk_reent+0xe>
 800b76e:	4638      	mov	r0, r7
 800b770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b774:	89ab      	ldrh	r3, [r5, #12]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d907      	bls.n	800b78a <_fwalk_reent+0x3a>
 800b77a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b77e:	3301      	adds	r3, #1
 800b780:	d003      	beq.n	800b78a <_fwalk_reent+0x3a>
 800b782:	4629      	mov	r1, r5
 800b784:	4630      	mov	r0, r6
 800b786:	47c0      	blx	r8
 800b788:	4307      	orrs	r7, r0
 800b78a:	3568      	adds	r5, #104	; 0x68
 800b78c:	e7e9      	b.n	800b762 <_fwalk_reent+0x12>

0800b78e <__retarget_lock_init_recursive>:
 800b78e:	4770      	bx	lr

0800b790 <__retarget_lock_acquire_recursive>:
 800b790:	4770      	bx	lr

0800b792 <__retarget_lock_release_recursive>:
 800b792:	4770      	bx	lr

0800b794 <__swhatbuf_r>:
 800b794:	b570      	push	{r4, r5, r6, lr}
 800b796:	460e      	mov	r6, r1
 800b798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b79c:	4614      	mov	r4, r2
 800b79e:	2900      	cmp	r1, #0
 800b7a0:	461d      	mov	r5, r3
 800b7a2:	b096      	sub	sp, #88	; 0x58
 800b7a4:	da07      	bge.n	800b7b6 <__swhatbuf_r+0x22>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	602b      	str	r3, [r5, #0]
 800b7aa:	89b3      	ldrh	r3, [r6, #12]
 800b7ac:	061a      	lsls	r2, r3, #24
 800b7ae:	d410      	bmi.n	800b7d2 <__swhatbuf_r+0x3e>
 800b7b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7b4:	e00e      	b.n	800b7d4 <__swhatbuf_r+0x40>
 800b7b6:	466a      	mov	r2, sp
 800b7b8:	f000 fc62 	bl	800c080 <_fstat_r>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	dbf2      	blt.n	800b7a6 <__swhatbuf_r+0x12>
 800b7c0:	9a01      	ldr	r2, [sp, #4]
 800b7c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7ca:	425a      	negs	r2, r3
 800b7cc:	415a      	adcs	r2, r3
 800b7ce:	602a      	str	r2, [r5, #0]
 800b7d0:	e7ee      	b.n	800b7b0 <__swhatbuf_r+0x1c>
 800b7d2:	2340      	movs	r3, #64	; 0x40
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	6023      	str	r3, [r4, #0]
 800b7d8:	b016      	add	sp, #88	; 0x58
 800b7da:	bd70      	pop	{r4, r5, r6, pc}

0800b7dc <__smakebuf_r>:
 800b7dc:	898b      	ldrh	r3, [r1, #12]
 800b7de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7e0:	079d      	lsls	r5, r3, #30
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	d507      	bpl.n	800b7f8 <__smakebuf_r+0x1c>
 800b7e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	6123      	str	r3, [r4, #16]
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	6163      	str	r3, [r4, #20]
 800b7f4:	b002      	add	sp, #8
 800b7f6:	bd70      	pop	{r4, r5, r6, pc}
 800b7f8:	466a      	mov	r2, sp
 800b7fa:	ab01      	add	r3, sp, #4
 800b7fc:	f7ff ffca 	bl	800b794 <__swhatbuf_r>
 800b800:	9900      	ldr	r1, [sp, #0]
 800b802:	4605      	mov	r5, r0
 800b804:	4630      	mov	r0, r6
 800b806:	f000 f87d 	bl	800b904 <_malloc_r>
 800b80a:	b948      	cbnz	r0, 800b820 <__smakebuf_r+0x44>
 800b80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b810:	059a      	lsls	r2, r3, #22
 800b812:	d4ef      	bmi.n	800b7f4 <__smakebuf_r+0x18>
 800b814:	f023 0303 	bic.w	r3, r3, #3
 800b818:	f043 0302 	orr.w	r3, r3, #2
 800b81c:	81a3      	strh	r3, [r4, #12]
 800b81e:	e7e3      	b.n	800b7e8 <__smakebuf_r+0xc>
 800b820:	4b0d      	ldr	r3, [pc, #52]	; (800b858 <__smakebuf_r+0x7c>)
 800b822:	62b3      	str	r3, [r6, #40]	; 0x28
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	6020      	str	r0, [r4, #0]
 800b828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b82c:	81a3      	strh	r3, [r4, #12]
 800b82e:	9b00      	ldr	r3, [sp, #0]
 800b830:	6120      	str	r0, [r4, #16]
 800b832:	6163      	str	r3, [r4, #20]
 800b834:	9b01      	ldr	r3, [sp, #4]
 800b836:	b15b      	cbz	r3, 800b850 <__smakebuf_r+0x74>
 800b838:	4630      	mov	r0, r6
 800b83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b83e:	f000 fc31 	bl	800c0a4 <_isatty_r>
 800b842:	b128      	cbz	r0, 800b850 <__smakebuf_r+0x74>
 800b844:	89a3      	ldrh	r3, [r4, #12]
 800b846:	f023 0303 	bic.w	r3, r3, #3
 800b84a:	f043 0301 	orr.w	r3, r3, #1
 800b84e:	81a3      	strh	r3, [r4, #12]
 800b850:	89a0      	ldrh	r0, [r4, #12]
 800b852:	4305      	orrs	r5, r0
 800b854:	81a5      	strh	r5, [r4, #12]
 800b856:	e7cd      	b.n	800b7f4 <__smakebuf_r+0x18>
 800b858:	0800b5ed 	.word	0x0800b5ed

0800b85c <malloc>:
 800b85c:	4b02      	ldr	r3, [pc, #8]	; (800b868 <malloc+0xc>)
 800b85e:	4601      	mov	r1, r0
 800b860:	6818      	ldr	r0, [r3, #0]
 800b862:	f000 b84f 	b.w	800b904 <_malloc_r>
 800b866:	bf00      	nop
 800b868:	20000030 	.word	0x20000030

0800b86c <_free_r>:
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	4605      	mov	r5, r0
 800b870:	2900      	cmp	r1, #0
 800b872:	d043      	beq.n	800b8fc <_free_r+0x90>
 800b874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b878:	1f0c      	subs	r4, r1, #4
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	bfb8      	it	lt
 800b87e:	18e4      	addlt	r4, r4, r3
 800b880:	f000 fc40 	bl	800c104 <__malloc_lock>
 800b884:	4a1e      	ldr	r2, [pc, #120]	; (800b900 <_free_r+0x94>)
 800b886:	6813      	ldr	r3, [r2, #0]
 800b888:	4610      	mov	r0, r2
 800b88a:	b933      	cbnz	r3, 800b89a <_free_r+0x2e>
 800b88c:	6063      	str	r3, [r4, #4]
 800b88e:	6014      	str	r4, [r2, #0]
 800b890:	4628      	mov	r0, r5
 800b892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b896:	f000 bc3b 	b.w	800c110 <__malloc_unlock>
 800b89a:	42a3      	cmp	r3, r4
 800b89c:	d90a      	bls.n	800b8b4 <_free_r+0x48>
 800b89e:	6821      	ldr	r1, [r4, #0]
 800b8a0:	1862      	adds	r2, r4, r1
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	bf01      	itttt	eq
 800b8a6:	681a      	ldreq	r2, [r3, #0]
 800b8a8:	685b      	ldreq	r3, [r3, #4]
 800b8aa:	1852      	addeq	r2, r2, r1
 800b8ac:	6022      	streq	r2, [r4, #0]
 800b8ae:	6063      	str	r3, [r4, #4]
 800b8b0:	6004      	str	r4, [r0, #0]
 800b8b2:	e7ed      	b.n	800b890 <_free_r+0x24>
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	b10b      	cbz	r3, 800b8be <_free_r+0x52>
 800b8ba:	42a3      	cmp	r3, r4
 800b8bc:	d9fa      	bls.n	800b8b4 <_free_r+0x48>
 800b8be:	6811      	ldr	r1, [r2, #0]
 800b8c0:	1850      	adds	r0, r2, r1
 800b8c2:	42a0      	cmp	r0, r4
 800b8c4:	d10b      	bne.n	800b8de <_free_r+0x72>
 800b8c6:	6820      	ldr	r0, [r4, #0]
 800b8c8:	4401      	add	r1, r0
 800b8ca:	1850      	adds	r0, r2, r1
 800b8cc:	4283      	cmp	r3, r0
 800b8ce:	6011      	str	r1, [r2, #0]
 800b8d0:	d1de      	bne.n	800b890 <_free_r+0x24>
 800b8d2:	6818      	ldr	r0, [r3, #0]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	4401      	add	r1, r0
 800b8d8:	6011      	str	r1, [r2, #0]
 800b8da:	6053      	str	r3, [r2, #4]
 800b8dc:	e7d8      	b.n	800b890 <_free_r+0x24>
 800b8de:	d902      	bls.n	800b8e6 <_free_r+0x7a>
 800b8e0:	230c      	movs	r3, #12
 800b8e2:	602b      	str	r3, [r5, #0]
 800b8e4:	e7d4      	b.n	800b890 <_free_r+0x24>
 800b8e6:	6820      	ldr	r0, [r4, #0]
 800b8e8:	1821      	adds	r1, r4, r0
 800b8ea:	428b      	cmp	r3, r1
 800b8ec:	bf01      	itttt	eq
 800b8ee:	6819      	ldreq	r1, [r3, #0]
 800b8f0:	685b      	ldreq	r3, [r3, #4]
 800b8f2:	1809      	addeq	r1, r1, r0
 800b8f4:	6021      	streq	r1, [r4, #0]
 800b8f6:	6063      	str	r3, [r4, #4]
 800b8f8:	6054      	str	r4, [r2, #4]
 800b8fa:	e7c9      	b.n	800b890 <_free_r+0x24>
 800b8fc:	bd38      	pop	{r3, r4, r5, pc}
 800b8fe:	bf00      	nop
 800b900:	200039e0 	.word	0x200039e0

0800b904 <_malloc_r>:
 800b904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b906:	1ccd      	adds	r5, r1, #3
 800b908:	f025 0503 	bic.w	r5, r5, #3
 800b90c:	3508      	adds	r5, #8
 800b90e:	2d0c      	cmp	r5, #12
 800b910:	bf38      	it	cc
 800b912:	250c      	movcc	r5, #12
 800b914:	2d00      	cmp	r5, #0
 800b916:	4606      	mov	r6, r0
 800b918:	db01      	blt.n	800b91e <_malloc_r+0x1a>
 800b91a:	42a9      	cmp	r1, r5
 800b91c:	d903      	bls.n	800b926 <_malloc_r+0x22>
 800b91e:	230c      	movs	r3, #12
 800b920:	6033      	str	r3, [r6, #0]
 800b922:	2000      	movs	r0, #0
 800b924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b926:	f000 fbed 	bl	800c104 <__malloc_lock>
 800b92a:	4921      	ldr	r1, [pc, #132]	; (800b9b0 <_malloc_r+0xac>)
 800b92c:	680a      	ldr	r2, [r1, #0]
 800b92e:	4614      	mov	r4, r2
 800b930:	b99c      	cbnz	r4, 800b95a <_malloc_r+0x56>
 800b932:	4f20      	ldr	r7, [pc, #128]	; (800b9b4 <_malloc_r+0xb0>)
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	b923      	cbnz	r3, 800b942 <_malloc_r+0x3e>
 800b938:	4621      	mov	r1, r4
 800b93a:	4630      	mov	r0, r6
 800b93c:	f000 fb2a 	bl	800bf94 <_sbrk_r>
 800b940:	6038      	str	r0, [r7, #0]
 800b942:	4629      	mov	r1, r5
 800b944:	4630      	mov	r0, r6
 800b946:	f000 fb25 	bl	800bf94 <_sbrk_r>
 800b94a:	1c43      	adds	r3, r0, #1
 800b94c:	d123      	bne.n	800b996 <_malloc_r+0x92>
 800b94e:	230c      	movs	r3, #12
 800b950:	4630      	mov	r0, r6
 800b952:	6033      	str	r3, [r6, #0]
 800b954:	f000 fbdc 	bl	800c110 <__malloc_unlock>
 800b958:	e7e3      	b.n	800b922 <_malloc_r+0x1e>
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	1b5b      	subs	r3, r3, r5
 800b95e:	d417      	bmi.n	800b990 <_malloc_r+0x8c>
 800b960:	2b0b      	cmp	r3, #11
 800b962:	d903      	bls.n	800b96c <_malloc_r+0x68>
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	441c      	add	r4, r3
 800b968:	6025      	str	r5, [r4, #0]
 800b96a:	e004      	b.n	800b976 <_malloc_r+0x72>
 800b96c:	6863      	ldr	r3, [r4, #4]
 800b96e:	42a2      	cmp	r2, r4
 800b970:	bf0c      	ite	eq
 800b972:	600b      	streq	r3, [r1, #0]
 800b974:	6053      	strne	r3, [r2, #4]
 800b976:	4630      	mov	r0, r6
 800b978:	f000 fbca 	bl	800c110 <__malloc_unlock>
 800b97c:	f104 000b 	add.w	r0, r4, #11
 800b980:	1d23      	adds	r3, r4, #4
 800b982:	f020 0007 	bic.w	r0, r0, #7
 800b986:	1ac2      	subs	r2, r0, r3
 800b988:	d0cc      	beq.n	800b924 <_malloc_r+0x20>
 800b98a:	1a1b      	subs	r3, r3, r0
 800b98c:	50a3      	str	r3, [r4, r2]
 800b98e:	e7c9      	b.n	800b924 <_malloc_r+0x20>
 800b990:	4622      	mov	r2, r4
 800b992:	6864      	ldr	r4, [r4, #4]
 800b994:	e7cc      	b.n	800b930 <_malloc_r+0x2c>
 800b996:	1cc4      	adds	r4, r0, #3
 800b998:	f024 0403 	bic.w	r4, r4, #3
 800b99c:	42a0      	cmp	r0, r4
 800b99e:	d0e3      	beq.n	800b968 <_malloc_r+0x64>
 800b9a0:	1a21      	subs	r1, r4, r0
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f000 faf6 	bl	800bf94 <_sbrk_r>
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	d1dd      	bne.n	800b968 <_malloc_r+0x64>
 800b9ac:	e7cf      	b.n	800b94e <_malloc_r+0x4a>
 800b9ae:	bf00      	nop
 800b9b0:	200039e0 	.word	0x200039e0
 800b9b4:	200039e4 	.word	0x200039e4

0800b9b8 <__sfputc_r>:
 800b9b8:	6893      	ldr	r3, [r2, #8]
 800b9ba:	b410      	push	{r4}
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	6093      	str	r3, [r2, #8]
 800b9c2:	da07      	bge.n	800b9d4 <__sfputc_r+0x1c>
 800b9c4:	6994      	ldr	r4, [r2, #24]
 800b9c6:	42a3      	cmp	r3, r4
 800b9c8:	db01      	blt.n	800b9ce <__sfputc_r+0x16>
 800b9ca:	290a      	cmp	r1, #10
 800b9cc:	d102      	bne.n	800b9d4 <__sfputc_r+0x1c>
 800b9ce:	bc10      	pop	{r4}
 800b9d0:	f7ff bc66 	b.w	800b2a0 <__swbuf_r>
 800b9d4:	6813      	ldr	r3, [r2, #0]
 800b9d6:	1c58      	adds	r0, r3, #1
 800b9d8:	6010      	str	r0, [r2, #0]
 800b9da:	7019      	strb	r1, [r3, #0]
 800b9dc:	4608      	mov	r0, r1
 800b9de:	bc10      	pop	{r4}
 800b9e0:	4770      	bx	lr

0800b9e2 <__sfputs_r>:
 800b9e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	460f      	mov	r7, r1
 800b9e8:	4614      	mov	r4, r2
 800b9ea:	18d5      	adds	r5, r2, r3
 800b9ec:	42ac      	cmp	r4, r5
 800b9ee:	d101      	bne.n	800b9f4 <__sfputs_r+0x12>
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	e007      	b.n	800ba04 <__sfputs_r+0x22>
 800b9f4:	463a      	mov	r2, r7
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9fc:	f7ff ffdc 	bl	800b9b8 <__sfputc_r>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d1f3      	bne.n	800b9ec <__sfputs_r+0xa>
 800ba04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba08 <_vfiprintf_r>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	460d      	mov	r5, r1
 800ba0e:	4614      	mov	r4, r2
 800ba10:	4698      	mov	r8, r3
 800ba12:	4606      	mov	r6, r0
 800ba14:	b09d      	sub	sp, #116	; 0x74
 800ba16:	b118      	cbz	r0, 800ba20 <_vfiprintf_r+0x18>
 800ba18:	6983      	ldr	r3, [r0, #24]
 800ba1a:	b90b      	cbnz	r3, 800ba20 <_vfiprintf_r+0x18>
 800ba1c:	f7ff fe1a 	bl	800b654 <__sinit>
 800ba20:	4b89      	ldr	r3, [pc, #548]	; (800bc48 <_vfiprintf_r+0x240>)
 800ba22:	429d      	cmp	r5, r3
 800ba24:	d11b      	bne.n	800ba5e <_vfiprintf_r+0x56>
 800ba26:	6875      	ldr	r5, [r6, #4]
 800ba28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba2a:	07d9      	lsls	r1, r3, #31
 800ba2c:	d405      	bmi.n	800ba3a <_vfiprintf_r+0x32>
 800ba2e:	89ab      	ldrh	r3, [r5, #12]
 800ba30:	059a      	lsls	r2, r3, #22
 800ba32:	d402      	bmi.n	800ba3a <_vfiprintf_r+0x32>
 800ba34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba36:	f7ff feab 	bl	800b790 <__retarget_lock_acquire_recursive>
 800ba3a:	89ab      	ldrh	r3, [r5, #12]
 800ba3c:	071b      	lsls	r3, r3, #28
 800ba3e:	d501      	bpl.n	800ba44 <_vfiprintf_r+0x3c>
 800ba40:	692b      	ldr	r3, [r5, #16]
 800ba42:	b9eb      	cbnz	r3, 800ba80 <_vfiprintf_r+0x78>
 800ba44:	4629      	mov	r1, r5
 800ba46:	4630      	mov	r0, r6
 800ba48:	f7ff fc7c 	bl	800b344 <__swsetup_r>
 800ba4c:	b1c0      	cbz	r0, 800ba80 <_vfiprintf_r+0x78>
 800ba4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba50:	07dc      	lsls	r4, r3, #31
 800ba52:	d50e      	bpl.n	800ba72 <_vfiprintf_r+0x6a>
 800ba54:	f04f 30ff 	mov.w	r0, #4294967295
 800ba58:	b01d      	add	sp, #116	; 0x74
 800ba5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5e:	4b7b      	ldr	r3, [pc, #492]	; (800bc4c <_vfiprintf_r+0x244>)
 800ba60:	429d      	cmp	r5, r3
 800ba62:	d101      	bne.n	800ba68 <_vfiprintf_r+0x60>
 800ba64:	68b5      	ldr	r5, [r6, #8]
 800ba66:	e7df      	b.n	800ba28 <_vfiprintf_r+0x20>
 800ba68:	4b79      	ldr	r3, [pc, #484]	; (800bc50 <_vfiprintf_r+0x248>)
 800ba6a:	429d      	cmp	r5, r3
 800ba6c:	bf08      	it	eq
 800ba6e:	68f5      	ldreq	r5, [r6, #12]
 800ba70:	e7da      	b.n	800ba28 <_vfiprintf_r+0x20>
 800ba72:	89ab      	ldrh	r3, [r5, #12]
 800ba74:	0598      	lsls	r0, r3, #22
 800ba76:	d4ed      	bmi.n	800ba54 <_vfiprintf_r+0x4c>
 800ba78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba7a:	f7ff fe8a 	bl	800b792 <__retarget_lock_release_recursive>
 800ba7e:	e7e9      	b.n	800ba54 <_vfiprintf_r+0x4c>
 800ba80:	2300      	movs	r3, #0
 800ba82:	9309      	str	r3, [sp, #36]	; 0x24
 800ba84:	2320      	movs	r3, #32
 800ba86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba8a:	2330      	movs	r3, #48	; 0x30
 800ba8c:	f04f 0901 	mov.w	r9, #1
 800ba90:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba94:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bc54 <_vfiprintf_r+0x24c>
 800ba98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba9c:	4623      	mov	r3, r4
 800ba9e:	469a      	mov	sl, r3
 800baa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baa4:	b10a      	cbz	r2, 800baaa <_vfiprintf_r+0xa2>
 800baa6:	2a25      	cmp	r2, #37	; 0x25
 800baa8:	d1f9      	bne.n	800ba9e <_vfiprintf_r+0x96>
 800baaa:	ebba 0b04 	subs.w	fp, sl, r4
 800baae:	d00b      	beq.n	800bac8 <_vfiprintf_r+0xc0>
 800bab0:	465b      	mov	r3, fp
 800bab2:	4622      	mov	r2, r4
 800bab4:	4629      	mov	r1, r5
 800bab6:	4630      	mov	r0, r6
 800bab8:	f7ff ff93 	bl	800b9e2 <__sfputs_r>
 800babc:	3001      	adds	r0, #1
 800babe:	f000 80aa 	beq.w	800bc16 <_vfiprintf_r+0x20e>
 800bac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bac4:	445a      	add	r2, fp
 800bac6:	9209      	str	r2, [sp, #36]	; 0x24
 800bac8:	f89a 3000 	ldrb.w	r3, [sl]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f000 80a2 	beq.w	800bc16 <_vfiprintf_r+0x20e>
 800bad2:	2300      	movs	r3, #0
 800bad4:	f04f 32ff 	mov.w	r2, #4294967295
 800bad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800badc:	f10a 0a01 	add.w	sl, sl, #1
 800bae0:	9304      	str	r3, [sp, #16]
 800bae2:	9307      	str	r3, [sp, #28]
 800bae4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bae8:	931a      	str	r3, [sp, #104]	; 0x68
 800baea:	4654      	mov	r4, sl
 800baec:	2205      	movs	r2, #5
 800baee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf2:	4858      	ldr	r0, [pc, #352]	; (800bc54 <_vfiprintf_r+0x24c>)
 800baf4:	f000 faf8 	bl	800c0e8 <memchr>
 800baf8:	9a04      	ldr	r2, [sp, #16]
 800bafa:	b9d8      	cbnz	r0, 800bb34 <_vfiprintf_r+0x12c>
 800bafc:	06d1      	lsls	r1, r2, #27
 800bafe:	bf44      	itt	mi
 800bb00:	2320      	movmi	r3, #32
 800bb02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb06:	0713      	lsls	r3, r2, #28
 800bb08:	bf44      	itt	mi
 800bb0a:	232b      	movmi	r3, #43	; 0x2b
 800bb0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb10:	f89a 3000 	ldrb.w	r3, [sl]
 800bb14:	2b2a      	cmp	r3, #42	; 0x2a
 800bb16:	d015      	beq.n	800bb44 <_vfiprintf_r+0x13c>
 800bb18:	4654      	mov	r4, sl
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	f04f 0c0a 	mov.w	ip, #10
 800bb20:	9a07      	ldr	r2, [sp, #28]
 800bb22:	4621      	mov	r1, r4
 800bb24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb28:	3b30      	subs	r3, #48	; 0x30
 800bb2a:	2b09      	cmp	r3, #9
 800bb2c:	d94e      	bls.n	800bbcc <_vfiprintf_r+0x1c4>
 800bb2e:	b1b0      	cbz	r0, 800bb5e <_vfiprintf_r+0x156>
 800bb30:	9207      	str	r2, [sp, #28]
 800bb32:	e014      	b.n	800bb5e <_vfiprintf_r+0x156>
 800bb34:	eba0 0308 	sub.w	r3, r0, r8
 800bb38:	fa09 f303 	lsl.w	r3, r9, r3
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	46a2      	mov	sl, r4
 800bb40:	9304      	str	r3, [sp, #16]
 800bb42:	e7d2      	b.n	800baea <_vfiprintf_r+0xe2>
 800bb44:	9b03      	ldr	r3, [sp, #12]
 800bb46:	1d19      	adds	r1, r3, #4
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	9103      	str	r1, [sp, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	bfbb      	ittet	lt
 800bb50:	425b      	neglt	r3, r3
 800bb52:	f042 0202 	orrlt.w	r2, r2, #2
 800bb56:	9307      	strge	r3, [sp, #28]
 800bb58:	9307      	strlt	r3, [sp, #28]
 800bb5a:	bfb8      	it	lt
 800bb5c:	9204      	strlt	r2, [sp, #16]
 800bb5e:	7823      	ldrb	r3, [r4, #0]
 800bb60:	2b2e      	cmp	r3, #46	; 0x2e
 800bb62:	d10c      	bne.n	800bb7e <_vfiprintf_r+0x176>
 800bb64:	7863      	ldrb	r3, [r4, #1]
 800bb66:	2b2a      	cmp	r3, #42	; 0x2a
 800bb68:	d135      	bne.n	800bbd6 <_vfiprintf_r+0x1ce>
 800bb6a:	9b03      	ldr	r3, [sp, #12]
 800bb6c:	3402      	adds	r4, #2
 800bb6e:	1d1a      	adds	r2, r3, #4
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	9203      	str	r2, [sp, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	bfb8      	it	lt
 800bb78:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb7c:	9305      	str	r3, [sp, #20]
 800bb7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc64 <_vfiprintf_r+0x25c>
 800bb82:	2203      	movs	r2, #3
 800bb84:	4650      	mov	r0, sl
 800bb86:	7821      	ldrb	r1, [r4, #0]
 800bb88:	f000 faae 	bl	800c0e8 <memchr>
 800bb8c:	b140      	cbz	r0, 800bba0 <_vfiprintf_r+0x198>
 800bb8e:	2340      	movs	r3, #64	; 0x40
 800bb90:	eba0 000a 	sub.w	r0, r0, sl
 800bb94:	fa03 f000 	lsl.w	r0, r3, r0
 800bb98:	9b04      	ldr	r3, [sp, #16]
 800bb9a:	3401      	adds	r4, #1
 800bb9c:	4303      	orrs	r3, r0
 800bb9e:	9304      	str	r3, [sp, #16]
 800bba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bba4:	2206      	movs	r2, #6
 800bba6:	482c      	ldr	r0, [pc, #176]	; (800bc58 <_vfiprintf_r+0x250>)
 800bba8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbac:	f000 fa9c 	bl	800c0e8 <memchr>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d03f      	beq.n	800bc34 <_vfiprintf_r+0x22c>
 800bbb4:	4b29      	ldr	r3, [pc, #164]	; (800bc5c <_vfiprintf_r+0x254>)
 800bbb6:	bb1b      	cbnz	r3, 800bc00 <_vfiprintf_r+0x1f8>
 800bbb8:	9b03      	ldr	r3, [sp, #12]
 800bbba:	3307      	adds	r3, #7
 800bbbc:	f023 0307 	bic.w	r3, r3, #7
 800bbc0:	3308      	adds	r3, #8
 800bbc2:	9303      	str	r3, [sp, #12]
 800bbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbc6:	443b      	add	r3, r7
 800bbc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbca:	e767      	b.n	800ba9c <_vfiprintf_r+0x94>
 800bbcc:	460c      	mov	r4, r1
 800bbce:	2001      	movs	r0, #1
 800bbd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbd4:	e7a5      	b.n	800bb22 <_vfiprintf_r+0x11a>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f04f 0c0a 	mov.w	ip, #10
 800bbdc:	4619      	mov	r1, r3
 800bbde:	3401      	adds	r4, #1
 800bbe0:	9305      	str	r3, [sp, #20]
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbe8:	3a30      	subs	r2, #48	; 0x30
 800bbea:	2a09      	cmp	r2, #9
 800bbec:	d903      	bls.n	800bbf6 <_vfiprintf_r+0x1ee>
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d0c5      	beq.n	800bb7e <_vfiprintf_r+0x176>
 800bbf2:	9105      	str	r1, [sp, #20]
 800bbf4:	e7c3      	b.n	800bb7e <_vfiprintf_r+0x176>
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbfe:	e7f0      	b.n	800bbe2 <_vfiprintf_r+0x1da>
 800bc00:	ab03      	add	r3, sp, #12
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	462a      	mov	r2, r5
 800bc06:	4630      	mov	r0, r6
 800bc08:	4b15      	ldr	r3, [pc, #84]	; (800bc60 <_vfiprintf_r+0x258>)
 800bc0a:	a904      	add	r1, sp, #16
 800bc0c:	f3af 8000 	nop.w
 800bc10:	4607      	mov	r7, r0
 800bc12:	1c78      	adds	r0, r7, #1
 800bc14:	d1d6      	bne.n	800bbc4 <_vfiprintf_r+0x1bc>
 800bc16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc18:	07d9      	lsls	r1, r3, #31
 800bc1a:	d405      	bmi.n	800bc28 <_vfiprintf_r+0x220>
 800bc1c:	89ab      	ldrh	r3, [r5, #12]
 800bc1e:	059a      	lsls	r2, r3, #22
 800bc20:	d402      	bmi.n	800bc28 <_vfiprintf_r+0x220>
 800bc22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc24:	f7ff fdb5 	bl	800b792 <__retarget_lock_release_recursive>
 800bc28:	89ab      	ldrh	r3, [r5, #12]
 800bc2a:	065b      	lsls	r3, r3, #25
 800bc2c:	f53f af12 	bmi.w	800ba54 <_vfiprintf_r+0x4c>
 800bc30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc32:	e711      	b.n	800ba58 <_vfiprintf_r+0x50>
 800bc34:	ab03      	add	r3, sp, #12
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	462a      	mov	r2, r5
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	4b08      	ldr	r3, [pc, #32]	; (800bc60 <_vfiprintf_r+0x258>)
 800bc3e:	a904      	add	r1, sp, #16
 800bc40:	f000 f882 	bl	800bd48 <_printf_i>
 800bc44:	e7e4      	b.n	800bc10 <_vfiprintf_r+0x208>
 800bc46:	bf00      	nop
 800bc48:	0800d780 	.word	0x0800d780
 800bc4c:	0800d7a0 	.word	0x0800d7a0
 800bc50:	0800d760 	.word	0x0800d760
 800bc54:	0800d7c0 	.word	0x0800d7c0
 800bc58:	0800d7ca 	.word	0x0800d7ca
 800bc5c:	00000000 	.word	0x00000000
 800bc60:	0800b9e3 	.word	0x0800b9e3
 800bc64:	0800d7c6 	.word	0x0800d7c6

0800bc68 <_printf_common>:
 800bc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6c:	4616      	mov	r6, r2
 800bc6e:	4699      	mov	r9, r3
 800bc70:	688a      	ldr	r2, [r1, #8]
 800bc72:	690b      	ldr	r3, [r1, #16]
 800bc74:	4607      	mov	r7, r0
 800bc76:	4293      	cmp	r3, r2
 800bc78:	bfb8      	it	lt
 800bc7a:	4613      	movlt	r3, r2
 800bc7c:	6033      	str	r3, [r6, #0]
 800bc7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc82:	460c      	mov	r4, r1
 800bc84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc88:	b10a      	cbz	r2, 800bc8e <_printf_common+0x26>
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	6033      	str	r3, [r6, #0]
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	0699      	lsls	r1, r3, #26
 800bc92:	bf42      	ittt	mi
 800bc94:	6833      	ldrmi	r3, [r6, #0]
 800bc96:	3302      	addmi	r3, #2
 800bc98:	6033      	strmi	r3, [r6, #0]
 800bc9a:	6825      	ldr	r5, [r4, #0]
 800bc9c:	f015 0506 	ands.w	r5, r5, #6
 800bca0:	d106      	bne.n	800bcb0 <_printf_common+0x48>
 800bca2:	f104 0a19 	add.w	sl, r4, #25
 800bca6:	68e3      	ldr	r3, [r4, #12]
 800bca8:	6832      	ldr	r2, [r6, #0]
 800bcaa:	1a9b      	subs	r3, r3, r2
 800bcac:	42ab      	cmp	r3, r5
 800bcae:	dc28      	bgt.n	800bd02 <_printf_common+0x9a>
 800bcb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bcb4:	1e13      	subs	r3, r2, #0
 800bcb6:	6822      	ldr	r2, [r4, #0]
 800bcb8:	bf18      	it	ne
 800bcba:	2301      	movne	r3, #1
 800bcbc:	0692      	lsls	r2, r2, #26
 800bcbe:	d42d      	bmi.n	800bd1c <_printf_common+0xb4>
 800bcc0:	4649      	mov	r1, r9
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcc8:	47c0      	blx	r8
 800bcca:	3001      	adds	r0, #1
 800bccc:	d020      	beq.n	800bd10 <_printf_common+0xa8>
 800bcce:	6823      	ldr	r3, [r4, #0]
 800bcd0:	68e5      	ldr	r5, [r4, #12]
 800bcd2:	f003 0306 	and.w	r3, r3, #6
 800bcd6:	2b04      	cmp	r3, #4
 800bcd8:	bf18      	it	ne
 800bcda:	2500      	movne	r5, #0
 800bcdc:	6832      	ldr	r2, [r6, #0]
 800bcde:	f04f 0600 	mov.w	r6, #0
 800bce2:	68a3      	ldr	r3, [r4, #8]
 800bce4:	bf08      	it	eq
 800bce6:	1aad      	subeq	r5, r5, r2
 800bce8:	6922      	ldr	r2, [r4, #16]
 800bcea:	bf08      	it	eq
 800bcec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	bfc4      	itt	gt
 800bcf4:	1a9b      	subgt	r3, r3, r2
 800bcf6:	18ed      	addgt	r5, r5, r3
 800bcf8:	341a      	adds	r4, #26
 800bcfa:	42b5      	cmp	r5, r6
 800bcfc:	d11a      	bne.n	800bd34 <_printf_common+0xcc>
 800bcfe:	2000      	movs	r0, #0
 800bd00:	e008      	b.n	800bd14 <_printf_common+0xac>
 800bd02:	2301      	movs	r3, #1
 800bd04:	4652      	mov	r2, sl
 800bd06:	4649      	mov	r1, r9
 800bd08:	4638      	mov	r0, r7
 800bd0a:	47c0      	blx	r8
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d103      	bne.n	800bd18 <_printf_common+0xb0>
 800bd10:	f04f 30ff 	mov.w	r0, #4294967295
 800bd14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd18:	3501      	adds	r5, #1
 800bd1a:	e7c4      	b.n	800bca6 <_printf_common+0x3e>
 800bd1c:	2030      	movs	r0, #48	; 0x30
 800bd1e:	18e1      	adds	r1, r4, r3
 800bd20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd24:	1c5a      	adds	r2, r3, #1
 800bd26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd2a:	4422      	add	r2, r4
 800bd2c:	3302      	adds	r3, #2
 800bd2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd32:	e7c5      	b.n	800bcc0 <_printf_common+0x58>
 800bd34:	2301      	movs	r3, #1
 800bd36:	4622      	mov	r2, r4
 800bd38:	4649      	mov	r1, r9
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	47c0      	blx	r8
 800bd3e:	3001      	adds	r0, #1
 800bd40:	d0e6      	beq.n	800bd10 <_printf_common+0xa8>
 800bd42:	3601      	adds	r6, #1
 800bd44:	e7d9      	b.n	800bcfa <_printf_common+0x92>
	...

0800bd48 <_printf_i>:
 800bd48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	7e27      	ldrb	r7, [r4, #24]
 800bd50:	4691      	mov	r9, r2
 800bd52:	2f78      	cmp	r7, #120	; 0x78
 800bd54:	4680      	mov	r8, r0
 800bd56:	469a      	mov	sl, r3
 800bd58:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bd5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd5e:	d807      	bhi.n	800bd70 <_printf_i+0x28>
 800bd60:	2f62      	cmp	r7, #98	; 0x62
 800bd62:	d80a      	bhi.n	800bd7a <_printf_i+0x32>
 800bd64:	2f00      	cmp	r7, #0
 800bd66:	f000 80d9 	beq.w	800bf1c <_printf_i+0x1d4>
 800bd6a:	2f58      	cmp	r7, #88	; 0x58
 800bd6c:	f000 80a4 	beq.w	800beb8 <_printf_i+0x170>
 800bd70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bd74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd78:	e03a      	b.n	800bdf0 <_printf_i+0xa8>
 800bd7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd7e:	2b15      	cmp	r3, #21
 800bd80:	d8f6      	bhi.n	800bd70 <_printf_i+0x28>
 800bd82:	a001      	add	r0, pc, #4	; (adr r0, 800bd88 <_printf_i+0x40>)
 800bd84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bd88:	0800bde1 	.word	0x0800bde1
 800bd8c:	0800bdf5 	.word	0x0800bdf5
 800bd90:	0800bd71 	.word	0x0800bd71
 800bd94:	0800bd71 	.word	0x0800bd71
 800bd98:	0800bd71 	.word	0x0800bd71
 800bd9c:	0800bd71 	.word	0x0800bd71
 800bda0:	0800bdf5 	.word	0x0800bdf5
 800bda4:	0800bd71 	.word	0x0800bd71
 800bda8:	0800bd71 	.word	0x0800bd71
 800bdac:	0800bd71 	.word	0x0800bd71
 800bdb0:	0800bd71 	.word	0x0800bd71
 800bdb4:	0800bf03 	.word	0x0800bf03
 800bdb8:	0800be25 	.word	0x0800be25
 800bdbc:	0800bee5 	.word	0x0800bee5
 800bdc0:	0800bd71 	.word	0x0800bd71
 800bdc4:	0800bd71 	.word	0x0800bd71
 800bdc8:	0800bf25 	.word	0x0800bf25
 800bdcc:	0800bd71 	.word	0x0800bd71
 800bdd0:	0800be25 	.word	0x0800be25
 800bdd4:	0800bd71 	.word	0x0800bd71
 800bdd8:	0800bd71 	.word	0x0800bd71
 800bddc:	0800beed 	.word	0x0800beed
 800bde0:	680b      	ldr	r3, [r1, #0]
 800bde2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bde6:	1d1a      	adds	r2, r3, #4
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	600a      	str	r2, [r1, #0]
 800bdec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e0a4      	b.n	800bf3e <_printf_i+0x1f6>
 800bdf4:	6825      	ldr	r5, [r4, #0]
 800bdf6:	6808      	ldr	r0, [r1, #0]
 800bdf8:	062e      	lsls	r6, r5, #24
 800bdfa:	f100 0304 	add.w	r3, r0, #4
 800bdfe:	d50a      	bpl.n	800be16 <_printf_i+0xce>
 800be00:	6805      	ldr	r5, [r0, #0]
 800be02:	600b      	str	r3, [r1, #0]
 800be04:	2d00      	cmp	r5, #0
 800be06:	da03      	bge.n	800be10 <_printf_i+0xc8>
 800be08:	232d      	movs	r3, #45	; 0x2d
 800be0a:	426d      	negs	r5, r5
 800be0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be10:	230a      	movs	r3, #10
 800be12:	485e      	ldr	r0, [pc, #376]	; (800bf8c <_printf_i+0x244>)
 800be14:	e019      	b.n	800be4a <_printf_i+0x102>
 800be16:	f015 0f40 	tst.w	r5, #64	; 0x40
 800be1a:	6805      	ldr	r5, [r0, #0]
 800be1c:	600b      	str	r3, [r1, #0]
 800be1e:	bf18      	it	ne
 800be20:	b22d      	sxthne	r5, r5
 800be22:	e7ef      	b.n	800be04 <_printf_i+0xbc>
 800be24:	680b      	ldr	r3, [r1, #0]
 800be26:	6825      	ldr	r5, [r4, #0]
 800be28:	1d18      	adds	r0, r3, #4
 800be2a:	6008      	str	r0, [r1, #0]
 800be2c:	0628      	lsls	r0, r5, #24
 800be2e:	d501      	bpl.n	800be34 <_printf_i+0xec>
 800be30:	681d      	ldr	r5, [r3, #0]
 800be32:	e002      	b.n	800be3a <_printf_i+0xf2>
 800be34:	0669      	lsls	r1, r5, #25
 800be36:	d5fb      	bpl.n	800be30 <_printf_i+0xe8>
 800be38:	881d      	ldrh	r5, [r3, #0]
 800be3a:	2f6f      	cmp	r7, #111	; 0x6f
 800be3c:	bf0c      	ite	eq
 800be3e:	2308      	moveq	r3, #8
 800be40:	230a      	movne	r3, #10
 800be42:	4852      	ldr	r0, [pc, #328]	; (800bf8c <_printf_i+0x244>)
 800be44:	2100      	movs	r1, #0
 800be46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be4a:	6866      	ldr	r6, [r4, #4]
 800be4c:	2e00      	cmp	r6, #0
 800be4e:	bfa8      	it	ge
 800be50:	6821      	ldrge	r1, [r4, #0]
 800be52:	60a6      	str	r6, [r4, #8]
 800be54:	bfa4      	itt	ge
 800be56:	f021 0104 	bicge.w	r1, r1, #4
 800be5a:	6021      	strge	r1, [r4, #0]
 800be5c:	b90d      	cbnz	r5, 800be62 <_printf_i+0x11a>
 800be5e:	2e00      	cmp	r6, #0
 800be60:	d04d      	beq.n	800befe <_printf_i+0x1b6>
 800be62:	4616      	mov	r6, r2
 800be64:	fbb5 f1f3 	udiv	r1, r5, r3
 800be68:	fb03 5711 	mls	r7, r3, r1, r5
 800be6c:	5dc7      	ldrb	r7, [r0, r7]
 800be6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be72:	462f      	mov	r7, r5
 800be74:	42bb      	cmp	r3, r7
 800be76:	460d      	mov	r5, r1
 800be78:	d9f4      	bls.n	800be64 <_printf_i+0x11c>
 800be7a:	2b08      	cmp	r3, #8
 800be7c:	d10b      	bne.n	800be96 <_printf_i+0x14e>
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	07df      	lsls	r7, r3, #31
 800be82:	d508      	bpl.n	800be96 <_printf_i+0x14e>
 800be84:	6923      	ldr	r3, [r4, #16]
 800be86:	6861      	ldr	r1, [r4, #4]
 800be88:	4299      	cmp	r1, r3
 800be8a:	bfde      	ittt	le
 800be8c:	2330      	movle	r3, #48	; 0x30
 800be8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be92:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be96:	1b92      	subs	r2, r2, r6
 800be98:	6122      	str	r2, [r4, #16]
 800be9a:	464b      	mov	r3, r9
 800be9c:	4621      	mov	r1, r4
 800be9e:	4640      	mov	r0, r8
 800bea0:	f8cd a000 	str.w	sl, [sp]
 800bea4:	aa03      	add	r2, sp, #12
 800bea6:	f7ff fedf 	bl	800bc68 <_printf_common>
 800beaa:	3001      	adds	r0, #1
 800beac:	d14c      	bne.n	800bf48 <_printf_i+0x200>
 800beae:	f04f 30ff 	mov.w	r0, #4294967295
 800beb2:	b004      	add	sp, #16
 800beb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beb8:	4834      	ldr	r0, [pc, #208]	; (800bf8c <_printf_i+0x244>)
 800beba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bebe:	680e      	ldr	r6, [r1, #0]
 800bec0:	6823      	ldr	r3, [r4, #0]
 800bec2:	f856 5b04 	ldr.w	r5, [r6], #4
 800bec6:	061f      	lsls	r7, r3, #24
 800bec8:	600e      	str	r6, [r1, #0]
 800beca:	d514      	bpl.n	800bef6 <_printf_i+0x1ae>
 800becc:	07d9      	lsls	r1, r3, #31
 800bece:	bf44      	itt	mi
 800bed0:	f043 0320 	orrmi.w	r3, r3, #32
 800bed4:	6023      	strmi	r3, [r4, #0]
 800bed6:	b91d      	cbnz	r5, 800bee0 <_printf_i+0x198>
 800bed8:	6823      	ldr	r3, [r4, #0]
 800beda:	f023 0320 	bic.w	r3, r3, #32
 800bede:	6023      	str	r3, [r4, #0]
 800bee0:	2310      	movs	r3, #16
 800bee2:	e7af      	b.n	800be44 <_printf_i+0xfc>
 800bee4:	6823      	ldr	r3, [r4, #0]
 800bee6:	f043 0320 	orr.w	r3, r3, #32
 800beea:	6023      	str	r3, [r4, #0]
 800beec:	2378      	movs	r3, #120	; 0x78
 800beee:	4828      	ldr	r0, [pc, #160]	; (800bf90 <_printf_i+0x248>)
 800bef0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bef4:	e7e3      	b.n	800bebe <_printf_i+0x176>
 800bef6:	065e      	lsls	r6, r3, #25
 800bef8:	bf48      	it	mi
 800befa:	b2ad      	uxthmi	r5, r5
 800befc:	e7e6      	b.n	800becc <_printf_i+0x184>
 800befe:	4616      	mov	r6, r2
 800bf00:	e7bb      	b.n	800be7a <_printf_i+0x132>
 800bf02:	680b      	ldr	r3, [r1, #0]
 800bf04:	6826      	ldr	r6, [r4, #0]
 800bf06:	1d1d      	adds	r5, r3, #4
 800bf08:	6960      	ldr	r0, [r4, #20]
 800bf0a:	600d      	str	r5, [r1, #0]
 800bf0c:	0635      	lsls	r5, r6, #24
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	d501      	bpl.n	800bf16 <_printf_i+0x1ce>
 800bf12:	6018      	str	r0, [r3, #0]
 800bf14:	e002      	b.n	800bf1c <_printf_i+0x1d4>
 800bf16:	0671      	lsls	r1, r6, #25
 800bf18:	d5fb      	bpl.n	800bf12 <_printf_i+0x1ca>
 800bf1a:	8018      	strh	r0, [r3, #0]
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	4616      	mov	r6, r2
 800bf20:	6123      	str	r3, [r4, #16]
 800bf22:	e7ba      	b.n	800be9a <_printf_i+0x152>
 800bf24:	680b      	ldr	r3, [r1, #0]
 800bf26:	1d1a      	adds	r2, r3, #4
 800bf28:	600a      	str	r2, [r1, #0]
 800bf2a:	681e      	ldr	r6, [r3, #0]
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	4630      	mov	r0, r6
 800bf30:	6862      	ldr	r2, [r4, #4]
 800bf32:	f000 f8d9 	bl	800c0e8 <memchr>
 800bf36:	b108      	cbz	r0, 800bf3c <_printf_i+0x1f4>
 800bf38:	1b80      	subs	r0, r0, r6
 800bf3a:	6060      	str	r0, [r4, #4]
 800bf3c:	6863      	ldr	r3, [r4, #4]
 800bf3e:	6123      	str	r3, [r4, #16]
 800bf40:	2300      	movs	r3, #0
 800bf42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf46:	e7a8      	b.n	800be9a <_printf_i+0x152>
 800bf48:	4632      	mov	r2, r6
 800bf4a:	4649      	mov	r1, r9
 800bf4c:	4640      	mov	r0, r8
 800bf4e:	6923      	ldr	r3, [r4, #16]
 800bf50:	47d0      	blx	sl
 800bf52:	3001      	adds	r0, #1
 800bf54:	d0ab      	beq.n	800beae <_printf_i+0x166>
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	079b      	lsls	r3, r3, #30
 800bf5a:	d413      	bmi.n	800bf84 <_printf_i+0x23c>
 800bf5c:	68e0      	ldr	r0, [r4, #12]
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	4298      	cmp	r0, r3
 800bf62:	bfb8      	it	lt
 800bf64:	4618      	movlt	r0, r3
 800bf66:	e7a4      	b.n	800beb2 <_printf_i+0x16a>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	4632      	mov	r2, r6
 800bf6c:	4649      	mov	r1, r9
 800bf6e:	4640      	mov	r0, r8
 800bf70:	47d0      	blx	sl
 800bf72:	3001      	adds	r0, #1
 800bf74:	d09b      	beq.n	800beae <_printf_i+0x166>
 800bf76:	3501      	adds	r5, #1
 800bf78:	68e3      	ldr	r3, [r4, #12]
 800bf7a:	9903      	ldr	r1, [sp, #12]
 800bf7c:	1a5b      	subs	r3, r3, r1
 800bf7e:	42ab      	cmp	r3, r5
 800bf80:	dcf2      	bgt.n	800bf68 <_printf_i+0x220>
 800bf82:	e7eb      	b.n	800bf5c <_printf_i+0x214>
 800bf84:	2500      	movs	r5, #0
 800bf86:	f104 0619 	add.w	r6, r4, #25
 800bf8a:	e7f5      	b.n	800bf78 <_printf_i+0x230>
 800bf8c:	0800d7d1 	.word	0x0800d7d1
 800bf90:	0800d7e2 	.word	0x0800d7e2

0800bf94 <_sbrk_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	2300      	movs	r3, #0
 800bf98:	4d05      	ldr	r5, [pc, #20]	; (800bfb0 <_sbrk_r+0x1c>)
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	602b      	str	r3, [r5, #0]
 800bfa0:	f7f7 f8f2 	bl	8003188 <_sbrk>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d102      	bne.n	800bfae <_sbrk_r+0x1a>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	b103      	cbz	r3, 800bfae <_sbrk_r+0x1a>
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	20003b9c 	.word	0x20003b9c

0800bfb4 <__sread>:
 800bfb4:	b510      	push	{r4, lr}
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfbc:	f000 f8ae 	bl	800c11c <_read_r>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	bfab      	itete	ge
 800bfc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfc6:	89a3      	ldrhlt	r3, [r4, #12]
 800bfc8:	181b      	addge	r3, r3, r0
 800bfca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfce:	bfac      	ite	ge
 800bfd0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfd2:	81a3      	strhlt	r3, [r4, #12]
 800bfd4:	bd10      	pop	{r4, pc}

0800bfd6 <__swrite>:
 800bfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfda:	461f      	mov	r7, r3
 800bfdc:	898b      	ldrh	r3, [r1, #12]
 800bfde:	4605      	mov	r5, r0
 800bfe0:	05db      	lsls	r3, r3, #23
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	4616      	mov	r6, r2
 800bfe6:	d505      	bpl.n	800bff4 <__swrite+0x1e>
 800bfe8:	2302      	movs	r3, #2
 800bfea:	2200      	movs	r2, #0
 800bfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff0:	f000 f868 	bl	800c0c4 <_lseek_r>
 800bff4:	89a3      	ldrh	r3, [r4, #12]
 800bff6:	4632      	mov	r2, r6
 800bff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bffc:	81a3      	strh	r3, [r4, #12]
 800bffe:	4628      	mov	r0, r5
 800c000:	463b      	mov	r3, r7
 800c002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c00a:	f000 b817 	b.w	800c03c <_write_r>

0800c00e <__sseek>:
 800c00e:	b510      	push	{r4, lr}
 800c010:	460c      	mov	r4, r1
 800c012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c016:	f000 f855 	bl	800c0c4 <_lseek_r>
 800c01a:	1c43      	adds	r3, r0, #1
 800c01c:	89a3      	ldrh	r3, [r4, #12]
 800c01e:	bf15      	itete	ne
 800c020:	6560      	strne	r0, [r4, #84]	; 0x54
 800c022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c02a:	81a3      	strheq	r3, [r4, #12]
 800c02c:	bf18      	it	ne
 800c02e:	81a3      	strhne	r3, [r4, #12]
 800c030:	bd10      	pop	{r4, pc}

0800c032 <__sclose>:
 800c032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c036:	f000 b813 	b.w	800c060 <_close_r>
	...

0800c03c <_write_r>:
 800c03c:	b538      	push	{r3, r4, r5, lr}
 800c03e:	4604      	mov	r4, r0
 800c040:	4608      	mov	r0, r1
 800c042:	4611      	mov	r1, r2
 800c044:	2200      	movs	r2, #0
 800c046:	4d05      	ldr	r5, [pc, #20]	; (800c05c <_write_r+0x20>)
 800c048:	602a      	str	r2, [r5, #0]
 800c04a:	461a      	mov	r2, r3
 800c04c:	f7f6 fe50 	bl	8002cf0 <_write>
 800c050:	1c43      	adds	r3, r0, #1
 800c052:	d102      	bne.n	800c05a <_write_r+0x1e>
 800c054:	682b      	ldr	r3, [r5, #0]
 800c056:	b103      	cbz	r3, 800c05a <_write_r+0x1e>
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	20003b9c 	.word	0x20003b9c

0800c060 <_close_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	2300      	movs	r3, #0
 800c064:	4d05      	ldr	r5, [pc, #20]	; (800c07c <_close_r+0x1c>)
 800c066:	4604      	mov	r4, r0
 800c068:	4608      	mov	r0, r1
 800c06a:	602b      	str	r3, [r5, #0]
 800c06c:	f7f6 fe6c 	bl	8002d48 <_close>
 800c070:	1c43      	adds	r3, r0, #1
 800c072:	d102      	bne.n	800c07a <_close_r+0x1a>
 800c074:	682b      	ldr	r3, [r5, #0]
 800c076:	b103      	cbz	r3, 800c07a <_close_r+0x1a>
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	bd38      	pop	{r3, r4, r5, pc}
 800c07c:	20003b9c 	.word	0x20003b9c

0800c080 <_fstat_r>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	2300      	movs	r3, #0
 800c084:	4d06      	ldr	r5, [pc, #24]	; (800c0a0 <_fstat_r+0x20>)
 800c086:	4604      	mov	r4, r0
 800c088:	4608      	mov	r0, r1
 800c08a:	4611      	mov	r1, r2
 800c08c:	602b      	str	r3, [r5, #0]
 800c08e:	f7f6 feab 	bl	8002de8 <_fstat>
 800c092:	1c43      	adds	r3, r0, #1
 800c094:	d102      	bne.n	800c09c <_fstat_r+0x1c>
 800c096:	682b      	ldr	r3, [r5, #0]
 800c098:	b103      	cbz	r3, 800c09c <_fstat_r+0x1c>
 800c09a:	6023      	str	r3, [r4, #0]
 800c09c:	bd38      	pop	{r3, r4, r5, pc}
 800c09e:	bf00      	nop
 800c0a0:	20003b9c 	.word	0x20003b9c

0800c0a4 <_isatty_r>:
 800c0a4:	b538      	push	{r3, r4, r5, lr}
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	4d05      	ldr	r5, [pc, #20]	; (800c0c0 <_isatty_r+0x1c>)
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	4608      	mov	r0, r1
 800c0ae:	602b      	str	r3, [r5, #0]
 800c0b0:	f7f6 fe08 	bl	8002cc4 <_isatty>
 800c0b4:	1c43      	adds	r3, r0, #1
 800c0b6:	d102      	bne.n	800c0be <_isatty_r+0x1a>
 800c0b8:	682b      	ldr	r3, [r5, #0]
 800c0ba:	b103      	cbz	r3, 800c0be <_isatty_r+0x1a>
 800c0bc:	6023      	str	r3, [r4, #0]
 800c0be:	bd38      	pop	{r3, r4, r5, pc}
 800c0c0:	20003b9c 	.word	0x20003b9c

0800c0c4 <_lseek_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	4608      	mov	r0, r1
 800c0ca:	4611      	mov	r1, r2
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	4d05      	ldr	r5, [pc, #20]	; (800c0e4 <_lseek_r+0x20>)
 800c0d0:	602a      	str	r2, [r5, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	f7f6 fe4f 	bl	8002d76 <_lseek>
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	d102      	bne.n	800c0e2 <_lseek_r+0x1e>
 800c0dc:	682b      	ldr	r3, [r5, #0]
 800c0de:	b103      	cbz	r3, 800c0e2 <_lseek_r+0x1e>
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	bd38      	pop	{r3, r4, r5, pc}
 800c0e4:	20003b9c 	.word	0x20003b9c

0800c0e8 <memchr>:
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	b510      	push	{r4, lr}
 800c0ec:	b2c9      	uxtb	r1, r1
 800c0ee:	4402      	add	r2, r0
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	d101      	bne.n	800c0fa <memchr+0x12>
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	e003      	b.n	800c102 <memchr+0x1a>
 800c0fa:	7804      	ldrb	r4, [r0, #0]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	428c      	cmp	r4, r1
 800c100:	d1f6      	bne.n	800c0f0 <memchr+0x8>
 800c102:	bd10      	pop	{r4, pc}

0800c104 <__malloc_lock>:
 800c104:	4801      	ldr	r0, [pc, #4]	; (800c10c <__malloc_lock+0x8>)
 800c106:	f7ff bb43 	b.w	800b790 <__retarget_lock_acquire_recursive>
 800c10a:	bf00      	nop
 800c10c:	20003b94 	.word	0x20003b94

0800c110 <__malloc_unlock>:
 800c110:	4801      	ldr	r0, [pc, #4]	; (800c118 <__malloc_unlock+0x8>)
 800c112:	f7ff bb3e 	b.w	800b792 <__retarget_lock_release_recursive>
 800c116:	bf00      	nop
 800c118:	20003b94 	.word	0x20003b94

0800c11c <_read_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	4611      	mov	r1, r2
 800c124:	2200      	movs	r2, #0
 800c126:	4d05      	ldr	r5, [pc, #20]	; (800c13c <_read_r+0x20>)
 800c128:	602a      	str	r2, [r5, #0]
 800c12a:	461a      	mov	r2, r3
 800c12c:	f7f6 fe34 	bl	8002d98 <_read>
 800c130:	1c43      	adds	r3, r0, #1
 800c132:	d102      	bne.n	800c13a <_read_r+0x1e>
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	b103      	cbz	r3, 800c13a <_read_r+0x1e>
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	bd38      	pop	{r3, r4, r5, pc}
 800c13c:	20003b9c 	.word	0x20003b9c

0800c140 <_init>:
 800c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c142:	bf00      	nop
 800c144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c146:	bc08      	pop	{r3}
 800c148:	469e      	mov	lr, r3
 800c14a:	4770      	bx	lr

0800c14c <_fini>:
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14e:	bf00      	nop
 800c150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c152:	bc08      	pop	{r3}
 800c154:	469e      	mov	lr, r3
 800c156:	4770      	bx	lr
